
workbench6Altenmotordrivercode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  00020320  2**0
                  CONTENTS
  4 .ARM          00000000  0800690c  0800690c  00020320  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800690c  0800690c  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  08006914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000320  08006c34  00020320  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  200006ac  08006c34  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 13 .debug_line   00036093  00000000  00000000  0002038b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000086  00000000  00000000  0005641e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00030efd  00000000  00000000  000564a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000068a1  00000000  00000000  000873a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000015a8  00000000  00000000  0008dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ff48  00000000  00000000  0008f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000284d  00000000  00000000  0010f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00015885  00000000  00000000  00111985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018da1  00000000  00000000  0012720a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003bc8  00000000  00000000  0013ffac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000320 	.word	0x20000320
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006474 	.word	0x08006474

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000324 	.word	0x20000324
 8000104:	08006474 	.word	0x08006474

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f002 fc38 	bl	8002c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f005 fff9 	bl	8006418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 fbc7 	bl	8000bb8 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8000438:	08006914 	.word	0x08006914
  ldr r2, =_sbss
 800043c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8000440:	200006ac 	.word	0x200006ac

08000444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_IRQHandler>
	...

08000448 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000448:	b510      	push	{r4, lr}
 800044a:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800044c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800044e:	6940      	ldr	r0, [r0, #20]
 8000450:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000452:	2200      	movs	r2, #0
 8000454:	234c      	movs	r3, #76	; 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000456:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000458:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800045a:	3b04      	subs	r3, #4
 800045c:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800045e:	6960      	ldr	r0, [r4, #20]
 8000460:	2204      	movs	r2, #4
 8000462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000464:	311c      	adds	r1, #28
 8000466:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 800046c:	b570      	push	{r4, r5, r6, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800046e:	780a      	ldrb	r2, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000470:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000472:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->version) << 4U)
 8000474:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000476:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000478:	784a      	ldrb	r2, [r1, #1]
{
 800047a:	0004      	movs	r4, r0
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800047c:	0212      	lsls	r2, r2, #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800047e:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000480:	788a      	ldrb	r2, [r1, #2]
  header &= 0x0fffffffU;
 8000482:	2005      	movs	r0, #5
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000484:	0392      	lsls	r2, r2, #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000486:	4313      	orrs	r3, r2
 8000488:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800048a:	21ff      	movs	r1, #255	; 0xff
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800048c:	0552      	lsls	r2, r2, #21
 800048e:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000490:	4d16      	ldr	r5, [pc, #88]	; (80004ec <ASPEP_sendBeacon+0x80>)
 8000492:	4019      	ands	r1, r3
 8000494:	4301      	orrs	r1, r0
  header &= 0x0fffffffU;
 8000496:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000498:	5c69      	ldrb	r1, [r5, r1]
 800049a:	0b16      	lsrs	r6, r2, #12
 800049c:	4071      	eors	r1, r6
 800049e:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80004a0:	5c69      	ldrb	r1, [r5, r1]
 80004a2:	0d16      	lsrs	r6, r2, #20
 80004a4:	4071      	eors	r1, r6
 80004a6:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80004a8:	5c69      	ldrb	r1, [r5, r1]
 80004aa:	0f12      	lsrs	r2, r2, #28
 80004ac:	404a      	eors	r2, r1
 80004ae:	4910      	ldr	r1, [pc, #64]	; (80004f0 <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 80004b0:	5c8a      	ldrb	r2, [r1, r2]
 80004b2:	0712      	lsls	r2, r2, #28
 80004b4:	4313      	orrs	r3, r2
 80004b6:	4303      	orrs	r3, r0
 80004b8:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ba:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80004bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d007      	beq.n	80004d2 <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80004c2:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80004c4:	2324      	movs	r3, #36	; 0x24
 80004c6:	5ce2      	ldrb	r2, [r4, r3]
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	d101      	bne.n	80004d0 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80004cc:	3202      	adds	r2, #2
 80004ce:	54e2      	strb	r2, [r4, r3]
}
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80004d2:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 80004d4:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80004d6:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 80004d8:	3324      	adds	r3, #36	; 0x24
 80004da:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80004dc:	6321      	str	r1, [r4, #48]	; 0x30
 80004de:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80004e0:	6960      	ldr	r0, [r4, #20]
 80004e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004e4:	3201      	adds	r2, #1
 80004e6:	4798      	blx	r3
 80004e8:	e7f2      	b.n	80004d0 <ASPEP_sendBeacon+0x64>
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	0800649c 	.word	0x0800649c
 80004f0:	0800648c 	.word	0x0800648c

080004f4 <ASPEP_sendPing>:
{
 80004f4:	000b      	movs	r3, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80004f6:	2148      	movs	r1, #72	; 0x48
{
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	0004      	movs	r4, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80004fc:	5c41      	ldrb	r1, [r0, r1]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 80004fe:	2001      	movs	r0, #1
 8000500:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000502:	0119      	lsls	r1, r3, #4
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000504:	015b      	lsls	r3, r3, #5
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000506:	4319      	orrs	r1, r3
 8000508:	0313      	lsls	r3, r2, #12
 800050a:	430b      	orrs	r3, r1
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800050c:	0182      	lsls	r2, r0, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800050e:	4313      	orrs	r3, r2
    uint8_t ipID = pHandle->liid & 0xFU;
 8000510:	224b      	movs	r2, #75	; 0x4b
 8000512:	5ca1      	ldrb	r1, [r4, r2]
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000514:	3a3c      	subs	r2, #60	; 0x3c
                   | (uint32_t)((uint32_t)Nbit << 7U)
 8000516:	01c0      	lsls	r0, r0, #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000518:	400a      	ands	r2, r1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800051a:	4303      	orrs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 800051c:	0212      	lsls	r2, r2, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800051e:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000520:	22ff      	movs	r2, #255	; 0xff
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000522:	2506      	movs	r5, #6
 8000524:	0018      	movs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000526:	4916      	ldr	r1, [pc, #88]	; (8000580 <ASPEP_sendPing+0x8c>)
 8000528:	401a      	ands	r2, r3
 800052a:	432a      	orrs	r2, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800052c:	5c8a      	ldrb	r2, [r1, r2]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800052e:	4328      	orrs	r0, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000530:	0a1d      	lsrs	r5, r3, #8
 8000532:	406a      	eors	r2, r5
 8000534:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000536:	5c8a      	ldrb	r2, [r1, r2]
 8000538:	0c1d      	lsrs	r5, r3, #16
 800053a:	406a      	eors	r2, r5
 800053c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800053e:	5c8a      	ldrb	r2, [r1, r2]
 8000540:	0e1b      	lsrs	r3, r3, #24
 8000542:	4053      	eors	r3, r2
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	071b      	lsls	r3, r3, #28
 800054a:	4303      	orrs	r3, r0
 800054c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800054e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000550:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d007      	beq.n	8000566 <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8000556:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000558:	2324      	movs	r3, #36	; 0x24
 800055a:	5ce2      	ldrb	r2, [r4, r3]
 800055c:	2a00      	cmp	r2, #0
 800055e:	d101      	bne.n	8000564 <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 8000560:	3202      	adds	r2, #2
 8000562:	54e2      	strb	r2, [r4, r3]
}
 8000564:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000566:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000568:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800056a:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 800056c:	3324      	adds	r3, #36	; 0x24
 800056e:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000570:	6321      	str	r1, [r4, #48]	; 0x30
 8000572:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000574:	6960      	ldr	r0, [r4, #20]
 8000576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000578:	3201      	adds	r2, #1
 800057a:	4798      	blx	r3
 800057c:	e7f2      	b.n	8000564 <ASPEP_sendPing+0x70>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	0800649c 	.word	0x0800649c
 8000584:	0800648c 	.word	0x0800648c

08000588 <ASPEP_getBuffer>:
{
 8000588:	0003      	movs	r3, r0
 800058a:	b510      	push	{r4, lr}
     result = false; /* Async packets are not supported */
 800058c:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 800058e:	2a0a      	cmp	r2, #10
 8000590:	d000      	beq.n	8000594 <ASPEP_getBuffer+0xc>
}
 8000592:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000594:	3224      	adds	r2, #36	; 0x24
 8000596:	5c9c      	ldrb	r4, [r3, r2]
 8000598:	2c01      	cmp	r4, #1
 800059a:	d8fa      	bhi.n	8000592 <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800059c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800059e:	3004      	adds	r0, #4
 80005a0:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80005a2:	2101      	movs	r1, #1
  bool result = true;
 80005a4:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 80005a6:	5499      	strb	r1, [r3, r2]
 80005a8:	e7f3      	b.n	8000592 <ASPEP_getBuffer+0xa>
 80005aa:	46c0      	nop			; (mov r8, r8)

080005ac <ASPEP_sendPacket>:
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80005b0:	204c      	movs	r0, #76	; 0x4c
{
 80005b2:	46c6      	mov	lr, r8
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80005b4:	5c25      	ldrb	r5, [r4, r0]
{
 80005b6:	b500      	push	{lr}
      result = ASPEP_NOT_CONNECTED;
 80005b8:	384a      	subs	r0, #74	; 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80005ba:	2d02      	cmp	r5, #2
 80005bc:	d002      	beq.n	80005c4 <ASPEP_sendPacket+0x18>
}
 80005be:	bc80      	pop	{r7}
 80005c0:	46b8      	mov	r8, r7
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80005c4:	0110      	lsls	r0, r2, #4
 80005c6:	4318      	orrs	r0, r3
      *header = tmpHeader;
 80005c8:	1f0e      	subs	r6, r1, #4
 80005ca:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80005cc:	2054      	movs	r0, #84	; 0x54
 80005ce:	5c20      	ldrb	r0, [r4, r0]
 80005d0:	2801      	cmp	r0, #1
 80005d2:	d106      	bne.n	80005e2 <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80005d4:	30c9      	adds	r0, #201	; 0xc9
 80005d6:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80005d8:	1889      	adds	r1, r1, r2
 80005da:	3034      	adds	r0, #52	; 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80005dc:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80005de:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80005e0:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80005e2:	2b0a      	cmp	r3, #10
 80005e4:	d105      	bne.n	80005f2 <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 80005e6:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 80005e8:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d0e7      	beq.n	80005be <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80005ee:	2100      	movs	r1, #0
 80005f0:	7421      	strb	r1, [r4, #16]
  uint32_t header = *headerPtr;
 80005f2:	6837      	ldr	r7, [r6, #0]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80005f4:	3204      	adds	r2, #4
  header &= 0x0fffffffU;
 80005f6:	0138      	lsls	r0, r7, #4
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80005f8:	b292      	uxth	r2, r2
 80005fa:	4694      	mov	ip, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005fc:	21ff      	movs	r1, #255	; 0xff
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005fe:	0b02      	lsrs	r2, r0, #12
 8000600:	4690      	mov	r8, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000602:	4d24      	ldr	r5, [pc, #144]	; (8000694 <ASPEP_sendPacket+0xe8>)
 8000604:	4039      	ands	r1, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000606:	002a      	movs	r2, r5
 8000608:	5c69      	ldrb	r1, [r5, r1]
 800060a:	4645      	mov	r5, r8
 800060c:	4069      	eors	r1, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800060e:	0d05      	lsrs	r5, r0, #20
 8000610:	46a8      	mov	r8, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000612:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000614:	5c55      	ldrb	r5, [r2, r1]
 8000616:	4641      	mov	r1, r8
 8000618:	404d      	eors	r5, r1
 800061a:	b2ed      	uxtb	r5, r5
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800061c:	5d51      	ldrb	r1, [r2, r5]
 800061e:	0f00      	lsrs	r0, r0, #28
 8000620:	4041      	eors	r1, r0
 8000622:	481d      	ldr	r0, [pc, #116]	; (8000698 <ASPEP_sendPacket+0xec>)
  *headerPtr |= (uint32_t)crc << 28;
 8000624:	5c40      	ldrb	r0, [r0, r1]
 8000626:	0700      	lsls	r0, r0, #28
 8000628:	4338      	orrs	r0, r7
 800062a:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800062e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000630:	2900      	cmp	r1, #0
 8000632:	d017      	beq.n	8000664 <ASPEP_sendPacket+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000634:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d009      	beq.n	800064e <ASPEP_sendPacket+0xa2>
  uint8_t result = ASPEP_OK;
 800063a:	2000      	movs	r0, #0
      else if(ASPEP_CTRL == dataType)
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1be      	bne.n	80005be <ASPEP_sendPacket+0x12>
        if (pHandle->ctrlBuffer.state != available)
 8000640:	3324      	adds	r3, #36	; 0x24
 8000642:	5ce0      	ldrb	r0, [r4, r3]
 8000644:	2800      	cmp	r0, #0
 8000646:	d123      	bne.n	8000690 <ASPEP_sendPacket+0xe4>
          pHandle->ctrlBuffer.state = pending;
 8000648:	2202      	movs	r2, #2
 800064a:	54e2      	strb	r2, [r4, r3]
 800064c:	e7b7      	b.n	80005be <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 800064e:	3324      	adds	r3, #36	; 0x24
 8000650:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 8000652:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 8000654:	2901      	cmp	r1, #1
 8000656:	d1b2      	bne.n	80005be <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 8000658:	3101      	adds	r1, #1
 800065a:	54e1      	strb	r1, [r4, r3]
          pHandle->syncBuffer.length = bufferLength;
 800065c:	4663      	mov	r3, ip
  uint8_t result = ASPEP_OK;
 800065e:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 8000660:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8000662:	e7ac      	b.n	80005be <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d00d      	beq.n	8000684 <ASPEP_sendPacket+0xd8>
        pHandle->ctrlBuffer.state = readLock;
 8000668:	2324      	movs	r3, #36	; 0x24
 800066a:	2103      	movs	r1, #3
 800066c:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800066e:	0023      	movs	r3, r4
 8000670:	3320      	adds	r3, #32
 8000672:	6323      	str	r3, [r4, #48]	; 0x30
 8000674:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000676:	4662      	mov	r2, ip
 8000678:	0031      	movs	r1, r6
 800067a:	6960      	ldr	r0, [r4, #20]
 800067c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800067e:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000680:	2000      	movs	r0, #0
 8000682:	e79c      	b.n	80005be <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 8000684:	3324      	adds	r3, #36	; 0x24
 8000686:	3103      	adds	r1, #3
 8000688:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800068a:	0023      	movs	r3, r4
 800068c:	3328      	adds	r3, #40	; 0x28
 800068e:	e7f0      	b.n	8000672 <ASPEP_sendPacket+0xc6>
          result = ASPEP_BUFFER_ERROR;
 8000690:	2003      	movs	r0, #3
 8000692:	e794      	b.n	80005be <ASPEP_sendPacket+0x12>
 8000694:	0800649c 	.word	0x0800649c
 8000698:	0800648c 	.word	0x0800648c

0800069c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 800069c:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800069e:	2524      	movs	r5, #36	; 0x24
 80006a0:	5d43      	ldrb	r3, [r0, r5]
{
 80006a2:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d012      	beq.n	80006ce <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 80006a8:	2100      	movs	r1, #0
 80006aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80006ac:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 80006ae:	222e      	movs	r2, #46	; 0x2e
 80006b0:	5c82      	ldrb	r2, [r0, r2]
 80006b2:	2a02      	cmp	r2, #2
 80006b4:	d011      	beq.n	80006da <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d11b      	bne.n	80006f2 <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80006ba:	0001      	movs	r1, r0
 80006bc:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80006be:	6c23      	ldr	r3, [r4, #64]	; 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80006c0:	6301      	str	r1, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80006c2:	2204      	movs	r2, #4
 80006c4:	6940      	ldr	r0, [r0, #20]
 80006c6:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 80006c8:	2303      	movs	r3, #3
 80006ca:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 80006ce:	2300      	movs	r3, #0
 80006d0:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 80006d2:	332e      	adds	r3, #46	; 0x2e
 80006d4:	5cc3      	ldrb	r3, [r0, r3]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d10b      	bne.n	80006f2 <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80006da:	0023      	movs	r3, r4
 80006dc:	3328      	adds	r3, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80006de:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80006e0:	6323      	str	r3, [r4, #48]	; 0x30
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80006e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80006e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006e6:	6960      	ldr	r0, [r4, #20]
 80006e8:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 80006ea:	232e      	movs	r3, #46	; 0x2e
 80006ec:	2203      	movs	r2, #3
 80006ee:	54e2      	strb	r2, [r4, r3]
 80006f0:	e7ec      	b.n	80006cc <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	6323      	str	r3, [r4, #48]	; 0x30
}
 80006f6:	e7e9      	b.n	80006cc <ASPEP_HWDataTransmittedIT+0x30>

080006f8 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	46de      	mov	lr, fp
 80006fc:	4657      	mov	r7, sl
 80006fe:	464e      	mov	r6, r9
 8000700:	4645      	mov	r5, r8
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
 8000702:	2200      	movs	r2, #0
{
 8000704:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000706:	69c3      	ldr	r3, [r0, #28]
    *packetLength = 0;
 8000708:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 800070a:	3249      	adds	r2, #73	; 0x49
{
 800070c:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 800070e:	5c80      	ldrb	r0, [r0, r2]
{
 8000710:	b085      	sub	sp, #20
    if (pHandle->NewPacketAvailable)
 8000712:	2800      	cmp	r0, #0
 8000714:	d018      	beq.n	8000748 <ASPEP_RXframeProcess+0x50>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000716:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000718:	264c      	movs	r6, #76	; 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 800071a:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 800071c:	5da2      	ldrb	r2, [r4, r6]
 800071e:	2a01      	cmp	r2, #1
 8000720:	d05e      	beq.n	80007e0 <ASPEP_RXframeProcess+0xe8>
 8000722:	2a02      	cmp	r2, #2
 8000724:	d047      	beq.n	80007b6 <ASPEP_RXframeProcess+0xbe>
 8000726:	2500      	movs	r5, #0
 8000728:	2a00      	cmp	r2, #0
 800072a:	d038      	beq.n	800079e <ASPEP_RXframeProcess+0xa6>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800072c:	0021      	movs	r1, r4
 800072e:	2204      	movs	r2, #4
 8000730:	6960      	ldr	r0, [r4, #20]
 8000732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000734:	311c      	adds	r1, #28
 8000736:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000738:	0028      	movs	r0, r5
 800073a:	b005      	add	sp, #20
 800073c:	bcf0      	pop	{r4, r5, r6, r7}
 800073e:	46bb      	mov	fp, r7
 8000740:	46b2      	mov	sl, r6
 8000742:	46a9      	mov	r9, r5
 8000744:	46a0      	mov	r8, r4
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000748:	234a      	movs	r3, #74	; 0x4a
 800074a:	5ce3      	ldrb	r3, [r4, r3]
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800074c:	2500      	movs	r5, #0
    else if (pHandle->badPacketFlag > ASPEP_OK)
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f2      	beq.n	8000738 <ASPEP_RXframeProcess+0x40>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000752:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000754:	200f      	movs	r0, #15
 8000756:	021a      	lsls	r2, r3, #8
 8000758:	041b      	lsls	r3, r3, #16
 800075a:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800075c:	0a1a      	lsrs	r2, r3, #8
 800075e:	49b6      	ldr	r1, [pc, #728]	; (8000a38 <ASPEP_RXframeProcess+0x340>)
 8000760:	406a      	eors	r2, r5
 8000762:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000764:	5c8a      	ldrb	r2, [r1, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000766:	4318      	orrs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000768:	0c1b      	lsrs	r3, r3, #16
 800076a:	4053      	eors	r3, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800076c:	5ccb      	ldrb	r3, [r1, r3]
 800076e:	4ab3      	ldr	r2, [pc, #716]	; (8000a3c <ASPEP_RXframeProcess+0x344>)
  *headerPtr |= (uint32_t)crc << 28;
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	071b      	lsls	r3, r3, #28
 8000774:	4303      	orrs	r3, r0
 8000776:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800077a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800077c:	2b00      	cmp	r3, #0
 800077e:	d03e      	beq.n	80007fe <ASPEP_RXframeProcess+0x106>
  __ASM volatile ("cpsie i" : : : "memory");
 8000780:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000782:	2324      	movs	r3, #36	; 0x24
 8000784:	5ce2      	ldrb	r2, [r4, r3]
 8000786:	2a00      	cmp	r2, #0
 8000788:	d101      	bne.n	800078e <ASPEP_RXframeProcess+0x96>
          pHandle->ctrlBuffer.state = pending;
 800078a:	3202      	adds	r2, #2
 800078c:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 800078e:	234a      	movs	r3, #74	; 0x4a
 8000790:	2200      	movs	r2, #0
 8000792:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000794:	6960      	ldr	r0, [r4, #20]
 8000796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000798:	4798      	blx	r3
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800079a:	2500      	movs	r5, #0
 800079c:	e7cc      	b.n	8000738 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 800079e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007a0:	2a05      	cmp	r2, #5
 80007a2:	d038      	beq.n	8000816 <ASPEP_RXframeProcess+0x11e>
          else if (PING == pHandle->rxPacketType)
 80007a4:	2a06      	cmp	r2, #6
 80007a6:	d1c1      	bne.n	800072c <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 80007a8:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80007aa:	2100      	movs	r1, #0
 80007ac:	0020      	movs	r0, r4
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f7ff fea0 	bl	80004f4 <ASPEP_sendPing>
 80007b4:	e7ba      	b.n	800072c <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 80007b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007b8:	2a05      	cmp	r2, #5
 80007ba:	d100      	bne.n	80007be <ASPEP_RXframeProcess+0xc6>
 80007bc:	e0ac      	b.n	8000918 <ASPEP_RXframeProcess+0x220>
          else if (PING == pHandle->rxPacketType)
 80007be:	2a06      	cmp	r2, #6
 80007c0:	d100      	bne.n	80007c4 <ASPEP_RXframeProcess+0xcc>
 80007c2:	e0f1      	b.n	80009a8 <ASPEP_RXframeProcess+0x2b0>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80007c4:	2500      	movs	r5, #0
          else if (DATA_PACKET == pHandle->rxPacketType)
 80007c6:	2a09      	cmp	r2, #9
 80007c8:	d1b0      	bne.n	800072c <ASPEP_RXframeProcess+0x34>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80007ca:	323f      	adds	r2, #63	; 0x3f
 80007cc:	5ca3      	ldrb	r3, [r4, r2]
 80007ce:	3301      	adds	r3, #1
 80007d0:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80007d2:	2301      	movs	r3, #1
 80007d4:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLength;
 80007d6:	3343      	adds	r3, #67	; 0x43
 80007d8:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 80007da:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLength;
 80007dc:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 80007de:	e7a5      	b.n	800072c <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 80007e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007e2:	2a05      	cmp	r2, #5
 80007e4:	d05c      	beq.n	80008a0 <ASPEP_RXframeProcess+0x1a8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80007e6:	2500      	movs	r5, #0
          else if (PING == pHandle->rxPacketType)
 80007e8:	2a06      	cmp	r2, #6
 80007ea:	d19f      	bne.n	800072c <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 80007ec:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	2101      	movs	r1, #1
 80007f2:	0020      	movs	r0, r4
 80007f4:	f7ff fe7e 	bl	80004f4 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80007f8:	2302      	movs	r3, #2
 80007fa:	55a3      	strb	r3, [r4, r6]
 80007fc:	e796      	b.n	800072c <ASPEP_RXframeProcess+0x34>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007fe:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000800:	2203      	movs	r2, #3
 8000802:	3324      	adds	r3, #36	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000804:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000806:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000808:	6321      	str	r1, [r4, #48]	; 0x30
 800080a:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800080c:	6960      	ldr	r0, [r4, #20]
 800080e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000810:	3201      	adds	r2, #1
 8000812:	4798      	blx	r3
 8000814:	e7bb      	b.n	800078e <ASPEP_RXframeProcess+0x96>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000816:	213f      	movs	r1, #63	; 0x3f
 8000818:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800081a:	357f      	adds	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800081c:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800081e:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000820:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000822:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000824:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000826:	2254      	movs	r2, #84	; 0x54
 8000828:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800082a:	468c      	mov	ip, r1
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800082c:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800082e:	2255      	movs	r2, #85	; 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000830:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000832:	5ca1      	ldrb	r1, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000834:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000836:	1c0a      	adds	r2, r1, #0
 8000838:	4561      	cmp	r1, ip
 800083a:	d900      	bls.n	800083e <ASPEP_RXframeProcess+0x146>
 800083c:	4662      	mov	r2, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800083e:	2156      	movs	r1, #86	; 0x56
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000844:	5c62      	ldrb	r2, [r4, r1]
 8000846:	1c01      	adds	r1, r0, #0
 8000848:	4691      	mov	r9, r2
 800084a:	4290      	cmp	r0, r2
 800084c:	d900      	bls.n	8000850 <ASPEP_RXframeProcess+0x158>
 800084e:	1c11      	adds	r1, r2, #0
 8000850:	b2ca      	uxtb	r2, r1
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000852:	2157      	movs	r1, #87	; 0x57
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000854:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000856:	5c62      	ldrb	r2, [r4, r1]
 8000858:	1c29      	adds	r1, r5, #0
 800085a:	4692      	mov	sl, r2
 800085c:	4295      	cmp	r5, r2
 800085e:	d900      	bls.n	8000862 <ASPEP_RXframeProcess+0x16a>
 8000860:	1c11      	adds	r1, r2, #0
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	9203      	str	r2, [sp, #12]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000866:	1c31      	adds	r1, r6, #0
 8000868:	4546      	cmp	r6, r8
 800086a:	d900      	bls.n	800086e <ASPEP_RXframeProcess+0x176>
 800086c:	4641      	mov	r1, r8
 800086e:	9a01      	ldr	r2, [sp, #4]
 8000870:	0217      	lsls	r7, r2, #8
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	4693      	mov	fp, r2
 8000876:	9a02      	ldr	r2, [sp, #8]
 8000878:	0411      	lsls	r1, r2, #16
 800087a:	465a      	mov	r2, fp
 800087c:	433a      	orrs	r2, r7
 800087e:	4693      	mov	fp, r2
 8000880:	9a03      	ldr	r2, [sp, #12]
 8000882:	0617      	lsls	r7, r2, #24
 8000884:	465a      	mov	r2, fp
 8000886:	4311      	orrs	r1, r2
 8000888:	4339      	orrs	r1, r7
 800088a:	6561      	str	r1, [r4, #84]	; 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800088c:	4546      	cmp	r6, r8
 800088e:	d800      	bhi.n	8000892 <ASPEP_RXframeProcess+0x19a>
 8000890:	e091      	b.n	80009b6 <ASPEP_RXframeProcess+0x2be>
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000892:	0021      	movs	r1, r4
 8000894:	0020      	movs	r0, r4
 8000896:	3154      	adds	r1, #84	; 0x54
 8000898:	f7ff fde8 	bl	800046c <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800089c:	2500      	movs	r5, #0
 800089e:	e745      	b.n	800072c <ASPEP_RXframeProcess+0x34>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80008a0:	213f      	movs	r1, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80008a2:	257f      	movs	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80008a4:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80008a6:	7f26      	ldrb	r6, [r4, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80008a8:	4011      	ands	r1, r2
 80008aa:	468c      	mov	ip, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80008ac:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80008ae:	0b99      	lsrs	r1, r3, #14
 80008b0:	4029      	ands	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80008b2:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80008b4:	2254      	movs	r2, #84	; 0x54
 80008b6:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80008b8:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80008ba:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80008bc:	2255      	movs	r2, #85	; 0x55
 80008be:	5ca2      	ldrb	r2, [r4, r2]
 80008c0:	1c17      	adds	r7, r2, #0
 80008c2:	4562      	cmp	r2, ip
 80008c4:	d900      	bls.n	80008c8 <ASPEP_RXframeProcess+0x1d0>
 80008c6:	4667      	mov	r7, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80008c8:	2256      	movs	r2, #86	; 0x56
 80008ca:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80008cc:	b2ff      	uxtb	r7, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80008ce:	4691      	mov	r9, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80008d0:	2257      	movs	r2, #87	; 0x57
 80008d2:	5ca2      	ldrb	r2, [r4, r2]
 80008d4:	4692      	mov	sl, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80008d6:	1c32      	adds	r2, r6, #0
 80008d8:	4546      	cmp	r6, r8
 80008da:	d900      	bls.n	80008de <ASPEP_RXframeProcess+0x1e6>
 80008dc:	4642      	mov	r2, r8
 80008de:	0238      	lsls	r0, r7, #8
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80008e4:	1c08      	adds	r0, r1, #0
 80008e6:	4549      	cmp	r1, r9
 80008e8:	d900      	bls.n	80008ec <ASPEP_RXframeProcess+0x1f4>
 80008ea:	4648      	mov	r0, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80008ec:	b2c0      	uxtb	r0, r0
 80008ee:	0400      	lsls	r0, r0, #16
 80008f0:	9001      	str	r0, [sp, #4]
 80008f2:	4853      	ldr	r0, [pc, #332]	; (8000a40 <ASPEP_RXframeProcess+0x348>)
 80008f4:	4002      	ands	r2, r0
 80008f6:	9801      	ldr	r0, [sp, #4]
 80008f8:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80008fa:	1c28      	adds	r0, r5, #0
 80008fc:	4555      	cmp	r5, sl
 80008fe:	d900      	bls.n	8000902 <ASPEP_RXframeProcess+0x20a>
 8000900:	4650      	mov	r0, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000902:	0212      	lsls	r2, r2, #8
 8000904:	0600      	lsls	r0, r0, #24
 8000906:	0a12      	lsrs	r2, r2, #8
 8000908:	4302      	orrs	r2, r0
 800090a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800090c:	4546      	cmp	r6, r8
 800090e:	d974      	bls.n	80009fa <ASPEP_RXframeProcess+0x302>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000910:	234c      	movs	r3, #76	; 0x4c
 8000912:	2200      	movs	r2, #0
 8000914:	54e2      	strb	r2, [r4, r3]
 8000916:	e7bc      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000918:	213f      	movs	r1, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800091a:	257f      	movs	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800091c:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800091e:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000920:	4011      	ands	r1, r2
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000922:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000924:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000926:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000928:	2254      	movs	r2, #84	; 0x54
 800092a:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800092c:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800092e:	4694      	mov	ip, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000930:	2255      	movs	r2, #85	; 0x55
 8000932:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000934:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000936:	1c17      	adds	r7, r2, #0
 8000938:	428a      	cmp	r2, r1
 800093a:	d900      	bls.n	800093e <ASPEP_RXframeProcess+0x246>
 800093c:	1c0f      	adds	r7, r1, #0
 800093e:	b2fa      	uxtb	r2, r7
 8000940:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000942:	2256      	movs	r2, #86	; 0x56
 8000944:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000946:	46b3      	mov	fp, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000948:	4690      	mov	r8, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800094a:	2257      	movs	r2, #87	; 0x57
 800094c:	5ca2      	ldrb	r2, [r4, r2]
 800094e:	4691      	mov	r9, r2
 8000950:	2254      	movs	r2, #84	; 0x54
 8000952:	4692      	mov	sl, r2
 8000954:	44a2      	add	sl, r4
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000956:	4566      	cmp	r6, ip
 8000958:	d900      	bls.n	800095c <ASPEP_RXframeProcess+0x264>
 800095a:	46e3      	mov	fp, ip
 800095c:	465f      	mov	r7, fp
 800095e:	9a01      	ldr	r2, [sp, #4]
 8000960:	b2ff      	uxtb	r7, r7
 8000962:	0212      	lsls	r2, r2, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000964:	4683      	mov	fp, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000966:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000968:	4540      	cmp	r0, r8
 800096a:	d900      	bls.n	800096e <ASPEP_RXframeProcess+0x276>
 800096c:	46c3      	mov	fp, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800096e:	465f      	mov	r7, fp
 8000970:	b2ff      	uxtb	r7, r7
 8000972:	043f      	lsls	r7, r7, #16
 8000974:	46bb      	mov	fp, r7
 8000976:	4f32      	ldr	r7, [pc, #200]	; (8000a40 <ASPEP_RXframeProcess+0x348>)
 8000978:	403a      	ands	r2, r7
 800097a:	465f      	mov	r7, fp
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800097c:	46ab      	mov	fp, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800097e:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000980:	454d      	cmp	r5, r9
 8000982:	d900      	bls.n	8000986 <ASPEP_RXframeProcess+0x28e>
 8000984:	46cb      	mov	fp, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000986:	465f      	mov	r7, fp
 8000988:	0212      	lsls	r2, r2, #8
 800098a:	063f      	lsls	r7, r7, #24
 800098c:	0a12      	lsrs	r2, r2, #8
 800098e:	433a      	orrs	r2, r7
 8000990:	6562      	str	r2, [r4, #84]	; 0x54
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000992:	2200      	movs	r2, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000994:	4566      	cmp	r6, ip
 8000996:	d93e      	bls.n	8000a16 <ASPEP_RXframeProcess+0x31e>
 8000998:	234c      	movs	r3, #76	; 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 800099a:	4651      	mov	r1, sl
 800099c:	0020      	movs	r0, r4
 800099e:	54e2      	strb	r2, [r4, r3]
 80009a0:	f7ff fd64 	bl	800046c <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80009a4:	2500      	movs	r5, #0
 80009a6:	e6c1      	b.n	800072c <ASPEP_RXframeProcess+0x34>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80009a8:	2101      	movs	r1, #1
 80009aa:	0020      	movs	r0, r4
 80009ac:	7f62      	ldrb	r2, [r4, #29]
 80009ae:	f7ff fda1 	bl	80004f4 <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80009b2:	2500      	movs	r5, #0
 80009b4:	e6ba      	b.n	800072c <ASPEP_RXframeProcess+0x34>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009b6:	9a01      	ldr	r2, [sp, #4]
 80009b8:	4594      	cmp	ip, r2
 80009ba:	d900      	bls.n	80009be <ASPEP_RXframeProcess+0x2c6>
 80009bc:	e769      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009be:	4548      	cmp	r0, r9
 80009c0:	d900      	bls.n	80009c4 <ASPEP_RXframeProcess+0x2cc>
 80009c2:	e766      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80009c4:	4555      	cmp	r5, sl
 80009c6:	d900      	bls.n	80009ca <ASPEP_RXframeProcess+0x2d2>
 80009c8:	e763      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009ca:	2158      	movs	r1, #88	; 0x58
 80009cc:	5c61      	ldrb	r1, [r4, r1]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 80009ce:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009d0:	0f5b      	lsrs	r3, r3, #29
 80009d2:	4299      	cmp	r1, r3
 80009d4:	d000      	beq.n	80009d8 <ASPEP_RXframeProcess+0x2e0>
 80009d6:	e75c      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80009d8:	9b02      	ldr	r3, [sp, #8]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80009da:	3201      	adds	r2, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80009dc:	3301      	adds	r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	015b      	lsls	r3, r3, #5
 80009e2:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80009e4:	9b03      	ldr	r3, [sp, #12]
 80009e6:	019b      	lsls	r3, r3, #6
 80009e8:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80009ea:	b2d3      	uxtb	r3, r2
 80009ec:	2246      	movs	r2, #70	; 0x46
 80009ee:	015b      	lsls	r3, r3, #5
 80009f0:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80009f2:	234c      	movs	r3, #76	; 0x4c
 80009f4:	3a45      	subs	r2, #69	; 0x45
 80009f6:	54e2      	strb	r2, [r4, r3]
 80009f8:	e74b      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009fa:	45bc      	cmp	ip, r7
 80009fc:	d888      	bhi.n	8000910 <ASPEP_RXframeProcess+0x218>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009fe:	4549      	cmp	r1, r9
 8000a00:	d886      	bhi.n	8000910 <ASPEP_RXframeProcess+0x218>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a02:	4555      	cmp	r5, sl
 8000a04:	d884      	bhi.n	8000910 <ASPEP_RXframeProcess+0x218>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a06:	2258      	movs	r2, #88	; 0x58
 8000a08:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000a0a:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a0c:	0f5b      	lsrs	r3, r3, #29
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d000      	beq.n	8000a14 <ASPEP_RXframeProcess+0x31c>
 8000a12:	e77d      	b.n	8000910 <ASPEP_RXframeProcess+0x218>
 8000a14:	e73d      	b.n	8000892 <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a16:	9e01      	ldr	r6, [sp, #4]
 8000a18:	42b1      	cmp	r1, r6
 8000a1a:	d8bd      	bhi.n	8000998 <ASPEP_RXframeProcess+0x2a0>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a1c:	4540      	cmp	r0, r8
 8000a1e:	d8bb      	bhi.n	8000998 <ASPEP_RXframeProcess+0x2a0>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a20:	454d      	cmp	r5, r9
 8000a22:	d8b9      	bhi.n	8000998 <ASPEP_RXframeProcess+0x2a0>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a24:	3258      	adds	r2, #88	; 0x58
 8000a26:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000a28:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a2a:	0f5b      	lsrs	r3, r3, #29
 8000a2c:	1ad2      	subs	r2, r2, r3
 8000a2e:	4253      	negs	r3, r2
 8000a30:	415a      	adcs	r2, r3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	e7b0      	b.n	8000998 <ASPEP_RXframeProcess+0x2a0>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	0800649c 	.word	0x0800649c
 8000a3c:	0800648c 	.word	0x0800648c
 8000a40:	ff00ffff 	.word	0xff00ffff

08000a44 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000a44:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000a46:	254d      	movs	r5, #77	; 0x4d
 8000a48:	5d43      	ldrb	r3, [r0, r5]
{
 8000a4a:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <ASPEP_HWDataReceivedIT+0x1a>
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d103      	bne.n	8000a5c <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000a54:	2200      	movs	r2, #0
 8000a56:	5542      	strb	r2, [r0, r5]
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000a58:	3249      	adds	r2, #73	; 0x49
 8000a5a:	5483      	strb	r3, [r0, r2]
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <ASPEP_HWDataReceivedIT+0x98>)
 8000a60:	7f01      	ldrb	r1, [r0, #28]
 8000a62:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a64:	5c59      	ldrb	r1, [r3, r1]
 8000a66:	0a10      	lsrs	r0, r2, #8
 8000a68:	4041      	eors	r1, r0
 8000a6a:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a6c:	5c59      	ldrb	r1, [r3, r1]
 8000a6e:	0c10      	lsrs	r0, r2, #16
 8000a70:	4041      	eors	r1, r0
 8000a72:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000a74:	5c59      	ldrb	r1, [r3, r1]
 8000a76:	0e12      	lsrs	r2, r2, #24
 8000a78:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000a7a:	5c9b      	ldrb	r3, [r3, r2]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10b      	bne.n	8000a98 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000a80:	7f22      	ldrb	r2, [r4, #28]
 8000a82:	330f      	adds	r3, #15
 8000a84:	4013      	ands	r3, r2
 8000a86:	6523      	str	r3, [r4, #80]	; 0x50
          switch (pHandle->rxPacketType)
 8000a88:	2b06      	cmp	r3, #6
 8000a8a:	d809      	bhi.n	8000aa0 <ASPEP_HWDataReceivedIT+0x5c>
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d81d      	bhi.n	8000acc <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000a90:	234a      	movs	r3, #74	; 0x4a
 8000a92:	2201      	movs	r2, #1
 8000a94:	54e2      	strb	r2, [r4, r3]
              break;
 8000a96:	e7e1      	b.n	8000a5c <ASPEP_HWDataReceivedIT+0x18>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000a98:	234a      	movs	r3, #74	; 0x4a
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	54e2      	strb	r2, [r4, r3]
 8000a9e:	e7dd      	b.n	8000a5c <ASPEP_HWDataReceivedIT+0x18>
 8000aa0:	2b09      	cmp	r3, #9
 8000aa2:	d1f5      	bne.n	8000a90 <ASPEP_HWDataReceivedIT+0x4c>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000aa4:	8ba2      	ldrh	r2, [r4, #28]
 8000aa6:	333b      	adds	r3, #59	; 0x3b
 8000aa8:	0912      	lsrs	r2, r2, #4
 8000aaa:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000aac:	d00e      	beq.n	8000acc <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000aae:	2346      	movs	r3, #70	; 0x46
 8000ab0:	5ae3      	ldrh	r3, [r4, r3]
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d30e      	bcc.n	8000ad4 <ASPEP_HWDataReceivedIT+0x90>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000ab6:	2354      	movs	r3, #84	; 0x54
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000ab8:	5ce3      	ldrb	r3, [r4, r3]
 8000aba:	69a1      	ldr	r1, [r4, #24]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	18d2      	adds	r2, r2, r3
 8000ac0:	6960      	ldr	r0, [r4, #20]
 8000ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ac4:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	5563      	strb	r3, [r4, r5]
 8000aca:	e7c7      	b.n	8000a5c <ASPEP_HWDataReceivedIT+0x18>
              pHandle->NewPacketAvailable = true;
 8000acc:	2349      	movs	r3, #73	; 0x49
 8000ace:	2201      	movs	r2, #1
 8000ad0:	54e2      	strb	r2, [r4, r3]
              break;
 8000ad2:	e7c3      	b.n	8000a5c <ASPEP_HWDataReceivedIT+0x18>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000ad4:	234a      	movs	r3, #74	; 0x4a
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	54e2      	strb	r2, [r4, r3]
 8000ada:	e7bf      	b.n	8000a5c <ASPEP_HWDataReceivedIT+0x18>
 8000adc:	0800649c 	.word	0x0800649c

08000ae0 <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ae0:	224d      	movs	r2, #77	; 0x4d
 8000ae2:	2100      	movs	r1, #0
{
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ae8:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000aea:	0001      	movs	r1, r0
 8000aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aee:	6940      	ldr	r0, [r0, #20]
 8000af0:	311c      	adds	r1, #28
 8000af2:	3a49      	subs	r2, #73	; 0x49
 8000af4:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000af6:	bd10      	pop	{r4, pc}

08000af8 <HAL_I2C_ListenCpltCallback>:
#define RxSIZE 6
uint8_t RxData[RxSIZE];

int count=0;

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8000af8:	b510      	push	{r4, lr}
	HAL_I2C_EnableListen_IT(hi2c);
 8000afa:	f002 fcd3 	bl	80034a4 <HAL_I2C_EnableListen_IT>
}
 8000afe:	bd10      	pop	{r4, pc}

08000b00 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000b00:	b510      	push	{r4, lr}
	if(TransferDirection == I2C_DIRECTION_TRANSMIT){
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d106      	bne.n	8000b14 <HAL_I2C_AddrCallback+0x14>
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	2206      	movs	r2, #6
 8000b0a:	4904      	ldr	r1, [pc, #16]	; (8000b1c <HAL_I2C_AddrCallback+0x1c>)
 8000b0c:	049b      	lsls	r3, r3, #18
 8000b0e:	f002 fc4b 	bl	80033a8 <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else{
		Error_Handler();
	}
}
 8000b12:	bd10      	pop	{r4, pc}
		Error_Handler();
 8000b14:	f000 faae 	bl	8001074 <Error_Handler>
}
 8000b18:	e7fb      	b.n	8000b12 <HAL_I2C_AddrCallback+0x12>
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	2000033c 	.word	0x2000033c

08000b20 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
	count++;
 8000b20:	4a02      	ldr	r2, [pc, #8]	; (8000b2c <HAL_I2C_SlaveRxCpltCallback+0xc>)
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	4770      	bx	lr
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000344 	.word	0x20000344

08000b30 <HAL_I2C_ErrorCallback>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	f002 fcb7 	bl	80034a4 <HAL_I2C_EnableListen_IT>
 8000b36:	bd10      	pop	{r4, pc}

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3c:	2224      	movs	r2, #36	; 0x24
 8000b3e:	2100      	movs	r1, #0
 8000b40:	a809      	add	r0, sp, #36	; 0x24
 8000b42:	f005 fc61 	bl	8006408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b46:	2210      	movs	r2, #16
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4668      	mov	r0, sp
 8000b4c:	f005 fc5c 	bl	8006408 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	2210      	movs	r2, #16
 8000b52:	2100      	movs	r1, #0
 8000b54:	a804      	add	r0, sp, #16
 8000b56:	f005 fc57 	bl	8006408 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000b5a:	2312      	movs	r3, #18
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	2410      	movs	r4, #16
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b5e:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000b60:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b62:	3b11      	subs	r3, #17
 8000b64:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b66:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b68:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b6c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b6e:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b74:	9212      	str	r2, [sp, #72]	; 0x48
 8000b76:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b78:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f003 f841 	bl	8003c00 <HAL_RCC_OscConfig>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b82:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b94:	f003 fa8e 	bl	80040b4 <HAL_RCC_ClockConfig>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x68>
 8000b9c:	b672      	cpsid	i
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <SystemClock_Config+0x66>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ba0:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ba2:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ba6:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba8:	f003 fb3a 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x7c>
 8000bb0:	b672      	cpsid	i
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <SystemClock_Config+0x7a>
}
 8000bb4:	b014      	add	sp, #80	; 0x50
 8000bb6:	bd10      	pop	{r4, pc}

08000bb8 <main>:
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	46c6      	mov	lr, r8
 8000bbc:	b500      	push	{lr}
 8000bbe:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8000bc0:	f002 f87c 	bl	8002cbc <HAL_Init>
  SystemClock_Config();
 8000bc4:	f7ff ffb8 	bl	8000b38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2214      	movs	r2, #20
 8000bca:	2100      	movs	r1, #0
 8000bcc:	a812      	add	r0, sp, #72	; 0x48
 8000bce:	f005 fc1b 	bl	8006408 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	4cce      	ldr	r4, [pc, #824]	; (8000f10 <main+0x358>)
 8000bd6:	03d2      	lsls	r2, r2, #15
 8000bd8:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8000bda:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	6163      	str	r3, [r4, #20]
 8000be0:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8000be2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be4:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	6963      	ldr	r3, [r4, #20]
 8000bee:	0292      	lsls	r2, r2, #10
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	6163      	str	r3, [r4, #20]
 8000bf4:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8000bf6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	6963      	ldr	r3, [r4, #20]
 8000c02:	02d2      	lsls	r2, r2, #11
 8000c04:	4313      	orrs	r3, r2
 8000c06:	6163      	str	r3, [r4, #20]
 8000c08:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000c0a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8000c14:	f002 fb68 	bl	80032e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	2090      	movs	r0, #144	; 0x90
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	0019      	movs	r1, r3
 8000c20:	2201      	movs	r2, #1
 8000c22:	05c0      	lsls	r0, r0, #23
 8000c24:	4698      	mov	r8, r3
 8000c26:	f002 fb5f 	bl	80032e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY2_GPIO_Port, OCTH_STBY2_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	48b9      	ldr	r0, [pc, #740]	; (8000f14 <main+0x35c>)
 8000c30:	f002 fb5a 	bl	80032e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY1_GPIO_Port, OCTH_STBY1_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	48b6      	ldr	r0, [pc, #728]	; (8000f14 <main+0x35c>)
 8000c3a:	f002 fb55 	bl	80032e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3e:	2384      	movs	r3, #132	; 0x84
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c40:	48b4      	ldr	r0, [pc, #720]	; (8000f14 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c42:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c44:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c46:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000c48:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4a:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f002 fa4e 	bl	80030ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_BEMF_DIVIDER_Pin|OC_SEL_Pin;
 8000c50:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2600      	movs	r6, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c56:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = M1_BEMF_DIVIDER_Pin|OC_SEL_Pin;
 8000c58:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	a912      	add	r1, sp, #72	; 0x48
 8000c5c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = M1_BEMF_DIVIDER_Pin|OC_SEL_Pin;
 8000c5e:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c62:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f002 fa41 	bl	80030ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6c:	48a9      	ldr	r0, [pc, #676]	; (8000f14 <main+0x35c>)
 8000c6e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 8000c70:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c74:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c78:	f002 fa38 	bl	80030ec <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7c:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c80:	432b      	orrs	r3, r5
 8000c82:	6163      	str	r3, [r4, #20]
 8000c84:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c88:	402b      	ands	r3, r5
 8000c8a:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8c:	a812      	add	r0, sp, #72	; 0x48
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8e:	9b00      	ldr	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c90:	f005 fbba 	bl	8006408 <memset>
  hadc.Instance = ADC1;
 8000c94:	4ca0      	ldr	r4, [pc, #640]	; (8000f18 <main+0x360>)
 8000c96:	4ba1      	ldr	r3, [pc, #644]	; (8000f1c <main+0x364>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c98:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8000c9a:	6023      	str	r3, [r4, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000c9c:	2320      	movs	r3, #32
 8000c9e:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca0:	3b1c      	subs	r3, #28
 8000ca2:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ca8:	2324      	movs	r3, #36	; 0x24
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000caa:	61a6      	str	r6, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cac:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000cae:	60a6      	str	r6, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000cb0:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000cb2:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cb4:	54e6      	strb	r6, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cb8:	f002 f822 	bl	8002d00 <HAL_ADC_Init>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <main+0x10c>
 8000cc0:	b672      	cpsid	i
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <main+0x10a>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000cca:	2303      	movs	r3, #3
  sConfig.Channel = ADC_CHANNEL_0;
 8000ccc:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cce:	a912      	add	r1, sp, #72	; 0x48
 8000cd0:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000cd2:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cd4:	f002 f8bc 	bl	8002e50 <HAL_ADC_ConfigChannel>
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d001      	beq.n	8000ce0 <main+0x128>
 8000cdc:	b672      	cpsid	i
  while (1)
 8000cde:	e7fe      	b.n	8000cde <main+0x126>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce0:	0020      	movs	r0, r4
 8000ce2:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce4:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce6:	f002 f8b3 	bl	8002e50 <HAL_ADC_ConfigChannel>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d001      	beq.n	8000cf2 <main+0x13a>
 8000cee:	b672      	cpsid	i
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x138>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_2;
 8000cf6:	9712      	str	r7, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf8:	f002 f8aa 	bl	8002e50 <HAL_ADC_ConfigChannel>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d001      	beq.n	8000d04 <main+0x14c>
 8000d00:	b672      	cpsid	i
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <main+0x14a>
  sConfig.Channel = ADC_CHANNEL_9;
 8000d04:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d06:	0020      	movs	r0, r4
 8000d08:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_9;
 8000d0a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d0c:	f002 f8a0 	bl	8002e50 <HAL_ADC_ConfigChannel>
 8000d10:	1e06      	subs	r6, r0, #0
 8000d12:	d001      	beq.n	8000d18 <main+0x160>
 8000d14:	b672      	cpsid	i
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <main+0x15e>
  TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 8000d18:	0001      	movs	r1, r0
 8000d1a:	2214      	movs	r2, #20
 8000d1c:	a806      	add	r0, sp, #24
 8000d1e:	f005 fb73 	bl	8006408 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d22:	2208      	movs	r2, #8
 8000d24:	0031      	movs	r1, r6
 8000d26:	a804      	add	r0, sp, #16
 8000d28:	f005 fb6e 	bl	8006408 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	221c      	movs	r2, #28
 8000d2e:	0031      	movs	r1, r6
 8000d30:	a80b      	add	r0, sp, #44	; 0x2c
 8000d32:	f005 fb69 	bl	8006408 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d36:	2220      	movs	r2, #32
 8000d38:	0031      	movs	r1, r6
 8000d3a:	a812      	add	r0, sp, #72	; 0x48
 8000d3c:	f005 fb64 	bl	8006408 <memset>
  htim1.Instance = TIM1;
 8000d40:	4c77      	ldr	r4, [pc, #476]	; (8000f20 <main+0x368>)
 8000d42:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <main+0x36c>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d44:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8000d46:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 8000d48:	23c8      	movs	r3, #200	; 0xc8
 8000d4a:	00db      	lsls	r3, r3, #3
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000d4c:	6066      	str	r6, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	60a6      	str	r6, [r4, #8]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 8000d50:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d52:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000d54:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d58:	f003 fba4 	bl	80044a4 <HAL_TIM_PWM_Init>
 8000d5c:	1e02      	subs	r2, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <main+0x1ac>
 8000d60:	b672      	cpsid	i
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <main+0x1aa>
  sClearInputConfig.ClearInputPolarity = TIM_CLEARINPUTPOLARITY_NONINVERTED;
 8000d64:	9008      	str	r0, [sp, #32]
  sClearInputConfig.ClearInputPrescaler = TIM_CLEARINPUTPRESCALER_DIV1;
 8000d66:	9009      	str	r0, [sp, #36]	; 0x24
  sClearInputConfig.ClearInputFilter = 0;
 8000d68:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	a906      	add	r1, sp, #24
 8000d6c:	0020      	movs	r0, r4
  sClearInputConfig.ClearInputState = ENABLE;
 8000d6e:	9506      	str	r5, [sp, #24]
  sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_ETR;
 8000d70:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 8000d72:	f003 fd2f 	bl	80047d4 <HAL_TIM_ConfigOCrefClear>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d001      	beq.n	8000d7e <main+0x1c6>
 8000d7a:	b672      	cpsid	i
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <main+0x1c4>
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_2) != HAL_OK)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	0020      	movs	r0, r4
 8000d82:	a906      	add	r1, sp, #24
 8000d84:	f003 fd26 	bl	80047d4 <HAL_TIM_ConfigOCrefClear>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d001      	beq.n	8000d90 <main+0x1d8>
 8000d8c:	b672      	cpsid	i
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <main+0x1d6>
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_3) != HAL_OK)
 8000d90:	2208      	movs	r2, #8
 8000d92:	0020      	movs	r0, r4
 8000d94:	a906      	add	r1, sp, #24
 8000d96:	f003 fd1d 	bl	80047d4 <HAL_TIM_ConfigOCrefClear>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d001      	beq.n	8000da2 <main+0x1ea>
 8000d9e:	b672      	cpsid	i
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <main+0x1e8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000da2:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000da6:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da8:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000daa:	3310      	adds	r3, #16
 8000dac:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dae:	f003 fe57 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d001      	beq.n	8000dba <main+0x202>
 8000db6:	b672      	cpsid	i
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <main+0x200>
  sConfigOC.Pulse = 0;
 8000dba:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000dc4:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc8:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dca:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dcc:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dce:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd0:	f003 fbe0 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d001      	beq.n	8000ddc <main+0x224>
 8000dd8:	b672      	cpsid	i
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x222>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	0020      	movs	r0, r4
 8000de0:	a90b      	add	r1, sp, #44	; 0x2c
 8000de2:	f003 fbd7 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d001      	beq.n	8000dee <main+0x236>
 8000dea:	b672      	cpsid	i
  while (1)
 8000dec:	e7fe      	b.n	8000dec <main+0x234>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dee:	2208      	movs	r2, #8
 8000df0:	0020      	movs	r0, r4
 8000df2:	a90b      	add	r1, sp, #44	; 0x2c
 8000df4:	f003 fbce 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d001      	beq.n	8000e00 <main+0x248>
 8000dfc:	b672      	cpsid	i
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <main+0x246>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e00:	220c      	movs	r2, #12
 8000e02:	0020      	movs	r0, r4
 8000e04:	a90b      	add	r1, sp, #44	; 0x2c
 8000e06:	f003 fbc5 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	d001      	beq.n	8000e12 <main+0x25a>
 8000e0e:	b672      	cpsid	i
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x258>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000e1e:	2328      	movs	r3, #40	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e20:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000e24:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e26:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e28:	a912      	add	r1, sp, #72	; 0x48
 8000e2a:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000e2c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e2e:	f003 fe45 	bl	8004abc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e32:	1e06      	subs	r6, r0, #0
 8000e34:	d001      	beq.n	8000e3a <main+0x282>
 8000e36:	b672      	cpsid	i
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <main+0x280>
  HAL_TIM_MspPostInit(&htim1);
 8000e3a:	0020      	movs	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3c:	2410      	movs	r4, #16
  HAL_TIM_MspPostInit(&htim1);
 8000e3e:	f001 fd39 	bl	80028b4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	0022      	movs	r2, r4
 8000e44:	0031      	movs	r1, r6
 8000e46:	a812      	add	r0, sp, #72	; 0x48
 8000e48:	f005 fade 	bl	8006408 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	0031      	movs	r1, r6
 8000e50:	a80b      	add	r0, sp, #44	; 0x2c
 8000e52:	f005 fad9 	bl	8006408 <memset>
  htim2.Instance = TIM2;
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	4d33      	ldr	r5, [pc, #204]	; (8000f28 <main+0x370>)
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = LF_TIMER_PSC;
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	606b      	str	r3, [r5, #4]
  htim2.Init.Period = LF_TIMER_ARR;
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <main+0x374>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e64:	0028      	movs	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	60ae      	str	r6, [r5, #8]
  htim2.Init.Period = LF_TIMER_ARR;
 8000e68:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	612e      	str	r6, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6e:	f003 fa75 	bl	800435c <HAL_TIM_Base_Init>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d001      	beq.n	8000e7a <main+0x2c2>
 8000e76:	b672      	cpsid	i
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <main+0x2c0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e7c:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e80:	a912      	add	r1, sp, #72	; 0x48
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e82:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e84:	f003 fd34 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d001      	beq.n	8000e90 <main+0x2d8>
 8000e8c:	b672      	cpsid	i
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <main+0x2d6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e90:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e92:	0028      	movs	r0, r5
 8000e94:	a90b      	add	r1, sp, #44	; 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e96:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e98:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9a:	f003 fde1 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	1e06      	subs	r6, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0x2ee>
 8000ea2:	b672      	cpsid	i
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x2ec>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	0001      	movs	r1, r0
 8000ea8:	221c      	movs	r2, #28
 8000eaa:	a80b      	add	r0, sp, #44	; 0x2c
 8000eac:	f005 faac 	bl	8006408 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	0031      	movs	r1, r6
 8000eb4:	a812      	add	r0, sp, #72	; 0x48
 8000eb6:	f005 faa7 	bl	8006408 <memset>
  htim16.Instance = TIM16;
 8000eba:	4c1d      	ldr	r4, [pc, #116]	; (8000f30 <main+0x378>)
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <main+0x37c>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ebe:	0020      	movs	r0, r4
  htim16.Instance = TIM16;
 8000ec0:	6023      	str	r3, [r4, #0]
  htim16.Init.Period = PWM_PERIOD_CYCLES_REF;
 8000ec2:	23c8      	movs	r3, #200	; 0xc8
 8000ec4:	009b      	lsls	r3, r3, #2
  htim16.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000ec6:	6066      	str	r6, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	60a6      	str	r6, [r4, #8]
  htim16.Init.Period = PWM_PERIOD_CYCLES_REF;
 8000eca:	60e3      	str	r3, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	6126      	str	r6, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ece:	6166      	str	r6, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ed2:	f003 fa43 	bl	800435c <HAL_TIM_Base_Init>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d001      	beq.n	8000ede <main+0x326>
 8000eda:	b672      	cpsid	i
  while (1)
 8000edc:	e7fe      	b.n	8000edc <main+0x324>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000ede:	0020      	movs	r0, r4
 8000ee0:	f003 fae0 	bl	80044a4 <HAL_TIM_PWM_Init>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d001      	beq.n	8000eec <main+0x334>
 8000ee8:	b672      	cpsid	i
  while (1)
 8000eea:	e7fe      	b.n	8000eea <main+0x332>
  sConfigOC.Pulse = 0;
 8000eec:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eee:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef0:	0020      	movs	r0, r4
 8000ef2:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ef6:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef8:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000efa:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efe:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f00:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	f003 fb47 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d016      	beq.n	8000f38 <main+0x380>
 8000f0a:	b672      	cpsid	i
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0x354>
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48001400 	.word	0x48001400
 8000f18:	20000348 	.word	0x20000348
 8000f1c:	40012400 	.word	0x40012400
 8000f20:	20000420 	.word	0x20000420
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	200004b0 	.word	0x200004b0
 8000f2c:	0000fffe 	.word	0x0000fffe
 8000f30:	20000468 	.word	0x20000468
 8000f34:	40014400 	.word	0x40014400
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f38:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3c:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3e:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f40:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f42:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f44:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f46:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f48:	a912      	add	r1, sp, #72	; 0x48
 8000f4a:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4e:	f003 fdb5 	bl	8004abc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f52:	1e06      	subs	r6, r0, #0
 8000f54:	d001      	beq.n	8000f5a <main+0x3a2>
 8000f56:	b672      	cpsid	i
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <main+0x3a0>
  HAL_TIM_MspPostInit(&htim16);
 8000f5a:	0020      	movs	r0, r4
 8000f5c:	f001 fcaa 	bl	80028b4 <HAL_TIM_MspPostInit>
  MX_MotorControl_Init();
 8000f60:	f000 fef2 	bl	8001d48 <MX_MotorControl_Init>
  hi2c1.Instance = I2C1;
 8000f64:	4c3f      	ldr	r4, [pc, #252]	; (8001064 <main+0x4ac>)
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <main+0x4b0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f68:	2701      	movs	r7, #1
  hi2c1.Instance = I2C1;
 8000f6a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f6c:	4b3f      	ldr	r3, [pc, #252]	; (800106c <main+0x4b4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6e:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8000f70:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8000f72:	2324      	movs	r3, #36	; 0x24
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.OwnAddress1 = 36;
 8000f76:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	6126      	str	r6, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7a:	6166      	str	r6, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f7c:	61a6      	str	r6, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7e:	61e6      	str	r6, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f80:	6226      	str	r6, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f82:	f002 f9b7 	bl	80032f4 <HAL_I2C_Init>
 8000f86:	1e01      	subs	r1, r0, #0
 8000f88:	d001      	beq.n	8000f8e <main+0x3d6>
 8000f8a:	b672      	cpsid	i
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <main+0x3d4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f002 fde2 	bl	8003b58 <HAL_I2CEx_ConfigAnalogFilter>
 8000f94:	1e01      	subs	r1, r0, #0
 8000f96:	d001      	beq.n	8000f9c <main+0x3e4>
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <main+0x3e2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f002 fe01 	bl	8003ba4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa2:	1e06      	subs	r6, r0, #0
 8000fa4:	d001      	beq.n	8000faa <main+0x3f2>
 8000fa6:	b672      	cpsid	i
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <main+0x3f0>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000faa:	0002      	movs	r2, r0
 8000fac:	0039      	movs	r1, r7
 8000fae:	2009      	movs	r0, #9
 8000fb0:	f001 ffe2 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fb4:	2009      	movs	r0, #9
 8000fb6:	f002 f811 	bl	8002fdc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8000fba:	0032      	movs	r2, r6
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f001 ffda 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f002 f809 	bl	8002fdc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000fca:	0032      	movs	r2, r6
 8000fcc:	2102      	movs	r1, #2
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f001 ffd2 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	f002 f801 	bl	8002fdc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000fda:	0032      	movs	r2, r6
 8000fdc:	0031      	movs	r1, r6
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f001 ffca 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000fe4:	200d      	movs	r0, #13
 8000fe6:	f001 fff9 	bl	8002fdc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000fea:	0032      	movs	r2, r6
 8000fec:	2103      	movs	r1, #3
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f001 ffc2 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f001 fff1 	bl	8002fdc <HAL_NVIC_EnableIRQ>
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f002 fa52 	bl	80034a4 <HAL_I2C_EnableListen_IT>
 8001000:	2800      	cmp	r0, #0
 8001002:	d001      	beq.n	8001008 <main+0x450>
 8001004:	b672      	cpsid	i
  while (1)
 8001006:	e7fe      	b.n	8001006 <main+0x44e>
  HAL_TIM_Base_Start_IT(&htim2);
 8001008:	0028      	movs	r0, r5
	 		 MC_ProgramSpeedRampMotor1(500, 5000 );
 800100a:	24fa      	movs	r4, #250	; 0xfa
	  MC_ProgramSpeedRampMotor1(10, 1000 );
 800100c:	25fa      	movs	r5, #250	; 0xfa
  HAL_TIM_Base_Start_IT(&htim2);
 800100e:	f003 fa1d 	bl	800444c <HAL_TIM_Base_Start_IT>
	  MC_ProgramSpeedRampMotor1(10, 1000 );
 8001012:	00ad      	lsls	r5, r5, #2
	 		 MC_ProgramSpeedRampMotor1(500, 5000 );
 8001014:	0064      	lsls	r4, r4, #1
		  MC_StartMotor1();
 8001016:	f000 f82f 	bl	8001078 <MC_StartMotor1>
	  MC_ProgramSpeedRampMotor1(10, 1000 );
 800101a:	0029      	movs	r1, r5
 800101c:	200a      	movs	r0, #10
 800101e:	f000 f83b 	bl	8001098 <MC_ProgramSpeedRampMotor1>
	  	MC_StartMotor1();
 8001022:	f000 f829 	bl	8001078 <MC_StartMotor1>
	  		VBUSav = VBS_GetBusVoltage_d(pHandle);
 8001026:	2000      	movs	r0, #0
 8001028:	f003 fd7a 	bl	8004b20 <VBS_GetBusVoltage_d>
	  		MC_AcknowledgeFaultMotor1();
 800102c:	f000 f858 	bl	80010e0 <MC_AcknowledgeFaultMotor1>
	 	  Mstate =  MC_GetSTMStateMotor1();
 8001030:	f000 f866 	bl	8001100 <MC_GetSTMStateMotor1>
	 	  if(Mstate == IDLE){
 8001034:	2800      	cmp	r0, #0
 8001036:	d105      	bne.n	8001044 <main+0x48c>
	 		 MC_ProgramSpeedRampMotor1(500, 5000 );
 8001038:	0020      	movs	r0, r4
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <main+0x4b8>)
 800103c:	f000 f82c 	bl	8001098 <MC_ProgramSpeedRampMotor1>
	 		 MC_StartMotor1();
 8001040:	f000 f81a 	bl	8001078 <MC_StartMotor1>
	 	 bool motorrel = MC_GetSpeedSensorReliabilityMotor1();
 8001044:	f000 f844 	bl	80010d0 <MC_GetSpeedSensorReliabilityMotor1>
	 	 float getMecSpeed = MC_GetMecSpeedAverageMotor1();
 8001048:	f000 f832 	bl	80010b0 <MC_GetMecSpeedAverageMotor1>
	 	 float finalSpeed = MC_GetLastRampFinalSpeedMotor1();
 800104c:	f000 f838 	bl	80010c0 <MC_GetLastRampFinalSpeedMotor1>
	 	 uint16_t currentFaults = MC_GetCurrentFaultsMotor1();
 8001050:	f000 f84e 	bl	80010f0 <MC_GetCurrentFaultsMotor1>
	 	 if (currentFaults != MC_NO_ERROR) {
 8001054:	2800      	cmp	r0, #0
 8001056:	d002      	beq.n	800105e <main+0x4a6>
	 		MC_AcknowledgeFaultMotor1();
 8001058:	f000 f842 	bl	80010e0 <MC_AcknowledgeFaultMotor1>
	 		Vbus = BusVoltageSensor_M1;
 800105c:	e7db      	b.n	8001016 <main+0x45e>
	 		MC_StopMotor1();
 800105e:	f000 f813 	bl	8001088 <MC_StopMotor1>
 8001062:	e7d8      	b.n	8001016 <main+0x45e>
 8001064:	200003cc 	.word	0x200003cc
 8001068:	40005400 	.word	0x40005400
 800106c:	2000090e 	.word	0x2000090e
 8001070:	00001388 	.word	0x00001388

08001074 <Error_Handler>:
 8001074:	b672      	cpsid	i
  while (1)
 8001076:	e7fe      	b.n	8001076 <Error_Handler+0x2>

08001078 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8001078:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 800107a:	4b02      	ldr	r3, [pc, #8]	; (8001084 <MC_StartMotor1+0xc>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f000 f895 	bl	80011ac <MCI_StartMotor>
}
 8001082:	bd10      	pop	{r4, pc}
 8001084:	20000650 	.word	0x20000650

08001088 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8001088:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 800108a:	4b02      	ldr	r3, [pc, #8]	; (8001094 <MC_StopMotor1+0xc>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f000 f8a5 	bl	80011dc <MCI_StopMotor>
}
 8001092:	bd10      	pop	{r4, pc}
 8001094:	20000650 	.word	0x20000650

08001098 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001098:	0003      	movs	r3, r0
 800109a:	b510      	push	{r4, lr}
 800109c:	000a      	movs	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 800109e:	4903      	ldr	r1, [pc, #12]	; (80010ac <MC_ProgramSpeedRampMotor1+0x14>)
 80010a0:	6808      	ldr	r0, [r1, #0]
 80010a2:	0019      	movs	r1, r3
 80010a4:	f000 f844 	bl	8001130 <MCI_ExecSpeedRamp>
}
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20000650 	.word	0x20000650

080010b0 <MC_GetMecSpeedAverageMotor1>:

/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
 80010b0:	b510      	push	{r4, lr}
  return (MCI_GetAvrgMecSpeedUnit(pMCI[M1]));
 80010b2:	4b02      	ldr	r3, [pc, #8]	; (80010bc <MC_GetMecSpeedAverageMotor1+0xc>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	f000 f8eb 	bl	8001290 <MCI_GetAvrgMecSpeedUnit>
}
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	20000650 	.word	0x20000650

080010c0 <MC_GetLastRampFinalSpeedMotor1>:

/**
 * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed ramp, 0 otherwise.
 */
__weak int16_t MC_GetLastRampFinalSpeedMotor1(void)
{
 80010c0:	b510      	push	{r4, lr}
  return (MCI_GetLastRampFinalSpeed(pMCI[M1]));
 80010c2:	4b02      	ldr	r3, [pc, #8]	; (80010cc <MC_GetLastRampFinalSpeedMotor1+0xc>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	f000 f8cf 	bl	8001268 <MCI_GetLastRampFinalSpeed>
}
 80010ca:	bd10      	pop	{r4, pc}
 80010cc:	20000650 	.word	0x20000650

080010d0 <MC_GetSpeedSensorReliabilityMotor1>:

/**
 * @brief Returns true if the speed sensor used for Motor 1 is reliable, false otherwise
 */
__weak bool MC_GetSpeedSensorReliabilityMotor1(void)
{
 80010d0:	b510      	push	{r4, lr}
  return (MCI_GetSpdSensorReliability(pMCI[M1]));
 80010d2:	4b02      	ldr	r3, [pc, #8]	; (80010dc <MC_GetSpeedSensorReliabilityMotor1+0xc>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f000 f8d3 	bl	8001280 <MCI_GetSpdSensorReliability>
}
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	20000650 	.word	0x20000650

080010e0 <MC_AcknowledgeFaultMotor1>:
 * the error condition that occured into account. If no error condition exists when
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
 80010e0:	b510      	push	{r4, lr}
  return (MCI_FaultAcknowledged(pMCI[M1]));
 80010e2:	4b02      	ldr	r3, [pc, #8]	; (80010ec <MC_AcknowledgeFaultMotor1+0xc>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f000 f897 	bl	8001218 <MCI_FaultAcknowledged>
}
 80010ea:	bd10      	pop	{r4, pc}
 80010ec:	20000650 	.word	0x20000650

080010f0 <MC_GetCurrentFaultsMotor1>:
 *
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
 80010f0:	b510      	push	{r4, lr}
  return (MCI_GetCurrentFaults(pMCI[M1]));
 80010f2:	4b02      	ldr	r3, [pc, #8]	; (80010fc <MC_GetCurrentFaultsMotor1+0xc>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f000 f857 	bl	80011a8 <MCI_GetCurrentFaults>
}
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	20000650 	.word	0x20000650

08001100 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 8001100:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 8001102:	4b02      	ldr	r3, [pc, #8]	; (800110c <MC_GetSTMStateMotor1+0xc>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f000 f84b 	bl	80011a0 <MCI_GetSTMState>
}
 800110a:	bd10      	pop	{r4, pc}
 800110c:	20000650 	.word	0x20000650

08001110 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)

08001114 <MC_APP_PostMediumFrequencyHook_M1>:
 8001114:	4770      	bx	lr
 8001116:	46c0      	nop			; (mov r8, r8)

08001118 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pSixStepVars = pSixStepVars;
    pHandle->pPWM = pPWMHandle;
 8001118:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800111a:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 800111c:	6001      	str	r1, [r0, #0]
    pHandle->pSixStepVars = pSixStepVars;
 800111e:	6042      	str	r2, [r0, #4]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001120:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001122:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 8001124:	6103      	str	r3, [r0, #16]
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001126:	6143      	str	r3, [r0, #20]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
    pHandle->PastFaults = MC_NO_FAULTS;
 8001128:	8303      	strh	r3, [r0, #24]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800112a:	7683      	strb	r3, [r0, #26]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800112c:	4770      	bx	lr
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <MCI_ExecSpeedRamp>:
  * function.
  *
  * @sa MCI_ExecSpeedRamp_F
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle, int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001130:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 8001132:	240e      	movs	r4, #14
 8001134:	5f03      	ldrsh	r3, [r0, r4]
 8001136:	434b      	muls	r3, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	db06      	blt.n	800114a <MCI_ExecSpeedRamp+0x1a>
    {
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800113c:	2301      	movs	r3, #1
 800113e:	7303      	strb	r3, [r0, #12]
      pHandle->hFinalSpeed = hFinalSpeed;
      pHandle->hDurationms = hDurationms;
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <MCI_ExecSpeedRamp+0x20>)
      pHandle->hFinalSpeed = hFinalSpeed;
 8001142:	81c1      	strh	r1, [r0, #14]
      pHandle->hDurationms = hDurationms;
 8001144:	8242      	strh	r2, [r0, #18]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001146:	8343      	strh	r3, [r0, #26]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001148:	bd10      	pop	{r4, pc}
      pHandle->DirectCommand = MCI_STOP;
 800114a:	2305      	movs	r3, #5
 800114c:	7503      	strb	r3, [r0, #20]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 800114e:	e7f7      	b.n	8001140 <MCI_ExecSpeedRamp+0x10>
 8001150:	00000301 	.word	0x00000301

08001154 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001154:	8ac3      	ldrh	r3, [r0, #22]
 8001156:	430b      	orrs	r3, r1
 8001158:	4393      	bics	r3, r2
 800115a:	82c3      	strh	r3, [r0, #22]
    pHandle->PastFaults |= hSetErrors;
 800115c:	8b03      	ldrh	r3, [r0, #24]
 800115e:	4319      	orrs	r1, r3
 8001160:	8301      	strh	r1, [r0, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001162:	4770      	bx	lr

08001164 <MCI_ExecBufferedCommands>:
  *         and eventually to execute the buffered command if the condition
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8001164:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001166:	7e83      	ldrb	r3, [r0, #26]
{
 8001168:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800116a:	2b01      	cmp	r3, #1
 800116c:	d000      	beq.n	8001170 <MCI_ExecBufferedCommands+0xc>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800116e:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 8001170:	7b03      	ldrb	r3, [r0, #12]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <MCI_ExecBufferedCommands+0x18>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001176:	2303      	movs	r3, #3
 8001178:	76a3      	strb	r3, [r4, #26]
}
 800117a:	e7f8      	b.n	800116e <MCI_ExecBufferedCommands+0xa>
          pHandle->pSixStepVars->bDriveInput = INTERNAL;
 800117c:	2200      	movs	r2, #0
 800117e:	6843      	ldr	r3, [r0, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001180:	2103      	movs	r1, #3
          pHandle->pSixStepVars->bDriveInput = INTERNAL;
 8001182:	711a      	strb	r2, [r3, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001184:	6800      	ldr	r0, [r0, #0]
 8001186:	f004 ff39 	bl	8005ffc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800118a:	8a62      	ldrh	r2, [r4, #18]
 800118c:	230e      	movs	r3, #14
 800118e:	5ee1      	ldrsh	r1, [r4, r3]
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f004 ff39 	bl	8006008 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001196:	2800      	cmp	r0, #0
 8001198:	d0ed      	beq.n	8001176 <MCI_ExecBufferedCommands+0x12>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800119a:	2302      	movs	r3, #2
 800119c:	76a3      	strb	r3, [r4, #26]
 800119e:	e7e6      	b.n	800116e <MCI_ExecBufferedCommands+0xa>

080011a0 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 80011a0:	7d40      	ldrb	r0, [r0, #21]
#endif
}
 80011a2:	4770      	bx	lr

080011a4 <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 80011a4:	8b00      	ldrh	r0, [r0, #24]
#endif
}
 80011a6:	4770      	bx	lr

080011a8 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 80011a8:	8ac0      	ldrh	r0, [r0, #22]
#endif
}
 80011aa:	4770      	bx	lr

080011ac <MCI_StartMotor>:
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80011b0:	f7ff fff6 	bl	80011a0 <MCI_GetSTMState>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d001      	beq.n	80011bc <MCI_StartMotor+0x10>
  bool retVal = false;
 80011b8:	2000      	movs	r0, #0
}
 80011ba:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011bc:	0020      	movs	r0, r4
 80011be:	f7ff fff1 	bl	80011a4 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1f8      	bne.n	80011b8 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011c6:	0020      	movs	r0, r4
 80011c8:	f7ff ffee 	bl	80011a8 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d1f3      	bne.n	80011b8 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 80011d0:	2301      	movs	r3, #1
      retVal = true;
 80011d2:	3001      	adds	r0, #1
      pHandle->DirectCommand = MCI_START;
 80011d4:	7523      	strb	r3, [r4, #20]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80011d6:	76a3      	strb	r3, [r4, #26]
      retVal = true;
 80011d8:	e7ef      	b.n	80011ba <MCI_StartMotor+0xe>
 80011da:	46c0      	nop			; (mov r8, r8)

080011dc <MCI_StopMotor>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 80011e0:	f7ff ffde 	bl	80011a0 <MCI_GetSTMState>
      status = false;
 80011e4:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d004      	beq.n	80011f4 <MCI_StopMotor+0x18>
 80011ea:	0003      	movs	r3, r0
 80011ec:	3b0c      	subs	r3, #12
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	4193      	sbcs	r3, r2
 80011f2:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80011f4:	0020      	movs	r0, r4
 80011f6:	f7ff ffd5 	bl	80011a4 <MCI_GetOccurredFaults>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d002      	beq.n	8001204 <MCI_StopMotor+0x28>
  bool retVal = false;
 80011fe:	2500      	movs	r5, #0
}
 8001200:	0028      	movs	r0, r5
 8001202:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001204:	0020      	movs	r0, r4
 8001206:	f7ff ffcf 	bl	80011a8 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800120a:	2800      	cmp	r0, #0
 800120c:	d1f7      	bne.n	80011fe <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800120e:	2d00      	cmp	r5, #0
 8001210:	d0f5      	beq.n	80011fe <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 8001212:	2305      	movs	r3, #5
 8001214:	7523      	strb	r3, [r4, #20]
      retVal = true;
 8001216:	e7f3      	b.n	8001200 <MCI_StopMotor+0x24>

08001218 <MCI_FaultAcknowledged>:
{
 8001218:	b510      	push	{r4, lr}
 800121a:	0004      	movs	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800121c:	f7ff ffc0 	bl	80011a0 <MCI_GetSTMState>
 8001220:	280b      	cmp	r0, #11
 8001222:	d001      	beq.n	8001228 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001224:	2000      	movs	r0, #0
}
 8001226:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001228:	0020      	movs	r0, r4
 800122a:	f7ff ffbd 	bl	80011a8 <MCI_GetCurrentFaults>
 800122e:	2800      	cmp	r0, #0
 8001230:	d1f8      	bne.n	8001224 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001232:	2302      	movs	r3, #2
      pHandle->PastFaults = MC_NO_FAULTS;
 8001234:	8320      	strh	r0, [r4, #24]
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001236:	7523      	strb	r3, [r4, #20]
      reVal = true;
 8001238:	3001      	adds	r0, #1
 800123a:	e7f4      	b.n	8001226 <MCI_FaultAcknowledged+0xe>

0800123c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800123c:	8b03      	ldrh	r3, [r0, #24]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800123e:	8ac0      	ldrh	r0, [r0, #22]
 8001240:	0400      	lsls	r0, r0, #16
 8001242:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001244:	4770      	bx	lr
 8001246:	46c0      	nop			; (mov r8, r8)

08001248 <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8001248:	7ec0      	ldrb	r0, [r0, #27]
#endif
}
 800124a:	4770      	bx	lr

0800124c <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 800124c:	7b02      	ldrb	r2, [r0, #12]
{
 800124e:	0003      	movs	r3, r0
  int16_t retVal = 1;
 8001250:	2001      	movs	r0, #1
    switch (pHandle->lastCommand)
 8001252:	2a01      	cmp	r2, #1
 8001254:	d106      	bne.n	8001264 <MCI_GetImposedMotorDirection+0x18>
    {
      case MCI_CMD_EXECSPEEDRAMP:
      {
        if (pHandle->hFinalSpeed < 0)
 8001256:	200e      	movs	r0, #14
 8001258:	5e18      	ldrsh	r0, [r3, r0]
        {
          retVal = -1;
 800125a:	2302      	movs	r3, #2
 800125c:	43c0      	mvns	r0, r0
 800125e:	17c0      	asrs	r0, r0, #31
 8001260:	4018      	ands	r0, r3
 8001262:	3801      	subs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8001264:	4770      	bx	lr
 8001266:	46c0      	nop			; (mov r8, r8)

08001268 <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 8001268:	230e      	movs	r3, #14
 800126a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800126c:	4770      	bx	lr
 800126e:	46c0      	nop			; (mov r8, r8)

08001270 <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 8001270:	8a40      	ldrh	r0, [r0, #18]
#endif
}
 8001272:	4770      	bx	lr

08001274 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 8001274:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001276:	6800      	ldr	r0, [r0, #0]
 8001278:	f004 ff0a 	bl	8006090 <STC_StopRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800127c:	bd10      	pop	{r4, pc}
 800127e:	46c0      	nop			; (mov r8, r8)

08001280 <MCI_GetSpdSensorReliability>:
  * @retval bool It returns true if the speed sensor utilized for reference
  *         frame transformation and (in speed control mode) for speed
  *         regulation is reliable, false otherwise
  */
__weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
{
 8001280:	b510      	push	{r4, lr}
    status = false;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001282:	6800      	ldr	r0, [r0, #0]
 8001284:	f004 fe92 	bl	8005fac <STC_GetSpeedSensor>
    status = SPD_Check(SpeedSensor);
 8001288:	f004 ff6a 	bl	8006160 <SPD_Check>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif

  return (status);
}
 800128c:	bd10      	pop	{r4, pc}
 800128e:	46c0      	nop			; (mov r8, r8)

08001290 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001290:	b510      	push	{r4, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001292:	6800      	ldr	r0, [r0, #0]
 8001294:	f004 fe8a 	bl	8005fac <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001298:	f004 ff5a 	bl	8006150 <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 800129c:	bd10      	pop	{r4, pc}
 800129e:	46c0      	nop			; (mov r8, r8)

080012a0 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 80012a0:	b510      	push	{r4, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80012a2:	6800      	ldr	r0, [r0, #0]
 80012a4:	f004 fe98 	bl	8005fd8 <STC_GetMecSpeedRefUnit>
#endif
}
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)

080012ac <SixStep_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_Clear(uint8_t bMotor)
{
 80012ac:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN SixStep_Clear 0 */

  /* USER CODE END SixStep_Clear 0 */

  STC_Clear(pSTC[bMotor]);
 80012ae:	4d12      	ldr	r5, [pc, #72]	; (80012f8 <SixStep_Clear+0x4c>)
 80012b0:	0086      	lsls	r6, r0, #2
{
 80012b2:	0004      	movs	r4, r0
  STC_Clear(pSTC[bMotor]);
 80012b4:	5970      	ldr	r0, [r6, r5]
 80012b6:	f004 fe7f 	bl	8005fb8 <STC_Clear>
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
 80012ba:	5970      	ldr	r0, [r6, r5]
 80012bc:	f004 fe98 	bl	8005ff0 <STC_GetDutyCycleRef>
 80012c0:	4d0e      	ldr	r5, [pc, #56]	; (80012fc <SixStep_Clear+0x50>)
 80012c2:	00e4      	lsls	r4, r4, #3
 80012c4:	5328      	strh	r0, [r5, r4]
  BADC_Stop( &Bemf_ADC_M1 );
 80012c6:	4c0e      	ldr	r4, [pc, #56]	; (8001300 <SixStep_Clear+0x54>)
 80012c8:	0020      	movs	r0, r4
 80012ca:	f003 fdef 	bl	8004eac <BADC_Stop>
  BADC_Clear( &Bemf_ADC_M1 );
 80012ce:	0020      	movs	r0, r4
 80012d0:	f003 fd2c 	bl	8004d2c <BADC_Clear>
  BADC_SpeedMeasureOff(&Bemf_ADC_M1);
 80012d4:	0020      	movs	r0, r4
 80012d6:	f003 fe07 	bl	8004ee8 <BADC_SpeedMeasureOff>
  #if ( PID_SPEED_INTEGRAL_INIT_DIV == 0 )
    PID_SetIntegralTerm(&PIDSpeedHandle_M1, 0);
  #else
    PID_SetIntegralTerm(&PIDSpeedHandle_M1,
         (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 80012da:	882c      	ldrh	r4, [r5, #0]
 80012dc:	4d09      	ldr	r5, [pc, #36]	; (8001304 <SixStep_Clear+0x58>)
 80012de:	0028      	movs	r0, r5
 80012e0:	f004 f8c4 	bl	800546c <PID_GetKIDivisor>
 80012e4:	b201      	sxth	r1, r0
    PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80012e6:	4361      	muls	r1, r4
 80012e8:	0028      	movs	r0, r5
 80012ea:	f004 f8bd 	bl	8005468 <PID_SetIntegralTerm>
            / PID_SPEED_INTEGRAL_INIT_DIV));
  #endif
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SixStep_Clear+0x5c>)
 80012f0:	58f0      	ldr	r0, [r6, r3]
 80012f2:	f004 f903 	bl	80054fc <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN SixStep_Clear 1 */

  /* USER CODE END SixStep_Clear 1 */
}
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	20000284 	.word	0x20000284
 80012fc:	20000528 	.word	0x20000528
 8001300:	20000000 	.word	0x20000000
 8001304:	20000120 	.word	0x20000120
 8001308:	20000538 	.word	0x20000538

0800130c <MCboot>:
{
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	46ce      	mov	lr, r9
 8001310:	4647      	mov	r7, r8
 8001312:	0004      	movs	r4, r0
 8001314:	b580      	push	{r7, lr}
  if (MC_NULL == pMCIList)
 8001316:	2800      	cmp	r0, #0
 8001318:	d04a      	beq.n	80013b0 <MCboot+0xa4>
    bMCBootCompleted = (uint8_t )0;
 800131a:	2300      	movs	r3, #0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800131c:	4d26      	ldr	r5, [pc, #152]	; (80013b8 <MCboot+0xac>)
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <MCboot+0xb0>)
    bMCBootCompleted = (uint8_t )0;
 8001320:	4e27      	ldr	r6, [pc, #156]	; (80013c0 <MCboot+0xb4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001322:	6028      	str	r0, [r5, #0]
    bMCBootCompleted = (uint8_t )0;
 8001324:	7033      	strb	r3, [r6, #0]
    SixPwm_Init(&PWM_Handle_M1);
 8001326:	f004 f96b 	bl	8005600 <SixPwm_Init>
    ASPEP_start(&aspepOverUartA);
 800132a:	4826      	ldr	r0, [pc, #152]	; (80013c4 <MCboot+0xb8>)
 800132c:	f7ff f88c 	bl	8000448 <ASPEP_start>
    CRM_Init(&CurrentRef_M1);
 8001330:	4825      	ldr	r0, [pc, #148]	; (80013c8 <MCboot+0xbc>)
 8001332:	f003 fbfd 	bl	8004b30 <CRM_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MCboot+0xc0>)
 8001338:	0018      	movs	r0, r3
 800133a:	4698      	mov	r8, r3
 800133c:	f004 f880 	bl	8005440 <PID_HandleInit>
    BADC_Init (&Bemf_ADC_M1);
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MCboot+0xc4>)
 8001342:	4699      	mov	r9, r3
 8001344:	0018      	movs	r0, r3
 8001346:	f003 fc3b 	bl	8004bc0 <BADC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 800134a:	4f22      	ldr	r7, [pc, #136]	; (80013d4 <MCboot+0xc8>)
 800134c:	4641      	mov	r1, r8
 800134e:	464a      	mov	r2, r9
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f004 fe13 	bl	8005f7c <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MCboot+0xcc>)
 8001358:	4698      	mov	r8, r3
 800135a:	0018      	movs	r0, r3
 800135c:	f004 ff46 	bl	80061ec <VSS_Init>
    RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1);
 8001360:	4642      	mov	r2, r8
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <MCboot+0xd0>)
 8001366:	f004 fd25 	bl	8005db4 <RUC_Init>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800136a:	481d      	ldr	r0, [pc, #116]	; (80013e0 <MCboot+0xd4>)
 800136c:	f000 ff80 	bl	8002270 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001370:	481c      	ldr	r0, [pc, #112]	; (80013e4 <MCboot+0xd8>)
 8001372:	f004 fcc1 	bl	8005cf8 <RVBS_Init>
    NTC_Init(&TempSensor_M1);
 8001376:	481c      	ldr	r0, [pc, #112]	; (80013e8 <MCboot+0xdc>)
 8001378:	f004 f846 	bl	8005408 <NTC_Init>
    SixStep_Clear(M1);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ff95 	bl	80012ac <SixStep_Clear>
    SixStepVars[M1].bDriveInput = EXTERNAL;
 8001382:	2301      	movs	r3, #1
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <MCboot+0xe0>)
 8001386:	4698      	mov	r8, r3
 8001388:	7113      	strb	r3, [r2, #4]
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	4d18      	ldr	r5, [pc, #96]	; (80013f0 <MCboot+0xe4>)
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	0028      	movs	r0, r5
 8001392:	f7ff fec1 	bl	8001118 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f004 fec4 	bl	8006124 <STC_GetMecSpeedRefUnitDefault>
 800139c:	2200      	movs	r2, #0
 800139e:	0001      	movs	r1, r0
 80013a0:	0028      	movs	r0, r5
 80013a2:	f7ff fec5 	bl	8001130 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80013a6:	6025      	str	r5, [r4, #0]
    MC_APP_BootHook();
 80013a8:	f7ff feb2 	bl	8001110 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80013ac:	4643      	mov	r3, r8
 80013ae:	7033      	strb	r3, [r6, #0]
}
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b8:	20000538 	.word	0x20000538
 80013bc:	2000014c 	.word	0x2000014c
 80013c0:	20000530 	.word	0x20000530
 80013c4:	200002b4 	.word	0x200002b4
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000120 	.word	0x20000120
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000284 	.word	0x20000284
 80013d8:	2000024c 	.word	0x2000024c
 80013dc:	20000198 	.word	0x20000198
 80013e0:	2000023c 	.word	0x2000023c
 80013e4:	200000f8 	.word	0x200000f8
 80013e8:	20000220 	.word	0x20000220
 80013ec:	20000528 	.word	0x20000528
 80013f0:	200004f8 	.word	0x200004f8

080013f4 <SixStep_InitAdditionalMethods>:
__weak void SixStep_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80013f4:	4770      	bx	lr
 80013f6:	46c0      	nop			; (mov r8, r8)

080013f8 <SixStep_CalcSpeedRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_CalcSpeedRef(uint8_t bMotor)
{
 80013f8:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(SixStepVars[bMotor].bDriveInput == INTERNAL)
 80013fa:	4d07      	ldr	r5, [pc, #28]	; (8001418 <SixStep_CalcSpeedRef+0x20>)
 80013fc:	00c4      	lsls	r4, r0, #3
 80013fe:	192b      	adds	r3, r5, r4
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d000      	beq.n	8001408 <SixStep_CalcSpeedRef+0x10>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001406:	bd70      	pop	{r4, r5, r6, pc}
    SixStepVars[bMotor].DutyCycleRef = STC_CalcSpeedReference(pSTC[bMotor]);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <SixStep_CalcSpeedRef+0x24>)
 800140a:	0080      	lsls	r0, r0, #2
 800140c:	58c0      	ldr	r0, [r0, r3]
 800140e:	f004 fe45 	bl	800609c <STC_CalcSpeedReference>
 8001412:	5328      	strh	r0, [r5, r4]
}
 8001414:	e7f7      	b.n	8001406 <SixStep_CalcSpeedRef+0xe>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	20000528 	.word	0x20000528
 800141c:	20000284 	.word	0x20000284

08001420 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001422:	8018      	strh	r0, [r3, #0]
}
 8001424:	4770      	bx	lr
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000532 	.word	0x20000532

0800142c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 800142c:	4b02      	ldr	r3, [pc, #8]	; (8001438 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 800142e:	8818      	ldrh	r0, [r3, #0]
 8001430:	4243      	negs	r3, r0
 8001432:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001434:	b2c0      	uxtb	r0, r0
}
 8001436:	4770      	bx	lr
 8001438:	20000532 	.word	0x20000532

0800143c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <TSK_SetStopPermanencyTimeM1+0x8>)
 800143e:	8018      	strh	r0, [r3, #0]
}
 8001440:	4770      	bx	lr
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	20000536 	.word	0x20000536

08001448 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 800144a:	8818      	ldrh	r0, [r3, #0]
 800144c:	4243      	negs	r3, r0
 800144e:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001450:	b2c0      	uxtb	r0, r0
}
 8001452:	4770      	bx	lr
 8001454:	20000536 	.word	0x20000536

08001458 <TSK_MediumFrequencyTaskM1>:
  int16_t wAux = 0;
 8001458:	2300      	movs	r3, #0
{
 800145a:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 800145c:	4d92      	ldr	r5, [pc, #584]	; (80016a8 <TSK_MediumFrequencyTaskM1+0x250>)
{
 800145e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001460:	a901      	add	r1, sp, #4
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001462:	0028      	movs	r0, r5
  int16_t wAux = 0;
 8001464:	800b      	strh	r3, [r1, #0]
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001466:	f003 fe2d 	bl	80050c4 <BADC_CalcAvrgMecSpeedUnit>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800146a:	4c90      	ldr	r4, [pc, #576]	; (80016ac <TSK_MediumFrequencyTaskM1+0x254>)
 800146c:	0020      	movs	r0, r4
 800146e:	f7ff fe9b 	bl	80011a8 <MCI_GetCurrentFaults>
 8001472:	2800      	cmp	r0, #0
 8001474:	d003      	beq.n	800147e <TSK_MediumFrequencyTaskM1+0x26>
    Mci[M1].State = FAULT_NOW;
 8001476:	230a      	movs	r3, #10
 8001478:	7563      	strb	r3, [r4, #21]
}
 800147a:	b003      	add	sp, #12
 800147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800147e:	0020      	movs	r0, r4
 8001480:	f7ff fe90 	bl	80011a4 <MCI_GetOccurredFaults>
 8001484:	2800      	cmp	r0, #0
 8001486:	d106      	bne.n	8001496 <TSK_MediumFrequencyTaskM1+0x3e>
      switch (Mci[M1].State)
 8001488:	7d63      	ldrb	r3, [r4, #21]
 800148a:	2b13      	cmp	r3, #19
 800148c:	d8f5      	bhi.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
 800148e:	4a88      	ldr	r2, [pc, #544]	; (80016b0 <TSK_MediumFrequencyTaskM1+0x258>)
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	58d3      	ldr	r3, [r2, r3]
 8001494:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8001496:	230b      	movs	r3, #11
 8001498:	7563      	strb	r3, [r4, #21]
 800149a:	e7ee      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800149c:	7d23      	ldrb	r3, [r4, #20]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d100      	bne.n	80014a4 <TSK_MediumFrequencyTaskM1+0x4c>
 80014a2:	e0ae      	b.n	8001602 <TSK_MediumFrequencyTaskM1+0x1aa>
            if (! RUC_Exec(&RevUpControlM1))
 80014a4:	4883      	ldr	r0, [pc, #524]	; (80016b4 <TSK_MediumFrequencyTaskM1+0x25c>)
 80014a6:	f004 fd09 	bl	8005ebc <RUC_Exec>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d000      	beq.n	80014b0 <TSK_MediumFrequencyTaskM1+0x58>
 80014ae:	e0c6      	b.n	800163e <TSK_MediumFrequencyTaskM1+0x1e6>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2110      	movs	r1, #16
 80014b4:	0020      	movs	r0, r4
 80014b6:	f7ff fe4d 	bl	8001154 <MCI_FaultProcessing>
 80014ba:	e7de      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80014bc:	7d23      	ldrb	r3, [r4, #20]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d100      	bne.n	80014c4 <TSK_MediumFrequencyTaskM1+0x6c>
 80014c2:	e09e      	b.n	8001602 <TSK_MediumFrequencyTaskM1+0x1aa>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80014c4:	f7ff ffb2 	bl	800142c <TSK_ChargeBootCapDelayHasElapsedM1>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d0d6      	beq.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
              SixPwm_SwitchOffPWM(pwmcHandle[M1]);
 80014cc:	4e7a      	ldr	r6, [pc, #488]	; (80016b8 <TSK_MediumFrequencyTaskM1+0x260>)
 80014ce:	6830      	ldr	r0, [r6, #0]
 80014d0:	f004 fbb2 	bl	8005c38 <SixPwm_SwitchOffPWM>
              SixStepVars[M1].bDriveInput = EXTERNAL;
 80014d4:	2201      	movs	r2, #1
 80014d6:	4b79      	ldr	r3, [pc, #484]	; (80016bc <TSK_MediumFrequencyTaskM1+0x264>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014d8:	4f79      	ldr	r7, [pc, #484]	; (80016c0 <TSK_MediumFrequencyTaskM1+0x268>)
              SixStepVars[M1].bDriveInput = EXTERNAL;
 80014da:	711a      	strb	r2, [r3, #4]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014dc:	4979      	ldr	r1, [pc, #484]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x26c>)
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f004 fd60 	bl	8005fa4 <STC_SetSpeedSensor>
              BADC_Clear(&Bemf_ADC_M1);
 80014e4:	0028      	movs	r0, r5
 80014e6:	f003 fc21 	bl	8004d2c <BADC_Clear>
              SixStep_Clear( M1 );
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff fede 	bl	80012ac <SixStep_Clear>
              BADC_SetDirection(&Bemf_ADC_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 80014f0:	0020      	movs	r0, r4
 80014f2:	f7ff feab 	bl	800124c <MCI_GetImposedMotorDirection>
 80014f6:	b2c1      	uxtb	r1, r0
 80014f8:	0028      	movs	r0, r5
 80014fa:	f003 fe9b 	bl	8005234 <BADC_SetDirection>
              BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 80014fe:	0028      	movs	r0, r5
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4971      	ldr	r1, [pc, #452]	; (80016c8 <TSK_MediumFrequencyTaskM1+0x270>)
 8001504:	f003 fcf8 	bl	8004ef8 <BADC_SetSamplingPoint>
                Mci[M1].State = START;
 8001508:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800150a:	6830      	ldr	r0, [r6, #0]
                Mci[M1].State = START;
 800150c:	7563      	strb	r3, [r4, #21]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800150e:	f003 fff9 	bl	8005504 <PWMC_SwitchOnPWM>
 8001512:	e7b2      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001514:	7d23      	ldrb	r3, [r4, #20]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d1af      	bne.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800151a:	2300      	movs	r3, #0
 800151c:	82a3      	strh	r3, [r4, #20]
 800151e:	e7ac      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001520:	f7ff ff92 	bl	8001448 <TSK_StopPermanencyTimeHasElapsedM1>
 8001524:	2800      	cmp	r0, #0
 8001526:	d0a8      	beq.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001528:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <TSK_MediumFrequencyTaskM1+0x268>)
 800152a:	4e66      	ldr	r6, [pc, #408]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x26c>)
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	0031      	movs	r1, r6
 8001530:	f004 fd38 	bl	8005fa4 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001534:	0030      	movs	r0, r6
 8001536:	f004 fe4b 	bl	80061d0 <VSS_Clear>
            BADC_Clear(&Bemf_ADC_M1);
 800153a:	0028      	movs	r0, r5
 800153c:	f003 fbf6 	bl	8004d2c <BADC_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001540:	2300      	movs	r3, #0
 8001542:	82a3      	strh	r3, [r4, #20]
 8001544:	e799      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001546:	7d23      	ldrb	r3, [r4, #20]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d05a      	beq.n	8001602 <TSK_MediumFrequencyTaskM1+0x1aa>
            MCI_ExecBufferedCommands(&Mci[M1]);
 800154c:	0020      	movs	r0, r4
 800154e:	f7ff fe09 	bl	8001164 <MCI_ExecBufferedCommands>
            SixStep_CalcSpeedRef( M1 );
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff50 	bl	80013f8 <SixStep_CalcSpeedRef>
            BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <TSK_MediumFrequencyTaskM1+0x268>)
 800155a:	0028      	movs	r0, r5
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	495a      	ldr	r1, [pc, #360]	; (80016c8 <TSK_MediumFrequencyTaskM1+0x270>)
 8001560:	f003 fcca 	bl	8004ef8 <BADC_SetSamplingPoint>
            (void) BADC_CalcRunDemagTime (&Bemf_ADC_M1);
 8001564:	0028      	movs	r0, r5
 8001566:	f003 ff13 	bl	8005390 <BADC_CalcRunDemagTime>
            PWMC_ForceFastDemagTime (pwmcHandle[M1], Bemf_ADC_M1.DemagCounterThreshold);
 800156a:	23ee      	movs	r3, #238	; 0xee
 800156c:	5ae9      	ldrh	r1, [r5, r3]
 800156e:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <TSK_MediumFrequencyTaskM1+0x260>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f003 ffd1 	bl	8005518 <PWMC_ForceFastDemagTime>
 8001576:	e780      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001578:	7d23      	ldrb	r3, [r4, #20]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d041      	beq.n	8001602 <TSK_MediumFrequencyTaskM1+0x1aa>
            if(! RUC_Exec(&RevUpControlM1))
 800157e:	4e4d      	ldr	r6, [pc, #308]	; (80016b4 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001580:	0030      	movs	r0, r6
 8001582:	f004 fc9b 	bl	8005ebc <RUC_Exec>
 8001586:	2800      	cmp	r0, #0
 8001588:	d149      	bne.n	800161e <TSK_MediumFrequencyTaskM1+0x1c6>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2110      	movs	r1, #16
 800158e:	0020      	movs	r0, r4
 8001590:	f7ff fde0 	bl	8001154 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001594:	466b      	mov	r3, sp
 8001596:	4f4b      	ldr	r7, [pc, #300]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001598:	1d99      	adds	r1, r3, #6
 800159a:	0038      	movs	r0, r7
 800159c:	f004 fe82 	bl	80062a4 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 80015a0:	0030      	movs	r0, r6
 80015a2:	f004 fcd5 	bl	8005f50 <RUC_FirstAccelerationStageReached>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d100      	bne.n	80015ac <TSK_MediumFrequencyTaskM1+0x154>
 80015aa:	e766      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
             ObserverConverged = BADC_IsObserverConverged( &Bemf_ADC_M1);
 80015ac:	0028      	movs	r0, r5
 80015ae:	f003 fe47 	bl	8005240 <BADC_IsObserverConverged>
 80015b2:	0005      	movs	r5, r0
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 80015b4:	0001      	movs	r1, r0
 80015b6:	0038      	movs	r0, r7
 80015b8:	f004 ff12 	bl	80063e0 <VSS_SetStartTransition>
            if (ObserverConverged)
 80015bc:	2d00      	cmp	r5, #0
 80015be:	d100      	bne.n	80015c2 <TSK_MediumFrequencyTaskM1+0x16a>
 80015c0:	e75b      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
              Mci[M1].State = SWITCH_OVER;
 80015c2:	2313      	movs	r3, #19
 80015c4:	7563      	strb	r3, [r4, #21]
 80015c6:	e758      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80015c8:	2202      	movs	r2, #2
 80015ca:	7d23      	ldrb	r3, [r4, #20]
 80015cc:	4393      	bics	r3, r2
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d000      	beq.n	80015d4 <TSK_MediumFrequencyTaskM1+0x17c>
 80015d2:	e752      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80015d4:	0020      	movs	r0, r4
 80015d6:	f7ff fe39 	bl	800124c <MCI_GetImposedMotorDirection>
 80015da:	4d36      	ldr	r5, [pc, #216]	; (80016b4 <TSK_MediumFrequencyTaskM1+0x25c>)
 80015dc:	0001      	movs	r1, r0
 80015de:	0028      	movs	r0, r5
 80015e0:	f004 fc1a 	bl	8005e18 <RUC_Clear>
              RUC_UpdatePulse(&RevUpControlM1, &BusVoltageSensor_M1._Super);
 80015e4:	0028      	movs	r0, r5
 80015e6:	4939      	ldr	r1, [pc, #228]	; (80016cc <TSK_MediumFrequencyTaskM1+0x274>)
 80015e8:	f004 fc5a 	bl	8005ea0 <RUC_UpdatePulse>
              SixPwm_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <TSK_MediumFrequencyTaskM1+0x260>)
 80015ee:	2100      	movs	r1, #0
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f004 fab9 	bl	8005b68 <SixPwm_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80015f6:	2014      	movs	r0, #20
 80015f8:	f7ff ff12 	bl	8001420 <TSK_SetChargeBootCapDelayM1>
              Mci[M1].State = CHARGE_BOOT_CAP;
 80015fc:	2310      	movs	r3, #16
 80015fe:	7563      	strb	r3, [r4, #21]
 8001600:	e73b      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
    SixPwm_SwitchOffPWM(pwmcHandle[motor]);
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <TSK_MediumFrequencyTaskM1+0x260>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f004 fb17 	bl	8005c38 <SixPwm_SwitchOffPWM>
  SixStep_Clear(motor);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fe4e 	bl	80012ac <SixStep_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001610:	20c8      	movs	r0, #200	; 0xc8
 8001612:	0080      	lsls	r0, r0, #2
 8001614:	f7ff ff12 	bl	800143c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001618:	2308      	movs	r3, #8
 800161a:	7563      	strb	r3, [r4, #21]
}
 800161c:	e72d      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
            (void) BADC_CalcRevUpDemagTime (&Bemf_ADC_M1);
 800161e:	0028      	movs	r0, r5
 8001620:	f003 fe94 	bl	800534c <BADC_CalcRevUpDemagTime>
            PWMC_ForceFastDemagTime (pwmcHandle[M1], Bemf_ADC_M1.DemagCounterThreshold);
 8001624:	23ee      	movs	r3, #238	; 0xee
 8001626:	5ae9      	ldrh	r1, [r5, r3]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <TSK_MediumFrequencyTaskM1+0x260>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f003 ff74 	bl	8005518 <PWMC_ForceFastDemagTime>
            SixStepVars[M1].DutyCycleRef = STC_CalcSpeedReference( pSTC[M1] );
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <TSK_MediumFrequencyTaskM1+0x268>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f004 fd32 	bl	800609c <STC_CalcSpeedReference>
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <TSK_MediumFrequencyTaskM1+0x264>)
 800163a:	8018      	strh	r0, [r3, #0]
 800163c:	e7aa      	b.n	8001594 <TSK_MediumFrequencyTaskM1+0x13c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800163e:	466b      	mov	r3, sp
 8001640:	4e20      	ldr	r6, [pc, #128]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001642:	1d99      	adds	r1, r3, #6
 8001644:	0030      	movs	r0, r6
 8001646:	f004 fe2d 	bl	80062a4 <VSS_CalcAvrgMecSpeedUnit>
 800164a:	0007      	movs	r7, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 800164c:	0030      	movs	r0, r6
 800164e:	f004 fed7 	bl	8006400 <VSS_TransitionEnded>
              if (true ==  LoopClosed)
 8001652:	2f00      	cmp	r7, #0
 8001654:	d102      	bne.n	800165c <TSK_MediumFrequencyTaskM1+0x204>
 8001656:	2800      	cmp	r0, #0
 8001658:	d100      	bne.n	800165c <TSK_MediumFrequencyTaskM1+0x204>
 800165a:	e70e      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 800165c:	4f1c      	ldr	r7, [pc, #112]	; (80016d0 <TSK_MediumFrequencyTaskM1+0x278>)
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <TSK_MediumFrequencyTaskM1+0x264>)
 8001660:	0038      	movs	r0, r7
 8001662:	881e      	ldrh	r6, [r3, #0]
 8001664:	f003 ff02 	bl	800546c <PID_GetKIDivisor>
 8001668:	b201      	sxth	r1, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 800166a:	4371      	muls	r1, r6
 800166c:	0038      	movs	r0, r7
 800166e:	f003 fefb 	bl	8005468 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 8001672:	4e13      	ldr	r6, [pc, #76]	; (80016c0 <TSK_MediumFrequencyTaskM1+0x268>)
 8001674:	0029      	movs	r1, r5
 8001676:	6830      	ldr	r0, [r6, #0]
 8001678:	f004 fc94 	bl	8005fa4 <STC_SetSpeedSensor>
                SixStep_InitAdditionalMethods(M1);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff feb9 	bl	80013f4 <SixStep_InitAdditionalMethods>
                SixStep_CalcSpeedRef(M1);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff feb8 	bl	80013f8 <SixStep_CalcSpeedRef>
                BADC_SetLoopClosed(&Bemf_ADC_M1);
 8001688:	0028      	movs	r0, r5
 800168a:	f003 fe9f 	bl	80053cc <BADC_SetLoopClosed>
                BADC_SpeedMeasureOn(&Bemf_ADC_M1);
 800168e:	0028      	movs	r0, r5
 8001690:	f003 fc20 	bl	8004ed4 <BADC_SpeedMeasureOn>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001694:	6830      	ldr	r0, [r6, #0]
 8001696:	f004 fd4d 	bl	8006134 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 800169a:	0020      	movs	r0, r4
 800169c:	f7ff fd62 	bl	8001164 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 80016a0:	2306      	movs	r3, #6
 80016a2:	7563      	strb	r3, [r4, #21]
 80016a4:	e6e9      	b.n	800147a <TSK_MediumFrequencyTaskM1+0x22>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000000 	.word	0x20000000
 80016ac:	200004f8 	.word	0x200004f8
 80016b0:	08006608 	.word	0x08006608
 80016b4:	20000198 	.word	0x20000198
 80016b8:	20000538 	.word	0x20000538
 80016bc:	20000528 	.word	0x20000528
 80016c0:	20000284 	.word	0x20000284
 80016c4:	2000024c 	.word	0x2000024c
 80016c8:	2000014c 	.word	0x2000014c
 80016cc:	200000f8 	.word	0x200000f8
 80016d0:	20000120 	.word	0x20000120

080016d4 <MC_Scheduler>:
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MC_Scheduler+0x80>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d000      	beq.n	80016e0 <MC_Scheduler+0xc>
}
 80016de:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 80016e0:	4c1d      	ldr	r4, [pc, #116]	; (8001758 <MC_Scheduler+0x84>)
 80016e2:	8823      	ldrh	r3, [r4, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MC_Scheduler+0x88>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	d003      	beq.n	80016fe <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	3a01      	subs	r2, #1
 80016fa:	b292      	uxth	r2, r2
 80016fc:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MC_Scheduler+0x8c>)
 8001700:	881a      	ldrh	r2, [r3, #0]
 8001702:	2a00      	cmp	r2, #0
 8001704:	d0eb      	beq.n	80016de <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001706:	881a      	ldrh	r2, [r3, #0]
 8001708:	3a01      	subs	r2, #1
 800170a:	b292      	uxth	r2, r2
 800170c:	801a      	strh	r2, [r3, #0]
}
 800170e:	e7e6      	b.n	80016de <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 8001710:	f7ff fea2 	bl	8001458 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001714:	f7ff fcfe 	bl	8001114 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001718:	4d12      	ldr	r5, [pc, #72]	; (8001764 <MC_Scheduler+0x90>)
 800171a:	0029      	movs	r1, r5
 800171c:	6828      	ldr	r0, [r5, #0]
 800171e:	310c      	adds	r1, #12
 8001720:	6883      	ldr	r3, [r0, #8]
 8001722:	4798      	blx	r3
 8001724:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001726:	2800      	cmp	r0, #0
 8001728:	d007      	beq.n	800173a <MC_Scheduler+0x66>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 800172a:	0029      	movs	r1, r5
 800172c:	6828      	ldr	r0, [r5, #0]
 800172e:	220a      	movs	r2, #10
 8001730:	6803      	ldr	r3, [r0, #0]
 8001732:	3108      	adds	r1, #8
 8001734:	4798      	blx	r3
 8001736:	2800      	cmp	r0, #0
 8001738:	d101      	bne.n	800173e <MC_Scheduler+0x6a>
{
 800173a:	2301      	movs	r3, #1
 800173c:	e7d6      	b.n	80016ec <MC_Scheduler+0x18>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 800173e:	0028      	movs	r0, r5
 8001740:	f000 fa6a 	bl	8001c18 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001744:	6828      	ldr	r0, [r5, #0]
 8001746:	230a      	movs	r3, #10
 8001748:	89ea      	ldrh	r2, [r5, #14]
 800174a:	68a9      	ldr	r1, [r5, #8]
 800174c:	6845      	ldr	r5, [r0, #4]
 800174e:	47a8      	blx	r5
{
 8001750:	2301      	movs	r3, #1
 8001752:	e7cb      	b.n	80016ec <MC_Scheduler+0x18>
 8001754:	20000530 	.word	0x20000530
 8001758:	20000534 	.word	0x20000534
 800175c:	20000532 	.word	0x20000532
 8001760:	20000536 	.word	0x20000536
 8001764:	20000290 	.word	0x20000290

08001768 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	46ce      	mov	lr, r9
 800176c:	4647      	mov	r7, r8
 800176e:	b580      	push	{r7, lr}

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hSixStepReturn;
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == SixPwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001770:	4f45      	ldr	r7, [pc, #276]	; (8001888 <TSK_HighFrequencyTask+0x120>)
{
 8001772:	b083      	sub	sp, #12
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == SixPwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001774:	0038      	movs	r0, r7
 8001776:	f003 fe2d 	bl	80053d4 <BADC_ClearStepUpdate>
 800177a:	4d44      	ldr	r5, [pc, #272]	; (800188c <TSK_HighFrequencyTask+0x124>)
 800177c:	2800      	cmp	r0, #0
 800177e:	d053      	beq.n	8001828 <TSK_HighFrequencyTask+0xc0>
  {
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State )) /*  only for sensor-less*/
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <TSK_HighFrequencyTask+0x128>)
 8001782:	7d5b      	ldrb	r3, [r3, #21]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d069      	beq.n	800185c <TSK_HighFrequencyTask+0xf4>
 8001788:	2b13      	cmp	r3, #19
 800178a:	d056      	beq.n	800183a <TSK_HighFrequencyTask+0xd2>
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <TSK_HighFrequencyTask+0x12c>)
 800178e:	4699      	mov	r9, r3
        PWMC_SetAlignFlag(&PWM_Handle_M1._Super, 0);
      }
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
    }
    (void)BADC_CalcElAngle (&Bemf_ADC_M1);
 8001790:	0038      	movs	r0, r7
 8001792:	f003 fd59 	bl	8005248 <BADC_CalcElAngle>
inline uint16_t SixStep_StatorController(void)
{
  uint16_t hCodeError = MC_NO_ERROR;
  int16_t hElAngle, hSpeed, hDirection;
  SpeednPosFdbk_Handle_t *speedHandle;
  RCM_ExecNextConv();
 8001796:	f000 ff19 	bl	80025cc <RCM_ExecNextConv>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800179a:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <TSK_HighFrequencyTask+0x130>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f004 fc05 	bl	8005fac <STC_GetSpeedSensor>
 80017a2:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80017a4:	f004 fcd0 	bl	8006148 <SPD_GetElAngle>
 80017a8:	0004      	movs	r4, r0
  hSpeed = SPD_GetElSpeedDpp(speedHandle);
 80017aa:	0030      	movs	r0, r6
 80017ac:	f004 fcd4 	bl	8006158 <SPD_GetElSpeedDpp>
 80017b0:	4680      	mov	r8, r0
  hDirection = RUC_GetDirection(&RevUpControlM1);
 80017b2:	4648      	mov	r0, r9
 80017b4:	f004 fbda 	bl	8005f6c <RUC_GetDirection>
  PWMC_SetPhaseVoltage( pwmcHandle[M1], PWM_Handle_M1._Super.StartCntPh);
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <TSK_HighFrequencyTask+0x134>)
  hDirection = RUC_GetDirection(&RevUpControlM1);
 80017ba:	0006      	movs	r6, r0
  PWMC_SetPhaseVoltage( pwmcHandle[M1], PWM_Handle_M1._Super.StartCntPh);
 80017bc:	8be9      	ldrh	r1, [r5, #30]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	f003 ff54 	bl	800566c <PWMC_SetPhaseVoltage>
  CRM_SetReference( &CurrentRef_M1, SixStepVars[M1].DutyCycleRef );
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <TSK_HighFrequencyTask+0x138>)
 80017c6:	4837      	ldr	r0, [pc, #220]	; (80018a4 <TSK_HighFrequencyTask+0x13c>)
 80017c8:	8819      	ldrh	r1, [r3, #0]
 80017ca:	4699      	mov	r9, r3
 80017cc:	f003 f9dc 	bl	8004b88 <CRM_SetReference>
  if (hDirection > 0)
 80017d0:	2e00      	cmp	r6, #0
 80017d2:	dd24      	ble.n	800181e <TSK_HighFrequencyTask+0xb6>
  {
    SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	01db      	lsls	r3, r3, #7
 80017d8:	469c      	mov	ip, r3
 80017da:	4464      	add	r4, ip
 80017dc:	b224      	sxth	r4, r4
 80017de:	464b      	mov	r3, r9
  else
  {
    SixStepVars[M1].qElAngle = hElAngle - S16_90_PHASE_SHIFT;
  }
  PWM_Handle_M1._Super.hElAngle = SixStepVars[M1].qElAngle;
  SixPwm_LoadNextStep( &PWM_Handle_M1, hDirection );
 80017e0:	0028      	movs	r0, r5
 80017e2:	0031      	movs	r1, r6
 80017e4:	80dc      	strh	r4, [r3, #6]
  PWM_Handle_M1._Super.hElAngle = SixStepVars[M1].qElAngle;
 80017e6:	862c      	strh	r4, [r5, #48]	; 0x30
  SixPwm_LoadNextStep( &PWM_Handle_M1, hDirection );
 80017e8:	f003 ff8a 	bl	8005700 <SixPwm_LoadNextStep>
  if (true == SixPwm_ApplyNextStep(&PWM_Handle_M1))
 80017ec:	0028      	movs	r0, r5
 80017ee:	f003 ff3f 	bl	8005670 <SixPwm_ApplyNextStep>
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d003      	beq.n	80017fe <TSK_HighFrequencyTask+0x96>
  {
    if (false == Bemf_ADC_M1.IsLoopClosed)
 80017f6:	2365      	movs	r3, #101	; 0x65
 80017f8:	5cfb      	ldrb	r3, [r7, r3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03d      	beq.n	800187a <TSK_HighFrequencyTask+0x112>
    {
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed, &PWM_Handle_M1._Super);
    }
  }
  RCM_ReadOngoingConv();
 80017fe:	f000 ff1d 	bl	800263c <RCM_ReadOngoingConv>
  BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1._Super.Step );
 8001802:	232d      	movs	r3, #45	; 0x2d
 8001804:	0038      	movs	r0, r7
 8001806:	5ce9      	ldrb	r1, [r5, r3]
 8001808:	f003 fac0 	bl	8004d8c <BADC_Start>
    SixPwm_UpdatePwmDemagCounter( &PWM_Handle_M1 );
 800180c:	0028      	movs	r0, r5
 800180e:	f004 fa43 	bl	8005c98 <SixPwm_UpdatePwmDemagCounter>
}
 8001812:	2000      	movs	r0, #0
 8001814:	b003      	add	sp, #12
 8001816:	bcc0      	pop	{r6, r7}
 8001818:	46b9      	mov	r9, r7
 800181a:	46b0      	mov	r8, r6
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SixStepVars[M1].qElAngle = hElAngle - S16_90_PHASE_SHIFT;
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <TSK_HighFrequencyTask+0x140>)
 8001820:	469c      	mov	ip, r3
 8001822:	4464      	add	r4, ip
 8001824:	b224      	sxth	r4, r4
 8001826:	e7da      	b.n	80017de <TSK_HighFrequencyTask+0x76>
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == SixPwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001828:	0028      	movs	r0, r5
 800182a:	f003 ff37 	bl	800569c <SixPwm_IsFastDemagUpdated>
 800182e:	2800      	cmp	r0, #0
 8001830:	d0a6      	beq.n	8001780 <TSK_HighFrequencyTask+0x18>
    SixPwm_DisablePwmDemagCounter( &PWM_Handle_M1 );
 8001832:	0028      	movs	r0, r5
 8001834:	f004 fa40 	bl	8005cb8 <SixPwm_DisablePwmDemagCounter>
 8001838:	e7eb      	b.n	8001812 <TSK_HighFrequencyTask+0xaa>
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <TSK_HighFrequencyTask+0x12c>)
 800183c:	4699      	mov	r9, r3
          PWMC_SetAlignFlag(&PWM_Handle_M1._Super, 0);
 800183e:	2100      	movs	r1, #0
 8001840:	0028      	movs	r0, r5
 8001842:	f003 fe67 	bl	8005514 <PWMC_SetAlignFlag>
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001846:	4c19      	ldr	r4, [pc, #100]	; (80018ac <TSK_HighFrequencyTask+0x144>)
 8001848:	0020      	movs	r0, r4
 800184a:	f004 fc7d 	bl	8006148 <SPD_GetElAngle>
 800184e:	466b      	mov	r3, sp
 8001850:	1d99      	adds	r1, r3, #6
 8001852:	8008      	strh	r0, [r1, #0]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001854:	0020      	movs	r0, r4
 8001856:	f004 fccd 	bl	80061f4 <VSS_CalcElAngle>
 800185a:	e799      	b.n	8001790 <TSK_HighFrequencyTask+0x28>
        if (0U == RUC_IsAlignStageNow(&RevUpControlM1))
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <TSK_HighFrequencyTask+0x12c>)
 800185e:	0018      	movs	r0, r3
 8001860:	4699      	mov	r9, r3
 8001862:	f004 fb65 	bl	8005f30 <RUC_IsAlignStageNow>
 8001866:	2800      	cmp	r0, #0
 8001868:	d0e9      	beq.n	800183e <TSK_HighFrequencyTask+0xd6>
          PWMC_SetAlignFlag(&PWM_Handle_M1._Super, RUC_GetDirection(&RevUpControlM1));
 800186a:	4648      	mov	r0, r9
 800186c:	f004 fb7e 	bl	8005f6c <RUC_GetDirection>
 8001870:	0001      	movs	r1, r0
 8001872:	0028      	movs	r0, r5
 8001874:	f003 fe4e 	bl	8005514 <PWMC_SetAlignFlag>
 8001878:	e7e5      	b.n	8001846 <TSK_HighFrequencyTask+0xde>
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed, &PWM_Handle_M1._Super);
 800187a:	002a      	movs	r2, r5
 800187c:	4641      	mov	r1, r8
 800187e:	0038      	movs	r0, r7
 8001880:	f003 fd08 	bl	8005294 <BADC_StepChangeEvent>
 8001884:	e7bb      	b.n	80017fe <TSK_HighFrequencyTask+0x96>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000000 	.word	0x20000000
 800188c:	2000014c 	.word	0x2000014c
 8001890:	200004f8 	.word	0x200004f8
 8001894:	20000198 	.word	0x20000198
 8001898:	20000284 	.word	0x20000284
 800189c:	20000538 	.word	0x20000538
 80018a0:	20000528 	.word	0x20000528
 80018a4:	20000114 	.word	0x20000114
 80018a8:	ffffc000 	.word	0xffffc000
 80018ac:	2000024c 	.word	0x2000024c

080018b0 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	46c6      	mov	lr, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <TSK_SafetyTask_PWMOFF+0x6c>)
 80018b6:	0087      	lsls	r7, r0, #2
{
 80018b8:	0005      	movs	r5, r0
 80018ba:	b500      	push	{lr}
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80018bc:	59d8      	ldr	r0, [r3, r7]
 80018be:	4698      	mov	r8, r3
 80018c0:	f003 fe7e 	bl	80055c0 <PWMC_IsFaultOccurred>
 80018c4:	0006      	movs	r6, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 80018c6:	2d00      	cmp	r5, #0
 80018c8:	d012      	beq.n	80018f0 <TSK_SafetyTask_PWMOFF+0x40>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80018ca:	43f2      	mvns	r2, r6
 80018cc:	00ec      	lsls	r4, r5, #3
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <TSK_SafetyTask_PWMOFF+0x70>)
 80018d0:	1b64      	subs	r4, r4, r5
 80018d2:	00a4      	lsls	r4, r4, #2
 80018d4:	18e4      	adds	r4, r4, r3
 80018d6:	0020      	movs	r0, r4
 80018d8:	0031      	movs	r1, r6
 80018da:	b292      	uxth	r2, r2
 80018dc:	f7ff fc3a 	bl	8001154 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80018e0:	0020      	movs	r0, r4
 80018e2:	f7ff fcab 	bl	800123c <MCI_GetFaultState>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d10f      	bne.n	800190a <TSK_SafetyTask_PWMOFF+0x5a>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80018ea:	bc80      	pop	{r7}
 80018ec:	46b8      	mov	r8, r7
 80018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <TSK_SafetyTask_PWMOFF+0x74>)
 80018f2:	f000 fd75 	bl	80023e0 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <TSK_SafetyTask_PWMOFF+0x78>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80018f8:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80018fa:	0018      	movs	r0, r3
 80018fc:	f004 fa26 	bl	8005d4c <RVBS_CalcAvVbus>
 8001900:	2308      	movs	r3, #8
 8001902:	4398      	bics	r0, r3
 8001904:	4306      	orrs	r6, r0
 8001906:	b2b6      	uxth	r6, r6
 8001908:	e7df      	b.n	80018ca <TSK_SafetyTask_PWMOFF+0x1a>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800190a:	4643      	mov	r3, r8
 800190c:	59d8      	ldr	r0, [r3, r7]
 800190e:	f003 fdf5 	bl	80054fc <PWMC_SwitchOffPWM>
    SixStep_Clear(bMotor);
 8001912:	0028      	movs	r0, r5
 8001914:	f7ff fcca 	bl	80012ac <SixStep_Clear>
}
 8001918:	e7e7      	b.n	80018ea <TSK_SafetyTask_PWMOFF+0x3a>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	20000538 	.word	0x20000538
 8001920:	200004f8 	.word	0x200004f8
 8001924:	2000023c 	.word	0x2000023c
 8001928:	200000f8 	.word	0x200000f8

0800192c <TSK_SafetyTask>:
{
 800192c:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <TSK_SafetyTask+0x18>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d000      	beq.n	8001938 <TSK_SafetyTask+0xc>
}
 8001936:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ffb9 	bl	80018b0 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 800193e:	f000 fe13 	bl	8002568 <RCM_ExecUserConv>
}
 8001942:	e7f8      	b.n	8001936 <TSK_SafetyTask+0xa>
 8001944:	20000530 	.word	0x20000530

08001948 <MC_RunMotorControlTasks>:
{
 8001948:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <MC_RunMotorControlTasks+0x18>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <MC_RunMotorControlTasks+0xc>
}
 8001952:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001954:	f7ff febe 	bl	80016d4 <MC_Scheduler>
    TSK_SafetyTask();
 8001958:	f7ff ffe8 	bl	800192c <TSK_SafetyTask>
}
 800195c:	e7f9      	b.n	8001952 <MC_RunMotorControlTasks+0xa>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000530 	.word	0x20000530

08001964 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001964:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  SixPwm_SwitchOffPWM(pwmcHandle[M1]);
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <TSK_HardwareFaultTask+0x18>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f004 f965 	bl	8005c38 <SixPwm_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <TSK_HardwareFaultTask+0x1c>)
 8001974:	f7ff fbee 	bl	8001154 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001978:	bd10      	pop	{r4, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	20000538 	.word	0x20000538
 8001980:	200004f8 	.word	0x200004f8

08001984 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001984:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001986:	f7ff fbbb 	bl	8001100 <MC_GetSTMStateMotor1>
 800198a:	2800      	cmp	r0, #0
 800198c:	d102      	bne.n	8001994 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 800198e:	f7ff fb73 	bl	8001078 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001992:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8001994:	f7ff fb78 	bl	8001088 <MC_StopMotor1>
}
 8001998:	e7fb      	b.n	8001992 <UI_HandleStartStopButton_cb+0xe>
 800199a:	46c0      	nop			; (mov r8, r8)

0800199c <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800199c:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 800199e:	2104      	movs	r1, #4
 80019a0:	2002      	movs	r0, #2

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80019a2:	b510      	push	{r4, lr}
 80019a4:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <mc_lock_pins+0xe0>)
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019ac:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ae:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019b4:	4932      	ldr	r1, [pc, #200]	; (8001a80 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 80019b6:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 80019b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ba:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019bc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019be:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 80019c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019c6:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <mc_lock_pins+0xe8>)
 80019c8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019ca:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019cc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 80019d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019d4:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <mc_lock_pins+0xec>)
 80019d6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019d8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019da:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019dc:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019de:	30fe      	adds	r0, #254	; 0xfe
  temp = READ_REG(GPIOx->LCKR);
 80019e0:	9108      	str	r1, [sp, #32]
  (void) temp;
 80019e2:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019e4:	4929      	ldr	r1, [pc, #164]	; (8001a8c <mc_lock_pins+0xf0>)
 80019e6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019e8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019ea:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80019ec:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019ee:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80019f0:	9107      	str	r1, [sp, #28]
  (void) temp;
 80019f2:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019f4:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019f6:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019f8:	0249      	lsls	r1, r1, #9
 80019fa:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80019fc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019fe:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a00:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a02:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001a04:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001a06:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a08:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a0a:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a0c:	0249      	lsls	r1, r1, #9
 8001a0e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a10:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a12:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a14:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a16:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001a18:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001a1a:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a1c:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a1e:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a20:	0249      	lsls	r1, r1, #9
 8001a22:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a24:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a26:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a28:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a2a:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001a2c:	9104      	str	r1, [sp, #16]
  (void) temp;
 8001a2e:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a30:	21c0      	movs	r1, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a32:	0200      	lsls	r0, r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a34:	0249      	lsls	r1, r1, #9
 8001a36:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a38:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a3c:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a3e:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001a40:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001a42:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a44:	2190      	movs	r1, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a46:	0180      	lsls	r0, r0, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a4c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a4e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a50:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001a52:	69d2      	ldr	r2, [r2, #28]
 8001a54:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001a56:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <mc_lock_pins+0xf4>)
 8001a5a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a5c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a5e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a60:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a62:	3940      	subs	r1, #64	; 0x40
  temp = READ_REG(GPIOx->LCKR);
 8001a64:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001a66:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <mc_lock_pins+0xf8>)
 8001a6a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a6c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a6e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001a74:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin);
LL_GPIO_LockPin(M1_CURRENT_REF_GPIO_Port, M1_CURRENT_REF_Pin);
}
 8001a76:	b00c      	add	sp, #48	; 0x30
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	00010004 	.word	0x00010004
 8001a80:	00010002 	.word	0x00010002
 8001a84:	00010001 	.word	0x00010001
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	00010100 	.word	0x00010100
 8001a90:	00010080 	.word	0x00010080
 8001a94:	00010040 	.word	0x00010040

08001a98 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	4657      	mov	r7, sl
 8001a9c:	4645      	mov	r5, r8
 8001a9e:	464e      	mov	r6, r9
 8001aa0:	46de      	mov	lr, fp
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8001aa2:	0002      	movs	r2, r0
{
 8001aa4:	4680      	mov	r8, r0
 8001aa6:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * rxData = pHandle->rxBuffer;
 8001aa8:	6843      	ldr	r3, [r0, #4]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001aaa:	4833      	ldr	r0, [pc, #204]	; (8001b78 <RI_SetRegCommandParser+0xe0>)
{
 8001aac:	b089      	sub	sp, #36	; 0x24
    int16_t rxLength = pHandle->rxLength;
 8001aae:	240c      	movs	r4, #12
 8001ab0:	5f14      	ldrsh	r4, [r2, r4]
    uint16_t size = 0U;
 8001ab2:	aa02      	add	r2, sp, #8
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001ab4:	9006      	str	r0, [sp, #24]
 8001ab6:	4831      	ldr	r0, [pc, #196]	; (8001b7c <RI_SetRegCommandParser+0xe4>)
    uint16_t size = 0U;
 8001ab8:	4694      	mov	ip, r2
 8001aba:	260e      	movs	r6, #14
 8001abc:	2200      	movs	r2, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001abe:	9007      	str	r0, [sp, #28]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8001ac0:	4640      	mov	r0, r8
    uint16_t size = 0U;
 8001ac2:	4466      	add	r6, ip
 8001ac4:	8032      	strh	r2, [r6, #0]
    pHandle->txLength = 0;
 8001ac6:	81c2      	strh	r2, [r0, #14]
    uint8_t * txData = pHandle->txBuffer;
 8001ac8:	6882      	ldr	r2, [r0, #8]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001aca:	af06      	add	r7, sp, #24
    uint8_t * txData = pHandle->txBuffer;
 8001acc:	4692      	mov	sl, r2
  uint8_t retVal = MCP_CMD_OK;
 8001ace:	2200      	movs	r2, #0
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001ad0:	4451      	add	r1, sl
  uint8_t retVal = MCP_CMD_OK;
 8001ad2:	9203      	str	r2, [sp, #12]
          if (txSyncFreeSpace !=0 )
 8001ad4:	b28a      	uxth	r2, r1
    uint8_t number_of_item =0;
 8001ad6:	2500      	movs	r5, #0
          if (txSyncFreeSpace !=0 )
 8001ad8:	9202      	str	r2, [sp, #8]
    while (rxLength > 0)
 8001ada:	2c00      	cmp	r4, #0
 8001adc:	dd32      	ble.n	8001b44 <RI_SetRegCommandParser+0xac>
      if (motorID > NBR_OF_MOTORS)
 8001ade:	2106      	movs	r1, #6
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001ae0:	781a      	ldrb	r2, [r3, #0]
      regID = *dataElementID & REG_MASK;
 8001ae2:	8818      	ldrh	r0, [r3, #0]
      if (motorID > NBR_OF_MOTORS)
 8001ae4:	4211      	tst	r1, r2
 8001ae6:	d131      	bne.n	8001b4c <RI_SetRegCommandParser+0xb4>
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001ae8:	1ea1      	subs	r1, r4, #2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001aea:	3302      	adds	r3, #2
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001aec:	468c      	mov	ip, r1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001aee:	4699      	mov	r9, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001af0:	b28c      	uxth	r4, r1
      regID = *dataElementID & REG_MASK;
 8001af2:	2307      	movs	r3, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001af4:	2138      	movs	r1, #56	; 0x38
 8001af6:	4398      	bics	r0, r3
 8001af8:	4011      	ands	r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	4662      	mov	r2, ip
 8001afe:	b212      	sxth	r2, r2
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	58fb      	ldr	r3, [r7, r3]
 8001b06:	464a      	mov	r2, r9
 8001b08:	469b      	mov	fp, r3
 8001b0a:	0033      	movs	r3, r6
 8001b0c:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8001b0e:	8833      	ldrh	r3, [r6, #0]
      number_of_item ++;
 8001b10:	3501      	adds	r5, #1
        rxLength = (int16_t) (rxLength - size);
 8001b12:	1ae4      	subs	r4, r4, r3
      number_of_item ++;
 8001b14:	b2ed      	uxtb	r5, r5
        rxLength = (int16_t) (rxLength - size);
 8001b16:	b224      	sxth	r4, r4
        if ((1U == number_of_item) && (0 == rxLength))
 8001b18:	2d01      	cmp	r5, #1
 8001b1a:	d021      	beq.n	8001b60 <RI_SetRegCommandParser+0xc8>
          if (txSyncFreeSpace !=0 )
 8001b1c:	4652      	mov	r2, sl
 8001b1e:	9902      	ldr	r1, [sp, #8]
 8001b20:	b292      	uxth	r2, r2
 8001b22:	428a      	cmp	r2, r1
 8001b24:	d01a      	beq.n	8001b5c <RI_SetRegCommandParser+0xc4>
          {
            *txData = accessResult;
 8001b26:	4652      	mov	r2, sl
 8001b28:	7010      	strb	r0, [r2, #0]
            txData = txData+1;
            pHandle->txLength++;
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	89d2      	ldrh	r2, [r2, #14]
 8001b30:	3201      	adds	r2, #1
 8001b32:	81ca      	strh	r2, [r1, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d107      	bne.n	8001b48 <RI_SetRegCommandParser+0xb0>
            txData = txData+1;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4694      	mov	ip, r2
        rxData = rxData+size;
 8001b3c:	444b      	add	r3, r9
            txData = txData+1;
 8001b3e:	44e2      	add	sl, ip
    while (rxLength > 0)
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	dccc      	bgt.n	8001ade <RI_SetRegCommandParser+0x46>
 8001b44:	9803      	ldr	r0, [sp, #12]
 8001b46:	e00d      	b.n	8001b64 <RI_SetRegCommandParser+0xcc>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001b48:	2807      	cmp	r0, #7
 8001b4a:	d110      	bne.n	8001b6e <RI_SetRegCommandParser+0xd6>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001b4c:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001b4e:	b009      	add	sp, #36	; 0x24
 8001b50:	bcf0      	pop	{r4, r5, r6, r7}
 8001b52:	46bb      	mov	fp, r7
 8001b54:	46b2      	mov	sl, r6
 8001b56:	46a9      	mov	r9, r5
 8001b58:	46a0      	mov	r8, r4
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001b5c:	2008      	movs	r0, #8
 8001b5e:	e7f6      	b.n	8001b4e <RI_SetRegCommandParser+0xb6>
        if ((1U == number_of_item) && (0 == rxLength))
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	d1db      	bne.n	8001b1c <RI_SetRegCommandParser+0x84>
    if (MCP_CMD_OK == retVal)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1f2      	bne.n	8001b4e <RI_SetRegCommandParser+0xb6>
      pHandle->txLength = 0;
 8001b68:	4643      	mov	r3, r8
 8001b6a:	81d8      	strh	r0, [r3, #14]
 8001b6c:	e7ef      	b.n	8001b4e <RI_SetRegCommandParser+0xb6>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001b6e:	280a      	cmp	r0, #10
 8001b70:	d0ec      	beq.n	8001b4c <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001b72:	2201      	movs	r2, #1
 8001b74:	9203      	str	r2, [sp, #12]
 8001b76:	e7df      	b.n	8001b38 <RI_SetRegCommandParser+0xa0>
 8001b78:	08001d7d 	.word	0x08001d7d
 8001b7c:	08001e29 	.word	0x08001e29

08001b80 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	464e      	mov	r6, r9
 8001b84:	4657      	mov	r7, sl
 8001b86:	4645      	mov	r5, r8
 8001b88:	46de      	mov	lr, fp
 8001b8a:	b5e0      	push	{r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8001b8c:	6883      	ldr	r3, [r0, #8]
{
 8001b8e:	b087      	sub	sp, #28
    uint16_t size = 0U;
 8001b90:	2200      	movs	r2, #0
    uint8_t * txData = pHandle->txBuffer;
 8001b92:	4699      	mov	r9, r3
    uint16_t size = 0U;
 8001b94:	466b      	mov	r3, sp
    uint16_t rxLength = pHandle->rxLength;
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 8001b96:	b20d      	sxth	r5, r1

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001b98:	491d      	ldr	r1, [pc, #116]	; (8001c10 <RI_GetRegCommandParser+0x90>)
    uint16_t size = 0U;
 8001b9a:	81da      	strh	r2, [r3, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001b9c:	8983      	ldrh	r3, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001b9e:	9104      	str	r1, [sp, #16]
 8001ba0:	491c      	ldr	r1, [pc, #112]	; (8001c14 <RI_GetRegCommandParser+0x94>)
 8001ba2:	ae04      	add	r6, sp, #16
{
 8001ba4:	0007      	movs	r7, r0
    uint8_t * rxData = pHandle->rxBuffer;
 8001ba6:	6844      	ldr	r4, [r0, #4]
    pHandle->txLength = 0;
 8001ba8:	81c2      	strh	r2, [r0, #14]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001baa:	6071      	str	r1, [r6, #4]
    while (rxLength > 0U)
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01f      	beq.n	8001bf0 <RI_GetRegCommandParser+0x70>
 8001bb0:	18e3      	adds	r3, r4, r3
      regID = *dataElementID & REG_MASK;
      typeID = (uint8_t)*dataElementID & TYPE_MASK;

      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));

      if (motorID > NBR_OF_MOTORS)
 8001bb2:	3206      	adds	r2, #6
    while (rxLength > 0U)
 8001bb4:	b29b      	uxth	r3, r3
      if (motorID > NBR_OF_MOTORS)
 8001bb6:	4690      	mov	r8, r2
    while (rxLength > 0U)
 8001bb8:	469a      	mov	sl, r3
      if (motorID > NBR_OF_MOTORS)
 8001bba:	4643      	mov	r3, r8
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001bbc:	7822      	ldrb	r2, [r4, #0]
      regID = *dataElementID & REG_MASK;
 8001bbe:	8820      	ldrh	r0, [r4, #0]
      if (motorID > NBR_OF_MOTORS)
 8001bc0:	4213      	tst	r3, r2
 8001bc2:	d115      	bne.n	8001bf0 <RI_GetRegCommandParser+0x70>
      regID = *dataElementID & REG_MASK;
 8001bc4:	2307      	movs	r3, #7
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001bc6:	4398      	bics	r0, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	9500      	str	r5, [sp, #0]
 8001bce:	58f3      	ldr	r3, [r6, r3]
 8001bd0:	2138      	movs	r1, #56	; 0x38
 8001bd2:	469b      	mov	fp, r3
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	446b      	add	r3, sp
 8001bda:	464a      	mov	r2, r9
 8001bdc:	47d8      	blx	fp
        if (retVal == MCP_CMD_OK )
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d008      	beq.n	8001bf4 <RI_GetRegCommandParser+0x74>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001be2:	b007      	add	sp, #28
 8001be4:	bcf0      	pop	{r4, r5, r6, r7}
 8001be6:	46bb      	mov	fp, r7
 8001be8:	46b2      	mov	sl, r6
 8001bea:	46a9      	mov	r9, r5
 8001bec:	46a0      	mov	r8, r4
 8001bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t retVal = MCP_CMD_NOK;
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	e7f6      	b.n	8001be2 <RI_GetRegCommandParser+0x62>
          txData = txData+size;
 8001bf4:	466b      	mov	r3, sp
          pHandle->txLength += size;
 8001bf6:	89fa      	ldrh	r2, [r7, #14]
          txData = txData+size;
 8001bf8:	89db      	ldrh	r3, [r3, #14]
    while (rxLength > 0U)
 8001bfa:	3402      	adds	r4, #2
          pHandle->txLength += size;
 8001bfc:	189a      	adds	r2, r3, r2
          freeSpaceS16 = freeSpaceS16-size;
 8001bfe:	1aed      	subs	r5, r5, r3
          txData = txData+size;
 8001c00:	4499      	add	r9, r3
    while (rxLength > 0U)
 8001c02:	b2a3      	uxth	r3, r4
          pHandle->txLength += size;
 8001c04:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001c06:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8001c08:	459a      	cmp	sl, r3
 8001c0a:	d1d6      	bne.n	8001bba <RI_GetRegCommandParser+0x3a>
 8001c0c:	e7e9      	b.n	8001be2 <RI_GetRegCommandParser+0x62>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	08001fc9 	.word	0x08001fc9
 8001c14:	08002075 	.word	0x08002075

08001c18 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8001c1a:	6847      	ldr	r7, [r0, #4]
{
 8001c1c:	0004      	movs	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001c1e:	883b      	ldrh	r3, [r7, #0]
 8001c20:	2107      	movs	r1, #7
 8001c22:	001a      	movs	r2, r3

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001c24:	2080      	movs	r0, #128	; 0x80
 8001c26:	25ff      	movs	r5, #255	; 0xff
 8001c28:	001e      	movs	r6, r3
{
 8001c2a:	b083      	sub	sp, #12
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001c2c:	438a      	bics	r2, r1
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001c2e:	0040      	lsls	r0, r0, #1
 8001c30:	43ae      	bics	r6, r5
 8001c32:	4286      	cmp	r6, r0
 8001c34:	d028      	beq.n	8001c88 <MCP_ReceivedPacket+0x70>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8001c36:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001c38:	4019      	ands	r1, r3

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c3a:	89a5      	ldrh	r5, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001c3c:	00ce      	lsls	r6, r1, #3
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <MCP_ReceivedPacket+0x124>)
 8001c40:	1a76      	subs	r6, r6, r1
 8001c42:	00b6      	lsls	r6, r6, #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c44:	3d02      	subs	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001c46:	18f6      	adds	r6, r6, r3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c48:	b2ad      	uxth	r5, r5
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c4a:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001c4c:	3702      	adds	r7, #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c4e:	81a5      	strh	r5, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001c50:	6067      	str	r7, [r4, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c52:	8999      	ldrh	r1, [r3, #12]

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8001c54:	2300      	movs	r3, #0
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c56:	3901      	subs	r1, #1
 8001c58:	b289      	uxth	r1, r1
    pHandle->txLength = 0U;
 8001c5a:	81e3      	strh	r3, [r4, #14]

    switch (command)
 8001c5c:	2a38      	cmp	r2, #56	; 0x38
 8001c5e:	d80c      	bhi.n	8001c7a <MCP_ReceivedPacket+0x62>
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <MCP_ReceivedPacket+0x128>)
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	589b      	ldr	r3, [r3, r2]
 8001c66:	469f      	mov	pc, r3
 8001c68:	2600      	movs	r6, #0
 8001c6a:	2302      	movs	r3, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001c6c:	68a2      	ldr	r2, [r4, #8]
 8001c6e:	5593      	strb	r3, [r2, r6]
    pHandle->txLength++;
 8001c70:	89e3      	ldrh	r3, [r4, #14]
 8001c72:	3301      	adds	r3, #1
 8001c74:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8001c76:	b003      	add	sp, #12
 8001c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	4282      	cmp	r2, r0
 8001c80:	d1f4      	bne.n	8001c6c <MCP_ReceivedPacket+0x54>
  uint8_t userCommand=0;
 8001c82:	0030      	movs	r0, r6
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c84:	b20a      	sxth	r2, r1
 8001c86:	e04a      	b.n	8001d1e <MCP_ReceivedPacket+0x106>
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c88:	89a5      	ldrh	r5, [r4, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c8a:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c8c:	3d02      	subs	r5, #2
 8001c8e:	b2ad      	uxth	r5, r5
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001c90:	3702      	adds	r7, #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001c92:	81a5      	strh	r5, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001c94:	6067      	str	r7, [r4, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001c96:	8999      	ldrh	r1, [r3, #12]
    pHandle->txLength = 0U;
 8001c98:	2300      	movs	r3, #0
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	08d0      	lsrs	r0, r2, #3
    pHandle->txLength = 0U;
 8001c9e:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001ca0:	2a0f      	cmp	r2, #15
 8001ca2:	d93a      	bls.n	8001d1a <MCP_ReceivedPacket+0x102>
        MCPResponse = MCP_CMD_OK;
 8001ca4:	2600      	movs	r6, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8001ca6:	230d      	movs	r3, #13
 8001ca8:	e7e0      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
        if (IDLE == MCI_GetSTMState(pMCI))
 8001caa:	0030      	movs	r0, r6
 8001cac:	f7ff fa78 	bl	80011a0 <MCI_GetSTMState>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d005      	beq.n	8001cc0 <MCP_ReceivedPacket+0xa8>
          (void)MCI_StopMotor(pMCI);
 8001cb4:	0030      	movs	r0, r6
 8001cb6:	f7ff fa91 	bl	80011dc <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 8001cba:	2300      	movs	r3, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001cbc:	89e6      	ldrh	r6, [r4, #14]
 8001cbe:	e7d5      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001cc0:	0030      	movs	r0, r6
 8001cc2:	f7ff fa73 	bl	80011ac <MCI_StartMotor>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4043      	eors	r3, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001cca:	89e6      	ldrh	r6, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e7cd      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001cd0:	0020      	movs	r0, r4
 8001cd2:	f7ff ff55 	bl	8001b80 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001cd6:	89e6      	ldrh	r6, [r4, #14]
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001cd8:	0003      	movs	r3, r0
        break;
 8001cda:	e7c7      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
        pHandle->txLength = 4U;
 8001cdc:	2304      	movs	r3, #4
        *pHandle->txBuffer = MCP_VERSION;
 8001cde:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8001ce0:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8001ce2:	68a3      	ldr	r3, [r4, #8]
 8001ce4:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001ce6:	89e6      	ldrh	r6, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001ce8:	2300      	movs	r3, #0
        break;
 8001cea:	e7bf      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001cec:	0020      	movs	r0, r4
 8001cee:	f7ff fed3 	bl	8001a98 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001cf2:	89e6      	ldrh	r6, [r4, #14]
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001cf4:	0003      	movs	r3, r0
        break;
 8001cf6:	e7b9      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
        if (RUN == MCI_GetSTMState(pMCI))
 8001cf8:	0030      	movs	r0, r6
 8001cfa:	f7ff fa51 	bl	80011a0 <MCI_GetSTMState>
 8001cfe:	2806      	cmp	r0, #6
 8001d00:	d1db      	bne.n	8001cba <MCP_ReceivedPacket+0xa2>
          MCI_StopRamp(pMCI);
 8001d02:	0030      	movs	r0, r6
 8001d04:	f7ff fab6 	bl	8001274 <MCI_StopRamp>
        MCPResponse = MCP_CMD_OK;
 8001d08:	2300      	movs	r3, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d0a:	89e6      	ldrh	r6, [r4, #14]
 8001d0c:	e7ae      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
        (void)MCI_FaultAcknowledged(pMCI);
 8001d0e:	0030      	movs	r0, r6
 8001d10:	f7ff fa82 	bl	8001218 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 8001d14:	2300      	movs	r3, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d16:	89e6      	ldrh	r6, [r4, #14]
        break;
 8001d18:	e7a8      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001d1a:	3901      	subs	r1, #1
 8001d1c:	b20a      	sxth	r2, r1
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MCP_ReceivedPacket+0x12c>)
 8001d20:	0080      	lsls	r0, r0, #2
 8001d22:	58c6      	ldr	r6, [r0, r3]
 8001d24:	2e00      	cmp	r6, #0
 8001d26:	d0bd      	beq.n	8001ca4 <MCP_ReceivedPacket+0x8c>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	0023      	movs	r3, r4
 8001d30:	0028      	movs	r0, r5
 8001d32:	330e      	adds	r3, #14
 8001d34:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001d36:	89e6      	ldrh	r6, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8001d38:	0003      	movs	r3, r0
 8001d3a:	e797      	b.n	8001c6c <MCP_ReceivedPacket+0x54>
 8001d3c:	200004f8 	.word	0x200004f8
 8001d40:	08006658 	.word	0x08006658
 8001d44:	20000648 	.word	0x20000648

08001d48 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001d48:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001d4a:	f002 fa63 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8001d4e:	21fa      	movs	r1, #250	; 0xfa
 8001d50:	00c9      	lsls	r1, r1, #3
 8001d52:	f7fe f9d9 	bl	8000108 <__udivsi3>
 8001d56:	f001 f94d 	bl	8002ff4 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <MX_MotorControl_Init+0x2c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	4240      	negs	r0, r0
 8001d64:	f001 f908 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <MX_MotorControl_Init+0x30>)
 8001d6a:	f7ff facf 	bl	800130c <MCboot>
  mc_lock_pins();
 8001d6e:	f7ff fe15 	bl	800199c <mc_lock_pins>
}
 8001d72:	bd10      	pop	{r4, pc}
 8001d74:	2000031c 	.word	0x2000031c
 8001d78:	20000650 	.word	0x20000650

08001d7c <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8001d7c:	b530      	push	{r4, r5, lr}
 8001d7e:	ac03      	add	r4, sp, #12
 8001d80:	2500      	movs	r5, #0
 8001d82:	5f64      	ldrsh	r4, [r4, r5]
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8001d84:	2918      	cmp	r1, #24
 8001d86:	d031      	beq.n	8001dec <RI_SetRegisterGlobal+0x70>
 8001d88:	d815      	bhi.n	8001db6 <RI_SetRegisterGlobal+0x3a>
 8001d8a:	2908      	cmp	r1, #8
 8001d8c:	d039      	beq.n	8001e02 <RI_SetRegisterGlobal+0x86>
 8001d8e:	2910      	cmp	r1, #16
 8001d90:	d133      	bne.n	8001dfa <RI_SetRegisterGlobal+0x7e>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      switch (regID)
 8001d92:	22e5      	movs	r2, #229	; 0xe5
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	4290      	cmp	r0, r2
 8001d98:	d03a      	beq.n	8001e10 <RI_SetRegisterGlobal+0x94>
 8001d9a:	d91e      	bls.n	8001dda <RI_SetRegisterGlobal+0x5e>
 8001d9c:	22e9      	movs	r2, #233	; 0xe9
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	4290      	cmp	r0, r2
 8001da2:	d035      	beq.n	8001e10 <RI_SetRegisterGlobal+0x94>
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <RI_SetRegisterGlobal+0xa4>)
 8001da6:	4694      	mov	ip, r2
 8001da8:	4460      	add	r0, ip
 8001daa:	1e42      	subs	r2, r0, #1
 8001dac:	4190      	sbcs	r0, r2
 8001dae:	3004      	adds	r0, #4
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 8001db0:	2202      	movs	r2, #2
 8001db2:	801a      	strh	r2, [r3, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 8001db4:	bd30      	pop	{r4, r5, pc}
  switch(typeID)
 8001db6:	2928      	cmp	r1, #40	; 0x28
 8001db8:	d11f      	bne.n	8001dfa <RI_SetRegisterGlobal+0x7e>
      *size = rawSize + 2U;
 8001dba:	8812      	ldrh	r2, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 8001dbc:	b2a4      	uxth	r4, r4
      *size = rawSize + 2U;
 8001dbe:	3202      	adds	r2, #2
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8001dc4:	42a2      	cmp	r2, r4
 8001dc6:	d825      	bhi.n	8001e14 <RI_SetRegisterGlobal+0x98>
        switch (regID)
 8001dc8:	28e8      	cmp	r0, #232	; 0xe8
 8001dca:	d027      	beq.n	8001e1c <RI_SetRegisterGlobal+0xa0>
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	4398      	bics	r0, r3
            retVal = MCP_ERROR_RO_REG;
 8001dd0:	3828      	subs	r0, #40	; 0x28
 8001dd2:	1e43      	subs	r3, r0, #1
 8001dd4:	4198      	sbcs	r0, r3
 8001dd6:	3004      	adds	r0, #4
 8001dd8:	e7ec      	b.n	8001db4 <RI_SetRegisterGlobal+0x38>
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	4390      	bics	r0, r2
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <RI_SetRegisterGlobal+0xa8>)
 8001de0:	4694      	mov	ip, r2
 8001de2:	4460      	add	r0, ip
 8001de4:	1e42      	subs	r2, r0, #1
 8001de6:	4190      	sbcs	r0, r2
 8001de8:	3004      	adds	r0, #4
 8001dea:	e7e1      	b.n	8001db0 <RI_SetRegisterGlobal+0x34>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8001dec:	3818      	subs	r0, #24
 8001dee:	1e42      	subs	r2, r0, #1
 8001df0:	4190      	sbcs	r0, r2
      *size = 4;
 8001df2:	2204      	movs	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 8001df4:	3004      	adds	r0, #4
      *size = 4;
 8001df6:	801a      	strh	r2, [r3, #0]
      break;
 8001df8:	e7dc      	b.n	8001db4 <RI_SetRegisterGlobal+0x38>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8001dfa:	2200      	movs	r2, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8001dfc:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8001dfe:	801a      	strh	r2, [r3, #0]
      break;
 8001e00:	e7d8      	b.n	8001db4 <RI_SetRegisterGlobal+0x38>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8001e02:	3848      	subs	r0, #72	; 0x48
 8001e04:	1e42      	subs	r2, r0, #1
 8001e06:	4190      	sbcs	r0, r2
      *size = 1;
 8001e08:	2201      	movs	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 8001e0a:	3004      	adds	r0, #4
      *size = 1;
 8001e0c:	801a      	strh	r2, [r3, #0]
      break;
 8001e0e:	e7d1      	b.n	8001db4 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8001e10:	2000      	movs	r0, #0
 8001e12:	e7cd      	b.n	8001db0 <RI_SetRegisterGlobal+0x34>
        *size = 0;
 8001e14:	2200      	movs	r2, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8001e16:	200a      	movs	r0, #10
        *size = 0;
 8001e18:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8001e1a:	e7cb      	b.n	8001db4 <RI_SetRegisterGlobal+0x38>
            retVal = MCP_ERROR_RO_REG;
 8001e1c:	2004      	movs	r0, #4
 8001e1e:	e7c9      	b.n	8001db4 <RI_SetRegisterGlobal+0x38>
 8001e20:	ffffe4a8 	.word	0xffffe4a8
 8001e24:	fffffa70 	.word	0xfffffa70

08001e28 <RI_SetRegisterMotor1>:

uint8_t RI_SetRegisterMotor1(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	001d      	movs	r5, r3
 8001e2c:	ab04      	add	r3, sp, #16
 8001e2e:	2400      	movs	r4, #0
 8001e30:	5f1b      	ldrsh	r3, [r3, r4]
  uint8_t retVal = MCP_CMD_OK;
  uint8_t motorID=0;
  MCI_Handle_t *pMCIN = &Mci[motorID];

  switch(typeID)
 8001e32:	2918      	cmp	r1, #24
 8001e34:	d04f      	beq.n	8001ed6 <RI_SetRegisterMotor1+0xae>
 8001e36:	d81e      	bhi.n	8001e76 <RI_SetRegisterMotor1+0x4e>
 8001e38:	2908      	cmp	r1, #8
 8001e3a:	d05c      	beq.n	8001ef6 <RI_SetRegisterMotor1+0xce>
 8001e3c:	2910      	cmp	r1, #16
 8001e3e:	d156      	bne.n	8001eee <RI_SetRegisterMotor1+0xc6>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8001e40:	2388      	movs	r3, #136	; 0x88
 8001e42:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4298      	cmp	r0, r3
 8001e48:	d100      	bne.n	8001e4c <RI_SetRegisterMotor1+0x24>
 8001e4a:	e091      	b.n	8001f70 <RI_SetRegisterMotor1+0x148>
 8001e4c:	d92e      	bls.n	8001eac <RI_SetRegisterMotor1+0x84>
 8001e4e:	23e5      	movs	r3, #229	; 0xe5
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4298      	cmp	r0, r3
 8001e54:	d100      	bne.n	8001e58 <RI_SetRegisterMotor1+0x30>
 8001e56:	e081      	b.n	8001f5c <RI_SetRegisterMotor1+0x134>
 8001e58:	d933      	bls.n	8001ec2 <RI_SetRegisterMotor1+0x9a>
 8001e5a:	23e9      	movs	r3, #233	; 0xe9
  uint8_t retVal = MCP_CMD_OK;
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4298      	cmp	r0, r3
 8001e62:	d004      	beq.n	8001e6e <RI_SetRegisterMotor1+0x46>
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <RI_SetRegisterMotor1+0x18c>)
 8001e66:	18c4      	adds	r4, r0, r3
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	3404      	adds	r4, #4
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	802b      	strh	r3, [r5, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 8001e72:	0020      	movs	r0, r4
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
  switch(typeID)
 8001e76:	2928      	cmp	r1, #40	; 0x28
 8001e78:	d139      	bne.n	8001eee <RI_SetRegisterMotor1+0xc6>
      *size = rawSize + 2U;
 8001e7a:	8811      	ldrh	r1, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 8001e7c:	b29b      	uxth	r3, r3
      *size = rawSize + 2U;
 8001e7e:	3102      	adds	r1, #2
 8001e80:	b289      	uxth	r1, r1
 8001e82:	8029      	strh	r1, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 8001e84:	4299      	cmp	r1, r3
 8001e86:	d85d      	bhi.n	8001f44 <RI_SetRegisterMotor1+0x11c>
        switch (regID)
 8001e88:	23d4      	movs	r3, #212	; 0xd4
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4298      	cmp	r0, r3
 8001e8e:	d100      	bne.n	8001e92 <RI_SetRegisterMotor1+0x6a>
 8001e90:	e07e      	b.n	8001f90 <RI_SetRegisterMotor1+0x168>
 8001e92:	d900      	bls.n	8001e96 <RI_SetRegisterMotor1+0x6e>
 8001e94:	e08b      	b.n	8001fae <RI_SetRegisterMotor1+0x186>
            retVal = MCP_ERROR_RO_REG;
 8001e96:	2404      	movs	r4, #4
 8001e98:	28e8      	cmp	r0, #232	; 0xe8
 8001e9a:	d0ea      	beq.n	8001e72 <RI_SetRegisterMotor1+0x4a>
 8001e9c:	3b29      	subs	r3, #41	; 0x29
 8001e9e:	3bff      	subs	r3, #255	; 0xff
 8001ea0:	4398      	bics	r0, r3
 8001ea2:	3828      	subs	r0, #40	; 0x28
 8001ea4:	1e43      	subs	r3, r0, #1
 8001ea6:	4198      	sbcs	r0, r3
 8001ea8:	1d04      	adds	r4, r0, #4
 8001eaa:	e7e2      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
 8001eac:	2890      	cmp	r0, #144	; 0x90
 8001eae:	d04f      	beq.n	8001f50 <RI_SetRegisterMotor1+0x128>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8001eb0:	2405      	movs	r4, #5
 8001eb2:	28d0      	cmp	r0, #208	; 0xd0
 8001eb4:	d1db      	bne.n	8001e6e <RI_SetRegisterMotor1+0x46>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8001eb6:	4840      	ldr	r0, [pc, #256]	; (8001fb8 <RI_SetRegisterMotor1+0x190>)
 8001eb8:	b209      	sxth	r1, r1
 8001eba:	f003 facb 	bl	8005454 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8001ebe:	2400      	movs	r4, #0
          break;
 8001ec0:	e7d5      	b.n	8001e6e <RI_SetRegisterMotor1+0x46>
 8001ec2:	2340      	movs	r3, #64	; 0x40
 8001ec4:	4398      	bics	r0, r3
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <RI_SetRegisterMotor1+0x194>)
 8001ec8:	0004      	movs	r4, r0
 8001eca:	469c      	mov	ip, r3
 8001ecc:	4464      	add	r4, ip
 8001ece:	1e63      	subs	r3, r4, #1
 8001ed0:	419c      	sbcs	r4, r3
 8001ed2:	3404      	adds	r4, #4
 8001ed4:	e7cb      	b.n	8001e6e <RI_SetRegisterMotor1+0x46>
      switch (regID)
 8001ed6:	2858      	cmp	r0, #88	; 0x58
 8001ed8:	d048      	beq.n	8001f6c <RI_SetRegisterMotor1+0x144>
 8001eda:	2898      	cmp	r0, #152	; 0x98
 8001edc:	d026      	beq.n	8001f2c <RI_SetRegisterMotor1+0x104>
          retVal = MCP_ERROR_RO_REG;
 8001ede:	3818      	subs	r0, #24
 8001ee0:	0004      	movs	r4, r0
 8001ee2:	1e63      	subs	r3, r4, #1
 8001ee4:	419c      	sbcs	r4, r3
 8001ee6:	3404      	adds	r4, #4
      *size = 4;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	802b      	strh	r3, [r5, #0]
      break;
 8001eec:	e7c1      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8001eee:	2300      	movs	r3, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8001ef0:	2407      	movs	r4, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8001ef2:	802b      	strh	r3, [r5, #0]
      break;
 8001ef4:	e7bd      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
      switch (regID)
 8001ef6:	23d9      	movs	r3, #217	; 0xd9
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d030      	beq.n	8001f60 <RI_SetRegisterMotor1+0x138>
 8001efe:	d80b      	bhi.n	8001f18 <RI_SetRegisterMotor1+0xf0>
            retVal = MCP_ERROR_RO_REG;
 8001f00:	2404      	movs	r4, #4
 8001f02:	2848      	cmp	r0, #72	; 0x48
 8001f04:	d005      	beq.n	8001f12 <RI_SetRegisterMotor1+0xea>
 8001f06:	2888      	cmp	r0, #136	; 0x88
 8001f08:	d120      	bne.n	8001f4c <RI_SetRegisterMotor1+0x124>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8001f0a:	7813      	ldrb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8001f0c:	2400      	movs	r4, #0
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d034      	beq.n	8001f7c <RI_SetRegisterMotor1+0x154>
      *size = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	802b      	strh	r3, [r5, #0]
      break;
 8001f16:	e7ac      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
 8001f18:	23e1      	movs	r3, #225	; 0xe1
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4298      	cmp	r0, r3
 8001f1e:	d115      	bne.n	8001f4c <RI_SetRegisterMotor1+0x124>
          PWMC_SetQuasiSynchState(&(&PWM_Handle_M1)->_Super, regdata8);
 8001f20:	7811      	ldrb	r1, [r2, #0]
 8001f22:	4827      	ldr	r0, [pc, #156]	; (8001fc0 <RI_SetRegisterMotor1+0x198>)
 8001f24:	f003 fb00 	bl	8005528 <PWMC_SetQuasiSynchState>
  uint8_t retVal = MCP_CMD_OK;
 8001f28:	2400      	movs	r4, #0
          break;
 8001f2a:	e7f2      	b.n	8001f12 <RI_SetRegisterMotor1+0xea>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	5ed0      	ldrsh	r0, [r2, r3]
 8001f30:	2106      	movs	r1, #6
 8001f32:	f7fe f973 	bl	800021c <__divsi3>
 8001f36:	2200      	movs	r2, #0
 8001f38:	b201      	sxth	r1, r0
 8001f3a:	4822      	ldr	r0, [pc, #136]	; (8001fc4 <RI_SetRegisterMotor1+0x19c>)
 8001f3c:	f7ff f8f8 	bl	8001130 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8001f40:	2400      	movs	r4, #0
          break;
 8001f42:	e7d1      	b.n	8001ee8 <RI_SetRegisterMotor1+0xc0>
        *size = 0;
 8001f44:	2300      	movs	r3, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8001f46:	240a      	movs	r4, #10
        *size = 0;
 8001f48:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8001f4a:	e792      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
 8001f4c:	2405      	movs	r4, #5
 8001f4e:	e7e0      	b.n	8001f12 <RI_SetRegisterMotor1+0xea>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8001f50:	4819      	ldr	r0, [pc, #100]	; (8001fb8 <RI_SetRegisterMotor1+0x190>)
 8001f52:	b209      	sxth	r1, r1
 8001f54:	f003 fa7c 	bl	8005450 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8001f58:	2400      	movs	r4, #0
          break;
 8001f5a:	e788      	b.n	8001e6e <RI_SetRegisterMotor1+0x46>
  uint8_t retVal = MCP_CMD_OK;
 8001f5c:	2400      	movs	r4, #0
 8001f5e:	e786      	b.n	8001e6e <RI_SetRegisterMotor1+0x46>
          PWMC_SetFastDemagState(&(&PWM_Handle_M1)->_Super, regdata8);
 8001f60:	7811      	ldrb	r1, [r2, #0]
 8001f62:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <RI_SetRegisterMotor1+0x198>)
 8001f64:	f003 fada 	bl	800551c <PWMC_SetFastDemagState>
  uint8_t retVal = MCP_CMD_OK;
 8001f68:	2400      	movs	r4, #0
          break;
 8001f6a:	e7d2      	b.n	8001f12 <RI_SetRegisterMotor1+0xea>
          retVal = MCP_ERROR_RO_REG;
 8001f6c:	2404      	movs	r4, #4
 8001f6e:	e7bb      	b.n	8001ee8 <RI_SetRegisterMotor1+0xc0>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <RI_SetRegisterMotor1+0x190>)
 8001f72:	b209      	sxth	r1, r1
 8001f74:	f003 fa7c 	bl	8005470 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8001f78:	2400      	movs	r4, #0
          break;
 8001f7a:	e778      	b.n	8001e6e <RI_SetRegisterMotor1+0x46>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8001f7c:	4e11      	ldr	r6, [pc, #68]	; (8001fc4 <RI_SetRegisterMotor1+0x19c>)
 8001f7e:	0030      	movs	r0, r6
 8001f80:	f7ff f98e 	bl	80012a0 <MCI_GetMecSpeedRefUnit>
 8001f84:	2200      	movs	r2, #0
 8001f86:	0001      	movs	r1, r0
 8001f88:	0030      	movs	r0, r6
 8001f8a:	f7ff f8d1 	bl	8001130 <MCI_ExecSpeedRamp>
 8001f8e:	e7c0      	b.n	8001f12 <RI_SetRegisterMotor1+0xea>
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8001f90:	8890      	ldrh	r0, [r2, #4]
 8001f92:	8853      	ldrh	r3, [r2, #2]
 8001f94:	0400      	lsls	r0, r0, #16
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8001f96:	2106      	movs	r1, #6
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8001f98:	4318      	orrs	r0, r3
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8001f9a:	88d4      	ldrh	r4, [r2, #6]
 8001f9c:	f7fe f93e 	bl	800021c <__divsi3>
 8001fa0:	0022      	movs	r2, r4
 8001fa2:	b201      	sxth	r1, r0
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <RI_SetRegisterMotor1+0x19c>)
 8001fa6:	f7ff f8c3 	bl	8001130 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8001faa:	2400      	movs	r4, #0
            break;
 8001fac:	e761      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
 8001fae:	2405      	movs	r4, #5
 8001fb0:	e75f      	b.n	8001e72 <RI_SetRegisterMotor1+0x4a>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	ffffe4a8 	.word	0xffffe4a8
 8001fb8:	20000120 	.word	0x20000120
 8001fbc:	fffffa70 	.word	0xfffffa70
 8001fc0:	2000014c 	.word	0x2000014c
 8001fc4:	200004f8 	.word	0x200004f8

08001fc8 <RI_GetRegisterGlobal>:

uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8001fc8:	b570      	push	{r4, r5, r6, lr}
    uint8_t retVal = MCP_CMD_OK;
    switch (typeID)
 8001fca:	000c      	movs	r4, r1
 8001fcc:	3c08      	subs	r4, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8001fce:	001e      	movs	r6, r3
    switch (typeID)
 8001fd0:	b2e4      	uxtb	r4, r4
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8001fd2:	ab04      	add	r3, sp, #16
 8001fd4:	0005      	movs	r5, r0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	5e1b      	ldrsh	r3, [r3, r0]
    switch (typeID)
 8001fda:	2c20      	cmp	r4, #32
 8001fdc:	d803      	bhi.n	8001fe6 <RI_GetRegisterGlobal+0x1e>
 8001fde:	4821      	ldr	r0, [pc, #132]	; (8002064 <RI_GetRegisterGlobal+0x9c>)
 8001fe0:	00a4      	lsls	r4, r4, #2
 8001fe2:	5900      	ldr	r0, [r0, r4]
 8001fe4:	4687      	mov	pc, r0
 8001fe6:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
  return (retVal);
}
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8001fea:	2d28      	cmp	r5, #40	; 0x28
 8001fec:	d025      	beq.n	800203a <RI_GetRegisterGlobal+0x72>
        *size = (*rawSize) + 2U;
 8001fee:	8813      	ldrh	r3, [r2, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8001ff0:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	8033      	strh	r3, [r6, #0]
        break;
 8001ff8:	e7f6      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001ffa:	0008      	movs	r0, r1
        if (freeSpace > 0)
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	ddf3      	ble.n	8001fe8 <RI_GetRegisterGlobal+0x20>
          *size = 1;
 8002000:	2301      	movs	r3, #1
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002002:	2005      	movs	r0, #5
          *size = 1;
 8002004:	8033      	strh	r3, [r6, #0]
 8002006:	e7ef      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
        if (freeSpace >= 2)
 8002008:	2b01      	cmp	r3, #1
 800200a:	dd28      	ble.n	800205e <RI_GetRegisterGlobal+0x96>
          switch (regID)
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <RI_GetRegisterGlobal+0xa0>)
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <RI_GetRegisterGlobal+0xa4>)
 8002010:	18eb      	adds	r3, r5, r3
 8002012:	4013      	ands	r3, r2
    uint8_t retVal = MCP_CMD_OK;
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	4193      	sbcs	r3, r2
 8002018:	2005      	movs	r0, #5
 800201a:	425b      	negs	r3, r3
 800201c:	4018      	ands	r0, r3
          *size = 2;
 800201e:	2302      	movs	r3, #2
 8002020:	8033      	strh	r3, [r6, #0]
 8002022:	e7e1      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002024:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 8002026:	2b03      	cmp	r3, #3
 8002028:	ddde      	ble.n	8001fe8 <RI_GetRegisterGlobal+0x20>
          *size = 4;
 800202a:	2304      	movs	r3, #4
              retVal = MCP_ERROR_UNKNOWN_REG;
 800202c:	3803      	subs	r0, #3
          *size = 4;
 800202e:	8033      	strh	r3, [r6, #0]
 8002030:	e7da      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
            *size= 0 ; /* */
 8002032:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002034:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8002036:	8033      	strh	r3, [r6, #0]
            break;
 8002038:	e7d6      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800203a:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800203c:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800203e:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002040:	2b0b      	cmp	r3, #11
 8002042:	d803      	bhi.n	800204c <RI_GetRegisterGlobal+0x84>
 8002044:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002046:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002048:	8033      	strh	r3, [r6, #0]
        break;
 800204a:	e7cd      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800204c:	1c90      	adds	r0, r2, #2
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <RI_GetRegisterGlobal+0xa8>)
 8002050:	220a      	movs	r2, #10
 8002052:	f004 fa05 	bl	8006460 <memcpy>
 8002056:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8002058:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 800205a:	8033      	strh	r3, [r6, #0]
        break;
 800205c:	e7c4      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800205e:	2008      	movs	r0, #8
 8002060:	e7c2      	b.n	8001fe8 <RI_GetRegisterGlobal+0x20>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	0800673c 	.word	0x0800673c
 8002068:	fffff1b0 	.word	0xfffff1b0
 800206c:	0000ffbf 	.word	0x0000ffbf
 8002070:	080065b8 	.word	0x080065b8

08002074 <RI_GetRegisterMotor1>:

  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t retVal = MCP_CMD_OK;
    uint8_t motorID=0;
    MCI_Handle_t *pMCIN = &Mci[motorID];
    BusVoltageSensor_Handle_t* BusVoltageSensor= &BusVoltageSensor_M1._Super;
    switch (typeID)
 8002076:	000c      	movs	r4, r1
 8002078:	3c08      	subs	r4, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800207a:	001f      	movs	r7, r3
    switch (typeID)
 800207c:	b2e4      	uxtb	r4, r4
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800207e:	ab06      	add	r3, sp, #24
 8002080:	0016      	movs	r6, r2
 8002082:	0005      	movs	r5, r0
 8002084:	2200      	movs	r2, #0
 8002086:	5e9b      	ldrsh	r3, [r3, r2]
    switch (typeID)
 8002088:	2c20      	cmp	r4, #32
 800208a:	d803      	bhi.n	8002094 <RI_GetRegisterMotor1+0x20>
 800208c:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <RI_GetRegisterMotor1+0x1d4>)
 800208e:	00a4      	lsls	r4, r4, #2
 8002090:	5912      	ldr	r2, [r2, r4]
 8002092:	4697      	mov	pc, r2
 8002094:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
    return (retVal);
  }
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rawData++;
 8002098:	1cb0      	adds	r0, r6, #2
        switch (regID)
 800209a:	2de8      	cmp	r5, #232	; 0xe8
 800209c:	d06e      	beq.n	800217c <RI_GetRegisterMotor1+0x108>
 800209e:	22d4      	movs	r2, #212	; 0xd4
 80020a0:	0052      	lsls	r2, r2, #1
 80020a2:	4295      	cmp	r5, r2
 80020a4:	d073      	beq.n	800218e <RI_GetRegisterMotor1+0x11a>
 80020a6:	2da8      	cmp	r5, #168	; 0xa8
 80020a8:	d100      	bne.n	80020ac <RI_GetRegisterMotor1+0x38>
 80020aa:	e084      	b.n	80021b6 <RI_GetRegisterMotor1+0x142>
        *size = (*rawSize) + 2U;
 80020ac:	8833      	ldrh	r3, [r6, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80020ae:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80020b0:	3302      	adds	r3, #2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	803b      	strh	r3, [r7, #0]
        break;
 80020b6:	e7ee      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80020b8:	0008      	movs	r0, r1
        if (freeSpace > 0)
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	ddeb      	ble.n	8002096 <RI_GetRegisterMotor1+0x22>
          switch (regID)
 80020be:	23d9      	movs	r3, #217	; 0xd9
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	429d      	cmp	r5, r3
 80020c4:	d100      	bne.n	80020c8 <RI_GetRegisterMotor1+0x54>
 80020c6:	e09c      	b.n	8002202 <RI_GetRegisterMotor1+0x18e>
 80020c8:	d833      	bhi.n	8002132 <RI_GetRegisterMotor1+0xbe>
 80020ca:	2d48      	cmp	r5, #72	; 0x48
 80020cc:	d100      	bne.n	80020d0 <RI_GetRegisterMotor1+0x5c>
 80020ce:	e092      	b.n	80021f6 <RI_GetRegisterMotor1+0x182>
 80020d0:	2d88      	cmp	r5, #136	; 0x88
 80020d2:	d179      	bne.n	80021c8 <RI_GetRegisterMotor1+0x154>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80020d4:	485d      	ldr	r0, [pc, #372]	; (800224c <RI_GetRegisterMotor1+0x1d8>)
 80020d6:	f7ff f8b7 	bl	8001248 <MCI_GetControlMode>
 80020da:	7030      	strb	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 80020dc:	2000      	movs	r0, #0
          *size = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	803b      	strh	r3, [r7, #0]
 80020e2:	e7d8      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
        if (freeSpace >= 2)
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	dd45      	ble.n	8002174 <RI_GetRegisterMotor1+0x100>
          switch (regID)
 80020e8:	23b2      	movs	r3, #178	; 0xb2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4298      	cmp	r0, r3
 80020ee:	d100      	bne.n	80020f2 <RI_GetRegisterMotor1+0x7e>
 80020f0:	e093      	b.n	800221a <RI_GetRegisterMotor1+0x1a6>
 80020f2:	d830      	bhi.n	8002156 <RI_GetRegisterMotor1+0xe2>
 80020f4:	28d0      	cmp	r0, #208	; 0xd0
 80020f6:	d100      	bne.n	80020fa <RI_GetRegisterMotor1+0x86>
 80020f8:	e089      	b.n	800220e <RI_GetRegisterMotor1+0x19a>
 80020fa:	2388      	movs	r3, #136	; 0x88
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4298      	cmp	r0, r3
 8002100:	d121      	bne.n	8002146 <RI_GetRegisterMotor1+0xd2>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002102:	4853      	ldr	r0, [pc, #332]	; (8002250 <RI_GetRegisterMotor1+0x1dc>)
 8002104:	f003 f9b6 	bl	8005474 <PID_GetKD>
 8002108:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 800210a:	2000      	movs	r0, #0
          *size = 2;
 800210c:	2302      	movs	r3, #2
 800210e:	803b      	strh	r3, [r7, #0]
 8002110:	e7c1      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
        if (freeSpace >= 4)
 8002112:	2b03      	cmp	r3, #3
 8002114:	dd2e      	ble.n	8002174 <RI_GetRegisterMotor1+0x100>
          switch (regID)
 8002116:	2858      	cmp	r0, #88	; 0x58
 8002118:	d067      	beq.n	80021ea <RI_GetRegisterMotor1+0x176>
 800211a:	2898      	cmp	r0, #152	; 0x98
 800211c:	d05c      	beq.n	80021d8 <RI_GetRegisterMotor1+0x164>
 800211e:	2005      	movs	r0, #5
 8002120:	2d18      	cmp	r5, #24
 8002122:	d053      	beq.n	80021cc <RI_GetRegisterMotor1+0x158>
          *size = 4;
 8002124:	2304      	movs	r3, #4
 8002126:	803b      	strh	r3, [r7, #0]
 8002128:	e7b5      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
            *size= 0 ; /* */
 800212a:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 800212c:	2005      	movs	r0, #5
            *size= 0 ; /* */
 800212e:	803b      	strh	r3, [r7, #0]
            break;
 8002130:	e7b1      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
 8002132:	23e1      	movs	r3, #225	; 0xe1
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	429d      	cmp	r5, r3
 8002138:	d146      	bne.n	80021c8 <RI_GetRegisterMotor1+0x154>
              *data = PWMC_GetQuasiSynchState(&(&PWM_Handle_M1)->_Super);
 800213a:	4846      	ldr	r0, [pc, #280]	; (8002254 <RI_GetRegisterMotor1+0x1e0>)
 800213c:	f003 fa04 	bl	8005548 <PWMC_GetQuasiSynchState>
 8002140:	7030      	strb	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002142:	2000      	movs	r0, #0
              break;
 8002144:	e7cb      	b.n	80020de <RI_GetRegisterMotor1+0x6a>
 8002146:	2890      	cmp	r0, #144	; 0x90
 8002148:	d116      	bne.n	8002178 <RI_GetRegisterMotor1+0x104>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 800214a:	4841      	ldr	r0, [pc, #260]	; (8002250 <RI_GetRegisterMotor1+0x1dc>)
 800214c:	f003 f984 	bl	8005458 <PID_GetKP>
 8002150:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002152:	2000      	movs	r0, #0
              break;
 8002154:	e7da      	b.n	800210c <RI_GetRegisterMotor1+0x98>
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <RI_GetRegisterMotor1+0x1e4>)
 8002158:	4a40      	ldr	r2, [pc, #256]	; (800225c <RI_GetRegisterMotor1+0x1e8>)
 800215a:	18c3      	adds	r3, r0, r3
 800215c:	4213      	tst	r3, r2
 800215e:	d048      	beq.n	80021f2 <RI_GetRegisterMotor1+0x17e>
 8002160:	23ba      	movs	r3, #186	; 0xba
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4298      	cmp	r0, r3
 8002166:	d107      	bne.n	8002178 <RI_GetRegisterMotor1+0x104>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002168:	483d      	ldr	r0, [pc, #244]	; (8002260 <RI_GetRegisterMotor1+0x1ec>)
 800216a:	f003 f959 	bl	8005420 <NTC_GetAvTemp_C>
 800216e:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002170:	2000      	movs	r0, #0
              break;
 8002172:	e7cb      	b.n	800210c <RI_GetRegisterMotor1+0x98>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002174:	2008      	movs	r0, #8
 8002176:	e78e      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
 8002178:	2005      	movs	r0, #5
 800217a:	e7c7      	b.n	800210c <RI_GetRegisterMotor1+0x98>
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 800217c:	220b      	movs	r2, #11
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800217e:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002180:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d84f      	bhi.n	8002226 <RI_GetRegisterMotor1+0x1b2>
 8002186:	230d      	movs	r3, #13
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002188:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 800218a:	803b      	strh	r3, [r7, #0]
        break;
 800218c:	e783      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 800218e:	4c2f      	ldr	r4, [pc, #188]	; (800224c <RI_GetRegisterMotor1+0x1d8>)
 8002190:	0020      	movs	r0, r4
 8002192:	f7ff f869 	bl	8001268 <MCI_GetLastRampFinalSpeed>
 8002196:	0043      	lsls	r3, r0, #1
 8002198:	1818      	adds	r0, r3, r0
 800219a:	0040      	lsls	r0, r0, #1
            *rpm16p = (uint16_t)rpm32;
 800219c:	8070      	strh	r0, [r6, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 800219e:	1400      	asrs	r0, r0, #16
 80021a0:	80b0      	strh	r0, [r6, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80021a2:	0020      	movs	r0, r4
 80021a4:	f7ff f864 	bl	8001270 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80021a8:	2306      	movs	r3, #6
 80021aa:	8033      	strh	r3, [r6, #0]
            break;
 80021ac:	3302      	adds	r3, #2
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80021ae:	80f0      	strh	r0, [r6, #6]
    uint8_t retVal = MCP_CMD_OK;
 80021b0:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 80021b2:	803b      	strh	r3, [r7, #0]
        break;
 80021b4:	e76f      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80021b6:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80021b8:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80021ba:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d83a      	bhi.n	8002236 <RI_GetRegisterMotor1+0x1c2>
 80021c0:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80021c2:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80021c4:	803b      	strh	r3, [r7, #0]
        break;
 80021c6:	e766      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
 80021c8:	2005      	movs	r0, #5
 80021ca:	e788      	b.n	80020de <RI_GetRegisterMotor1+0x6a>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80021cc:	481f      	ldr	r0, [pc, #124]	; (800224c <RI_GetRegisterMotor1+0x1d8>)
 80021ce:	f7ff f835 	bl	800123c <MCI_GetFaultState>
 80021d2:	6030      	str	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 80021d4:	2000      	movs	r0, #0
              break;
 80021d6:	e7a5      	b.n	8002124 <RI_GetRegisterMotor1+0xb0>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80021d8:	481c      	ldr	r0, [pc, #112]	; (800224c <RI_GetRegisterMotor1+0x1d8>)
 80021da:	f7ff f861 	bl	80012a0 <MCI_GetMecSpeedRefUnit>
 80021de:	0043      	lsls	r3, r0, #1
 80021e0:	181b      	adds	r3, r3, r0
 80021e2:	005b      	lsls	r3, r3, #1
    uint8_t retVal = MCP_CMD_OK;
 80021e4:	2000      	movs	r0, #0
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80021e6:	6033      	str	r3, [r6, #0]
              break;
 80021e8:	e79c      	b.n	8002124 <RI_GetRegisterMotor1+0xb0>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80021ea:	4818      	ldr	r0, [pc, #96]	; (800224c <RI_GetRegisterMotor1+0x1d8>)
 80021ec:	f7ff f850 	bl	8001290 <MCI_GetAvrgMecSpeedUnit>
 80021f0:	e7f5      	b.n	80021de <RI_GetRegisterMotor1+0x16a>
    uint8_t retVal = MCP_CMD_OK;
 80021f2:	2000      	movs	r0, #0
 80021f4:	e78a      	b.n	800210c <RI_GetRegisterMotor1+0x98>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80021f6:	4815      	ldr	r0, [pc, #84]	; (800224c <RI_GetRegisterMotor1+0x1d8>)
 80021f8:	f7fe ffd2 	bl	80011a0 <MCI_GetSTMState>
 80021fc:	7030      	strb	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 80021fe:	2000      	movs	r0, #0
              break;
 8002200:	e76d      	b.n	80020de <RI_GetRegisterMotor1+0x6a>
              *data = PWMC_GetFastDemagState(&(&PWM_Handle_M1)->_Super);
 8002202:	4814      	ldr	r0, [pc, #80]	; (8002254 <RI_GetRegisterMotor1+0x1e0>)
 8002204:	f003 f998 	bl	8005538 <PWMC_GetFastDemagState>
 8002208:	7030      	strb	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 800220a:	2000      	movs	r0, #0
              break;
 800220c:	e767      	b.n	80020de <RI_GetRegisterMotor1+0x6a>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 800220e:	4810      	ldr	r0, [pc, #64]	; (8002250 <RI_GetRegisterMotor1+0x1dc>)
 8002210:	f003 f926 	bl	8005460 <PID_GetKI>
 8002214:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002216:	2000      	movs	r0, #0
              break;
 8002218:	e778      	b.n	800210c <RI_GetRegisterMotor1+0x98>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 800221a:	4812      	ldr	r0, [pc, #72]	; (8002264 <RI_GetRegisterMotor1+0x1f0>)
 800221c:	f002 fc82 	bl	8004b24 <VBS_GetAvBusVoltage_V>
 8002220:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002222:	2000      	movs	r0, #0
              break;
 8002224:	e772      	b.n	800210c <RI_GetRegisterMotor1+0x98>
              SixStepFwConfig_reg_t const *pSixStepConfig_reg = SixStepConfig_reg[motorID];
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <RI_GetRegisterMotor1+0x1f4>)
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	f004 f919 	bl	8006460 <memcpy>
 800222e:	230d      	movs	r3, #13
    uint8_t retVal = MCP_CMD_OK;
 8002230:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002232:	803b      	strh	r3, [r7, #0]
        break;
 8002234:	e72f      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <RI_GetRegisterMotor1+0x1f8>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	f004 f911 	bl	8006460 <memcpy>
 800223e:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8002240:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002242:	803b      	strh	r3, [r7, #0]
        break;
 8002244:	e727      	b.n	8002096 <RI_GetRegisterMotor1+0x22>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	080067c0 	.word	0x080067c0
 800224c:	200004f8 	.word	0x200004f8
 8002250:	20000120 	.word	0x20000120
 8002254:	2000014c 	.word	0x2000014c
 8002258:	fffff1b0 	.word	0xfffff1b0
 800225c:	0000ffbf 	.word	0x0000ffbf
 8002260:	20000220 	.word	0x20000220
 8002264:	200000f8 	.word	0x200000f8
 8002268:	2000028c 	.word	0x2000028c
 800226c:	20000288 	.word	0x20000288

08002270 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002270:	4955      	ldr	r1, [pc, #340]	; (80023c8 <RCM_RegisterRegConv+0x158>)
{
 8002272:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002274:	680b      	ldr	r3, [r1, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d029      	beq.n	80022ce <RCM_RegisterRegConv+0x5e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800227a:	791e      	ldrb	r6, [r3, #4]
 800227c:	7904      	ldrb	r4, [r0, #4]
 800227e:	42a6      	cmp	r6, r4
 8002280:	d019      	beq.n	80022b6 <RCM_RegisterRegConv+0x46>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002282:	684d      	ldr	r5, [r1, #4]
 8002284:	2d00      	cmp	r5, #0
 8002286:	d03b      	beq.n	8002300 <RCM_RegisterRegConv+0x90>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002288:	792a      	ldrb	r2, [r5, #4]
  uint8_t handle = 255U;
 800228a:	23ff      	movs	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800228c:	42a2      	cmp	r2, r4
 800228e:	d025      	beq.n	80022dc <RCM_RegisterRegConv+0x6c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002290:	688d      	ldr	r5, [r1, #8]
 8002292:	2d00      	cmp	r5, #0
 8002294:	d05d      	beq.n	8002352 <RCM_RegisterRegConv+0xe2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002296:	792a      	ldrb	r2, [r5, #4]
 8002298:	42a2      	cmp	r2, r4
 800229a:	d029      	beq.n	80022f0 <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800229c:	68cd      	ldr	r5, [r1, #12]
 800229e:	2d00      	cmp	r5, #0
 80022a0:	d064      	beq.n	800236c <RCM_RegisterRegConv+0xfc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022a2:	792a      	ldrb	r2, [r5, #4]
 80022a4:	42a2      	cmp	r2, r4
 80022a6:	d068      	beq.n	800237a <RCM_RegisterRegConv+0x10a>
    while (i < RCM_MAX_CONV)
 80022a8:	021c      	lsls	r4, r3, #8
 80022aa:	431c      	orrs	r4, r3
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d95b      	bls.n	8002368 <RCM_RegisterRegConv+0xf8>
 80022b0:	23ff      	movs	r3, #255	; 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 80022b2:	7303      	strb	r3, [r0, #12]
}
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6802      	ldr	r2, [r0, #0]
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d026      	beq.n	800230c <RCM_RegisterRegConv+0x9c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022be:	684d      	ldr	r5, [r1, #4]
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	d1e1      	bne.n	8002288 <RCM_RegisterRegConv+0x18>
 80022c4:	688d      	ldr	r5, [r1, #8]
 80022c6:	2d00      	cmp	r5, #0
 80022c8:	d071      	beq.n	80023ae <RCM_RegisterRegConv+0x13e>
      i++;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e7e3      	b.n	8002296 <RCM_RegisterRegConv+0x26>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022ce:	684d      	ldr	r5, [r1, #4]
 80022d0:	2d00      	cmp	r5, #0
 80022d2:	d065      	beq.n	80023a0 <RCM_RegisterRegConv+0x130>
 80022d4:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022d6:	792a      	ldrb	r2, [r5, #4]
 80022d8:	42a2      	cmp	r2, r4
 80022da:	d1d9      	bne.n	8002290 <RCM_RegisterRegConv+0x20>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80022dc:	682d      	ldr	r5, [r5, #0]
 80022de:	6802      	ldr	r2, [r0, #0]
 80022e0:	4295      	cmp	r5, r2
 80022e2:	d1d5      	bne.n	8002290 <RCM_RegisterRegConv+0x20>
 80022e4:	2302      	movs	r3, #2
 80022e6:	33ff      	adds	r3, #255	; 0xff
 80022e8:	1c1c      	adds	r4, r3, #0
      i++;
 80022ea:	3b01      	subs	r3, #1
 80022ec:	3bff      	subs	r3, #255	; 0xff
 80022ee:	e00f      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80022f0:	682d      	ldr	r5, [r5, #0]
 80022f2:	6802      	ldr	r2, [r0, #0]
 80022f4:	4295      	cmp	r5, r2
 80022f6:	d1d1      	bne.n	800229c <RCM_RegisterRegConv+0x2c>
 80022f8:	4b34      	ldr	r3, [pc, #208]	; (80023cc <RCM_RegisterRegConv+0x15c>)
 80022fa:	1c1c      	adds	r4, r3, #0
      i++;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e007      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
 8002300:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002302:	688d      	ldr	r5, [r1, #8]
 8002304:	2d00      	cmp	r5, #0
 8002306:	d042      	beq.n	800238e <RCM_RegisterRegConv+0x11e>
 8002308:	7904      	ldrb	r4, [r0, #4]
 800230a:	e7c4      	b.n	8002296 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800230c:	2400      	movs	r4, #0
    uint8_t i = 0;
 800230e:	2300      	movs	r3, #0
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002310:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 8002312:	009d      	lsls	r5, r3, #2
 8002314:	5148      	str	r0, [r1, r5]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002316:	492e      	ldr	r1, [pc, #184]	; (80023d0 <RCM_RegisterRegConv+0x160>)
 8002318:	00dd      	lsls	r5, r3, #3
 800231a:	506e      	str	r6, [r5, r1]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800231c:	6891      	ldr	r1, [r2, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800231e:	07c9      	lsls	r1, r1, #31
 8002320:	d40e      	bmi.n	8002340 <RCM_RegisterRegConv+0xd0>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002322:	6895      	ldr	r5, [r2, #8]
 8002324:	492b      	ldr	r1, [pc, #172]	; (80023d4 <RCM_RegisterRegConv+0x164>)
 8002326:	400d      	ands	r5, r1
 8002328:	3118      	adds	r1, #24
 800232a:	4329      	orrs	r1, r5
 800232c:	6091      	str	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800232e:	6891      	ldr	r1, [r2, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002330:	2900      	cmp	r1, #0
 8002332:	dbfc      	blt.n	800232e <RCM_RegisterRegConv+0xbe>
  MODIFY_REG(ADCx->CR,
 8002334:	6891      	ldr	r1, [r2, #8]
 8002336:	4d27      	ldr	r5, [pc, #156]	; (80023d4 <RCM_RegisterRegConv+0x164>)
 8002338:	4029      	ands	r1, r5
 800233a:	2501      	movs	r5, #1
 800233c:	4329      	orrs	r1, r5
 800233e:	6091      	str	r1, [r2, #8]
      RCM_NoInj_array[handle].enable = false;
 8002340:	2500      	movs	r5, #0
 8002342:	0059      	lsls	r1, r3, #1
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <RCM_RegisterRegConv+0x168>)
 8002346:	18c9      	adds	r1, r1, r3
 8002348:	0049      	lsls	r1, r1, #1
 800234a:	548d      	strb	r5, [r1, r2]
      RCM_NoInj_array[handle].prev = handle;
 800234c:	1852      	adds	r2, r2, r1
 800234e:	8094      	strh	r4, [r2, #4]
 8002350:	e7af      	b.n	80022b2 <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002352:	2b04      	cmp	r3, #4
 8002354:	d91a      	bls.n	800238c <RCM_RegisterRegConv+0x11c>
 8002356:	68cb      	ldr	r3, [r1, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800235c:	791a      	ldrb	r2, [r3, #4]
 800235e:	4294      	cmp	r4, r2
 8002360:	d020      	beq.n	80023a4 <RCM_RegisterRegConv+0x134>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <RCM_RegisterRegConv+0x15c>)
 8002364:	1c1c      	adds	r4, r3, #0
      i++;
 8002366:	2302      	movs	r3, #2
 8002368:	6802      	ldr	r2, [r0, #0]
 800236a:	e7d1      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800236c:	2b04      	cmp	r3, #4
 800236e:	d913      	bls.n	8002398 <RCM_RegisterRegConv+0x128>
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <RCM_RegisterRegConv+0x16c>)
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	1c1c      	adds	r4, r3, #0
      i++;
 8002376:	2303      	movs	r3, #3
 8002378:	e7ca      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
 800237a:	6802      	ldr	r2, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800237c:	682c      	ldr	r4, [r5, #0]
 800237e:	4294      	cmp	r4, r2
 8002380:	d000      	beq.n	8002384 <RCM_RegisterRegConv+0x114>
 8002382:	e791      	b.n	80022a8 <RCM_RegisterRegConv+0x38>
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <RCM_RegisterRegConv+0x16c>)
 8002386:	1c1c      	adds	r4, r3, #0
      i++;
 8002388:	2303      	movs	r3, #3
 800238a:	e7c1      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800238c:	2300      	movs	r3, #0
 800238e:	68cd      	ldr	r5, [r1, #12]
 8002390:	2d00      	cmp	r5, #0
 8002392:	d001      	beq.n	8002398 <RCM_RegisterRegConv+0x128>
 8002394:	7904      	ldrb	r4, [r0, #4]
 8002396:	e784      	b.n	80022a2 <RCM_RegisterRegConv+0x32>
 8002398:	6802      	ldr	r2, [r0, #0]
    while (i < RCM_MAX_CONV)
 800239a:	021c      	lsls	r4, r3, #8
 800239c:	431c      	orrs	r4, r3
    if (handle < RCM_MAX_CONV)
 800239e:	e7b7      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e7ae      	b.n	8002302 <RCM_RegisterRegConv+0x92>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6802      	ldr	r2, [r0, #0]
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d0eb      	beq.n	8002384 <RCM_RegisterRegConv+0x114>
 80023ac:	e7a4      	b.n	80022f8 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80023ae:	68cd      	ldr	r5, [r1, #12]
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d006      	beq.n	80023c2 <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80023b4:	792c      	ldrb	r4, [r5, #4]
      i++;
 80023b6:	2301      	movs	r3, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80023b8:	42b4      	cmp	r4, r6
 80023ba:	d0df      	beq.n	800237c <RCM_RegisterRegConv+0x10c>
 80023bc:	2402      	movs	r4, #2
 80023be:	34ff      	adds	r4, #255	; 0xff
 80023c0:	e7a6      	b.n	8002310 <RCM_RegisterRegConv+0xa0>
      i++;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e7e9      	b.n	800239a <RCM_RegisterRegConv+0x12a>
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	20000698 	.word	0x20000698
 80023cc:	00000202 	.word	0x00000202
 80023d0:	20000654 	.word	0x20000654
 80023d4:	7fffffe8 	.word	0x7fffffe8
 80023d8:	20000674 	.word	0x20000674
 80023dc:	00000303 	.word	0x00000303

080023e0 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 80023e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 80023e2:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <RCM_ExecRegularConv+0x170>)
 80023e6:	0050      	lsls	r0, r2, #1
 80023e8:	1881      	adds	r1, r0, r2
 80023ea:	0049      	lsls	r1, r1, #1
 80023ec:	5c59      	ldrb	r1, [r3, r1]
 80023ee:	2900      	cmp	r1, #0
 80023f0:	d142      	bne.n	8002478 <RCM_ExecRegularConv+0x98>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 80023f2:	7819      	ldrb	r1, [r3, #0]
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d11c      	bne.n	8002432 <RCM_ExecRegularConv+0x52>
  uint8_t LastEnable = RCM_MAX_CONV;
 80023f8:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 80023fa:	7999      	ldrb	r1, [r3, #6]
 80023fc:	2900      	cmp	r1, #0
 80023fe:	d100      	bne.n	8002402 <RCM_ExecRegularConv+0x22>
 8002400:	e07a      	b.n	80024f8 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array[i].next > handle)
 8002402:	7add      	ldrb	r5, [r3, #11]
 8002404:	42aa      	cmp	r2, r5
 8002406:	d200      	bcs.n	800240a <RCM_ExecRegularConv+0x2a>
 8002408:	e094      	b.n	8002534 <RCM_ExecRegularConv+0x154>
      if (true == RCM_NoInj_array [i].enable)
 800240a:	7b19      	ldrb	r1, [r3, #12]
 800240c:	2900      	cmp	r1, #0
 800240e:	d100      	bne.n	8002412 <RCM_ExecRegularConv+0x32>
 8002410:	e093      	b.n	800253a <RCM_ExecRegularConv+0x15a>
        if (RCM_NoInj_array[i].next > handle)
 8002412:	7c5d      	ldrb	r5, [r3, #17]
 8002414:	42aa      	cmp	r2, r5
 8002416:	d200      	bcs.n	800241a <RCM_ExecRegularConv+0x3a>
 8002418:	e094      	b.n	8002544 <RCM_ExecRegularConv+0x164>
      if (true == RCM_NoInj_array [i].enable)
 800241a:	7c99      	ldrb	r1, [r3, #18]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 800241c:	2502      	movs	r5, #2
      if (true == RCM_NoInj_array [i].enable)
 800241e:	2900      	cmp	r1, #0
 8002420:	d100      	bne.n	8002424 <RCM_ExecRegularConv+0x44>
 8002422:	e073      	b.n	800250c <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8002424:	7ddd      	ldrb	r5, [r3, #23]
 8002426:	4295      	cmp	r5, r2
 8002428:	d800      	bhi.n	800242c <RCM_ExecRegularConv+0x4c>
 800242a:	e08e      	b.n	800254a <RCM_ExecRegularConv+0x16a>
      i++;
 800242c:	2603      	movs	r6, #3
      if (true == RCM_NoInj_array [i].enable)
 800242e:	2403      	movs	r4, #3
 8002430:	e005      	b.n	800243e <RCM_ExecRegularConv+0x5e>
        if (RCM_NoInj_array[i].next > handle)
 8002432:	795d      	ldrb	r5, [r3, #5]
 8002434:	4295      	cmp	r5, r2
 8002436:	d800      	bhi.n	800243a <RCM_ExecRegularConv+0x5a>
 8002438:	e076      	b.n	8002528 <RCM_ExecRegularConv+0x148>
  uint8_t i=0;
 800243a:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 800243c:	2400      	movs	r4, #0
          RCM_NoInj_array[handle].next = formerNext;
 800243e:	1881      	adds	r1, r0, r2
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	1859      	adds	r1, r3, r1
 8002444:	714d      	strb	r5, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 8002446:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8002448:	0061      	lsls	r1, r4, #1
 800244a:	1909      	adds	r1, r1, r4
 800244c:	0049      	lsls	r1, r1, #1
 800244e:	1859      	adds	r1, r3, r1
 8002450:	714a      	strb	r2, [r1, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8002452:	0069      	lsls	r1, r5, #1
 8002454:	1949      	adds	r1, r1, r5
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8002456:	0049      	lsls	r1, r1, #1
 8002458:	1859      	adds	r1, r3, r1
 800245a:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800245c:	493d      	ldr	r1, [pc, #244]	; (8002554 <RCM_ExecRegularConv+0x174>)
 800245e:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 8002460:	2601      	movs	r6, #1
 8002462:	1884      	adds	r4, r0, r2
 8002464:	0064      	lsls	r4, r4, #1
 8002466:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002468:	006c      	lsls	r4, r5, #1
 800246a:	1964      	adds	r4, r4, r5
 800246c:	0064      	lsls	r4, r4, #1
 800246e:	191c      	adds	r4, r3, r4
 8002470:	7864      	ldrb	r4, [r4, #1]
 8002472:	2c01      	cmp	r4, #1
 8002474:	d000      	beq.n	8002478 <RCM_ExecRegularConv+0x98>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8002476:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == Bemf_ADC_M1.ADCRegularLocked)
 8002478:	2450      	movs	r4, #80	; 0x50
 800247a:	4937      	ldr	r1, [pc, #220]	; (8002558 <RCM_ExecRegularConv+0x178>)
 800247c:	5d09      	ldrb	r1, [r1, r4]
 800247e:	2900      	cmp	r1, #0
 8002480:	d135      	bne.n	80024ee <RCM_ExecRegularConv+0x10e>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002482:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8002484:	4e35      	ldr	r6, [pc, #212]	; (800255c <RCM_ExecRegularConv+0x17c>)
 8002486:	0091      	lsls	r1, r2, #2
 8002488:	5875      	ldr	r5, [r6, r1]
 800248a:	6829      	ldr	r1, [r5, #0]
 800248c:	68cc      	ldr	r4, [r1, #12]
 800248e:	43bc      	bics	r4, r7
 8002490:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002492:	68cc      	ldr	r4, [r1, #12]
 8002494:	4f32      	ldr	r7, [pc, #200]	; (8002560 <RCM_ExecRegularConv+0x180>)
 8002496:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002498:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800249a:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800249c:	694c      	ldr	r4, [r1, #20]
 800249e:	43bc      	bics	r4, r7
 80024a0:	68af      	ldr	r7, [r5, #8]
 80024a2:	433c      	orrs	r4, r7
 80024a4:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024a6:	2480      	movs	r4, #128	; 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80024a8:	792d      	ldrb	r5, [r5, #4]
 80024aa:	01a4      	lsls	r4, r4, #6
 80024ac:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80024ae:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024b0:	0b64      	lsrs	r4, r4, #13
 80024b2:	628c      	str	r4, [r1, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80024b4:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 80024b6:	688c      	ldr	r4, [r1, #8]
 80024b8:	4f2a      	ldr	r7, [pc, #168]	; (8002564 <RCM_ExecRegularConv+0x184>)
 80024ba:	403c      	ands	r4, r7
 80024bc:	432c      	orrs	r4, r5
 80024be:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80024c0:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 80024c2:	4225      	tst	r5, r4
 80024c4:	d0fc      	beq.n	80024c0 <RCM_ExecRegularConv+0xe0>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80024c6:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80024c8:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80024ca:	1881      	adds	r1, r0, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 80024cc:	4d21      	ldr	r5, [pc, #132]	; (8002554 <RCM_ExecRegularConv+0x174>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80024ce:	0049      	lsls	r1, r1, #1
 80024d0:	1859      	adds	r1, r3, r1
 80024d2:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 80024d4:	782c      	ldrb	r4, [r5, #0]
 80024d6:	00a4      	lsls	r4, r4, #2
 80024d8:	5934      	ldr	r4, [r6, r4]
 80024da:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80024dc:	68f4      	ldr	r4, [r6, #12]
 80024de:	43bc      	bics	r4, r7
 80024e0:	3f02      	subs	r7, #2
 80024e2:	433c      	orrs	r4, r7
 80024e4:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80024e6:	794c      	ldrb	r4, [r1, #5]
 80024e8:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 80024ea:	2402      	movs	r4, #2
 80024ec:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80024ee:	1880      	adds	r0, r0, r2
 80024f0:	0040      	lsls	r0, r0, #1
 80024f2:	181b      	adds	r3, r3, r0
  return (retVal);
 80024f4:	8858      	ldrh	r0, [r3, #2]
}
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (true == RCM_NoInj_array [i].enable)
 80024f8:	7b19      	ldrb	r1, [r3, #12]
 80024fa:	2900      	cmp	r1, #0
 80024fc:	d000      	beq.n	8002500 <RCM_ExecRegularConv+0x120>
 80024fe:	e788      	b.n	8002412 <RCM_ExecRegularConv+0x32>
 8002500:	7c99      	ldrb	r1, [r3, #18]
 8002502:	2900      	cmp	r1, #0
 8002504:	d000      	beq.n	8002508 <RCM_ExecRegularConv+0x128>
 8002506:	e78d      	b.n	8002424 <RCM_ExecRegularConv+0x44>
       if (LastEnable != RCM_MAX_CONV )
 8002508:	2d04      	cmp	r5, #4
 800250a:	d00f      	beq.n	800252c <RCM_ExecRegularConv+0x14c>
         formerNext = RCM_NoInj_array[LastEnable].next;
 800250c:	0069      	lsls	r1, r5, #1
 800250e:	1949      	adds	r1, r1, r5
 8002510:	0049      	lsls	r1, r1, #1
 8002512:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 8002514:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002516:	794e      	ldrb	r6, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8002518:	0064      	lsls	r4, r4, #1
 800251a:	191c      	adds	r4, r3, r4
 800251c:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 800251e:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8002520:	0071      	lsls	r1, r6, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8002522:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 8002524:	1989      	adds	r1, r1, r6
 8002526:	e796      	b.n	8002456 <RCM_ExecRegularConv+0x76>
  uint8_t i=0;
 8002528:	2500      	movs	r5, #0
 800252a:	e766      	b.n	80023fa <RCM_ExecRegularConv+0x1a>
         RCM_currentHandle = handle;
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <RCM_ExecRegularConv+0x174>)
 800252e:	0015      	movs	r5, r2
 8002530:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 8002532:	e795      	b.n	8002460 <RCM_ExecRegularConv+0x80>
      i++;
 8002534:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8002536:	2401      	movs	r4, #1
 8002538:	e781      	b.n	800243e <RCM_ExecRegularConv+0x5e>
 800253a:	7c99      	ldrb	r1, [r3, #18]
      i++;
 800253c:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 800253e:	2900      	cmp	r1, #0
 8002540:	d0e4      	beq.n	800250c <RCM_ExecRegularConv+0x12c>
 8002542:	e76f      	b.n	8002424 <RCM_ExecRegularConv+0x44>
      i++;
 8002544:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8002546:	2402      	movs	r4, #2
 8002548:	e779      	b.n	800243e <RCM_ExecRegularConv+0x5e>
      i++;
 800254a:	2503      	movs	r5, #3
 800254c:	e7de      	b.n	800250c <RCM_ExecRegularConv+0x12c>
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	20000674 	.word	0x20000674
 8002554:	20000694 	.word	0x20000694
 8002558:	20000000 	.word	0x20000000
 800255c:	20000698 	.word	0x20000698
 8002560:	fffff23f 	.word	0xfffff23f
 8002564:	7fffffe8 	.word	0x7fffffe8

08002568 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <RCM_ExecUserConv+0x50>)
 800256c:	681c      	ldr	r4, [r3, #0]
 800256e:	2c00      	cmp	r4, #0
 8002570:	d004      	beq.n	800257c <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002572:	4d12      	ldr	r5, [pc, #72]	; (80025bc <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 8002574:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002576:	782b      	ldrb	r3, [r5, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d000      	beq.n	800257e <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800257e:	0020      	movs	r0, r4
 8002580:	f7ff ff2e 	bl	80023e0 <RCM_ExecRegularConv>
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8002586:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002588:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 800258a:	1992      	adds	r2, r2, r6
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <RCM_ExecUserConv+0x5c>)
 800258e:	0052      	lsls	r2, r2, #1
 8002590:	189b      	adds	r3, r3, r2
 8002592:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002594:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 800259a:	2302      	movs	r3, #2
 800259c:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <RCM_ExecUserConv+0x60>)
 80025a0:	00f6      	lsls	r6, r6, #3
 80025a2:	58f7      	ldr	r7, [r6, r3]
 80025a4:	2f00      	cmp	r7, #0
 80025a6:	d0e9      	beq.n	800257c <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80025a8:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80025aa:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80025ac:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80025ae:	0020      	movs	r0, r4
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	47b8      	blx	r7
}
 80025b4:	e7e2      	b.n	800257c <RCM_ExecUserConv+0x14>
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	2000068c 	.word	0x2000068c
 80025bc:	20000690 	.word	0x20000690
 80025c0:	20000692 	.word	0x20000692
 80025c4:	20000674 	.word	0x20000674
 80025c8:	20000654 	.word	0x20000654

080025cc <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <RCM_ExecNextConv+0x5c>)
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <RCM_ExecNextConv+0x60>)
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	0053      	lsls	r3, r2, #1
 80025d6:	189b      	adds	r3, r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	5c58      	ldrb	r0, [r3, r1]
 80025dc:	2800      	cmp	r0, #0
 80025de:	d021      	beq.n	8002624 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80025e0:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80025e2:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80025e4:	4812      	ldr	r0, [pc, #72]	; (8002630 <RCM_ExecNextConv+0x64>)
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80025ea:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80025ec:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80025ee:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80025f0:	68d0      	ldr	r0, [r2, #12]
 80025f2:	43b0      	bics	r0, r6
 80025f4:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80025f6:	68d0      	ldr	r0, [r2, #12]
 80025f8:	4e0e      	ldr	r6, [pc, #56]	; (8002634 <RCM_ExecNextConv+0x68>)
 80025fa:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80025fc:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80025fe:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002600:	6950      	ldr	r0, [r2, #20]
 8002602:	43b0      	bics	r0, r6
 8002604:	68a6      	ldr	r6, [r4, #8]
 8002606:	4330      	orrs	r0, r6
 8002608:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800260a:	7920      	ldrb	r0, [r4, #4]
 800260c:	2401      	movs	r4, #1
 800260e:	0026      	movs	r6, r4
 8002610:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002612:	0370      	lsls	r0, r6, #13
 8002614:	0b40      	lsrs	r0, r0, #13
 8002616:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8002618:	6890      	ldr	r0, [r2, #8]
 800261a:	4e07      	ldr	r6, [pc, #28]	; (8002638 <RCM_ExecNextConv+0x6c>)
 800261c:	4030      	ands	r0, r6
 800261e:	4328      	orrs	r0, r5
 8002620:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002622:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	20000694 	.word	0x20000694
 800262c:	20000674 	.word	0x20000674
 8002630:	20000698 	.word	0x20000698
 8002634:	fffff23f 	.word	0xfffff23f
 8002638:	7fffffe8 	.word	0x7fffffe8

0800263c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800263e:	4c13      	ldr	r4, [pc, #76]	; (800268c <RCM_ReadOngoingConv+0x50>)
 8002640:	4913      	ldr	r1, [pc, #76]	; (8002690 <RCM_ReadOngoingConv+0x54>)
 8002642:	7820      	ldrb	r0, [r4, #0]
 8002644:	0042      	lsls	r2, r0, #1
 8002646:	1813      	adds	r3, r2, r0
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	5ccd      	ldrb	r5, [r1, r3]
 800264c:	2d00      	cmp	r5, #0
 800264e:	d00f      	beq.n	8002670 <RCM_ReadOngoingConv+0x34>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002650:	2702      	movs	r7, #2
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002652:	4d10      	ldr	r5, [pc, #64]	; (8002694 <RCM_ReadOngoingConv+0x58>)
 8002654:	0086      	lsls	r6, r0, #2
 8002656:	5975      	ldr	r5, [r6, r5]
    status = RCM_NoInj_array[RCM_currentHandle].status;
 8002658:	18cb      	adds	r3, r1, r3
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800265a:	682e      	ldr	r6, [r5, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800265c:	6835      	ldr	r5, [r6, #0]
 800265e:	46ac      	mov	ip, r5
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002660:	785d      	ldrb	r5, [r3, #1]
 8002662:	43bd      	bics	r5, r7
 8002664:	d105      	bne.n	8002672 <RCM_ReadOngoingConv+0x36>
      /* Restore back DMA configuration */
      LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002666:	1812      	adds	r2, r2, r0
 8002668:	0052      	lsls	r2, r2, #1
 800266a:	1889      	adds	r1, r1, r2
 800266c:	794b      	ldrb	r3, [r1, #5]
 800266e:	7023      	strb	r3, [r4, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8002670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002672:	4665      	mov	r5, ip
 8002674:	076d      	lsls	r5, r5, #29
 8002676:	d5f6      	bpl.n	8002666 <RCM_ReadOngoingConv+0x2a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002678:	6c35      	ldr	r5, [r6, #64]	; 0x40
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 800267a:	705f      	strb	r7, [r3, #1]
                    = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 800267c:	805d      	strh	r5, [r3, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800267e:	2503      	movs	r5, #3
 8002680:	68f3      	ldr	r3, [r6, #12]
 8002682:	43ab      	bics	r3, r5
 8002684:	3d02      	subs	r5, #2
 8002686:	432b      	orrs	r3, r5
 8002688:	60f3      	str	r3, [r6, #12]
}
 800268a:	e7ec      	b.n	8002666 <RCM_ReadOngoingConv+0x2a>
 800268c:	20000694 	.word	0x20000694
 8002690:	20000674 	.word	0x20000674
 8002694:	20000698 	.word	0x20000698

08002698 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002698:	2201      	movs	r2, #1
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_MspInit+0x2c>)
{
 800269c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	6999      	ldr	r1, [r3, #24]
 80026a0:	4311      	orrs	r1, r2
 80026a2:	6199      	str	r1, [r3, #24]
 80026a4:	6999      	ldr	r1, [r3, #24]
 80026a6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	0549      	lsls	r1, r1, #21
 80026b2:	430a      	orrs	r2, r1
 80026b4:	61da      	str	r2, [r3, #28]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	400b      	ands	r3, r1
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026be:	b002      	add	sp, #8
 80026c0:	4770      	bx	lr
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	0004      	movs	r4, r0
 80026cc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	2214      	movs	r2, #20
 80026d0:	2100      	movs	r1, #0
 80026d2:	a804      	add	r0, sp, #16
 80026d4:	f003 fe98 	bl	8006408 <memset>
  if(hadc->Instance==ADC1)
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_ADC_MspInit+0xb4>)
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026e0:	b00a      	add	sp, #40	; 0x28
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_ADC_MspInit+0xb8>)
 80026e8:	0089      	lsls	r1, r1, #2
 80026ea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
 80026f2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	0289      	lsls	r1, r1, #10
 8002702:	430a      	orrs	r2, r1
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	9202      	str	r2, [sp, #8]
 8002710:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	02c9      	lsls	r1, r1, #11
 8002716:	430a      	orrs	r2, r1
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin|M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 800271c:	2207      	movs	r2, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	400b      	ands	r3, r1
 8002720:	9303      	str	r3, [sp, #12]
 8002722:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin|M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 8002724:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin|M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 8002728:	9204      	str	r2, [sp, #16]
 800272a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f000 fcde 	bl	80030ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002730:	2303      	movs	r3, #3
 8002732:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002734:	4813      	ldr	r0, [pc, #76]	; (8002784 <HAL_ADC_MspInit+0xbc>)
 8002736:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002738:	9204      	str	r2, [sp, #16]
 800273a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800273e:	f000 fcd5 	bl	80030ec <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002742:	4d11      	ldr	r5, [pc, #68]	; (8002788 <HAL_ADC_MspInit+0xc0>)
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002746:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8002748:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800274e:	3380      	adds	r3, #128	; 0x80
 8002750:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002758:	2320      	movs	r3, #32
 800275a:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002760:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002762:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002764:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002766:	f000 fc65 	bl	8003034 <HAL_DMA_Init>
 800276a:	2800      	cmp	r0, #0
 800276c:	d102      	bne.n	8002774 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800276e:	6325      	str	r5, [r4, #48]	; 0x30
 8002770:	626c      	str	r4, [r5, #36]	; 0x24
}
 8002772:	e7b5      	b.n	80026e0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002774:	f7fe fc7e 	bl	8001074 <Error_Handler>
 8002778:	e7f9      	b.n	800276e <HAL_ADC_MspInit+0xa6>
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	40012400 	.word	0x40012400
 8002780:	40021000 	.word	0x40021000
 8002784:	48000400 	.word	0x48000400
 8002788:	20000388 	.word	0x20000388
 800278c:	40020008 	.word	0x40020008

08002790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002790:	b510      	push	{r4, lr}
 8002792:	0004      	movs	r4, r0
 8002794:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	2214      	movs	r2, #20
 8002798:	2100      	movs	r1, #0
 800279a:	a802      	add	r0, sp, #8
 800279c:	f003 fe34 	bl	8006408 <memset>
  if(hi2c->Instance==I2C1)
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_I2C_MspInit+0x6c>)
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027a8:	b008      	add	sp, #32
 80027aa:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	4c14      	ldr	r4, [pc, #80]	; (8002800 <HAL_I2C_MspInit+0x70>)
 80027b0:	02d2      	lsls	r2, r2, #11
 80027b2:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	4313      	orrs	r3, r2
 80027b8:	6163      	str	r3, [r4, #20]
 80027ba:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	4811      	ldr	r0, [pc, #68]	; (8002804 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4013      	ands	r3, r2
 80027c0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c2:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c6:	2312      	movs	r3, #18
 80027c8:	9202      	str	r2, [sp, #8]
 80027ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80027d0:	3b02      	subs	r3, #2
 80027d2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f000 fc8a 	bl	80030ec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	69e3      	ldr	r3, [r4, #28]
 80027dc:	0392      	lsls	r2, r2, #14
 80027de:	4313      	orrs	r3, r2
 80027e0:	61e3      	str	r3, [r4, #28]
 80027e2:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80027e4:	2100      	movs	r1, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027e6:	4013      	ands	r3, r2
 80027e8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80027f0:	f000 fbc2 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80027f4:	2017      	movs	r0, #23
 80027f6:	f000 fbf1 	bl	8002fdc <HAL_NVIC_EnableIRQ>
}
 80027fa:	e7d5      	b.n	80027a8 <HAL_I2C_MspInit+0x18>
 80027fc:	40005400 	.word	0x40005400
 8002800:	40021000 	.word	0x40021000
 8002804:	48000400 	.word	0x48000400

08002808 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002808:	b510      	push	{r4, lr}
 800280a:	0004      	movs	r4, r0
 800280c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280e:	2214      	movs	r2, #20
 8002810:	2100      	movs	r1, #0
 8002812:	a802      	add	r0, sp, #8
 8002814:	f003 fdf8 	bl	8006408 <memset>
  if(htim_pwm->Instance==TIM1)
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_TIM_PWM_MspInit+0x5c>)
 800281a:	6822      	ldr	r2, [r4, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002820:	b008      	add	sp, #32
 8002822:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_TIM_PWM_MspInit+0x60>)
 8002828:	0109      	lsls	r1, r1, #4
 800282a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(TIM1_ETR_GPIO_Port, &GPIO_InitStruct);
 800282c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM1_CLK_ENABLE();
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]
 8002832:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(TIM1_ETR_GPIO_Port, &GPIO_InitStruct);
 8002834:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002836:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283a:	9200      	str	r2, [sp, #0]
 800283c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	0289      	lsls	r1, r1, #10
 8002842:	430a      	orrs	r2, r1
 8002844:	615a      	str	r2, [r3, #20]
 8002846:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = TIM1_ETR_Pin;
 8002848:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	400b      	ands	r3, r1
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TIM1_ETR_Pin;
 8002850:	2302      	movs	r3, #2
 8002852:	0152      	lsls	r2, r2, #5
 8002854:	9202      	str	r2, [sp, #8]
 8002856:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002858:	2302      	movs	r3, #2
    HAL_GPIO_Init(TIM1_ETR_GPIO_Port, &GPIO_InitStruct);
 800285a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800285c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(TIM1_ETR_GPIO_Port, &GPIO_InitStruct);
 800285e:	f000 fc45 	bl	80030ec <HAL_GPIO_Init>
}
 8002862:	e7dd      	b.n	8002820 <HAL_TIM_PWM_MspInit+0x18>
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40021000 	.word	0x40021000

0800286c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	6803      	ldr	r3, [r0, #0]
{
 8002870:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8002872:	05d2      	lsls	r2, r2, #23
 8002874:	4293      	cmp	r3, r2
 8002876:	d00f      	beq.n	8002898 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_TIM_Base_MspInit+0x40>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d001      	beq.n	8002882 <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800287e:	b002      	add	sp, #8
 8002880:	4770      	bx	lr
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_TIM_Base_MspInit+0x44>)
 8002886:	0289      	lsls	r1, r1, #10
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	430a      	orrs	r2, r1
 800288c:	619a      	str	r2, [r3, #24]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	400b      	ands	r3, r1
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	9b01      	ldr	r3, [sp, #4]
}
 8002896:	e7f2      	b.n	800287e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002898:	2301      	movs	r3, #1
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_TIM_Base_MspInit+0x44>)
 800289c:	69d1      	ldr	r1, [r2, #28]
 800289e:	4319      	orrs	r1, r3
 80028a0:	61d1      	str	r1, [r2, #28]
 80028a2:	69d2      	ldr	r2, [r2, #28]
 80028a4:	4013      	ands	r3, r2
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	9b00      	ldr	r3, [sp, #0]
 80028aa:	e7e8      	b.n	800287e <HAL_TIM_Base_MspInit+0x12>
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b4:	b530      	push	{r4, r5, lr}
 80028b6:	0004      	movs	r4, r0
 80028b8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ba:	2214      	movs	r2, #20
 80028bc:	2100      	movs	r1, #0
 80028be:	a804      	add	r0, sp, #16
 80028c0:	f003 fda2 	bl	8006408 <memset>
  if(htim->Instance==TIM1)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_TIM_MspPostInit+0xa8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM16)
 80028cc:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_TIM_MspPostInit+0xac>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02e      	beq.n	8002930 <HAL_TIM_MspPostInit+0x7c>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80028d2:	b00b      	add	sp, #44	; 0x2c
 80028d4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_TIM_MspPostInit+0xb0>)
 80028da:	02c9      	lsls	r1, r1, #11
 80028dc:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	430a      	orrs	r2, r1
 80028e2:	615a      	str	r2, [r3, #20]
 80028e4:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e6:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	9201      	str	r2, [sp, #4]
 80028ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	0289      	lsls	r1, r1, #10
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	481b      	ldr	r0, [pc, #108]	; (8002968 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	400b      	ands	r3, r1
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002902:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800290c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002910:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	f000 fbeb 	bl	80030ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002916:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800291a:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	a904      	add	r1, sp, #16
 800291e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002920:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002924:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002926:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002928:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f000 fbdf 	bl	80030ec <HAL_GPIO_Init>
 800292e:	e7d0      	b.n	80028d2 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_TIM_MspPostInit+0xb0>)
 8002934:	0289      	lsls	r1, r1, #10
 8002936:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(M1_CURRENT_REF_GPIO_Port, &GPIO_InitStruct);
 8002938:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	430a      	orrs	r2, r1
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURRENT_REF_Pin;
 8002940:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	400b      	ands	r3, r1
 8002944:	9303      	str	r3, [sp, #12]
 8002946:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURRENT_REF_Pin;
 8002948:	2302      	movs	r3, #2
 800294a:	9204      	str	r2, [sp, #16]
 800294c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 800294e:	2305      	movs	r3, #5
    HAL_GPIO_Init(M1_CURRENT_REF_GPIO_Port, &GPIO_InitStruct);
 8002950:	a904      	add	r1, sp, #16
 8002952:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8002954:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_CURRENT_REF_GPIO_Port, &GPIO_InitStruct);
 8002956:	f000 fbc9 	bl	80030ec <HAL_GPIO_Init>
}
 800295a:	e7ba      	b.n	80028d2 <HAL_TIM_MspPostInit+0x1e>
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40014400 	.word	0x40014400
 8002964:	40021000 	.word	0x40021000
 8002968:	48000400 	.word	0x48000400

0800296c <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <I2C1_IRQHandler+0x1c>)
{
 800296e:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002970:	6803      	ldr	r3, [r0, #0]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	23e0      	movs	r3, #224	; 0xe0
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	421a      	tst	r2, r3
 800297a:	d002      	beq.n	8002982 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800297c:	f000 ff1c 	bl	80037b8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002980:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002982:	f000 fda3 	bl	80034cc <HAL_I2C_EV_IRQHandler>
}
 8002986:	e7fb      	b.n	8002980 <I2C1_IRQHandler+0x14>
 8002988:	200003cc 	.word	0x200003cc

0800298c <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800298c:	2201      	movs	r2, #1
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8002990:	b510      	push	{r4, lr}
 8002992:	6919      	ldr	r1, [r3, #16]
 8002994:	420a      	tst	r2, r1
 8002996:	d002      	beq.n	800299e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002998:	68d9      	ldr	r1, [r3, #12]
 800299a:	420a      	tst	r2, r1
 800299c:	d10e      	bne.n	80029bc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 80029a2:	6919      	ldr	r1, [r3, #16]
 80029a4:	420a      	tst	r2, r1
 80029a6:	d008      	beq.n	80029ba <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 80029a8:	68d9      	ldr	r1, [r3, #12]
 80029aa:	420a      	tst	r2, r1
 80029ac:	d005      	beq.n	80029ba <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80029ae:	3a02      	subs	r2, #2
 80029b0:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    SixPwm_BRK_IRQHandler(&PWM_Handle_M1);
 80029b2:	4806      	ldr	r0, [pc, #24]	; (80029cc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	f003 f959 	bl	8005c6c <SixPwm_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 80029ba:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80029bc:	3a03      	subs	r2, #3
 80029be:	611a      	str	r2, [r3, #16]
    (void)TSK_HighFrequencyTask();
 80029c0:	f7fe fed2 	bl	8001768 <TSK_HighFrequencyTask>
 80029c4:	e7eb      	b.n	800299e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	2000014c 	.word	0x2000014c

080029d0 <DMA1_Channel1_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 80029d0:	2302      	movs	r3, #2
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <DMA1_Channel1_IRQHandler+0x24>)
/**
  * @brief  This function handles BEMF sensing interrupt request.
  * @param[in] None
  */
void BEMF_READING_IRQHandler(void)
{
 80029d4:	b510      	push	{r4, lr}
 80029d6:	6811      	ldr	r1, [r2, #0]
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  if(LL_DMA_IsActiveFlag_TC1(DMA1) && LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1))
 80029d8:	420b      	tst	r3, r1
 80029da:	d003      	beq.n	80029e4 <DMA1_Channel1_IRQHandler+0x14>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80029dc:	4906      	ldr	r1, [pc, #24]	; (80029f8 <DMA1_Channel1_IRQHandler+0x28>)
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	420b      	tst	r3, r1
 80029e2:	d100      	bne.n	80029e6 <DMA1_Channel1_IRQHandler+0x16>
    BADC_IsZcDetected( &Bemf_ADC_M1, &PWM_Handle_M1._Super );
  }
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 80029e4:	bd10      	pop	{r4, pc}
    BADC_IsZcDetected( &Bemf_ADC_M1, &PWM_Handle_M1._Super );
 80029e6:	4905      	ldr	r1, [pc, #20]	; (80029fc <DMA1_Channel1_IRQHandler+0x2c>)
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80029e8:	6053      	str	r3, [r2, #4]
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <DMA1_Channel1_IRQHandler+0x30>)
 80029ec:	f002 fab6 	bl	8004f5c <BADC_IsZcDetected>
}
 80029f0:	e7f8      	b.n	80029e4 <DMA1_Channel1_IRQHandler+0x14>
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020008 	.word	0x40020008
 80029fc:	2000014c 	.word	0x2000014c
 8002a00:	20000000 	.word	0x20000000

08002a04 <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002a04:	2201      	movs	r2, #1
  */
void PERIOD_COMM_IRQHandler(void)
{
  /* TIM Update event */

  if(LL_TIM_IsActiveFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_UPDATE(Bemf_ADC_M1.pParams_str->LfTim))
 8002a06:	4809      	ldr	r0, [pc, #36]	; (8002a2c <TIM2_IRQHandler+0x28>)
{
 8002a08:	b510      	push	{r4, lr}
  if(LL_TIM_IsActiveFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_UPDATE(Bemf_ADC_M1.pParams_str->LfTim))
 8002a0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	420a      	tst	r2, r1
 8002a12:	d00a      	beq.n	8002a2a <TIM2_IRQHandler+0x26>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002a14:	68d9      	ldr	r1, [r3, #12]
 8002a16:	420a      	tst	r2, r1
 8002a18:	d007      	beq.n	8002a2a <TIM2_IRQHandler+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002a1a:	3a03      	subs	r2, #3
 8002a1c:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim);
    BADC_StepChangeEvent(&Bemf_ADC_M1, 0, &PWM_Handle_M1._Super);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <TIM2_IRQHandler+0x2c>)
 8002a22:	f002 fc37 	bl	8005294 <BADC_StepChangeEvent>
    (void)TSK_HighFrequencyTask();
 8002a26:	f7fe fe9f 	bl	8001768 <TSK_HighFrequencyTask>
  }
}
 8002a2a:	bd10      	pop	{r4, pc}
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	2000014c 	.word	0x2000014c

08002a34 <DMA1_Channel2_3_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <DMA1_Channel2_3_IRQHandler+0x18>)
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4211      	tst	r1, r2
 8002a40:	d003      	beq.n	8002a4a <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8002a42:	4803      	ldr	r0, [pc, #12]	; (8002a50 <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	f7fd fffd 	bl	8000a44 <ASPEP_HWDataReceivedIT>
  }
}
 8002a4a:	bd10      	pop	{r4, pc}
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	200002b4 	.word	0x200002b4

08002a54 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <USART1_IRQHandler+0x94>)

void USART1_IRQHandler(void)
{
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	69d9      	ldr	r1, [r3, #28]
 8002a5c:	420a      	tst	r2, r1
 8002a5e:	d008      	beq.n	8002a72 <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002a60:	2401      	movs	r4, #1
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <USART1_IRQHandler+0x98>)
 8002a64:	6801      	ldr	r1, [r0, #0]
 8002a66:	43a1      	bics	r1, r4
 8002a68:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8002a6a:	4821      	ldr	r0, [pc, #132]	; (8002af0 <USART1_IRQHandler+0x9c>)
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002a6c:	621a      	str	r2, [r3, #32]
 8002a6e:	f7fd fe15 	bl	800069c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a72:	2208      	movs	r2, #8
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <USART1_IRQHandler+0x94>)
 8002a76:	69d9      	ldr	r1, [r3, #28]
 8002a78:	420a      	tst	r2, r1
 8002a7a:	d00b      	beq.n	8002a94 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a7c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7e:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	3a07      	subs	r2, #7
 8002a84:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002a88:	2010      	movs	r0, #16
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4302      	orrs	r2, r0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002a94:	2210      	movs	r2, #16
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <USART1_IRQHandler+0x94>)
 8002a98:	69d9      	ldr	r1, [r3, #28]
 8002a9a:	420a      	tst	r2, r1
 8002a9c:	d023      	beq.n	8002ae6 <USART1_IRQHandler+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	420a      	tst	r2, r1
 8002aa2:	d020      	beq.n	8002ae6 <USART1_IRQHandler+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4390      	bics	r0, r2
 8002ab2:	6018      	str	r0, [r3, #0]
 8002ab4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abc:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002ac0:	2040      	movs	r0, #64	; 0x40
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4382      	bics	r2, r0
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	f384 8810 	msr	PRIMASK, r4
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002acc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ace:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4302      	orrs	r2, r0
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	f384 8810 	msr	PRIMASK, r4
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8002ae0:	4803      	ldr	r0, [pc, #12]	; (8002af0 <USART1_IRQHandler+0x9c>)
 8002ae2:	f7fd fffd 	bl	8000ae0 <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	4002001c 	.word	0x4002001c
 8002af0:	200002b4 	.word	0x200002b4

08002af4 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8002af4:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002af6:	f7fe ff35 	bl	8001964 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <HardFault_Handler+0x6>

08002afc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002afc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002afe:	4c0d      	ldr	r4, [pc, #52]	; (8002b34 <SysTick_Handler+0x38>)
 8002b00:	7823      	ldrb	r3, [r4, #0]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d00f      	beq.n	8002b26 <SysTick_Handler+0x2a>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 8002b06:	3301      	adds	r3, #1
 8002b08:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	7023      	strb	r3, [r4, #0]
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <SysTick_Handler+0x3c>)
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	4211      	tst	r1, r2
 8002b16:	d003      	beq.n	8002b20 <SysTick_Handler+0x24>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8002b18:	4808      	ldr	r0, [pc, #32]	; (8002b3c <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	f7fd ff92 	bl	8000a44 <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8002b20:	f7fe ff12 	bl	8001948 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002b24:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8002b26:	f000 f8d9 	bl	8002cdc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002b2a:	f000 fa7f 	bl	800302c <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e7eb      	b.n	8002b0a <SysTick_Handler+0xe>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	20000310 	.word	0x20000310
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	200002b4 	.word	0x200002b4

08002b40 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8002b40:	2201      	movs	r2, #1
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 8002b44:	b510      	push	{r4, lr}
 8002b46:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 8002b48:	420a      	tst	r2, r1
 8002b4a:	d100      	bne.n	8002b4e <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 8002b4c:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002b4e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002b50:	f7fe ff18 	bl	8001984 <UI_HandleStartStopButton_cb>
}
 8002b54:	e7fa      	b.n	8002b4c <EXTI0_1_IRQHandler+0xc>
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	40010400 	.word	0x40010400

08002b5c <UASPEP_INIT>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002b5c:	2240      	movs	r2, #64	; 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8002b5e:	6803      	ldr	r3, [r0, #0]
{
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	2101      	movs	r1, #1
 8002b6a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002b6e:	681c      	ldr	r4, [r3, #0]
 8002b70:	4314      	orrs	r4, r2
 8002b72:	601c      	str	r4, [r3, #0]
 8002b74:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 8002b78:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002b82:	2680      	movs	r6, #128	; 0x80
 8002b84:	68a3      	ldr	r3, [r4, #8]
 8002b86:	4333      	orrs	r3, r6
 8002b88:	60a3      	str	r3, [r4, #8]
 8002b8a:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8002b8e:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002b90:	6904      	ldr	r4, [r0, #16]
 8002b92:	002e      	movs	r6, r5
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <UASPEP_INIT+0x88>)
 8002b96:	3628      	adds	r6, #40	; 0x28
 8002b98:	191c      	adds	r4, r3, r4
 8002b9a:	3c01      	subs	r4, #1
 8002b9c:	7827      	ldrb	r7, [r4, #0]
 8002b9e:	6884      	ldr	r4, [r0, #8]
 8002ba0:	19e4      	adds	r4, r4, r7
 8002ba2:	60a6      	str	r6, [r4, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002ba4:	622a      	str	r2, [r5, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002bae:	68ac      	ldr	r4, [r5, #8]
 8002bb0:	430c      	orrs	r4, r1
 8002bb2:	60ac      	str	r4, [r5, #8]
 8002bb4:	f386 8810 	msr	PRIMASK, r6
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8002bb8:	6804      	ldr	r4, [r0, #0]
 8002bba:	68c6      	ldr	r6, [r0, #12]
 8002bbc:	0025      	movs	r5, r4
 8002bbe:	199b      	adds	r3, r3, r6
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	781e      	ldrb	r6, [r3, #0]
 8002bc4:	6843      	ldr	r3, [r0, #4]
 8002bc6:	3524      	adds	r5, #36	; 0x24
 8002bc8:	199b      	adds	r3, r3, r6
 8002bca:	609d      	str	r5, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002bcc:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002bd6:	68a3      	ldr	r3, [r4, #8]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60a3      	str	r3, [r4, #8]
 8002bdc:	f380 8810 	msr	PRIMASK, r0
}
 8002be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	08006844 	.word	0x08006844

08002be8 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8002be8:	b530      	push	{r4, r5, lr}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8002bea:	2501      	movs	r5, #1
{
 8002bec:	0014      	movs	r4, r2
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <UASPEP_SEND_PACKET+0x34>)
 8002bf0:	6902      	ldr	r2, [r0, #16]
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	781a      	ldrb	r2, [r3, #0]
 8002bf8:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8002c00:	4215      	tst	r5, r2
 8002c02:	d109      	bne.n	8002c18 <UASPEP_SEND_PACKET+0x30>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002c04:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002c06:	6859      	ldr	r1, [r3, #4]
    result = true;
 8002c08:	3001      	adds	r0, #1
 8002c0a:	0c09      	lsrs	r1, r1, #16
 8002c0c:	040a      	lsls	r2, r1, #16
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	432a      	orrs	r2, r5
 8002c16:	601a      	str	r2, [r3, #0]
  }
  return (result);
}
 8002c18:	bd30      	pop	{r4, r5, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	08006844 	.word	0x08006844

08002c20 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8002c20:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <UASPEP_RECEIVE_BUFFER+0x2c>)
 8002c24:	68c4      	ldr	r4, [r0, #12]
 8002c26:	191b      	adds	r3, r3, r4
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	781c      	ldrb	r4, [r3, #0]
 8002c2c:	6843      	ldr	r3, [r0, #4]
 8002c2e:	191b      	adds	r3, r3, r4
 8002c30:	2401      	movs	r4, #1
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	43a0      	bics	r0, r4
 8002c36:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002c38:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	0c09      	lsrs	r1, r1, #16
 8002c3e:	0409      	lsls	r1, r1, #16
 8002c40:	4311      	orrs	r1, r2
 8002c42:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4322      	orrs	r2, r4
 8002c48:	601a      	str	r2, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8002c4a:	bd10      	pop	{r4, pc}
 8002c4c:	08006844 	.word	0x08006844

08002c50 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002c50:	2110      	movs	r1, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8002c52:	6803      	ldr	r3, [r0, #0]
 8002c54:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8002c6a:	4770      	bx	lr

08002c6c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c6c:	4770      	bx	lr
 8002c6e:	46c0      	nop			; (mov r8, r8)

08002c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c74:	20fa      	movs	r0, #250	; 0xfa
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_InitTick+0x40>)
 8002c78:	0080      	lsls	r0, r0, #2
 8002c7a:	7819      	ldrb	r1, [r3, #0]
 8002c7c:	f7fd fa44 	bl	8000108 <__udivsi3>
 8002c80:	4d0c      	ldr	r5, [pc, #48]	; (8002cb4 <HAL_InitTick+0x44>)
 8002c82:	0001      	movs	r1, r0
 8002c84:	6828      	ldr	r0, [r5, #0]
 8002c86:	f7fd fa3f 	bl	8000108 <__udivsi3>
 8002c8a:	f000 f9b3 	bl	8002ff4 <HAL_SYSTICK_Config>
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8002c92:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c94:	2c03      	cmp	r4, #3
 8002c96:	d900      	bls.n	8002c9a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9a:	3802      	subs	r0, #2
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	0021      	movs	r1, r4
 8002ca0:	f000 f96a 	bl	8002f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_InitTick+0x48>)
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002caa:	e7f5      	b.n	8002c98 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002cac:	2001      	movs	r0, #1
 8002cae:	e7f3      	b.n	8002c98 <HAL_InitTick+0x28>
 8002cb0:	20000318 	.word	0x20000318
 8002cb4:	20000314 	.word	0x20000314
 8002cb8:	2000031c 	.word	0x2000031c

08002cbc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_Init+0x1c>)
{
 8002cc0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc2:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	f7ff ffd1 	bl	8002c70 <HAL_InitTick>
  HAL_MspInit();
 8002cce:	f7ff fce3 	bl	8002698 <HAL_MspInit>
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002cdc:	4a03      	ldr	r2, [pc, #12]	; (8002cec <HAL_IncTick+0x10>)
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_IncTick+0x14>)
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	185b      	adds	r3, r3, r1
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	4770      	bx	lr
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	200006a8 	.word	0x200006a8
 8002cf0:	20000318 	.word	0x20000318

08002cf4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cf4:	4b01      	ldr	r3, [pc, #4]	; (8002cfc <HAL_GetTick+0x8>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
}
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	200006a8 	.word	0x200006a8

08002d00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8002d04:	d100      	bne.n	8002d08 <HAL_ADC_Init+0x8>
 8002d06:	e082      	b.n	8002e0e <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d08:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d069      	beq.n	8002de2 <HAL_ADC_Init+0xe2>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d10:	06db      	lsls	r3, r3, #27
 8002d12:	d460      	bmi.n	8002dd6 <HAL_ADC_Init+0xd6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002d18:	075b      	lsls	r3, r3, #29
 8002d1a:	d45c      	bmi.n	8002dd6 <HAL_ADC_Init+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d1e:	4949      	ldr	r1, [pc, #292]	; (8002e44 <HAL_ADC_Init+0x144>)
 8002d20:	400b      	ands	r3, r1
 8002d22:	3106      	adds	r1, #6
 8002d24:	31ff      	adds	r1, #255	; 0xff
 8002d26:	430b      	orrs	r3, r1
 8002d28:	63a3      	str	r3, [r4, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	6891      	ldr	r1, [r2, #8]
 8002d2e:	400b      	ands	r3, r1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d05c      	beq.n	8002dee <HAL_ADC_Init+0xee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d34:	2118      	movs	r1, #24
 8002d36:	68d3      	ldr	r3, [r2, #12]
 8002d38:	438b      	bics	r3, r1
 8002d3a:	68a1      	ldr	r1, [r4, #8]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d40:	6913      	ldr	r3, [r2, #16]
 8002d42:	6861      	ldr	r1, [r4, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002d4c:	68d3      	ldr	r3, [r2, #12]
 8002d4e:	493e      	ldr	r1, [pc, #248]	; (8002e48 <HAL_ADC_Init+0x148>)
 8002d50:	400b      	ands	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d54:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d56:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d58:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d5a:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d5c:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d5e:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d60:	68e1      	ldr	r1, [r4, #12]
 8002d62:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d64:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d66:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002d68:	2124      	movs	r1, #36	; 0x24
 8002d6a:	5c61      	ldrb	r1, [r4, r1]
 8002d6c:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d6e:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d72:	3901      	subs	r1, #1
 8002d74:	1e4d      	subs	r5, r1, #1
 8002d76:	41a9      	sbcs	r1, r5
 8002d78:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6921      	ldr	r1, [r4, #16]
 8002d7e:	3902      	subs	r1, #2
 8002d80:	424d      	negs	r5, r1
 8002d82:	4169      	adcs	r1, r5
 8002d84:	0089      	lsls	r1, r1, #2
 8002d86:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d88:	7ee1      	ldrb	r1, [r4, #27]
 8002d8a:	2901      	cmp	r1, #1
 8002d8c:	d04b      	beq.n	8002e26 <HAL_ADC_Init+0x126>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d8e:	20c2      	movs	r0, #194	; 0xc2
 8002d90:	69e1      	ldr	r1, [r4, #28]
 8002d92:	30ff      	adds	r0, #255	; 0xff
 8002d94:	4281      	cmp	r1, r0
 8002d96:	d002      	beq.n	8002d9e <HAL_ADC_Init+0x9e>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d98:	6a20      	ldr	r0, [r4, #32]
 8002d9a:	4301      	orrs	r1, r0
 8002d9c:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002d9e:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002da0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002da2:	4319      	orrs	r1, r3
 8002da4:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002da6:	2180      	movs	r1, #128	; 0x80
 8002da8:	0549      	lsls	r1, r1, #21
 8002daa:	428d      	cmp	r5, r1
 8002dac:	d026      	beq.n	8002dfc <HAL_ADC_Init+0xfc>
 8002dae:	1e69      	subs	r1, r5, #1
 8002db0:	2906      	cmp	r1, #6
 8002db2:	d923      	bls.n	8002dfc <HAL_ADC_Init+0xfc>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4925      	ldr	r1, [pc, #148]	; (8002e4c <HAL_ADC_Init+0x14c>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d029      	beq.n	8002e12 <HAL_ADC_Init+0x112>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	2212      	movs	r2, #18
 8002dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	3a02      	subs	r2, #2
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dce:	3a0f      	subs	r2, #15
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8002dd4:	e004      	b.n	8002de0 <HAL_ADC_Init+0xe0>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd6:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 8002dd8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 8002de2:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002de4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002de6:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002de8:	f7ff fc6e 	bl	80026c8 <HAL_ADC_MspInit>
 8002dec:	e78f      	b.n	8002d0e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002dee:	6811      	ldr	r1, [r2, #0]
 8002df0:	420b      	tst	r3, r1
 8002df2:	d1ab      	bne.n	8002d4c <HAL_ADC_Init+0x4c>
 8002df4:	68d3      	ldr	r3, [r2, #12]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	d4a8      	bmi.n	8002d4c <HAL_ADC_Init+0x4c>
 8002dfa:	e79b      	b.n	8002d34 <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002dfc:	2107      	movs	r1, #7
 8002dfe:	6950      	ldr	r0, [r2, #20]
 8002e00:	4388      	bics	r0, r1
 8002e02:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002e04:	6950      	ldr	r0, [r2, #20]
 8002e06:	4029      	ands	r1, r5
 8002e08:	4301      	orrs	r1, r0
 8002e0a:	6151      	str	r1, [r2, #20]
 8002e0c:	e7d2      	b.n	8002db4 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 8002e0e:	2001      	movs	r0, #1
 8002e10:	e7e6      	b.n	8002de0 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002e12:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002e14:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002e16:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	3a02      	subs	r2, #2
 8002e20:	4313      	orrs	r3, r2
 8002e22:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e24:	e7dc      	b.n	8002de0 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d103      	bne.n	8002e32 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0249      	lsls	r1, r1, #9
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	e7ad      	b.n	8002d8e <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e32:	2520      	movs	r5, #32
 8002e34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e36:	4328      	orrs	r0, r5
 8002e38:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e3c:	4301      	orrs	r1, r0
 8002e3e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002e40:	e7a5      	b.n	8002d8e <HAL_ADC_Init+0x8e>
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	fffffefd 	.word	0xfffffefd
 8002e48:	fffe0219 	.word	0xfffe0219
 8002e4c:	833fffe7 	.word	0x833fffe7

08002e50 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002e50:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e52:	2234      	movs	r2, #52	; 0x34
{
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e56:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002e58:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002e5a:	5c83      	ldrb	r3, [r0, r2]
{
 8002e5c:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e5e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d060      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0xd6>
 8002e64:	2301      	movs	r3, #1
 8002e66:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e68:	6805      	ldr	r5, [r0, #0]
 8002e6a:	68aa      	ldr	r2, [r5, #8]
 8002e6c:	0752      	lsls	r2, r2, #29
 8002e6e:	d509      	bpl.n	8002e84 <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	2220      	movs	r2, #32
 8002e72:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e74:	4313      	orrs	r3, r2
 8002e76:	6383      	str	r3, [r0, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7a:	2334      	movs	r3, #52	; 0x34
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002e80:	b003      	add	sp, #12
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8002e84:	4a36      	ldr	r2, [pc, #216]	; (8002f60 <HAL_ADC_ConfigChannel+0x110>)
 8002e86:	6848      	ldr	r0, [r1, #4]
 8002e88:	4290      	cmp	r0, r2
 8002e8a:	d030      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e8c:	680a      	ldr	r2, [r1, #0]
 8002e8e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8002e90:	4093      	lsls	r3, r2
 8002e92:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e94:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e96:	4338      	orrs	r0, r7
 8002e98:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e9a:	055b      	lsls	r3, r3, #21
 8002e9c:	429e      	cmp	r6, r3
 8002e9e:	d00f      	beq.n	8002ec0 <HAL_ADC_ConfigChannel+0x70>
 8002ea0:	3e01      	subs	r6, #1
 8002ea2:	2e06      	cmp	r6, #6
 8002ea4:	d90c      	bls.n	8002ec0 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	6888      	ldr	r0, [r1, #8]
 8002eaa:	6969      	ldr	r1, [r5, #20]
 8002eac:	4019      	ands	r1, r3
 8002eae:	4288      	cmp	r0, r1
 8002eb0:	d006      	beq.n	8002ec0 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002eb2:	6969      	ldr	r1, [r5, #20]
 8002eb4:	4399      	bics	r1, r3
 8002eb6:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002eb8:	6969      	ldr	r1, [r5, #20]
 8002eba:	4003      	ands	r3, r0
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	3b10      	subs	r3, #16
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d810      	bhi.n	8002eea <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ec8:	4926      	ldr	r1, [pc, #152]	; (8002f64 <HAL_ADC_ConfigChannel+0x114>)
 8002eca:	680b      	ldr	r3, [r1, #0]
 8002ecc:	2a10      	cmp	r2, #16
 8002ece:	d02e      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0xde>
 8002ed0:	3a11      	subs	r2, #17
 8002ed2:	1e50      	subs	r0, r2, #1
 8002ed4:	4182      	sbcs	r2, r0
 8002ed6:	20c0      	movs	r0, #192	; 0xc0
 8002ed8:	4252      	negs	r2, r2
 8002eda:	0400      	lsls	r0, r0, #16
 8002edc:	4002      	ands	r2, r0
 8002ede:	2080      	movs	r0, #128	; 0x80
 8002ee0:	03c0      	lsls	r0, r0, #15
 8002ee2:	4684      	mov	ip, r0
 8002ee4:	4462      	add	r2, ip
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eea:	2000      	movs	r0, #0
 8002eec:	e7c5      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002eee:	680a      	ldr	r2, [r1, #0]
 8002ef0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002efa:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d8f4      	bhi.n	8002eea <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_ADC_ConfigChannel+0x114>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2a10      	cmp	r2, #16
 8002f06:	d010      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0xda>
 8002f08:	3a11      	subs	r2, #17
 8002f0a:	4251      	negs	r1, r2
 8002f0c:	414a      	adcs	r2, r1
 8002f0e:	21c0      	movs	r1, #192	; 0xc0
 8002f10:	4252      	negs	r2, r2
 8002f12:	0409      	lsls	r1, r1, #16
 8002f14:	400a      	ands	r2, r1
 8002f16:	4914      	ldr	r1, [pc, #80]	; (8002f68 <HAL_ADC_ConfigChannel+0x118>)
 8002f18:	468c      	mov	ip, r1
 8002f1a:	4462      	add	r2, ip
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f20:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e7a9      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8002f26:	2002      	movs	r0, #2
 8002f28:	e7aa      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f2a:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <HAL_ADC_ConfigChannel+0x11c>)
 8002f2c:	e7f6      	b.n	8002f1c <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	0412      	lsls	r2, r2, #16
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_ADC_ConfigChannel+0x120>)
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_ADC_ConfigChannel+0x124>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	f7fd f8e4 	bl	8000108 <__udivsi3>
 8002f40:	0083      	lsls	r3, r0, #2
 8002f42:	181b      	adds	r3, r3, r0
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002f48:	9b01      	ldr	r3, [sp, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0cd      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002f54:	9b01      	ldr	r3, [sp, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f9      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e78d      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x2a>
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	00001001 	.word	0x00001001
 8002f64:	40012708 	.word	0x40012708
 8002f68:	feffffff 	.word	0xfeffffff
 8002f6c:	ff7fffff 	.word	0xff7fffff
 8002f70:	20000314 	.word	0x20000314
 8002f74:	000f4240 	.word	0x000f4240

08002f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f78:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	db14      	blt.n	8002fa8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_NVIC_SetPriority+0x5c>)
 8002f80:	2203      	movs	r2, #3
 8002f82:	469c      	mov	ip, r3
 8002f84:	23ff      	movs	r3, #255	; 0xff
 8002f86:	0884      	lsrs	r4, r0, #2
 8002f88:	4002      	ands	r2, r0
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	26c0      	movs	r6, #192	; 0xc0
 8002f8e:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f90:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f92:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f94:	400b      	ands	r3, r1
 8002f96:	4093      	lsls	r3, r2
 8002f98:	00a4      	lsls	r4, r4, #2
 8002f9a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f9c:	00b6      	lsls	r6, r6, #2
 8002f9e:	59a5      	ldr	r5, [r4, r6]
 8002fa0:	4385      	bics	r5, r0
 8002fa2:	432b      	orrs	r3, r5
 8002fa4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_NVIC_SetPriority+0x60>)
 8002faa:	230f      	movs	r3, #15
 8002fac:	4694      	mov	ip, r2
 8002fae:	2203      	movs	r2, #3
 8002fb0:	4003      	ands	r3, r0
 8002fb2:	4010      	ands	r0, r2
 8002fb4:	32fc      	adds	r2, #252	; 0xfc
 8002fb6:	0015      	movs	r5, r2
 8002fb8:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fba:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fbc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc2:	3b08      	subs	r3, #8
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4463      	add	r3, ip
 8002fca:	69dc      	ldr	r4, [r3, #28]
 8002fcc:	43ac      	bics	r4, r5
 8002fce:	4322      	orrs	r2, r4
 8002fd0:	61da      	str	r2, [r3, #28]
 8002fd2:	e7e8      	b.n	8002fa6 <HAL_NVIC_SetPriority+0x2e>
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	db05      	blt.n	8002fec <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	4002      	ands	r2, r0
 8002fe6:	4093      	lsls	r3, r2
 8002fe8:	4a01      	ldr	r2, [pc, #4]	; (8002ff0 <HAL_NVIC_EnableIRQ+0x14>)
 8002fea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fec:	4770      	bx	lr
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	1e43      	subs	r3, r0, #1
 8002ff8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d20e      	bcs.n	800301e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003000:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003004:	4807      	ldr	r0, [pc, #28]	; (8003024 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003008:	6a03      	ldr	r3, [r0, #32]
 800300a:	0609      	lsls	r1, r1, #24
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	430b      	orrs	r3, r1
 8003012:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003016:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	3307      	adds	r3, #7
 800301c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800301e:	4770      	bx	lr
 8003020:	e000e010 	.word	0xe000e010
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003028:	4770      	bx	lr
 800302a:	46c0      	nop			; (mov r8, r8)

0800302c <HAL_SYSTICK_IRQHandler>:
{
 800302c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800302e:	f7ff fffb 	bl	8003028 <HAL_SYSTICK_Callback>
}
 8003032:	bd10      	pop	{r4, pc}

08003034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003038:	d027      	beq.n	800308a <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800303a:	2521      	movs	r5, #33	; 0x21
 800303c:	2302      	movs	r3, #2
 800303e:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003040:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8003044:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003046:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003048:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800304a:	6863      	ldr	r3, [r4, #4]
 800304c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304e:	68e1      	ldr	r1, [r4, #12]
 8003050:	430b      	orrs	r3, r1
 8003052:	6921      	ldr	r1, [r4, #16]
 8003054:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	6961      	ldr	r1, [r4, #20]
 8003058:	430b      	orrs	r3, r1
 800305a:	69a1      	ldr	r1, [r4, #24]
 800305c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	69e1      	ldr	r1, [r4, #28]
 8003060:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003062:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003064:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_DMA_Init+0x60>)
 8003068:	2114      	movs	r1, #20
 800306a:	469c      	mov	ip, r3
 800306c:	4460      	add	r0, ip
 800306e:	f7fd f84b 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8003074:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8003076:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800307a:	0080      	lsls	r0, r0, #2
 800307c:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800307e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003080:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003082:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8003084:	321f      	adds	r2, #31
 8003086:	54a3      	strb	r3, [r4, r2]
}
 8003088:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
 800308c:	e7fc      	b.n	8003088 <HAL_DMA_Init+0x54>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	ffffc00f 	.word	0xffffc00f
 8003094:	bffdfff8 	.word	0xbffdfff8
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800309c:	2321      	movs	r3, #33	; 0x21
{
 800309e:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030a0:	5cc2      	ldrb	r2, [r0, r3]
 80030a2:	2a02      	cmp	r2, #2
 80030a4:	d003      	beq.n	80030ae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a6:	3b1d      	subs	r3, #29
 80030a8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80030aa:	2001      	movs	r0, #1
}
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030ae:	240e      	movs	r4, #14
 80030b0:	6802      	ldr	r2, [r0, #0]
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	43a1      	bics	r1, r4
 80030b6:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030b8:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030ba:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030bc:	6814      	ldr	r4, [r2, #0]
 80030be:	438c      	bics	r4, r1
 80030c0:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80030c6:	40a5      	lsls	r5, r4
 80030c8:	6055      	str	r5, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80030ca:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2320      	movs	r3, #32
 80030d0:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80030d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 80030d8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2000      	movs	r0, #0
 80030dc:	e7e6      	b.n	80030ac <HAL_DMA_Abort_IT+0x10>
 80030de:	2000      	movs	r0, #0
 80030e0:	e7e4      	b.n	80030ac <HAL_DMA_Abort_IT+0x10>
 80030e2:	46c0      	nop			; (mov r8, r8)

080030e4 <HAL_DMA_GetState>:
  return hdma->State;
 80030e4:	2321      	movs	r3, #33	; 0x21
 80030e6:	5cc0      	ldrb	r0, [r0, r3]
 80030e8:	b2c0      	uxtb	r0, r0
}
 80030ea:	4770      	bx	lr

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	46de      	mov	lr, fp
 80030f0:	4657      	mov	r7, sl
 80030f2:	464e      	mov	r6, r9
 80030f4:	4645      	mov	r5, r8
 80030f6:	b5e0      	push	{r5, r6, r7, lr}
 80030f8:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	6809      	ldr	r1, [r1, #0]
 80030fc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
{
 8003100:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	2900      	cmp	r1, #0
 8003104:	d100      	bne.n	8003108 <HAL_GPIO_Init+0x1c>
 8003106:	e0d0      	b.n	80032aa <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003108:	4c72      	ldr	r4, [pc, #456]	; (80032d4 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800310a:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310c:	46a3      	mov	fp, r4
 800310e:	e064      	b.n	80031da <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003110:	4665      	mov	r5, ip
 8003112:	2d03      	cmp	r5, #3
 8003114:	d000      	beq.n	8003118 <HAL_GPIO_Init+0x2c>
 8003116:	e0b6      	b.n	8003286 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003118:	4666      	mov	r6, ip
 800311a:	4096      	lsls	r6, r2
 800311c:	43f5      	mvns	r5, r6
 800311e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8003120:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003122:	9d02      	ldr	r5, [sp, #8]
 8003124:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003126:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003128:	25c0      	movs	r5, #192	; 0xc0
 800312a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 800312c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800312e:	422c      	tst	r4, r5
 8003130:	d04d      	beq.n	80031ce <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	465d      	mov	r5, fp
 8003134:	2601      	movs	r6, #1
 8003136:	465f      	mov	r7, fp
 8003138:	69ad      	ldr	r5, [r5, #24]
 800313a:	4335      	orrs	r5, r6
 800313c:	61bd      	str	r5, [r7, #24]
 800313e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003140:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	4035      	ands	r5, r6
 8003144:	4e64      	ldr	r6, [pc, #400]	; (80032d8 <HAL_GPIO_Init+0x1ec>)
 8003146:	9505      	str	r5, [sp, #20]
 8003148:	46b4      	mov	ip, r6
 800314a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800314c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 800314e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003150:	00bf      	lsls	r7, r7, #2
 8003152:	00ad      	lsls	r5, r5, #2
 8003154:	4465      	add	r5, ip
 8003156:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8003158:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800315a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 800315c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800315e:	4666      	mov	r6, ip
 8003160:	40b7      	lsls	r7, r6
 8003162:	003e      	movs	r6, r7
 8003164:	464f      	mov	r7, r9
 8003166:	43b7      	bics	r7, r6
 8003168:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800316a:	2790      	movs	r7, #144	; 0x90
 800316c:	05ff      	lsls	r7, r7, #23
 800316e:	42b8      	cmp	r0, r7
 8003170:	d00e      	beq.n	8003190 <HAL_GPIO_Init+0xa4>
 8003172:	4f5a      	ldr	r7, [pc, #360]	; (80032dc <HAL_GPIO_Init+0x1f0>)
 8003174:	42b8      	cmp	r0, r7
 8003176:	d100      	bne.n	800317a <HAL_GPIO_Init+0x8e>
 8003178:	e09e      	b.n	80032b8 <HAL_GPIO_Init+0x1cc>
 800317a:	4f59      	ldr	r7, [pc, #356]	; (80032e0 <HAL_GPIO_Init+0x1f4>)
 800317c:	42b8      	cmp	r0, r7
 800317e:	d100      	bne.n	8003182 <HAL_GPIO_Init+0x96>
 8003180:	e0a1      	b.n	80032c6 <HAL_GPIO_Init+0x1da>
 8003182:	4666      	mov	r6, ip
 8003184:	2705      	movs	r7, #5
 8003186:	40b7      	lsls	r7, r6
 8003188:	003e      	movs	r6, r7
 800318a:	464f      	mov	r7, r9
 800318c:	4337      	orrs	r7, r6
 800318e:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003190:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003192:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003194:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8003196:	4d53      	ldr	r5, [pc, #332]	; (80032e4 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8003198:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800319a:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 800319c:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 800319e:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a0:	423c      	tst	r4, r7
 80031a2:	d17f      	bne.n	80032a4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 80031a4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80031a6:	4f4f      	ldr	r7, [pc, #316]	; (80032e4 <HAL_GPIO_Init+0x1f8>)
 80031a8:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 80031aa:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ac:	02a7      	lsls	r7, r4, #10
 80031ae:	d476      	bmi.n	800329e <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 80031b0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80031b2:	4f4c      	ldr	r7, [pc, #304]	; (80032e4 <HAL_GPIO_Init+0x1f8>)
 80031b4:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80031b6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031b8:	03a7      	lsls	r7, r4, #14
 80031ba:	d46d      	bmi.n	8003298 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 80031bc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80031be:	4f49      	ldr	r7, [pc, #292]	; (80032e4 <HAL_GPIO_Init+0x1f8>)
 80031c0:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 80031c2:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c4:	03e4      	lsls	r4, r4, #15
 80031c6:	d463      	bmi.n	8003290 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 80031c8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80031ca:	4c46      	ldr	r4, [pc, #280]	; (80032e4 <HAL_GPIO_Init+0x1f8>)
 80031cc:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ce:	000c      	movs	r4, r1
      }
    }

    position++;
 80031d0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d2:	40dc      	lsrs	r4, r3
 80031d4:	3202      	adds	r2, #2
 80031d6:	2c00      	cmp	r4, #0
 80031d8:	d067      	beq.n	80032aa <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031da:	2601      	movs	r6, #1
 80031dc:	000c      	movs	r4, r1
 80031de:	409e      	lsls	r6, r3
 80031e0:	4034      	ands	r4, r6
 80031e2:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80031e4:	4231      	tst	r1, r6
 80031e6:	d0f2      	beq.n	80031ce <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031e8:	4654      	mov	r4, sl
 80031ea:	2503      	movs	r5, #3
 80031ec:	6864      	ldr	r4, [r4, #4]
 80031ee:	4025      	ands	r5, r4
 80031f0:	46ac      	mov	ip, r5
 80031f2:	3d01      	subs	r5, #1
 80031f4:	2d01      	cmp	r5, #1
 80031f6:	d88b      	bhi.n	8003110 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 80031f8:	6885      	ldr	r5, [r0, #8]
 80031fa:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031fc:	2503      	movs	r5, #3
 80031fe:	4095      	lsls	r5, r2
 8003200:	46a8      	mov	r8, r5
 8003202:	43ed      	mvns	r5, r5
 8003204:	464f      	mov	r7, r9
 8003206:	9502      	str	r5, [sp, #8]
 8003208:	4645      	mov	r5, r8
 800320a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800320c:	4655      	mov	r5, sl
 800320e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003210:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003212:	002f      	movs	r7, r5
 8003214:	4097      	lsls	r7, r2
 8003216:	46b8      	mov	r8, r7
 8003218:	464f      	mov	r7, r9
 800321a:	4645      	mov	r5, r8
 800321c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800321e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003220:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003222:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003224:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003226:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003228:	0926      	lsrs	r6, r4, #4
 800322a:	402e      	ands	r6, r5
 800322c:	409e      	lsls	r6, r3
 800322e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003230:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003232:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003234:	9d02      	ldr	r5, [sp, #8]
 8003236:	402e      	ands	r6, r5
 8003238:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800323a:	4656      	mov	r6, sl
 800323c:	68b6      	ldr	r6, [r6, #8]
 800323e:	4647      	mov	r7, r8
 8003240:	4096      	lsls	r6, r2
 8003242:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8003244:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003246:	4667      	mov	r7, ip
 8003248:	4666      	mov	r6, ip
 800324a:	4096      	lsls	r6, r2
 800324c:	2f02      	cmp	r7, #2
 800324e:	d000      	beq.n	8003252 <HAL_GPIO_Init+0x166>
 8003250:	e766      	b.n	8003120 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8003252:	08dd      	lsrs	r5, r3, #3
 8003254:	00ad      	lsls	r5, r5, #2
 8003256:	46ac      	mov	ip, r5
 8003258:	4484      	add	ip, r0
 800325a:	4665      	mov	r5, ip
 800325c:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800325e:	2507      	movs	r5, #7
 8003260:	401d      	ands	r5, r3
 8003262:	00ad      	lsls	r5, r5, #2
 8003264:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8003266:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003268:	250f      	movs	r5, #15
 800326a:	4647      	mov	r7, r8
 800326c:	40bd      	lsls	r5, r7
 800326e:	9f03      	ldr	r7, [sp, #12]
 8003270:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003272:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003274:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003276:	4647      	mov	r7, r8
 8003278:	692d      	ldr	r5, [r5, #16]
 800327a:	40bd      	lsls	r5, r7
 800327c:	9f03      	ldr	r7, [sp, #12]
 800327e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003280:	4665      	mov	r5, ip
 8003282:	622f      	str	r7, [r5, #32]
 8003284:	e74c      	b.n	8003120 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003286:	2503      	movs	r5, #3
 8003288:	4095      	lsls	r5, r2
 800328a:	43ed      	mvns	r5, r5
 800328c:	9502      	str	r5, [sp, #8]
 800328e:	e7d0      	b.n	8003232 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8003290:	9c01      	ldr	r4, [sp, #4]
 8003292:	432c      	orrs	r4, r5
 8003294:	0025      	movs	r5, r4
 8003296:	e798      	b.n	80031ca <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8003298:	9f01      	ldr	r7, [sp, #4]
 800329a:	433d      	orrs	r5, r7
 800329c:	e78f      	b.n	80031be <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 800329e:	9f01      	ldr	r7, [sp, #4]
 80032a0:	433d      	orrs	r5, r7
 80032a2:	e786      	b.n	80031b2 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 80032a4:	9f01      	ldr	r7, [sp, #4]
 80032a6:	433d      	orrs	r5, r7
 80032a8:	e77d      	b.n	80031a6 <HAL_GPIO_Init+0xba>
  } 
}
 80032aa:	b007      	add	sp, #28
 80032ac:	bcf0      	pop	{r4, r5, r6, r7}
 80032ae:	46bb      	mov	fp, r7
 80032b0:	46b2      	mov	sl, r6
 80032b2:	46a9      	mov	r9, r5
 80032b4:	46a0      	mov	r8, r4
 80032b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032b8:	4667      	mov	r7, ip
 80032ba:	2601      	movs	r6, #1
 80032bc:	40be      	lsls	r6, r7
 80032be:	464f      	mov	r7, r9
 80032c0:	4337      	orrs	r7, r6
 80032c2:	46b9      	mov	r9, r7
 80032c4:	e764      	b.n	8003190 <HAL_GPIO_Init+0xa4>
 80032c6:	4667      	mov	r7, ip
 80032c8:	2602      	movs	r6, #2
 80032ca:	40be      	lsls	r6, r7
 80032cc:	464f      	mov	r7, r9
 80032ce:	4337      	orrs	r7, r6
 80032d0:	46b9      	mov	r9, r7
 80032d2:	e75d      	b.n	8003190 <HAL_GPIO_Init+0xa4>
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40010000 	.word	0x40010000
 80032dc:	48000400 	.word	0x48000400
 80032e0:	48000800 	.word	0x48000800
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e8:	2a00      	cmp	r2, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ec:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ee:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80032f2:	e7fc      	b.n	80032ee <HAL_GPIO_WritePin+0x6>

080032f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	d04d      	beq.n	8003396 <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fa:	2341      	movs	r3, #65	; 0x41
 80032fc:	5cc3      	ldrb	r3, [r0, r3]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d043      	beq.n	800338c <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003304:	2341      	movs	r3, #65	; 0x41
 8003306:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003308:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800330a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	438a      	bics	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003314:	4921      	ldr	r1, [pc, #132]	; (800339c <HAL_I2C_Init+0xa8>)
 8003316:	6862      	ldr	r2, [r4, #4]
 8003318:	400a      	ands	r2, r1
 800331a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	4920      	ldr	r1, [pc, #128]	; (80033a0 <HAL_I2C_Init+0xac>)
 8003320:	400a      	ands	r2, r1
 8003322:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003324:	68e2      	ldr	r2, [r4, #12]
 8003326:	2a01      	cmp	r2, #1
 8003328:	d02a      	beq.n	8003380 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800332a:	2184      	movs	r1, #132	; 0x84
 800332c:	68a0      	ldr	r0, [r4, #8]
 800332e:	0209      	lsls	r1, r1, #8
 8003330:	4301      	orrs	r1, r0
 8003332:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003334:	2a02      	cmp	r2, #2
 8003336:	d102      	bne.n	800333e <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003342:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	4915      	ldr	r1, [pc, #84]	; (80033a0 <HAL_I2C_Init+0xac>)
 800334c:	400a      	ands	r2, r1
 800334e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003350:	6961      	ldr	r1, [r4, #20]
 8003352:	6922      	ldr	r2, [r4, #16]
 8003354:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003356:	69a1      	ldr	r1, [r4, #24]
 8003358:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800335a:	430a      	orrs	r2, r1
 800335c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800335e:	6a21      	ldr	r1, [r4, #32]
 8003360:	69e2      	ldr	r2, [r4, #28]
 8003362:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8003364:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003366:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003376:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	54a3      	strb	r3, [r4, r2]
}
 800337e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	68a1      	ldr	r1, [r4, #8]
 8003384:	0212      	lsls	r2, r2, #8
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800338a:	e7d8      	b.n	800333e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 800338c:	3340      	adds	r3, #64	; 0x40
 800338e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003390:	f7ff f9fe 	bl	8002790 <HAL_I2C_MspInit>
 8003394:	e7b6      	b.n	8003304 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8003396:	2001      	movs	r0, #1
 8003398:	e7f1      	b.n	800337e <HAL_I2C_Init+0x8a>
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	f0ffffff 	.word	0xf0ffffff
 80033a0:	ffff7fff 	.word	0xffff7fff
 80033a4:	02008000 	.word	0x02008000

080033a8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	4647      	mov	r7, r8
 80033ac:	46ce      	mov	lr, r9
 80033ae:	4698      	mov	r8, r3
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033b0:	2341      	movs	r3, #65	; 0x41
 80033b2:	2528      	movs	r5, #40	; 0x28
{
 80033b4:	b580      	push	{r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033b6:	4699      	mov	r9, r3
 80033b8:	5cc3      	ldrb	r3, [r0, r3]
{
 80033ba:	0004      	movs	r4, r0
 80033bc:	000e      	movs	r6, r1
 80033be:	0017      	movs	r7, r2

    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 80033c0:	2001      	movs	r0, #1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c2:	401d      	ands	r5, r3
 80033c4:	2d28      	cmp	r5, #40	; 0x28
 80033c6:	d137      	bne.n	8003438 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
    if ((pData == NULL) || (Size == 0U))
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d039      	beq.n	8003440 <HAL_I2C_Slave_Seq_Receive_IT+0x98>
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d037      	beq.n	8003440 <HAL_I2C_Slave_Seq_Receive_IT+0x98>
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d0:	464b      	mov	r3, r9
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033d2:	22fc      	movs	r2, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d4:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	4391      	bics	r1, r2
 80033dc:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 80033de:	2140      	movs	r1, #64	; 0x40
 80033e0:	5c62      	ldrb	r2, [r4, r1]
 80033e2:	2a01      	cmp	r2, #1
 80033e4:	d053      	beq.n	800348e <HAL_I2C_Slave_Seq_Receive_IT+0xe6>
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033e6:	464a      	mov	r2, r9
    __HAL_LOCK(hi2c);
 80033e8:	5460      	strb	r0, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033ea:	5ca1      	ldrb	r1, [r4, r2]
 80033ec:	2929      	cmp	r1, #41	; 0x29
 80033ee:	d02c      	beq.n	800344a <HAL_I2C_Slave_Seq_Receive_IT+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80033f0:	2241      	movs	r2, #65	; 0x41
 80033f2:	212a      	movs	r1, #42	; 0x2a
 80033f4:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80033f6:	3201      	adds	r2, #1
 80033f8:	390a      	subs	r1, #10
 80033fa:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	2200      	movs	r2, #0
 80033fe:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4924      	ldr	r1, [pc, #144]	; (8003494 <HAL_I2C_Slave_Seq_Receive_IT+0xec>)
 8003404:	400a      	ands	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8003408:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800340a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800340c:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800340e:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003410:	4642      	mov	r2, r8
 8003412:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003414:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_I2C_Slave_Seq_Receive_IT+0xf0>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003416:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003418:	6362      	str	r2, [r4, #52]	; 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	03d2      	lsls	r2, r2, #15
 800341e:	d403      	bmi.n	8003428 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003420:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003422:	420a      	tst	r2, r1
 8003424:	d000      	beq.n	8003428 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003426:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	2100      	movs	r1, #0
    return HAL_OK;
 800342c:	2000      	movs	r0, #0
    __HAL_UNLOCK(hi2c);
 800342e:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	31fc      	adds	r1, #252	; 0xfc
 8003434:	430a      	orrs	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bcc0      	pop	{r6, r7}
 800343a:	46b9      	mov	r9, r7
 800343c:	46b0      	mov	r8, r6
 800343e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8003444:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003446:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003448:	e7f6      	b.n	8003438 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800344a:	5ca2      	ldrb	r2, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800344c:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800344e:	4015      	ands	r5, r2
 8003450:	0028      	movs	r0, r5
 8003452:	3828      	subs	r0, #40	; 0x28
 8003454:	4242      	negs	r2, r0
 8003456:	4150      	adcs	r0, r2
 8003458:	22b0      	movs	r2, #176	; 0xb0
 800345a:	4240      	negs	r0, r0
 800345c:	4002      	ands	r2, r0
 800345e:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003460:	400a      	ands	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	0452      	lsls	r2, r2, #17
 8003468:	d5c2      	bpl.n	80033f0 <HAL_I2C_Slave_Seq_Receive_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	490b      	ldr	r1, [pc, #44]	; (800349c <HAL_I2C_Slave_Seq_Receive_IT+0xf4>)
        if (hi2c->hdmatx != NULL)
 800346e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003470:	400a      	ands	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 8003474:	2800      	cmp	r0, #0
 8003476:	d0bb      	beq.n	80033f0 <HAL_I2C_Slave_Seq_Receive_IT+0x48>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_I2C_Slave_Seq_Receive_IT+0xf8>)
 800347a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800347c:	f7ff fe0e 	bl	800309c <HAL_DMA_Abort_IT>
 8003480:	2800      	cmp	r0, #0
 8003482:	d002      	beq.n	800348a <HAL_I2C_Slave_Seq_Receive_IT+0xe2>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003484:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003486:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003488:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	e7b0      	b.n	80033f0 <HAL_I2C_Slave_Seq_Receive_IT+0x48>
    __HAL_LOCK(hi2c);
 800348e:	2002      	movs	r0, #2
 8003490:	e7d2      	b.n	8003438 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	ffff7fff 	.word	0xffff7fff
 8003498:	080039a1 	.word	0x080039a1
 800349c:	ffffbfff 	.word	0xffffbfff
 80034a0:	08003611 	.word	0x08003611

080034a4 <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a4:	2241      	movs	r2, #65	; 0x41
 80034a6:	5c81      	ldrb	r1, [r0, r2]
{
 80034a8:	0003      	movs	r3, r0
    return HAL_BUSY;
 80034aa:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ac:	2920      	cmp	r1, #32
 80034ae:	d109      	bne.n	80034c4 <HAL_I2C_EnableListen_IT+0x20>
    return HAL_OK;
 80034b0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b2:	3108      	adds	r1, #8
 80034b4:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_I2C_EnableListen_IT+0x24>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80034b8:	3190      	adds	r1, #144	; 0x90
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80034ba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6013      	str	r3, [r2, #0]
}
 80034c4:	4770      	bx	lr
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	080039a1 	.word	0x080039a1

080034cc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034cc:	6803      	ldr	r3, [r0, #0]
{
 80034ce:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034d0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034d2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80034d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d000      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80034da:	4798      	blx	r3
}
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	46c0      	nop			; (mov r8, r8)

080034e0 <HAL_I2C_SlaveTxCpltCallback>:
 80034e0:	4770      	bx	lr
 80034e2:	46c0      	nop			; (mov r8, r8)

080034e4 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	2142      	movs	r1, #66	; 0x42
{
 80034e6:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034f0:	0451      	lsls	r1, r2, #17
 80034f2:	d521      	bpl.n	8003538 <I2C_ITSlaveSeqCplt+0x54>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4920      	ldr	r1, [pc, #128]	; (8003578 <I2C_ITSlaveSeqCplt+0x94>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034fc:	2241      	movs	r2, #65	; 0x41
 80034fe:	5c81      	ldrb	r1, [r0, r2]
 8003500:	2929      	cmp	r1, #41	; 0x29
 8003502:	d023      	beq.n	800354c <I2C_ITSlaveSeqCplt+0x68>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003504:	5c81      	ldrb	r1, [r0, r2]
 8003506:	292a      	cmp	r1, #42	; 0x2a
 8003508:	d000      	beq.n	800350c <I2C_ITSlaveSeqCplt+0x28>
}
 800350a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800350c:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800350e:	3902      	subs	r1, #2
 8003510:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003512:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003514:	5c82      	ldrb	r2, [r0, r2]
 8003516:	4011      	ands	r1, r2
 8003518:	3928      	subs	r1, #40	; 0x28
 800351a:	424a      	negs	r2, r1
 800351c:	4151      	adcs	r1, r2
 800351e:	22b0      	movs	r2, #176	; 0xb0
 8003520:	4249      	negs	r1, r1
 8003522:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003524:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003526:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003528:	400a      	ands	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800352c:	2340      	movs	r3, #64	; 0x40
 800352e:	2200      	movs	r2, #0
 8003530:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003532:	f7fd faf5 	bl	8000b20 <HAL_I2C_SlaveRxCpltCallback>
}
 8003536:	e7e8      	b.n	800350a <I2C_ITSlaveSeqCplt+0x26>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003538:	0412      	lsls	r2, r2, #16
 800353a:	d5df      	bpl.n	80034fc <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	490f      	ldr	r1, [pc, #60]	; (800357c <I2C_ITSlaveSeqCplt+0x98>)
 8003540:	400a      	ands	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003544:	2241      	movs	r2, #65	; 0x41
 8003546:	5c81      	ldrb	r1, [r0, r2]
 8003548:	2929      	cmp	r1, #41	; 0x29
 800354a:	d1db      	bne.n	8003504 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800354c:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800354e:	3901      	subs	r1, #1
 8003550:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003552:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003554:	5c82      	ldrb	r2, [r0, r2]
 8003556:	4011      	ands	r1, r2
 8003558:	3928      	subs	r1, #40	; 0x28
 800355a:	424a      	negs	r2, r1
 800355c:	4151      	adcs	r1, r2
 800355e:	22b0      	movs	r2, #176	; 0xb0
 8003560:	4249      	negs	r1, r1
 8003562:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003564:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003566:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003568:	400a      	ands	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800356c:	2340      	movs	r3, #64	; 0x40
 800356e:	2200      	movs	r2, #0
 8003570:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003572:	f7ff ffb5 	bl	80034e0 <HAL_I2C_SlaveTxCpltCallback>
 8003576:	e7c8      	b.n	800350a <I2C_ITSlaveSeqCplt+0x26>
 8003578:	ffffbfff 	.word	0xffffbfff
 800357c:	ffff7fff 	.word	0xffff7fff

08003580 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003584:	25fe      	movs	r5, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8003586:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003588:	68c6      	ldr	r6, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800358a:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800358c:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800358e:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003590:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003592:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003594:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003596:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8003598:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800359a:	402a      	ands	r2, r5
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800359c:	2e02      	cmp	r6, #2
 800359e:	d113      	bne.n	80035c8 <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035a0:	05a4      	lsls	r4, r4, #22
 80035a2:	0da6      	lsrs	r6, r4, #22
 80035a4:	46b4      	mov	ip, r6
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035a6:	2606      	movs	r6, #6
 80035a8:	0f64      	lsrs	r4, r4, #29
 80035aa:	4054      	eors	r4, r2
 80035ac:	0032      	movs	r2, r6
 80035ae:	4022      	ands	r2, r4
 80035b0:	4690      	mov	r8, r2
 80035b2:	4226      	tst	r6, r4
 80035b4:	d112      	bne.n	80035dc <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 80035b6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80035b8:	3401      	adds	r4, #1
 80035ba:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80035bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80035be:	2a02      	cmp	r2, #2
 80035c0:	d018      	beq.n	80035f4 <I2C_ITAddrCplt.part.0+0x74>
}
 80035c2:	bc80      	pop	{r7}
 80035c4:	46b8      	mov	r8, r7
 80035c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035c8:	25b8      	movs	r5, #184	; 0xb8
 80035ca:	681c      	ldr	r4, [r3, #0]
 80035cc:	43ac      	bics	r4, r5
 80035ce:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	2400      	movs	r4, #0
 80035d4:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035d6:	f7fd fa93 	bl	8000b00 <HAL_I2C_AddrCallback>
}
 80035da:	e7f2      	b.n	80035c2 <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80035dc:	24b8      	movs	r4, #184	; 0xb8
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	43a2      	bics	r2, r4
 80035e2:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	2200      	movs	r2, #0
 80035e8:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035ea:	002a      	movs	r2, r5
 80035ec:	403a      	ands	r2, r7
 80035ee:	f7fd fa87 	bl	8000b00 <HAL_I2C_AddrCallback>
 80035f2:	e7e6      	b.n	80035c2 <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 80035f4:	4642      	mov	r2, r8
 80035f6:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035f8:	2208      	movs	r2, #8
 80035fa:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80035fc:	4642      	mov	r2, r8
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003602:	4662      	mov	r2, ip
 8003604:	f7fd fa7c 	bl	8000b00 <HAL_I2C_AddrCallback>
 8003608:	e7db      	b.n	80035c2 <I2C_ITAddrCplt.part.0+0x42>
 800360a:	46c0      	nop			; (mov r8, r8)

0800360c <HAL_I2C_AbortCpltCallback>:
 800360c:	4770      	bx	lr
 800360e:	46c0      	nop			; (mov r8, r8)

08003610 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003610:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003612:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8003614:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800361e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003624:	2200      	movs	r2, #0
 8003626:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003628:	2341      	movs	r3, #65	; 0x41
 800362a:	5cc2      	ldrb	r2, [r0, r3]
 800362c:	2a60      	cmp	r2, #96	; 0x60
 800362e:	d006      	beq.n	800363e <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8003632:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8003634:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003636:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003638:	f7fd fa7a 	bl	8000b30 <HAL_I2C_ErrorCallback>
}
 800363c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800363e:	3a40      	subs	r2, #64	; 0x40
 8003640:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8003644:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003648:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 800364a:	f7ff ffdf 	bl	800360c <HAL_I2C_AbortCpltCallback>
}
 800364e:	e7f5      	b.n	800363c <I2C_DMAAbort+0x2c>

08003650 <I2C_ITError>:
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003650:	2241      	movs	r2, #65	; 0x41
{
 8003652:	b570      	push	{r4, r5, r6, lr}
 8003654:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003656:	5c83      	ldrb	r3, [r0, r2]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003658:	2500      	movs	r5, #0
 800365a:	2042      	movs	r0, #66	; 0x42
 800365c:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800365e:	4851      	ldr	r0, [pc, #324]	; (80037a4 <I2C_ITError+0x154>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003660:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003662:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003664:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003666:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003668:	4308      	orrs	r0, r1
 800366a:	6460      	str	r0, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800366c:	2b02      	cmp	r3, #2
 800366e:	d834      	bhi.n	80036da <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003670:	2028      	movs	r0, #40	; 0x28
 8003672:	5ca3      	ldrb	r3, [r4, r2]
 8003674:	4003      	ands	r3, r0
 8003676:	3b28      	subs	r3, #40	; 0x28
 8003678:	4259      	negs	r1, r3
 800367a:	414b      	adcs	r3, r1
 800367c:	21b0      	movs	r1, #176	; 0xb0
 800367e:	425b      	negs	r3, r3
 8003680:	4019      	ands	r1, r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003682:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003684:	39f7      	subs	r1, #247	; 0xf7
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003686:	4018      	ands	r0, r3
 8003688:	2828      	cmp	r0, #40	; 0x28
 800368a:	d001      	beq.n	8003690 <I2C_ITError+0x40>
 800368c:	21f7      	movs	r1, #247	; 0xf7
 800368e:	4249      	negs	r1, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003698:	2128      	movs	r1, #40	; 0x28
 800369a:	2241      	movs	r2, #65	; 0x41
 800369c:	54a1      	strb	r1, [r4, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800369e:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <I2C_ITError+0x158>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80036a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036a2:	6362      	str	r2, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80036a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d004      	beq.n	80036b4 <I2C_ITError+0x64>
 80036aa:	0011      	movs	r1, r2
 80036ac:	2510      	movs	r5, #16
 80036ae:	3911      	subs	r1, #17
 80036b0:	43a9      	bics	r1, r5
 80036b2:	d03a      	beq.n	800372a <I2C_ITError+0xda>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d003      	beq.n	80036c2 <I2C_ITError+0x72>
 80036ba:	2110      	movs	r1, #16
 80036bc:	3a12      	subs	r2, #18
 80036be:	438a      	bics	r2, r1
 80036c0:	d048      	beq.n	8003754 <I2C_ITError+0x104>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036c2:	2341      	movs	r3, #65	; 0x41
 80036c4:	5ce2      	ldrb	r2, [r4, r3]
 80036c6:	2a60      	cmp	r2, #96	; 0x60
 80036c8:	d062      	beq.n	8003790 <I2C_ITError+0x140>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ca:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80036cc:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ce:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 80036d0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80036d2:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80036d4:	f7fd fa2c 	bl	8000b30 <HAL_I2C_ErrorCallback>
}
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036da:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036dc:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036de:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	438a      	bics	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	0792      	lsls	r2, r2, #30
 80036ec:	d500      	bpl.n	80036f0 <I2C_ITError+0xa0>
    hi2c->Instance->TXDR = 0x00U;
 80036ee:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f0:	2201      	movs	r2, #1
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	420a      	tst	r2, r1
 80036f6:	d102      	bne.n	80036fe <I2C_ITError+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036fe:	2241      	movs	r2, #65	; 0x41
 8003700:	5ca1      	ldrb	r1, [r4, r2]
 8003702:	2960      	cmp	r1, #96	; 0x60
 8003704:	d00f      	beq.n	8003726 <I2C_ITError+0xd6>
      hi2c->State         = HAL_I2C_STATE_READY;
 8003706:	2120      	movs	r1, #32
 8003708:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	4211      	tst	r1, r2
 800370e:	d00a      	beq.n	8003726 <I2C_ITError+0xd6>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003710:	2210      	movs	r2, #16
 8003712:	6999      	ldr	r1, [r3, #24]
 8003714:	420a      	tst	r2, r1
 8003716:	d004      	beq.n	8003722 <I2C_ITError+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003718:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800371c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800371e:	430a      	orrs	r2, r1
 8003720:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	2220      	movs	r2, #32
 8003724:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8003726:	2200      	movs	r2, #0
 8003728:	e7ba      	b.n	80036a0 <I2C_ITError+0x50>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	0452      	lsls	r2, r2, #17
 800372e:	d42a      	bmi.n	8003786 <I2C_ITError+0x136>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003730:	f7ff fcd8 	bl	80030e4 <HAL_DMA_GetState>
 8003734:	2801      	cmp	r0, #1
 8003736:	d0c4      	beq.n	80036c2 <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003738:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 800373c:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800373e:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003744:	f7ff fcaa 	bl	800309c <HAL_DMA_Abort_IT>
 8003748:	2800      	cmp	r0, #0
 800374a:	d0c5      	beq.n	80036d8 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800374c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800374e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003750:	4798      	blx	r3
 8003752:	e7c1      	b.n	80036d8 <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	0412      	lsls	r2, r2, #16
 8003758:	d503      	bpl.n	8003762 <I2C_ITError+0x112>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4914      	ldr	r1, [pc, #80]	; (80037b0 <I2C_ITError+0x160>)
 800375e:	400a      	ands	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003762:	f7ff fcbf 	bl	80030e4 <HAL_DMA_GetState>
 8003766:	2801      	cmp	r0, #1
 8003768:	d0ab      	beq.n	80036c2 <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800376a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 800376e:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003770:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003776:	f7ff fc91 	bl	800309c <HAL_DMA_Abort_IT>
 800377a:	2800      	cmp	r0, #0
 800377c:	d0ac      	beq.n	80036d8 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800377e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003780:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003782:	4798      	blx	r3
 8003784:	e7a8      	b.n	80036d8 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	490a      	ldr	r1, [pc, #40]	; (80037b4 <I2C_ITError+0x164>)
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e7cf      	b.n	8003730 <I2C_ITError+0xe0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	3a40      	subs	r2, #64	; 0x40
 8003792:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003794:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8003796:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003798:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800379a:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800379c:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 800379e:	f7ff ff35 	bl	800360c <HAL_I2C_AbortCpltCallback>
}
 80037a2:	e799      	b.n	80036d8 <I2C_ITError+0x88>
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	080039a1 	.word	0x080039a1
 80037ac:	08003611 	.word	0x08003611
 80037b0:	ffff7fff 	.word	0xffff7fff
 80037b4:	ffffbfff 	.word	0xffffbfff

080037b8 <HAL_I2C_ER_IRQHandler>:
{
 80037b8:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037ba:	2480      	movs	r4, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037bc:	6802      	ldr	r2, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037be:	0064      	lsls	r4, r4, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037c0:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037c2:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037c4:	4223      	tst	r3, r4
 80037c6:	d02a      	beq.n	800381e <HAL_I2C_ER_IRQHandler+0x66>
 80037c8:	060d      	lsls	r5, r1, #24
 80037ca:	d51b      	bpl.n	8003804 <HAL_I2C_ER_IRQHandler+0x4c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80037cc:	2501      	movs	r5, #1
 80037ce:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80037d0:	4329      	orrs	r1, r5
 80037d2:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d4:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80037d6:	0559      	lsls	r1, r3, #21
 80037d8:	d526      	bpl.n	8003828 <HAL_I2C_ER_IRQHandler+0x70>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80037da:	2408      	movs	r4, #8
 80037dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80037de:	4321      	orrs	r1, r4
 80037e0:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	00c9      	lsls	r1, r1, #3
 80037e6:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	d506      	bpl.n	80037fa <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80037ec:	2102      	movs	r1, #2
 80037ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037fa:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 80037fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037fe:	420b      	tst	r3, r1
 8003800:	d10a      	bne.n	8003818 <HAL_I2C_ER_IRQHandler+0x60>
}
 8003802:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003804:	055c      	lsls	r4, r3, #21
 8003806:	d4f8      	bmi.n	80037fa <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003808:	059b      	lsls	r3, r3, #22
 800380a:	d5f6      	bpl.n	80037fa <HAL_I2C_ER_IRQHandler+0x42>
 800380c:	0609      	lsls	r1, r1, #24
 800380e:	d4ed      	bmi.n	80037ec <HAL_I2C_ER_IRQHandler+0x34>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003810:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8003812:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003814:	420b      	tst	r3, r1
 8003816:	d0f4      	beq.n	8003802 <HAL_I2C_ER_IRQHandler+0x4a>
    I2C_ITError(hi2c, tmperror);
 8003818:	f7ff ff1a 	bl	8003650 <I2C_ITError>
}
 800381c:	e7f1      	b.n	8003802 <HAL_I2C_ER_IRQHandler+0x4a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800381e:	055c      	lsls	r4, r3, #21
 8003820:	d5f2      	bpl.n	8003808 <HAL_I2C_ER_IRQHandler+0x50>
 8003822:	0609      	lsls	r1, r1, #24
 8003824:	d4d9      	bmi.n	80037da <HAL_I2C_ER_IRQHandler+0x22>
 8003826:	e7e8      	b.n	80037fa <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003828:	059b      	lsls	r3, r3, #22
 800382a:	d4df      	bmi.n	80037ec <HAL_I2C_ER_IRQHandler+0x34>
 800382c:	e7e5      	b.n	80037fa <HAL_I2C_ER_IRQHandler+0x42>
 800382e:	46c0      	nop			; (mov r8, r8)

08003830 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003834:	2541      	movs	r5, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003836:	2620      	movs	r6, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800383c:	5d62      	ldrb	r2, [r4, r5]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383e:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003840:	3e18      	subs	r6, #24
 8003842:	43b2      	bics	r2, r6
 8003844:	2a21      	cmp	r2, #33	; 0x21
 8003846:	d04e      	beq.n	80038e6 <I2C_ITSlaveCplt.constprop.0+0xb6>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003848:	2a22      	cmp	r2, #34	; 0x22
 800384a:	d100      	bne.n	800384e <I2C_ITSlaveCplt.constprop.0+0x1e>
 800384c:	e071      	b.n	8003932 <I2C_ITSlaveCplt.constprop.0+0x102>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	685d      	ldr	r5, [r3, #4]
 8003852:	0212      	lsls	r2, r2, #8
 8003854:	432a      	orrs	r2, r5
 8003856:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4d4d      	ldr	r5, [pc, #308]	; (8003990 <I2C_ITSlaveCplt.constprop.0+0x160>)
 800385c:	402a      	ands	r2, r5
 800385e:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	0792      	lsls	r2, r2, #30
 8003864:	d501      	bpl.n	800386a <I2C_ITSlaveCplt.constprop.0+0x3a>
    hi2c->Instance->TXDR = 0x00U;
 8003866:	2200      	movs	r2, #0
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386a:	2201      	movs	r2, #1
 800386c:	699d      	ldr	r5, [r3, #24]
 800386e:	422a      	tst	r2, r5
 8003870:	d102      	bne.n	8003878 <I2C_ITSlaveCplt.constprop.0+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003872:	699d      	ldr	r5, [r3, #24]
 8003874:	432a      	orrs	r2, r5
 8003876:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003878:	0442      	lsls	r2, r0, #17
 800387a:	d53b      	bpl.n	80038f4 <I2C_ITSlaveCplt.constprop.0+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4845      	ldr	r0, [pc, #276]	; (8003994 <I2C_ITSlaveCplt.constprop.0+0x164>)
 8003880:	4002      	ands	r2, r0
 8003882:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8003884:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003886:	2a00      	cmp	r2, #0
 8003888:	d003      	beq.n	8003892 <I2C_ITSlaveCplt.constprop.0+0x62>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	6852      	ldr	r2, [r2, #4]
 800388e:	b292      	uxth	r2, r2
 8003890:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003892:	0749      	lsls	r1, r1, #29
 8003894:	d508      	bpl.n	80038a8 <I2C_ITSlaveCplt.constprop.0+0x78>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800389a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800389c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80038a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13d      	bne.n	8003924 <I2C_ITSlaveCplt.constprop.0+0xf4>
  if (hi2c->XferCount != 0U)
 80038a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <I2C_ITSlaveCplt.constprop.0+0x86>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038ae:	2204      	movs	r2, #4
 80038b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038b2:	4313      	orrs	r3, r2
 80038b4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	2700      	movs	r7, #0
 80038b8:	2542      	movs	r5, #66	; 0x42
 80038ba:	5567      	strb	r7, [r4, r5]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038bc:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80038be:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	d13d      	bne.n	8003940 <I2C_ITSlaveCplt.constprop.0+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038c6:	4d34      	ldr	r5, [pc, #208]	; (8003998 <I2C_ITSlaveCplt.constprop.0+0x168>)
 80038c8:	42ab      	cmp	r3, r5
 80038ca:	d11d      	bne.n	8003908 <I2C_ITSlaveCplt.constprop.0+0xd8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038cc:	2341      	movs	r3, #65	; 0x41
 80038ce:	5ce2      	ldrb	r2, [r4, r3]
 80038d0:	2a22      	cmp	r2, #34	; 0x22
 80038d2:	d053      	beq.n	800397c <I2C_ITSlaveCplt.constprop.0+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	2220      	movs	r2, #32
 80038d6:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80038d8:	2340      	movs	r3, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80038da:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038dc:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80038de:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038e0:	f7ff fdfe 	bl	80034e0 <HAL_I2C_SlaveTxCpltCallback>
}
 80038e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038e6:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038e8:	681d      	ldr	r5, [r3, #0]
 80038ea:	36f2      	adds	r6, #242	; 0xf2
 80038ec:	43b5      	bics	r5, r6
 80038ee:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038f0:	6322      	str	r2, [r4, #48]	; 0x30
 80038f2:	e7ac      	b.n	800384e <I2C_ITSlaveCplt.constprop.0+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038f4:	0400      	lsls	r0, r0, #16
 80038f6:	d5cc      	bpl.n	8003892 <I2C_ITSlaveCplt.constprop.0+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4828      	ldr	r0, [pc, #160]	; (800399c <I2C_ITSlaveCplt.constprop.0+0x16c>)
 80038fc:	4002      	ands	r2, r0
 80038fe:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003900:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003902:	2a00      	cmp	r2, #0
 8003904:	d1c1      	bne.n	800388a <I2C_ITSlaveCplt.constprop.0+0x5a>
 8003906:	e7c4      	b.n	8003892 <I2C_ITSlaveCplt.constprop.0+0x62>
    I2C_ITSlaveSeqCplt(hi2c);
 8003908:	0020      	movs	r0, r4
 800390a:	f7ff fdeb 	bl	80034e4 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	2341      	movs	r3, #65	; 0x41
 8003910:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003912:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8003916:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8003918:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800391a:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800391c:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 800391e:	f7fd f8eb 	bl	8000af8 <HAL_I2C_ListenCpltCallback>
 8003922:	e7df      	b.n	80038e4 <I2C_ITSlaveCplt.constprop.0+0xb4>
      hi2c->XferSize--;
 8003924:	3b01      	subs	r3, #1
 8003926:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003928:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800392a:	3b01      	subs	r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003930:	e7ba      	b.n	80038a8 <I2C_ITSlaveCplt.constprop.0+0x78>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003932:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003934:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003936:	681d      	ldr	r5, [r3, #0]
 8003938:	43b5      	bics	r5, r6
 800393a:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800393c:	6322      	str	r2, [r4, #48]	; 0x30
 800393e:	e786      	b.n	800384e <I2C_ITSlaveCplt.constprop.0+0x1e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003940:	0020      	movs	r0, r4
 8003942:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003944:	f7ff fe84 	bl	8003650 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003948:	2341      	movs	r3, #65	; 0x41
 800394a:	5ce2      	ldrb	r2, [r4, r3]
 800394c:	2a28      	cmp	r2, #40	; 0x28
 800394e:	d1c9      	bne.n	80038e4 <I2C_ITSlaveCplt.constprop.0+0xb4>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <I2C_ITSlaveCplt.constprop.0+0x168>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003952:	21fe      	movs	r1, #254	; 0xfe
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003956:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8003958:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800395a:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	5567      	strb	r7, [r4, r5]
  hi2c->XferISR = NULL;
 800395e:	6367      	str	r7, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003960:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003962:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003964:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003966:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	438a      	bics	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	2210      	movs	r2, #16
 8003970:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	54e7      	strb	r7, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003976:	f7fd f8bf 	bl	8000af8 <HAL_I2C_ListenCpltCallback>
}
 800397a:	e7b3      	b.n	80038e4 <I2C_ITSlaveCplt.constprop.0+0xb4>
    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	3a02      	subs	r2, #2
 800397e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8003980:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003984:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8003986:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003988:	f7fd f8ca 	bl	8000b20 <HAL_I2C_SlaveRxCpltCallback>
 800398c:	e7aa      	b.n	80038e4 <I2C_ITSlaveCplt.constprop.0+0xb4>
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	fe00e800 	.word	0xfe00e800
 8003994:	ffffbfff 	.word	0xffffbfff
 8003998:	ffff0000 	.word	0xffff0000
 800399c:	ffff7fff 	.word	0xffff7fff

080039a0 <I2C_Slave_ISR_IT>:
{
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80039a2:	2340      	movs	r3, #64	; 0x40
{
 80039a4:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80039a6:	5cc2      	ldrb	r2, [r0, r3]
{
 80039a8:	0004      	movs	r4, r0
 80039aa:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 80039ac:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80039ae:	2a01      	cmp	r2, #1
 80039b0:	d100      	bne.n	80039b4 <I2C_Slave_ISR_IT+0x14>
 80039b2:	e079      	b.n	8003aa8 <I2C_Slave_ISR_IT+0x108>
 80039b4:	2201      	movs	r2, #1
 80039b6:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039b8:	3b20      	subs	r3, #32
 80039ba:	420b      	tst	r3, r1
 80039bc:	d001      	beq.n	80039c2 <I2C_Slave_ISR_IT+0x22>
 80039be:	4233      	tst	r3, r6
 80039c0:	d15e      	bne.n	8003a80 <I2C_Slave_ISR_IT+0xe0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039c2:	2310      	movs	r3, #16
 80039c4:	422b      	tst	r3, r5
 80039c6:	d017      	beq.n	80039f8 <I2C_Slave_ISR_IT+0x58>
 80039c8:	4233      	tst	r3, r6
 80039ca:	d015      	beq.n	80039f8 <I2C_Slave_ISR_IT+0x58>
    if (hi2c->XferCount == 0U)
 80039cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039ce:	b291      	uxth	r1, r2
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d15b      	bne.n	8003a8c <I2C_Slave_ISR_IT+0xec>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039d4:	3331      	adds	r3, #49	; 0x31
 80039d6:	5ce2      	ldrb	r2, [r4, r3]
 80039d8:	2a28      	cmp	r2, #40	; 0x28
 80039da:	d100      	bne.n	80039de <I2C_Slave_ISR_IT+0x3e>
 80039dc:	e06e      	b.n	8003abc <I2C_Slave_ISR_IT+0x11c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039de:	2341      	movs	r3, #65	; 0x41
 80039e0:	5ce3      	ldrb	r3, [r4, r3]
 80039e2:	2b29      	cmp	r3, #41	; 0x29
 80039e4:	d100      	bne.n	80039e8 <I2C_Slave_ISR_IT+0x48>
 80039e6:	e09d      	b.n	8003b24 <I2C_Slave_ISR_IT+0x184>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e8:	2210      	movs	r2, #16
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80039ee:	2340      	movs	r3, #64	; 0x40
 80039f0:	2200      	movs	r2, #0
  return HAL_OK;
 80039f2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 80039f4:	54e2      	strb	r2, [r4, r3]
}
 80039f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039f8:	2304      	movs	r3, #4
 80039fa:	422b      	tst	r3, r5
 80039fc:	d10d      	bne.n	8003a1a <I2C_Slave_ISR_IT+0x7a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039fe:	2308      	movs	r3, #8
 8003a00:	422b      	tst	r3, r5
 8003a02:	d027      	beq.n	8003a54 <I2C_Slave_ISR_IT+0xb4>
 8003a04:	4233      	tst	r3, r6
 8003a06:	d025      	beq.n	8003a54 <I2C_Slave_ISR_IT+0xb4>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a08:	2241      	movs	r2, #65	; 0x41
 8003a0a:	5ca1      	ldrb	r1, [r4, r2]
 8003a0c:	3a19      	subs	r2, #25
 8003a0e:	400a      	ands	r2, r1
 8003a10:	2a28      	cmp	r2, #40	; 0x28
 8003a12:	d04f      	beq.n	8003ab4 <I2C_Slave_ISR_IT+0x114>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8003a18:	e7e9      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a1a:	4233      	tst	r3, r6
 8003a1c:	d0ef      	beq.n	80039fe <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount > 0U)
 8003a1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <I2C_Slave_ISR_IT+0xa0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a2a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003a32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003a40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1d3      	bne.n	80039ee <I2C_Slave_ISR_IT+0x4e>
 8003a46:	4b42      	ldr	r3, [pc, #264]	; (8003b50 <I2C_Slave_ISR_IT+0x1b0>)
 8003a48:	429f      	cmp	r7, r3
 8003a4a:	d0d0      	beq.n	80039ee <I2C_Slave_ISR_IT+0x4e>
        I2C_ITSlaveSeqCplt(hi2c);
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	f7ff fd49 	bl	80034e4 <I2C_ITSlaveSeqCplt>
 8003a52:	e7cc      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a54:	2302      	movs	r3, #2
 8003a56:	422b      	tst	r3, r5
 8003a58:	d0c9      	beq.n	80039ee <I2C_Slave_ISR_IT+0x4e>
 8003a5a:	4233      	tst	r3, r6
 8003a5c:	d0c7      	beq.n	80039ee <I2C_Slave_ISR_IT+0x4e>
    if (hi2c->XferCount > 0U)
 8003a5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d023      	beq.n	8003aac <I2C_Slave_ISR_IT+0x10c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a66:	6822      	ldr	r2, [r4, #0]
 8003a68:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003a6a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a6c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003a6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003a78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	8523      	strh	r3, [r4, #40]	; 0x28
 8003a7e:	e7b6      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a80:	f7ff fed6 	bl	8003830 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a84:	2310      	movs	r3, #16
 8003a86:	422b      	tst	r3, r5
 8003a88:	d0b6      	beq.n	80039f8 <I2C_Slave_ISR_IT+0x58>
 8003a8a:	e79d      	b.n	80039c8 <I2C_Slave_ISR_IT+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a90:	2204      	movs	r2, #4
 8003a92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a94:	4313      	orrs	r3, r2
 8003a96:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <I2C_Slave_ISR_IT+0x1b4>)
 8003a9a:	421f      	tst	r7, r3
 8003a9c:	d1a7      	bne.n	80039ee <I2C_Slave_ISR_IT+0x4e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a9e:	0020      	movs	r0, r4
 8003aa0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003aa2:	f7ff fdd5 	bl	8003650 <I2C_ITError>
 8003aa6:	e7a2      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
  __HAL_LOCK(hi2c);
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	e7a4      	b.n	80039f6 <I2C_Slave_ISR_IT+0x56>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <I2C_Slave_ISR_IT+0x1b4>)
 8003aae:	421f      	tst	r7, r3
 8003ab0:	d0cc      	beq.n	8003a4c <I2C_Slave_ISR_IT+0xac>
 8003ab2:	e79c      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
 8003ab4:	0020      	movs	r0, r4
 8003ab6:	f7ff fd63 	bl	8003580 <I2C_ITAddrCplt.part.0>
 8003aba:	e798      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0492      	lsls	r2, r2, #18
 8003ac0:	4297      	cmp	r7, r2
 8003ac2:	d000      	beq.n	8003ac6 <I2C_Slave_ISR_IT+0x126>
 8003ac4:	e78b      	b.n	80039de <I2C_Slave_ISR_IT+0x3e>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac6:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <I2C_Slave_ISR_IT+0x1b0>)
 8003ac8:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8003acc:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	54e1      	strb	r1, [r4, r3]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ad4:	3b3e      	subs	r3, #62	; 0x3e
  hi2c->XferISR = NULL;
 8003ad6:	6361      	str	r1, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ad8:	422b      	tst	r3, r5
 8003ada:	d012      	beq.n	8003b02 <I2C_Slave_ISR_IT+0x162>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003ae0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ae2:	7011      	strb	r1, [r2, #0]
    hi2c->pBuffPtr++;
 8003ae4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ae6:	3201      	adds	r2, #1
 8003ae8:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003aea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	d008      	beq.n	8003b02 <I2C_Slave_ISR_IT+0x162>
      hi2c->XferSize--;
 8003af0:	3a01      	subs	r2, #1
 8003af2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003af4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003af6:	3a01      	subs	r2, #1
 8003af8:	b292      	uxth	r2, r2
 8003afa:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003afc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003afe:	4313      	orrs	r3, r2
 8003b00:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b02:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b04:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b06:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b08:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b0a:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b0c:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	438a      	bics	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b14:	2210      	movs	r2, #16
 8003b16:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003b18:	2340      	movs	r3, #64	; 0x40
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b1e:	f7fc ffeb 	bl	8000af8 <HAL_I2C_ListenCpltCallback>
}
 8003b22:	e764      	b.n	80039ee <I2C_Slave_ISR_IT+0x4e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <I2C_Slave_ISR_IT+0x1b0>)
 8003b26:	429f      	cmp	r7, r3
 8003b28:	d100      	bne.n	8003b2c <I2C_Slave_ISR_IT+0x18c>
 8003b2a:	e75d      	b.n	80039e8 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b32:	699a      	ldr	r2, [r3, #24]
 8003b34:	0792      	lsls	r2, r2, #30
 8003b36:	d501      	bpl.n	8003b3c <I2C_Slave_ISR_IT+0x19c>
    hi2c->Instance->TXDR = 0x00U;
 8003b38:	2200      	movs	r2, #0
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	6999      	ldr	r1, [r3, #24]
 8003b40:	420a      	tst	r2, r1
 8003b42:	d000      	beq.n	8003b46 <I2C_Slave_ISR_IT+0x1a6>
 8003b44:	e782      	b.n	8003a4c <I2C_Slave_ISR_IT+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b46:	6999      	ldr	r1, [r3, #24]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	619a      	str	r2, [r3, #24]
 8003b4c:	e77e      	b.n	8003a4c <I2C_Slave_ISR_IT+0xac>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	ffff0000 	.word	0xffff0000
 8003b54:	feffffff 	.word	0xfeffffff

08003b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5a:	2441      	movs	r4, #65	; 0x41
 8003b5c:	5d03      	ldrb	r3, [r0, r4]
{
 8003b5e:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b60:	b2dd      	uxtb	r5, r3
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d11a      	bne.n	8003b9c <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b66:	2640      	movs	r6, #64	; 0x40
 8003b68:	5d83      	ldrb	r3, [r0, r6]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d016      	beq.n	8003b9c <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6e:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b70:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b72:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8003b74:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	43ba      	bics	r2, r7
 8003b7c:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b84:	4662      	mov	r2, ip
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	433a      	orrs	r2, r7
 8003b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b92:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8003b96:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8003b98:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	e7fc      	b.n	8003b9a <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8003ba0:	ffffefff 	.word	0xffffefff

08003ba4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	46ce      	mov	lr, r9
 8003ba8:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003baa:	2441      	movs	r4, #65	; 0x41
{
 8003bac:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	5d03      	ldrb	r3, [r0, r4]
 8003bb0:	b2dd      	uxtb	r5, r3
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d11f      	bne.n	8003bf6 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb6:	2640      	movs	r6, #64	; 0x40
 8003bb8:	5d83      	ldrb	r3, [r0, r6]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d01b      	beq.n	8003bf6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbe:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc0:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc2:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8003bc4:	6802      	ldr	r2, [r0, #0]
 8003bc6:	46b9      	mov	r9, r7
 8003bc8:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bca:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8003bcc:	43bb      	bics	r3, r7
 8003bce:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8003bd0:	6813      	ldr	r3, [r2, #0]
 8003bd2:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8003bd4:	4647      	mov	r7, r8
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8003bd8:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 8003bda:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bdc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bde:	4649      	mov	r1, r9
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8003bea:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8003bec:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003bee:	bcc0      	pop	{r6, r7}
 8003bf0:	46b9      	mov	r9, r7
 8003bf2:	46b0      	mov	r8, r6
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003bf6:	2002      	movs	r0, #2
 8003bf8:	e7f9      	b.n	8003bee <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	fffff0ff 	.word	0xfffff0ff

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c02:	46ce      	mov	lr, r9
 8003c04:	4647      	mov	r7, r8
 8003c06:	b580      	push	{r7, lr}
 8003c08:	0004      	movs	r4, r0
 8003c0a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d100      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
 8003c10:	e0ee      	b.n	8003df0 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	6803      	ldr	r3, [r0, #0]
 8003c14:	07da      	lsls	r2, r3, #31
 8003c16:	d535      	bpl.n	8003c84 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c18:	210c      	movs	r1, #12
 8003c1a:	48c3      	ldr	r0, [pc, #780]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003c1c:	6842      	ldr	r2, [r0, #4]
 8003c1e:	400a      	ands	r2, r1
 8003c20:	2a04      	cmp	r2, #4
 8003c22:	d100      	bne.n	8003c26 <HAL_RCC_OscConfig+0x26>
 8003c24:	e101      	b.n	8003e2a <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c26:	6842      	ldr	r2, [r0, #4]
 8003c28:	4011      	ands	r1, r2
 8003c2a:	2908      	cmp	r1, #8
 8003c2c:	d100      	bne.n	8003c30 <HAL_RCC_OscConfig+0x30>
 8003c2e:	e0f8      	b.n	8003e22 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c30:	6863      	ldr	r3, [r4, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d00f      	beq.n	8003c56 <HAL_RCC_OscConfig+0x56>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d100      	bne.n	8003c3c <HAL_RCC_OscConfig+0x3c>
 8003c3a:	e11e      	b.n	8003e7a <HAL_RCC_OscConfig+0x27a>
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d100      	bne.n	8003c42 <HAL_RCC_OscConfig+0x42>
 8003c40:	e1a7      	b.n	8003f92 <HAL_RCC_OscConfig+0x392>
 8003c42:	4bb9      	ldr	r3, [pc, #740]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003c44:	49b9      	ldr	r1, [pc, #740]	; (8003f2c <HAL_RCC_OscConfig+0x32c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	49b8      	ldr	r1, [pc, #736]	; (8003f30 <HAL_RCC_OscConfig+0x330>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e005      	b.n	8003c62 <HAL_RCC_OscConfig+0x62>
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	4ab3      	ldr	r2, [pc, #716]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003c5a:	025b      	lsls	r3, r3, #9
 8003c5c:	6811      	ldr	r1, [r2, #0]
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c62:	f7ff f847 	bl	8002cf4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003c68:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4faf      	ldr	r7, [pc, #700]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003c6c:	02b6      	lsls	r6, r6, #10
 8003c6e:	e005      	b.n	8003c7c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7ff f840 	bl	8002cf4 <HAL_GetTick>
 8003c74:	1b40      	subs	r0, r0, r5
 8003c76:	2864      	cmp	r0, #100	; 0x64
 8003c78:	d900      	bls.n	8003c7c <HAL_RCC_OscConfig+0x7c>
 8003c7a:	e0fc      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4233      	tst	r3, r6
 8003c80:	d0f6      	beq.n	8003c70 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	079a      	lsls	r2, r3, #30
 8003c86:	d529      	bpl.n	8003cdc <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c88:	220c      	movs	r2, #12
 8003c8a:	49a7      	ldr	r1, [pc, #668]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003c8c:	6848      	ldr	r0, [r1, #4]
 8003c8e:	4202      	tst	r2, r0
 8003c90:	d100      	bne.n	8003c94 <HAL_RCC_OscConfig+0x94>
 8003c92:	e0a6      	b.n	8003de2 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c94:	6848      	ldr	r0, [r1, #4]
 8003c96:	4002      	ands	r2, r0
 8003c98:	2a08      	cmp	r2, #8
 8003c9a:	d100      	bne.n	8003c9e <HAL_RCC_OscConfig+0x9e>
 8003c9c:	e09d      	b.n	8003dda <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4da1      	ldr	r5, [pc, #644]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d100      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xa8>
 8003ca6:	e11f      	b.n	8003ee8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8003ca8:	2201      	movs	r2, #1
 8003caa:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cb2:	f7ff f81f 	bl	8002cf4 <HAL_GetTick>
 8003cb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e005      	b.n	8003cc6 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cba:	f7ff f81b 	bl	8002cf4 <HAL_GetTick>
 8003cbe:	1b80      	subs	r0, r0, r6
 8003cc0:	2802      	cmp	r0, #2
 8003cc2:	d900      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xc6>
 8003cc4:	e0d7      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	682b      	ldr	r3, [r5, #0]
 8003cc8:	421f      	tst	r7, r3
 8003cca:	d0f6      	beq.n	8003cba <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	21f8      	movs	r1, #248	; 0xf8
 8003cce:	682a      	ldr	r2, [r5, #0]
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	438a      	bics	r2, r1
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	071a      	lsls	r2, r3, #28
 8003cde:	d42d      	bmi.n	8003d3c <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	075a      	lsls	r2, r3, #29
 8003ce2:	d544      	bpl.n	8003d6e <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce8:	4b8f      	ldr	r3, [pc, #572]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003cea:	0552      	lsls	r2, r2, #21
 8003cec:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf0:	4211      	tst	r1, r2
 8003cf2:	d108      	bne.n	8003d06 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	69d9      	ldr	r1, [r3, #28]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	61d9      	str	r1, [r3, #28]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	2780      	movs	r7, #128	; 0x80
 8003d08:	4e8a      	ldr	r6, [pc, #552]	; (8003f34 <HAL_RCC_OscConfig+0x334>)
 8003d0a:	007f      	lsls	r7, r7, #1
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	423b      	tst	r3, r7
 8003d10:	d100      	bne.n	8003d14 <HAL_RCC_OscConfig+0x114>
 8003d12:	e094      	b.n	8003e3e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	68a3      	ldr	r3, [r4, #8]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d100      	bne.n	8003d1c <HAL_RCC_OscConfig+0x11c>
 8003d1a:	e0f8      	b.n	8003f0e <HAL_RCC_OscConfig+0x30e>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d100      	bne.n	8003d22 <HAL_RCC_OscConfig+0x122>
 8003d20:	e0c4      	b.n	8003eac <HAL_RCC_OscConfig+0x2ac>
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d100      	bne.n	8003d28 <HAL_RCC_OscConfig+0x128>
 8003d26:	e140      	b.n	8003faa <HAL_RCC_OscConfig+0x3aa>
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	438a      	bics	r2, r1
 8003d30:	621a      	str	r2, [r3, #32]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	3103      	adds	r1, #3
 8003d36:	438a      	bics	r2, r1
 8003d38:	621a      	str	r2, [r3, #32]
 8003d3a:	e0ec      	b.n	8003f16 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3c:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8003d3e:	4d7a      	ldr	r5, [pc, #488]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003d44:	2201      	movs	r2, #1
 8003d46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d48:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003d4e:	f7fe ffd1 	bl	8002cf4 <HAL_GetTick>
 8003d52:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	e005      	b.n	8003d62 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe ffcd 	bl	8002cf4 <HAL_GetTick>
 8003d5a:	1b80      	subs	r0, r0, r6
 8003d5c:	2802      	cmp	r0, #2
 8003d5e:	d900      	bls.n	8003d62 <HAL_RCC_OscConfig+0x162>
 8003d60:	e089      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d64:	421f      	tst	r7, r3
 8003d66:	d0f6      	beq.n	8003d56 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	075a      	lsls	r2, r3, #29
 8003d6c:	d4ba      	bmi.n	8003ce4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d6e:	06db      	lsls	r3, r3, #27
 8003d70:	d512      	bpl.n	8003d98 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d72:	6963      	ldr	r3, [r4, #20]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d100      	bne.n	8003d7a <HAL_RCC_OscConfig+0x17a>
 8003d78:	e13d      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d7a:	3305      	adds	r3, #5
 8003d7c:	d000      	beq.n	8003d80 <HAL_RCC_OscConfig+0x180>
 8003d7e:	e0e9      	b.n	8003f54 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d80:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d82:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d84:	4a68      	ldr	r2, [pc, #416]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003d86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003d88:	438b      	bics	r3, r1
 8003d8a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d8c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003d8e:	69a3      	ldr	r3, [r4, #24]
 8003d90:	4381      	bics	r1, r0
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d98:	6a23      	ldr	r3, [r4, #32]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01b      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9e:	220c      	movs	r2, #12
 8003da0:	4d61      	ldr	r5, [pc, #388]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003da2:	6869      	ldr	r1, [r5, #4]
 8003da4:	400a      	ands	r2, r1
 8003da6:	2a08      	cmp	r2, #8
 8003da8:	d100      	bne.n	8003dac <HAL_RCC_OscConfig+0x1ac>
 8003daa:	e108      	b.n	8003fbe <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d100      	bne.n	8003db2 <HAL_RCC_OscConfig+0x1b2>
 8003db0:	e13f      	b.n	8004032 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	682b      	ldr	r3, [r5, #0]
 8003db4:	4a60      	ldr	r2, [pc, #384]	; (8003f38 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4013      	ands	r3, r2
 8003dba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dbc:	f7fe ff9a 	bl	8002cf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc0:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003dc2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fe ff95 	bl	8002cf4 <HAL_GetTick>
 8003dca:	1b00      	subs	r0, r0, r4
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	d852      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	4233      	tst	r3, r6
 8003dd4:	d1f7      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	e00b      	b.n	8003df2 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dda:	684a      	ldr	r2, [r1, #4]
 8003ddc:	03d2      	lsls	r2, r2, #15
 8003dde:	d500      	bpl.n	8003de2 <HAL_RCC_OscConfig+0x1e2>
 8003de0:	e75d      	b.n	8003c9e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	4a51      	ldr	r2, [pc, #324]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	0792      	lsls	r2, r2, #30
 8003de8:	d539      	bpl.n	8003e5e <HAL_RCC_OscConfig+0x25e>
 8003dea:	68e2      	ldr	r2, [r4, #12]
 8003dec:	2a01      	cmp	r2, #1
 8003dee:	d036      	beq.n	8003e5e <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
}
 8003df2:	b003      	add	sp, #12
 8003df4:	bcc0      	pop	{r6, r7}
 8003df6:	46b9      	mov	r9, r7
 8003df8:	46b0      	mov	r8, r6
 8003dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003e02:	4393      	bics	r3, r2
 8003e04:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003e06:	f7fe ff75 	bl	8002cf4 <HAL_GetTick>
 8003e0a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	e004      	b.n	8003e18 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe ff71 	bl	8002cf4 <HAL_GetTick>
 8003e12:	1b80      	subs	r0, r0, r6
 8003e14:	2802      	cmp	r0, #2
 8003e16:	d82e      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e1a:	421f      	tst	r7, r3
 8003e1c:	d1f7      	bne.n	8003e0e <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	e7a3      	b.n	8003d6a <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e22:	6842      	ldr	r2, [r0, #4]
 8003e24:	03d2      	lsls	r2, r2, #15
 8003e26:	d400      	bmi.n	8003e2a <HAL_RCC_OscConfig+0x22a>
 8003e28:	e702      	b.n	8003c30 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2a:	4a3f      	ldr	r2, [pc, #252]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	0392      	lsls	r2, r2, #14
 8003e30:	d400      	bmi.n	8003e34 <HAL_RCC_OscConfig+0x234>
 8003e32:	e727      	b.n	8003c84 <HAL_RCC_OscConfig+0x84>
 8003e34:	6862      	ldr	r2, [r4, #4]
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d000      	beq.n	8003e3c <HAL_RCC_OscConfig+0x23c>
 8003e3a:	e723      	b.n	8003c84 <HAL_RCC_OscConfig+0x84>
 8003e3c:	e7d8      	b.n	8003df0 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3e:	6833      	ldr	r3, [r6, #0]
 8003e40:	433b      	orrs	r3, r7
 8003e42:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e44:	f7fe ff56 	bl	8002cf4 <HAL_GetTick>
 8003e48:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	e004      	b.n	8003e56 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4c:	f7fe ff52 	bl	8002cf4 <HAL_GetTick>
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	2864      	cmp	r0, #100	; 0x64
 8003e54:	d80f      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	6833      	ldr	r3, [r6, #0]
 8003e58:	423b      	tst	r3, r7
 8003e5a:	d0f7      	beq.n	8003e4c <HAL_RCC_OscConfig+0x24c>
 8003e5c:	e75a      	b.n	8003d14 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	25f8      	movs	r5, #248	; 0xf8
 8003e60:	4831      	ldr	r0, [pc, #196]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003e62:	6922      	ldr	r2, [r4, #16]
 8003e64:	6801      	ldr	r1, [r0, #0]
 8003e66:	00d2      	lsls	r2, r2, #3
 8003e68:	43a9      	bics	r1, r5
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	071a      	lsls	r2, r3, #28
 8003e70:	d400      	bmi.n	8003e74 <HAL_RCC_OscConfig+0x274>
 8003e72:	e735      	b.n	8003ce0 <HAL_RCC_OscConfig+0xe0>
 8003e74:	e762      	b.n	8003d3c <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8003e76:	2003      	movs	r0, #3
 8003e78:	e7bb      	b.n	8003df2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7a:	4d2b      	ldr	r5, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <HAL_RCC_OscConfig+0x32c>)
 8003e7e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e80:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e82:	4013      	ands	r3, r2
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e90:	f7fe ff30 	bl	8002cf4 <HAL_GetTick>
 8003e94:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e004      	b.n	8003ea2 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe ff2c 	bl	8002cf4 <HAL_GetTick>
 8003e9c:	1b80      	subs	r0, r0, r6
 8003e9e:	2864      	cmp	r0, #100	; 0x64
 8003ea0:	d8e9      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	423b      	tst	r3, r7
 8003ea6:	d1f7      	bne.n	8003e98 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	e6eb      	b.n	8003c84 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	2201      	movs	r2, #1
 8003eae:	4e1e      	ldr	r6, [pc, #120]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	4d22      	ldr	r5, [pc, #136]	; (8003f3c <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb2:	6a33      	ldr	r3, [r6, #32]
 8003eb4:	4393      	bics	r3, r2
 8003eb6:	6233      	str	r3, [r6, #32]
 8003eb8:	6a33      	ldr	r3, [r6, #32]
 8003eba:	3203      	adds	r2, #3
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003ec0:	f7fe ff18 	bl	8002cf4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003ec6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec8:	4698      	mov	r8, r3
 8003eca:	e004      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe ff12 	bl	8002cf4 <HAL_GetTick>
 8003ed0:	1bc0      	subs	r0, r0, r7
 8003ed2:	42a8      	cmp	r0, r5
 8003ed4:	d8cf      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	6a33      	ldr	r3, [r6, #32]
 8003eda:	421a      	tst	r2, r3
 8003edc:	d1f6      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8003ede:	464b      	mov	r3, r9
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d04f      	beq.n	8003f84 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	e742      	b.n	8003d6e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8003ee8:	2201      	movs	r2, #1
 8003eea:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eec:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4393      	bics	r3, r2
 8003ef0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ef2:	f7fe feff 	bl	8002cf4 <HAL_GetTick>
 8003ef6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef8:	e004      	b.n	8003f04 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fe fefb 	bl	8002cf4 <HAL_GetTick>
 8003efe:	1b80      	subs	r0, r0, r6
 8003f00:	2802      	cmp	r0, #2
 8003f02:	d8b8      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	421f      	tst	r7, r3
 8003f08:	d1f7      	bne.n	8003efa <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	e6e6      	b.n	8003cdc <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0e:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
 8003f10:	6a0a      	ldr	r2, [r1, #32]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003f16:	f7fe feed 	bl	8002cf4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8003f1c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	4698      	mov	r8, r3
 8003f20:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	4d06      	ldr	r5, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	e011      	b.n	8003f4a <HAL_RCC_OscConfig+0x34a>
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	fffeffff 	.word	0xfffeffff
 8003f30:	fffbffff 	.word	0xfffbffff
 8003f34:	40007000 	.word	0x40007000
 8003f38:	feffffff 	.word	0xfeffffff
 8003f3c:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe fed8 	bl	8002cf4 <HAL_GetTick>
 8003f44:	1b80      	subs	r0, r0, r6
 8003f46:	42a8      	cmp	r0, r5
 8003f48:	d895      	bhi.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	4643      	mov	r3, r8
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	421f      	tst	r7, r3
 8003f50:	d0f6      	beq.n	8003f40 <HAL_RCC_OscConfig+0x340>
 8003f52:	e7c4      	b.n	8003ede <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f54:	2204      	movs	r2, #4
 8003f56:	4d53      	ldr	r5, [pc, #332]	; (80040a4 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f58:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003f60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003f62:	3a03      	subs	r2, #3
 8003f64:	4393      	bics	r3, r2
 8003f66:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003f68:	f7fe fec4 	bl	8002cf4 <HAL_GetTick>
 8003f6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f6e:	e005      	b.n	8003f7c <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f70:	f7fe fec0 	bl	8002cf4 <HAL_GetTick>
 8003f74:	1b80      	subs	r0, r0, r6
 8003f76:	2802      	cmp	r0, #2
 8003f78:	d900      	bls.n	8003f7c <HAL_RCC_OscConfig+0x37c>
 8003f7a:	e77c      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003f7e:	421f      	tst	r7, r3
 8003f80:	d1f6      	bne.n	8003f70 <HAL_RCC_OscConfig+0x370>
 8003f82:	e709      	b.n	8003d98 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f84:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f86:	4948      	ldr	r1, [pc, #288]	; (80040a8 <HAL_RCC_OscConfig+0x4a8>)
 8003f88:	69d3      	ldr	r3, [r2, #28]
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	e6ed      	b.n	8003d6e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f96:	02d2      	lsls	r2, r2, #11
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	6819      	ldr	r1, [r3, #0]
 8003fa2:	0252      	lsls	r2, r2, #9
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e65b      	b.n	8003c62 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003faa:	2104      	movs	r1, #4
 8003fac:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	621a      	str	r2, [r3, #32]
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	3903      	subs	r1, #3
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	621a      	str	r2, [r3, #32]
 8003fbc:	e7ab      	b.n	8003f16 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d100      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x3c4>
 8003fc2:	e715      	b.n	8003df0 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc4:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8003fc6:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fca:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8003fcc:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8003fce:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	428b      	cmp	r3, r1
 8003fd4:	d000      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x3d8>
 8003fd6:	e70c      	b.n	8003df2 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fd8:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fdc:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	428b      	cmp	r3, r1
 8003fe0:	d000      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3e4>
 8003fe2:	e706      	b.n	8003df2 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003fe4:	23f0      	movs	r3, #240	; 0xf0
 8003fe6:	039b      	lsls	r3, r3, #14
 8003fe8:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fec:	1ad2      	subs	r2, r2, r3
 8003fee:	1e53      	subs	r3, r2, #1
 8003ff0:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8003ff2:	b2d0      	uxtb	r0, r2
 8003ff4:	e6fd      	b.n	8003df2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4d2a      	ldr	r5, [pc, #168]	; (80040a4 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ffa:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ffc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003ffe:	430a      	orrs	r2, r1
 8004000:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004002:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004004:	4313      	orrs	r3, r2
 8004006:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004008:	f7fe fe74 	bl	8002cf4 <HAL_GetTick>
 800400c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800400e:	e005      	b.n	800401c <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004010:	f7fe fe70 	bl	8002cf4 <HAL_GetTick>
 8004014:	1b80      	subs	r0, r0, r6
 8004016:	2802      	cmp	r0, #2
 8004018:	d900      	bls.n	800401c <HAL_RCC_OscConfig+0x41c>
 800401a:	e72c      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800401c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800401e:	421f      	tst	r7, r3
 8004020:	d0f6      	beq.n	8004010 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004022:	21f8      	movs	r1, #248	; 0xf8
 8004024:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004026:	69a3      	ldr	r3, [r4, #24]
 8004028:	438a      	bics	r2, r1
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4313      	orrs	r3, r2
 800402e:	636b      	str	r3, [r5, #52]	; 0x34
 8004030:	e6b2      	b.n	8003d98 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004038:	4013      	ands	r3, r2
 800403a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800403c:	f7fe fe5a 	bl	8002cf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004040:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004042:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004044:	e005      	b.n	8004052 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe fe55 	bl	8002cf4 <HAL_GetTick>
 800404a:	1b80      	subs	r0, r0, r6
 800404c:	2802      	cmp	r0, #2
 800404e:	d900      	bls.n	8004052 <HAL_RCC_OscConfig+0x452>
 8004050:	e711      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	423b      	tst	r3, r7
 8004056:	d1f6      	bne.n	8004046 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004058:	220f      	movs	r2, #15
 800405a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405c:	4e11      	ldr	r6, [pc, #68]	; (80040a4 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405e:	4393      	bics	r3, r2
 8004060:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004062:	4313      	orrs	r3, r2
 8004064:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004066:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004068:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800406a:	686a      	ldr	r2, [r5, #4]
 800406c:	430b      	orrs	r3, r1
 800406e:	4910      	ldr	r1, [pc, #64]	; (80040b0 <HAL_RCC_OscConfig+0x4b0>)
 8004070:	400a      	ands	r2, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	682a      	ldr	r2, [r5, #0]
 800407a:	045b      	lsls	r3, r3, #17
 800407c:	4313      	orrs	r3, r2
 800407e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004080:	f7fe fe38 	bl	8002cf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004084:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8004086:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004088:	04ad      	lsls	r5, r5, #18
 800408a:	e005      	b.n	8004098 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fe32 	bl	8002cf4 <HAL_GetTick>
 8004090:	1b00      	subs	r0, r0, r4
 8004092:	2802      	cmp	r0, #2
 8004094:	d900      	bls.n	8004098 <HAL_RCC_OscConfig+0x498>
 8004096:	e6ee      	b.n	8003e76 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	422b      	tst	r3, r5
 800409c:	d0f6      	beq.n	800408c <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 800409e:	2000      	movs	r0, #0
 80040a0:	e6a7      	b.n	8003df2 <HAL_RCC_OscConfig+0x1f2>
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	40021000 	.word	0x40021000
 80040a8:	efffffff 	.word	0xefffffff
 80040ac:	feffffff 	.word	0xfeffffff
 80040b0:	ffc2ffff 	.word	0xffc2ffff

080040b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	46ce      	mov	lr, r9
 80040b8:	4647      	mov	r7, r8
 80040ba:	0004      	movs	r4, r0
 80040bc:	000d      	movs	r5, r1
 80040be:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d00d      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	2301      	movs	r3, #1
 80040c6:	494a      	ldr	r1, [pc, #296]	; (80041f0 <HAL_RCC_ClockConfig+0x13c>)
 80040c8:	680a      	ldr	r2, [r1, #0]
 80040ca:	401a      	ands	r2, r3
 80040cc:	42aa      	cmp	r2, r5
 80040ce:	d20c      	bcs.n	80040ea <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d0:	680a      	ldr	r2, [r1, #0]
 80040d2:	439a      	bics	r2, r3
 80040d4:	432a      	orrs	r2, r5
 80040d6:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d8:	680a      	ldr	r2, [r1, #0]
 80040da:	4013      	ands	r3, r2
 80040dc:	42ab      	cmp	r3, r5
 80040de:	d004      	beq.n	80040ea <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 80040e0:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80040e2:	bcc0      	pop	{r6, r7}
 80040e4:	46b9      	mov	r9, r7
 80040e6:	46b0      	mov	r8, r6
 80040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	079a      	lsls	r2, r3, #30
 80040ee:	d50e      	bpl.n	800410e <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	075a      	lsls	r2, r3, #29
 80040f2:	d505      	bpl.n	8004100 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040f4:	22e0      	movs	r2, #224	; 0xe0
 80040f6:	493f      	ldr	r1, [pc, #252]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
 80040f8:	00d2      	lsls	r2, r2, #3
 80040fa:	6848      	ldr	r0, [r1, #4]
 80040fc:	4302      	orrs	r2, r0
 80040fe:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004100:	20f0      	movs	r0, #240	; 0xf0
 8004102:	493c      	ldr	r1, [pc, #240]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
 8004104:	684a      	ldr	r2, [r1, #4]
 8004106:	4382      	bics	r2, r0
 8004108:	68a0      	ldr	r0, [r4, #8]
 800410a:	4302      	orrs	r2, r0
 800410c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	07db      	lsls	r3, r3, #31
 8004110:	d522      	bpl.n	8004158 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004114:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004118:	2a01      	cmp	r2, #1
 800411a:	d05b      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411c:	2a02      	cmp	r2, #2
 800411e:	d056      	beq.n	80041ce <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004120:	079b      	lsls	r3, r3, #30
 8004122:	d5dd      	bpl.n	80040e0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004124:	2103      	movs	r1, #3
 8004126:	4e33      	ldr	r6, [pc, #204]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
 8004128:	6873      	ldr	r3, [r6, #4]
 800412a:	438b      	bics	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004130:	f7fe fde0 	bl	8002cf4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004134:	230c      	movs	r3, #12
 8004136:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004138:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 800413a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	e004      	b.n	800414a <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004140:	f7fe fdd8 	bl	8002cf4 <HAL_GetTick>
 8004144:	1bc0      	subs	r0, r0, r7
 8004146:	4548      	cmp	r0, r9
 8004148:	d847      	bhi.n	80041da <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	4643      	mov	r3, r8
 800414c:	6872      	ldr	r2, [r6, #4]
 800414e:	401a      	ands	r2, r3
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	429a      	cmp	r2, r3
 8004156:	d1f3      	bne.n	8004140 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004158:	2101      	movs	r1, #1
 800415a:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <HAL_RCC_ClockConfig+0x13c>)
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	400b      	ands	r3, r1
 8004160:	42ab      	cmp	r3, r5
 8004162:	d905      	bls.n	8004170 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004164:	6813      	ldr	r3, [r2, #0]
 8004166:	438b      	bics	r3, r1
 8004168:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	4219      	tst	r1, r3
 800416e:	d1b7      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	075b      	lsls	r3, r3, #29
 8004174:	d506      	bpl.n	8004184 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
 8004178:	4920      	ldr	r1, [pc, #128]	; (80041fc <HAL_RCC_ClockConfig+0x148>)
 800417a:	6853      	ldr	r3, [r2, #4]
 800417c:	400b      	ands	r3, r1
 800417e:	68e1      	ldr	r1, [r4, #12]
 8004180:	430b      	orrs	r3, r1
 8004182:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004184:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004186:	491b      	ldr	r1, [pc, #108]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
 8004188:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800418a:	4013      	ands	r3, r2
 800418c:	2b08      	cmp	r3, #8
 800418e:	d00e      	beq.n	80041ae <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004190:	481b      	ldr	r0, [pc, #108]	; (8004200 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <HAL_RCC_ClockConfig+0x140>)
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_RCC_ClockConfig+0x150>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	491b      	ldr	r1, [pc, #108]	; (8004208 <HAL_RCC_ClockConfig+0x154>)
 800419a:	061b      	lsls	r3, r3, #24
 800419c:	0f1b      	lsrs	r3, r3, #28
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	40d8      	lsrs	r0, r3
 80041a2:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80041a4:	2003      	movs	r0, #3
 80041a6:	f7fe fd63 	bl	8002c70 <HAL_InitTick>
  return HAL_OK;
 80041aa:	2000      	movs	r0, #0
 80041ac:	e799      	b.n	80040e2 <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041ae:	250f      	movs	r5, #15
 80041b0:	4816      	ldr	r0, [pc, #88]	; (800420c <HAL_RCC_ClockConfig+0x158>)
 80041b2:	0c93      	lsrs	r3, r2, #18
 80041b4:	402b      	ands	r3, r5
 80041b6:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041b8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ba:	03d2      	lsls	r2, r2, #15
 80041bc:	d50f      	bpl.n	80041de <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <HAL_RCC_ClockConfig+0x15c>)
 80041c0:	400d      	ands	r5, r1
 80041c2:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041c4:	480e      	ldr	r0, [pc, #56]	; (8004200 <HAL_RCC_ClockConfig+0x14c>)
 80041c6:	f7fb ff9f 	bl	8000108 <__udivsi3>
 80041ca:	4360      	muls	r0, r4
 80041cc:	e7e1      	b.n	8004192 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ce:	019b      	lsls	r3, r3, #6
 80041d0:	d4a8      	bmi.n	8004124 <HAL_RCC_ClockConfig+0x70>
 80041d2:	e785      	b.n	80040e0 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d4:	039b      	lsls	r3, r3, #14
 80041d6:	d4a5      	bmi.n	8004124 <HAL_RCC_ClockConfig+0x70>
 80041d8:	e782      	b.n	80040e0 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 80041da:	2003      	movs	r0, #3
 80041dc:	e781      	b.n	80040e2 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041de:	0163      	lsls	r3, r4, #5
 80041e0:	1b1b      	subs	r3, r3, r4
 80041e2:	0198      	lsls	r0, r3, #6
 80041e4:	1ac0      	subs	r0, r0, r3
 80041e6:	00c0      	lsls	r0, r0, #3
 80041e8:	1900      	adds	r0, r0, r4
 80041ea:	0200      	lsls	r0, r0, #8
 80041ec:	e7d1      	b.n	8004192 <HAL_RCC_ClockConfig+0xde>
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	40022000 	.word	0x40022000
 80041f4:	40021000 	.word	0x40021000
 80041f8:	00001388 	.word	0x00001388
 80041fc:	fffff8ff 	.word	0xfffff8ff
 8004200:	007a1200 	.word	0x007a1200
 8004204:	0800684c 	.word	0x0800684c
 8004208:	20000314 	.word	0x20000314
 800420c:	0800685c 	.word	0x0800685c
 8004210:	0800686c 	.word	0x0800686c

08004214 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004214:	4b01      	ldr	r3, [pc, #4]	; (800421c <HAL_RCC_GetHCLKFreq+0x8>)
 8004216:	6818      	ldr	r0, [r3, #0]
}
 8004218:	4770      	bx	lr
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	20000314 	.word	0x20000314

08004220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004222:	46ce      	mov	lr, r9
 8004224:	4647      	mov	r7, r8
 8004226:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004228:	6803      	ldr	r3, [r0, #0]
{
 800422a:	0004      	movs	r4, r0
 800422c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800422e:	03da      	lsls	r2, r3, #15
 8004230:	d530      	bpl.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004236:	0552      	lsls	r2, r2, #21
 8004238:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423c:	4211      	tst	r1, r2
 800423e:	d041      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	2680      	movs	r6, #128	; 0x80
 8004242:	4d41      	ldr	r5, [pc, #260]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004244:	0076      	lsls	r6, r6, #1
 8004246:	682b      	ldr	r3, [r5, #0]
 8004248:	4233      	tst	r3, r6
 800424a:	d049      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424c:	4d3d      	ldr	r5, [pc, #244]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800424e:	23c0      	movs	r3, #192	; 0xc0
 8004250:	6a2a      	ldr	r2, [r5, #32]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	0010      	movs	r0, r2
 8004256:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004258:	421a      	tst	r2, r3
 800425a:	d063      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800425c:	6861      	ldr	r1, [r4, #4]
 800425e:	400b      	ands	r3, r1
 8004260:	4283      	cmp	r3, r0
 8004262:	d00e      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004264:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004266:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004268:	6a2e      	ldr	r6, [r5, #32]
 800426a:	0240      	lsls	r0, r0, #9
 800426c:	4330      	orrs	r0, r6
 800426e:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004272:	4a36      	ldr	r2, [pc, #216]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004274:	4e36      	ldr	r6, [pc, #216]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004276:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004278:	4030      	ands	r0, r6
 800427a:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800427c:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800427e:	07db      	lsls	r3, r3, #31
 8004280:	d43f      	bmi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004282:	4a30      	ldr	r2, [pc, #192]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004284:	4831      	ldr	r0, [pc, #196]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004286:	6a13      	ldr	r3, [r2, #32]
 8004288:	4003      	ands	r3, r0
 800428a:	430b      	orrs	r3, r1
 800428c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800428e:	2f01      	cmp	r7, #1
 8004290:	d051      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	07da      	lsls	r2, r3, #31
 8004296:	d506      	bpl.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004298:	2003      	movs	r0, #3
 800429a:	492a      	ldr	r1, [pc, #168]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800429c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800429e:	4382      	bics	r2, r0
 80042a0:	68a0      	ldr	r0, [r4, #8]
 80042a2:	4302      	orrs	r2, r0
 80042a4:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80042a6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a8:	069b      	lsls	r3, r3, #26
 80042aa:	d506      	bpl.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ac:	2110      	movs	r1, #16
 80042ae:	4a25      	ldr	r2, [pc, #148]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80042b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042b2:	438b      	bics	r3, r1
 80042b4:	68e1      	ldr	r1, [r4, #12]
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80042ba:	b003      	add	sp, #12
 80042bc:	bcc0      	pop	{r6, r7}
 80042be:	46b9      	mov	r9, r7
 80042c0:	46b0      	mov	r8, r6
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4d1f      	ldr	r5, [pc, #124]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4311      	orrs	r1, r2
 80042cc:	61d9      	str	r1, [r3, #28]
 80042ce:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	4013      	ands	r3, r2
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 80042da:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4233      	tst	r3, r6
 80042de:	d1b5      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	4333      	orrs	r3, r6
 80042e4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80042e6:	f7fe fd05 	bl	8002cf4 <HAL_GetTick>
 80042ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	4233      	tst	r3, r6
 80042f0:	d1ac      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fe fcff 	bl	8002cf4 <HAL_GetTick>
 80042f6:	4643      	mov	r3, r8
 80042f8:	1ac0      	subs	r0, r0, r3
 80042fa:	2864      	cmp	r0, #100	; 0x64
 80042fc:	d9f6      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80042fe:	2003      	movs	r0, #3
 8004300:	e7db      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8004302:	f7fe fcf7 	bl	8002cf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	2302      	movs	r3, #2
 8004308:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 800430c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	e004      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7fe fcef 	bl	8002cf4 <HAL_GetTick>
 8004316:	1b80      	subs	r0, r0, r6
 8004318:	4548      	cmp	r0, r9
 800431a:	d8f0      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	4642      	mov	r2, r8
 800431e:	6a2b      	ldr	r3, [r5, #32]
 8004320:	421a      	tst	r2, r3
 8004322:	d0f6      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004324:	4a07      	ldr	r2, [pc, #28]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004326:	4809      	ldr	r0, [pc, #36]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004328:	6a13      	ldr	r3, [r2, #32]
 800432a:	6861      	ldr	r1, [r4, #4]
 800432c:	4003      	ands	r3, r0
 800432e:	430b      	orrs	r3, r1
 8004330:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8004332:	2f01      	cmp	r7, #1
 8004334:	d1ad      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004336:	69d3      	ldr	r3, [r2, #28]
 8004338:	4907      	ldr	r1, [pc, #28]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800433a:	400b      	ands	r3, r1
 800433c:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	e7a8      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
 800434c:	fffffcff 	.word	0xfffffcff
 8004350:	fffeffff 	.word	0xfffeffff
 8004354:	00001388 	.word	0x00001388
 8004358:	efffffff 	.word	0xefffffff

0800435c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b510      	push	{r4, lr}
 800435e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	d066      	beq.n	8004430 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004362:	233d      	movs	r3, #61	; 0x3d
 8004364:	5cc3      	ldrb	r3, [r0, r3]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d041      	beq.n	80043f0 <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	233d      	movs	r3, #61	; 0x3d
 800436e:	2202      	movs	r2, #2
 8004370:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004372:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004374:	492f      	ldr	r1, [pc, #188]	; (8004434 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8004376:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	428a      	cmp	r2, r1
 800437a:	d045      	beq.n	8004408 <HAL_TIM_Base_Init+0xac>
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	05c9      	lsls	r1, r1, #23
 8004380:	428a      	cmp	r2, r1
 8004382:	d02c      	beq.n	80043de <HAL_TIM_Base_Init+0x82>
 8004384:	492c      	ldr	r1, [pc, #176]	; (8004438 <HAL_TIM_Base_Init+0xdc>)
 8004386:	428a      	cmp	r2, r1
 8004388:	d029      	beq.n	80043de <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438a:	492c      	ldr	r1, [pc, #176]	; (800443c <HAL_TIM_Base_Init+0xe0>)
 800438c:	428a      	cmp	r2, r1
 800438e:	d02a      	beq.n	80043e6 <HAL_TIM_Base_Init+0x8a>
 8004390:	492b      	ldr	r1, [pc, #172]	; (8004440 <HAL_TIM_Base_Init+0xe4>)
 8004392:	428a      	cmp	r2, r1
 8004394:	d03c      	beq.n	8004410 <HAL_TIM_Base_Init+0xb4>
 8004396:	492b      	ldr	r1, [pc, #172]	; (8004444 <HAL_TIM_Base_Init+0xe8>)
 8004398:	428a      	cmp	r2, r1
 800439a:	d039      	beq.n	8004410 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	438b      	bics	r3, r1
 80043a0:	69a1      	ldr	r1, [r4, #24]
 80043a2:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80043a4:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ae:	2301      	movs	r3, #1
 80043b0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80043b4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	3a08      	subs	r2, #8
 80043ba:	54a3      	strb	r3, [r4, r2]
 80043bc:	3201      	adds	r2, #1
 80043be:	54a3      	strb	r3, [r4, r2]
 80043c0:	3201      	adds	r2, #1
 80043c2:	54a3      	strb	r3, [r4, r2]
 80043c4:	3201      	adds	r2, #1
 80043c6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	3201      	adds	r2, #1
 80043ca:	54a3      	strb	r3, [r4, r2]
 80043cc:	3201      	adds	r2, #1
 80043ce:	54a3      	strb	r3, [r4, r2]
 80043d0:	3201      	adds	r2, #1
 80043d2:	54a3      	strb	r3, [r4, r2]
 80043d4:	3201      	adds	r2, #1
 80043d6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	3a08      	subs	r2, #8
 80043da:	54a3      	strb	r3, [r4, r2]
}
 80043dc:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043de:	2170      	movs	r1, #112	; 0x70
 80043e0:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80043e2:	68a1      	ldr	r1, [r4, #8]
 80043e4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e6:	4918      	ldr	r1, [pc, #96]	; (8004448 <HAL_TIM_Base_Init+0xec>)
 80043e8:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ea:	6921      	ldr	r1, [r4, #16]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	e7d5      	b.n	800439c <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80043f0:	333c      	adds	r3, #60	; 0x3c
 80043f2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80043f4:	f7fe fa3a 	bl	800286c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	233d      	movs	r3, #61	; 0x3d
 80043fa:	2202      	movs	r2, #2
 80043fc:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fe:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004400:	490c      	ldr	r1, [pc, #48]	; (8004434 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8004402:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004404:	428a      	cmp	r2, r1
 8004406:	d1b9      	bne.n	800437c <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004408:	2170      	movs	r1, #112	; 0x70
 800440a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800440c:	68a1      	ldr	r1, [r4, #8]
 800440e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004410:	490d      	ldr	r1, [pc, #52]	; (8004448 <HAL_TIM_Base_Init+0xec>)
 8004412:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004414:	6921      	ldr	r1, [r4, #16]
 8004416:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	438b      	bics	r3, r1
 800441c:	69a1      	ldr	r1, [r4, #24]
 800441e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004420:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004422:	68e3      	ldr	r3, [r4, #12]
 8004424:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004426:	6863      	ldr	r3, [r4, #4]
 8004428:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800442a:	6963      	ldr	r3, [r4, #20]
 800442c:	6313      	str	r3, [r2, #48]	; 0x30
 800442e:	e7be      	b.n	80043ae <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 8004430:	2001      	movs	r0, #1
 8004432:	e7d3      	b.n	80043dc <HAL_TIM_Base_Init+0x80>
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40002000 	.word	0x40002000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800
 8004448:	fffffcff 	.word	0xfffffcff

0800444c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800444c:	223d      	movs	r2, #61	; 0x3d
 800444e:	5c81      	ldrb	r1, [r0, r2]
{
 8004450:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004452:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004454:	2901      	cmp	r1, #1
 8004456:	d113      	bne.n	8004480 <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	3101      	adds	r1, #1
 800445a:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	4302      	orrs	r2, r0
 8004462:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_TIM_Base_Start_IT+0x50>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00b      	beq.n	8004482 <HAL_TIM_Base_Start_IT+0x36>
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	05d2      	lsls	r2, r2, #23
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <HAL_TIM_Base_Start_IT+0x36>
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <HAL_TIM_Base_Start_IT+0x54>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4302      	orrs	r2, r0
  return HAL_OK;
 800447c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004482:	2207      	movs	r2, #7
 8004484:	6899      	ldr	r1, [r3, #8]
 8004486:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	2a06      	cmp	r2, #6
 800448a:	d005      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 800448c:	2101      	movs	r1, #1
 800448e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004490:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e7f3      	b.n	8004480 <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 8004498:	2000      	movs	r0, #0
 800449a:	e7f1      	b.n	8004480 <HAL_TIM_Base_Start_IT+0x34>
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400

080044a4 <HAL_TIM_PWM_Init>:
{
 80044a4:	b510      	push	{r4, lr}
 80044a6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80044a8:	d066      	beq.n	8004578 <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 80044aa:	233d      	movs	r3, #61	; 0x3d
 80044ac:	5cc3      	ldrb	r3, [r0, r3]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d041      	beq.n	8004538 <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	233d      	movs	r3, #61	; 0x3d
 80044b6:	2202      	movs	r2, #2
 80044b8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ba:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044bc:	492f      	ldr	r1, [pc, #188]	; (800457c <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80044be:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	428a      	cmp	r2, r1
 80044c2:	d045      	beq.n	8004550 <HAL_TIM_PWM_Init+0xac>
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	05c9      	lsls	r1, r1, #23
 80044c8:	428a      	cmp	r2, r1
 80044ca:	d02c      	beq.n	8004526 <HAL_TIM_PWM_Init+0x82>
 80044cc:	492c      	ldr	r1, [pc, #176]	; (8004580 <HAL_TIM_PWM_Init+0xdc>)
 80044ce:	428a      	cmp	r2, r1
 80044d0:	d029      	beq.n	8004526 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	492c      	ldr	r1, [pc, #176]	; (8004584 <HAL_TIM_PWM_Init+0xe0>)
 80044d4:	428a      	cmp	r2, r1
 80044d6:	d02a      	beq.n	800452e <HAL_TIM_PWM_Init+0x8a>
 80044d8:	492b      	ldr	r1, [pc, #172]	; (8004588 <HAL_TIM_PWM_Init+0xe4>)
 80044da:	428a      	cmp	r2, r1
 80044dc:	d03c      	beq.n	8004558 <HAL_TIM_PWM_Init+0xb4>
 80044de:	492b      	ldr	r1, [pc, #172]	; (800458c <HAL_TIM_PWM_Init+0xe8>)
 80044e0:	428a      	cmp	r2, r1
 80044e2:	d039      	beq.n	8004558 <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e4:	2180      	movs	r1, #128	; 0x80
 80044e6:	438b      	bics	r3, r1
 80044e8:	69a1      	ldr	r1, [r4, #24]
 80044ea:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80044ec:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ee:	68e3      	ldr	r3, [r4, #12]
 80044f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80044f6:	2301      	movs	r3, #1
 80044f8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fa:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80044fc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fe:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	3a08      	subs	r2, #8
 8004502:	54a3      	strb	r3, [r4, r2]
 8004504:	3201      	adds	r2, #1
 8004506:	54a3      	strb	r3, [r4, r2]
 8004508:	3201      	adds	r2, #1
 800450a:	54a3      	strb	r3, [r4, r2]
 800450c:	3201      	adds	r2, #1
 800450e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	3201      	adds	r2, #1
 8004512:	54a3      	strb	r3, [r4, r2]
 8004514:	3201      	adds	r2, #1
 8004516:	54a3      	strb	r3, [r4, r2]
 8004518:	3201      	adds	r2, #1
 800451a:	54a3      	strb	r3, [r4, r2]
 800451c:	3201      	adds	r2, #1
 800451e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004520:	3a08      	subs	r2, #8
 8004522:	54a3      	strb	r3, [r4, r2]
}
 8004524:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004526:	2170      	movs	r1, #112	; 0x70
 8004528:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800452a:	68a1      	ldr	r1, [r4, #8]
 800452c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	4918      	ldr	r1, [pc, #96]	; (8004590 <HAL_TIM_PWM_Init+0xec>)
 8004530:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004532:	6921      	ldr	r1, [r4, #16]
 8004534:	430b      	orrs	r3, r1
 8004536:	e7d5      	b.n	80044e4 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8004538:	333c      	adds	r3, #60	; 0x3c
 800453a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800453c:	f7fe f964 	bl	8002808 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	233d      	movs	r3, #61	; 0x3d
 8004542:	2202      	movs	r2, #2
 8004544:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004546:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	490c      	ldr	r1, [pc, #48]	; (800457c <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 800454a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	428a      	cmp	r2, r1
 800454e:	d1b9      	bne.n	80044c4 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	2170      	movs	r1, #112	; 0x70
 8004552:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8004554:	68a1      	ldr	r1, [r4, #8]
 8004556:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004558:	490d      	ldr	r1, [pc, #52]	; (8004590 <HAL_TIM_PWM_Init+0xec>)
 800455a:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455c:	6921      	ldr	r1, [r4, #16]
 800455e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	438b      	bics	r3, r1
 8004564:	69a1      	ldr	r1, [r4, #24]
 8004566:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004568:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004572:	6963      	ldr	r3, [r4, #20]
 8004574:	6313      	str	r3, [r2, #48]	; 0x30
 8004576:	e7be      	b.n	80044f6 <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8004578:	2001      	movs	r0, #1
 800457a:	e7d3      	b.n	8004524 <HAL_TIM_PWM_Init+0x80>
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40002000 	.word	0x40002000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800
 8004590:	fffffcff 	.word	0xfffffcff

08004594 <HAL_TIM_PWM_ConfigChannel>:
{
 8004594:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004596:	203c      	movs	r0, #60	; 0x3c
{
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800459a:	5c1c      	ldrb	r4, [r3, r0]
 800459c:	2c01      	cmp	r4, #1
 800459e:	d100      	bne.n	80045a2 <HAL_TIM_PWM_ConfigChannel+0xe>
 80045a0:	e0de      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 80045a2:	2401      	movs	r4, #1
 80045a4:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80045a6:	2a08      	cmp	r2, #8
 80045a8:	d100      	bne.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x18>
 80045aa:	e0ac      	b.n	8004706 <HAL_TIM_PWM_ConfigChannel+0x172>
 80045ac:	d834      	bhi.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x84>
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	d100      	bne.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x20>
 80045b2:	e07d      	b.n	80046b0 <HAL_TIM_PWM_ConfigChannel+0x11c>
 80045b4:	2a04      	cmp	r2, #4
 80045b6:	d161      	bne.n	800467c <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b8:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ba:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045bc:	4d77      	ldr	r5, [pc, #476]	; (800479c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	6a10      	ldr	r0, [r2, #32]
 80045c0:	43a0      	bics	r0, r4
 80045c2:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80045c4:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80045c6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80045c8:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045ca:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045cc:	680d      	ldr	r5, [r1, #0]
 80045ce:	022d      	lsls	r5, r5, #8
 80045d0:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d2:	2420      	movs	r4, #32
 80045d4:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d6:	688c      	ldr	r4, [r1, #8]
 80045d8:	0124      	lsls	r4, r4, #4
 80045da:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045dc:	4870      	ldr	r0, [pc, #448]	; (80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80045de:	4282      	cmp	r2, r0
 80045e0:	d057      	beq.n	8004692 <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	4870      	ldr	r0, [pc, #448]	; (80047a4 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80045e4:	4282      	cmp	r2, r0
 80045e6:	d05b      	beq.n	80046a0 <HAL_TIM_PWM_ConfigChannel+0x10c>
 80045e8:	486f      	ldr	r0, [pc, #444]	; (80047a8 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80045ea:	4282      	cmp	r2, r0
 80045ec:	d058      	beq.n	80046a0 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ee:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045f0:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045f4:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045f6:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f8:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045fa:	6994      	ldr	r4, [r2, #24]
 80045fc:	0100      	lsls	r0, r0, #4
 80045fe:	4320      	orrs	r0, r4
 8004600:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004602:	6990      	ldr	r0, [r2, #24]
 8004604:	4c69      	ldr	r4, [pc, #420]	; (80047ac <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004606:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004608:	4020      	ands	r0, r4
 800460a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800460c:	6990      	ldr	r0, [r2, #24]
 800460e:	0209      	lsls	r1, r1, #8
 8004610:	4301      	orrs	r1, r0
 8004612:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2000      	movs	r0, #0
      break;
 8004616:	e032      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8004618:	2a0c      	cmp	r2, #12
 800461a:	d12f      	bne.n	800467c <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800461c:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800461e:	4c64      	ldr	r4, [pc, #400]	; (80047b0 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8004620:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004622:	4d5e      	ldr	r5, [pc, #376]	; (800479c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004624:	4020      	ands	r0, r4
 8004626:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8004628:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800462a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800462c:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800462e:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	680d      	ldr	r5, [r1, #0]
 8004632:	022d      	lsls	r5, r5, #8
 8004634:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004636:	485f      	ldr	r0, [pc, #380]	; (80047b4 <HAL_TIM_PWM_ConfigChannel+0x220>)
 8004638:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800463a:	6888      	ldr	r0, [r1, #8]
 800463c:	0300      	lsls	r0, r0, #12
 800463e:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004640:	4c57      	ldr	r4, [pc, #348]	; (80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004642:	42a2      	cmp	r2, r4
 8004644:	d01f      	beq.n	8004686 <HAL_TIM_PWM_ConfigChannel+0xf2>
 8004646:	4c57      	ldr	r4, [pc, #348]	; (80047a4 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004648:	42a2      	cmp	r2, r4
 800464a:	d01c      	beq.n	8004686 <HAL_TIM_PWM_ConfigChannel+0xf2>
 800464c:	4c56      	ldr	r4, [pc, #344]	; (80047a8 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800464e:	42a2      	cmp	r2, r4
 8004650:	d019      	beq.n	8004686 <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004652:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004654:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004656:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004658:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800465c:	2080      	movs	r0, #128	; 0x80
 800465e:	69d4      	ldr	r4, [r2, #28]
 8004660:	0100      	lsls	r0, r0, #4
 8004662:	4320      	orrs	r0, r4
 8004664:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004666:	69d0      	ldr	r0, [r2, #28]
 8004668:	4c50      	ldr	r4, [pc, #320]	; (80047ac <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800466a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800466c:	4020      	ands	r0, r4
 800466e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004670:	69d0      	ldr	r0, [r2, #28]
 8004672:	0209      	lsls	r1, r1, #8
 8004674:	4301      	orrs	r1, r0
 8004676:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2000      	movs	r0, #0
      break;
 800467a:	e000      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 800467c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800467e:	223c      	movs	r2, #60	; 0x3c
 8004680:	2100      	movs	r1, #0
 8004682:	5499      	strb	r1, [r3, r2]
}
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004686:	4c4c      	ldr	r4, [pc, #304]	; (80047b8 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8004688:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800468a:	694e      	ldr	r6, [r1, #20]
 800468c:	01b6      	lsls	r6, r6, #6
 800468e:	4326      	orrs	r6, r4
 8004690:	e7df      	b.n	8004652 <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004692:	2080      	movs	r0, #128	; 0x80
 8004694:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004696:	68c8      	ldr	r0, [r1, #12]
 8004698:	0100      	lsls	r0, r0, #4
 800469a:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 800469c:	2040      	movs	r0, #64	; 0x40
 800469e:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a0:	4846      	ldr	r0, [pc, #280]	; (80047bc <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a2:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a4:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a6:	698e      	ldr	r6, [r1, #24]
 80046a8:	433e      	orrs	r6, r7
 80046aa:	00b6      	lsls	r6, r6, #2
 80046ac:	4306      	orrs	r6, r0
 80046ae:	e79e      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b0:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b4:	6a10      	ldr	r0, [r2, #32]
 80046b6:	43a0      	bics	r0, r4
 80046b8:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80046ba:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80046bc:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80046be:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046c0:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 80046c2:	680e      	ldr	r6, [r1, #0]
 80046c4:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 80046c6:	2602      	movs	r6, #2
 80046c8:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 80046ca:	688e      	ldr	r6, [r1, #8]
 80046cc:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046ce:	4e34      	ldr	r6, [pc, #208]	; (80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80046d0:	42b2      	cmp	r2, r6
 80046d2:	d047      	beq.n	8004764 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80046d4:	4e33      	ldr	r6, [pc, #204]	; (80047a4 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80046d6:	42b2      	cmp	r2, r6
 80046d8:	d044      	beq.n	8004764 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80046da:	4e33      	ldr	r6, [pc, #204]	; (80047a8 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80046dc:	42b2      	cmp	r2, r6
 80046de:	d041      	beq.n	8004764 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 80046e0:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046e2:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80046e4:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e6:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80046e8:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046ea:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80046ec:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046ee:	6990      	ldr	r0, [r2, #24]
 80046f0:	4320      	orrs	r0, r4
 80046f2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f4:	6990      	ldr	r0, [r2, #24]
 80046f6:	3c04      	subs	r4, #4
 80046f8:	43a0      	bics	r0, r4
 80046fa:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046fc:	6990      	ldr	r0, [r2, #24]
 80046fe:	4301      	orrs	r1, r0
 8004700:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2000      	movs	r0, #0
      break;
 8004704:	e7bb      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004706:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004708:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800470a:	4c2d      	ldr	r4, [pc, #180]	; (80047c0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 800470c:	6a10      	ldr	r0, [r2, #32]
 800470e:	4020      	ands	r0, r4
 8004710:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8004712:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004714:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004716:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004718:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 800471a:	680e      	ldr	r6, [r1, #0]
 800471c:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 800471e:	4c29      	ldr	r4, [pc, #164]	; (80047c4 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8004720:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004722:	688c      	ldr	r4, [r1, #8]
 8004724:	0224      	lsls	r4, r4, #8
 8004726:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004728:	4c1d      	ldr	r4, [pc, #116]	; (80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800472a:	42a2      	cmp	r2, r4
 800472c:	d027      	beq.n	800477e <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472e:	4c1d      	ldr	r4, [pc, #116]	; (80047a4 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004730:	42a2      	cmp	r2, r4
 8004732:	d02b      	beq.n	800478c <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8004734:	4c1c      	ldr	r4, [pc, #112]	; (80047a8 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004736:	42a2      	cmp	r2, r4
 8004738:	d028      	beq.n	800478c <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 800473a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800473c:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800473e:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004740:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004742:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004744:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004748:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	4320      	orrs	r0, r4
 800474c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800474e:	69d0      	ldr	r0, [r2, #28]
 8004750:	3c04      	subs	r4, #4
 8004752:	43a0      	bics	r0, r4
 8004754:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004756:	69d0      	ldr	r0, [r2, #28]
 8004758:	4301      	orrs	r1, r0
 800475a:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2000      	movs	r0, #0
      break;
 800475e:	e78e      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8004760:	2002      	movs	r0, #2
 8004762:	e78f      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8004764:	2608      	movs	r6, #8
 8004766:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8004768:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800476a:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800476c:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800476e:	2604      	movs	r6, #4
 8004770:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004772:	4e15      	ldr	r6, [pc, #84]	; (80047c8 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8004774:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004776:	694d      	ldr	r5, [r1, #20]
 8004778:	433d      	orrs	r5, r7
 800477a:	4335      	orrs	r5, r6
 800477c:	e7b0      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 800477e:	4c13      	ldr	r4, [pc, #76]	; (80047cc <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004780:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004782:	68cc      	ldr	r4, [r1, #12]
 8004784:	0224      	lsls	r4, r4, #8
 8004786:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8004788:	4808      	ldr	r0, [pc, #32]	; (80047ac <HAL_TIM_PWM_ConfigChannel+0x218>)
 800478a:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800478c:	4c10      	ldr	r4, [pc, #64]	; (80047d0 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478e:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004790:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004792:	698d      	ldr	r5, [r1, #24]
 8004794:	433d      	orrs	r5, r7
 8004796:	012d      	lsls	r5, r5, #4
 8004798:	4325      	orrs	r5, r4
 800479a:	e7ce      	b.n	800473a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800479c:	ffff8cff 	.word	0xffff8cff
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800
 80047ac:	fffffbff 	.word	0xfffffbff
 80047b0:	ffffefff 	.word	0xffffefff
 80047b4:	ffffdfff 	.word	0xffffdfff
 80047b8:	ffffbfff 	.word	0xffffbfff
 80047bc:	fffff3ff 	.word	0xfffff3ff
 80047c0:	fffffeff 	.word	0xfffffeff
 80047c4:	fffffdff 	.word	0xfffffdff
 80047c8:	fffffcff 	.word	0xfffffcff
 80047cc:	fffff7ff 	.word	0xfffff7ff
 80047d0:	ffffcfff 	.word	0xffffcfff

080047d4 <HAL_TIM_ConfigOCrefClear>:
{
 80047d4:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80047d6:	203c      	movs	r0, #60	; 0x3c
{
 80047d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80047da:	5c1c      	ldrb	r4, [r3, r0]
 80047dc:	2c01      	cmp	r4, #1
 80047de:	d069      	beq.n	80048b4 <HAL_TIM_ConfigOCrefClear+0xe0>
 80047e0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	253d      	movs	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 80047e4:	541c      	strb	r4, [r3, r0]
  htim->State = HAL_TIM_STATE_BUSY;
 80047e6:	3401      	adds	r4, #1
 80047e8:	555c      	strb	r4, [r3, r5]
  switch (sClearInputConfig->ClearInputSource)
 80047ea:	684c      	ldr	r4, [r1, #4]
 80047ec:	2c01      	cmp	r4, #1
 80047ee:	d00b      	beq.n	8004808 <HAL_TIM_ConfigOCrefClear+0x34>
 80047f0:	2c02      	cmp	r4, #2
 80047f2:	d04e      	beq.n	8004892 <HAL_TIM_ConfigOCrefClear+0xbe>
 80047f4:	383b      	subs	r0, #59	; 0x3b
 80047f6:	2c00      	cmp	r4, #0
 80047f8:	d022      	beq.n	8004840 <HAL_TIM_ConfigOCrefClear+0x6c>
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	223d      	movs	r2, #61	; 0x3d
 80047fc:	2101      	movs	r1, #1
 80047fe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8004800:	2100      	movs	r1, #0
 8004802:	3a01      	subs	r2, #1
 8004804:	5499      	strb	r1, [r3, r2]
}
 8004806:	bd70      	pop	{r4, r5, r6, pc}
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8004808:	68ce      	ldr	r6, [r1, #12]
 800480a:	2e00      	cmp	r6, #0
 800480c:	d147      	bne.n	800489e <HAL_TIM_ConfigOCrefClear+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 800480e:	6818      	ldr	r0, [r3, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	4c34      	ldr	r4, [pc, #208]	; (80048e4 <HAL_TIM_ConfigOCrefClear+0x110>)
  tmpsmcr = TIMx->SMCR;
 8004812:	6885      	ldr	r5, [r0, #8]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004814:	688e      	ldr	r6, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004816:	4025      	ands	r5, r4
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004818:	690c      	ldr	r4, [r1, #16]
 800481a:	0224      	lsls	r4, r4, #8
 800481c:	4334      	orrs	r4, r6
 800481e:	432c      	orrs	r4, r5
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8004820:	2508      	movs	r5, #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	6084      	str	r4, [r0, #8]
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8004824:	6884      	ldr	r4, [r0, #8]
 8004826:	432c      	orrs	r4, r5
 8004828:	6084      	str	r4, [r0, #8]
    switch (Channel)
 800482a:	2a08      	cmp	r2, #8
 800482c:	d10f      	bne.n	800484e <HAL_TIM_ConfigOCrefClear+0x7a>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800482e:	680a      	ldr	r2, [r1, #0]
 8004830:	2a00      	cmp	r2, #0
 8004832:	d04a      	beq.n	80048ca <HAL_TIM_ConfigOCrefClear+0xf6>
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	69c2      	ldr	r2, [r0, #28]
 8004838:	430a      	orrs	r2, r1
 800483a:	61c2      	str	r2, [r0, #28]
 800483c:	2000      	movs	r0, #0
 800483e:	e7dc      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	4d29      	ldr	r5, [pc, #164]	; (80048e8 <HAL_TIM_ConfigOCrefClear+0x114>)
 8004844:	6884      	ldr	r4, [r0, #8]
 8004846:	402c      	ands	r4, r5
 8004848:	6084      	str	r4, [r0, #8]
    switch (Channel)
 800484a:	2a08      	cmp	r2, #8
 800484c:	d0ef      	beq.n	800482e <HAL_TIM_ConfigOCrefClear+0x5a>
 800484e:	2a08      	cmp	r2, #8
 8004850:	d80d      	bhi.n	800486e <HAL_TIM_ConfigOCrefClear+0x9a>
 8004852:	2a00      	cmp	r2, #0
 8004854:	d030      	beq.n	80048b8 <HAL_TIM_ConfigOCrefClear+0xe4>
 8004856:	2a04      	cmp	r2, #4
 8004858:	d119      	bne.n	800488e <HAL_TIM_ConfigOCrefClear+0xba>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800485a:	680a      	ldr	r2, [r1, #0]
 800485c:	2a00      	cmp	r2, #0
 800485e:	d023      	beq.n	80048a8 <HAL_TIM_ConfigOCrefClear+0xd4>
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	6981      	ldr	r1, [r0, #24]
 8004864:	0212      	lsls	r2, r2, #8
 8004866:	430a      	orrs	r2, r1
 8004868:	6182      	str	r2, [r0, #24]
 800486a:	2000      	movs	r0, #0
 800486c:	e7c5      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
    switch (Channel)
 800486e:	2a0c      	cmp	r2, #12
 8004870:	d10d      	bne.n	800488e <HAL_TIM_ConfigOCrefClear+0xba>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8004872:	680a      	ldr	r2, [r1, #0]
 8004874:	2a00      	cmp	r2, #0
 8004876:	d006      	beq.n	8004886 <HAL_TIM_ConfigOCrefClear+0xb2>
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	69c1      	ldr	r1, [r0, #28]
 800487c:	0212      	lsls	r2, r2, #8
 800487e:	430a      	orrs	r2, r1
 8004880:	61c2      	str	r2, [r0, #28]
 8004882:	2000      	movs	r0, #0
 8004884:	e7b9      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8004886:	69c2      	ldr	r2, [r0, #28]
 8004888:	4918      	ldr	r1, [pc, #96]	; (80048ec <HAL_TIM_ConfigOCrefClear+0x118>)
 800488a:	400a      	ands	r2, r1
 800488c:	61c2      	str	r2, [r0, #28]
 800488e:	2000      	movs	r0, #0
 8004890:	e7b3      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8004892:	2508      	movs	r5, #8
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	6884      	ldr	r4, [r0, #8]
 8004898:	43ac      	bics	r4, r5
 800489a:	6084      	str	r4, [r0, #8]
  if (status == HAL_OK)
 800489c:	e7d5      	b.n	800484a <HAL_TIM_ConfigOCrefClear+0x76>
        __HAL_UNLOCK(htim);
 800489e:	2200      	movs	r2, #0
        htim->State = HAL_TIM_STATE_READY;
 80048a0:	555c      	strb	r4, [r3, r5]
        __HAL_UNLOCK(htim);
 80048a2:	541a      	strb	r2, [r3, r0]
        return HAL_ERROR;
 80048a4:	2001      	movs	r0, #1
 80048a6:	e7ae      	b.n	8004806 <HAL_TIM_ConfigOCrefClear+0x32>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 80048a8:	6982      	ldr	r2, [r0, #24]
 80048aa:	4910      	ldr	r1, [pc, #64]	; (80048ec <HAL_TIM_ConfigOCrefClear+0x118>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	6182      	str	r2, [r0, #24]
 80048b0:	2000      	movs	r0, #0
 80048b2:	e7a2      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
  __HAL_LOCK(htim);
 80048b4:	2002      	movs	r0, #2
 80048b6:	e7a6      	b.n	8004806 <HAL_TIM_ConfigOCrefClear+0x32>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80048b8:	680a      	ldr	r2, [r1, #0]
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_TIM_ConfigOCrefClear+0x102>
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	6982      	ldr	r2, [r0, #24]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	6182      	str	r2, [r0, #24]
 80048c6:	2000      	movs	r0, #0
 80048c8:	e797      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	69c2      	ldr	r2, [r0, #28]
 80048ce:	438a      	bics	r2, r1
 80048d0:	61c2      	str	r2, [r0, #28]
 80048d2:	2000      	movs	r0, #0
 80048d4:	e791      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	6982      	ldr	r2, [r0, #24]
 80048da:	438a      	bics	r2, r1
 80048dc:	6182      	str	r2, [r0, #24]
 80048de:	2000      	movs	r0, #0
 80048e0:	e78b      	b.n	80047fa <HAL_TIM_ConfigOCrefClear+0x26>
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	ffff00ff 	.word	0xffff00ff
 80048e8:	ffff00f7 	.word	0xffff00f7
 80048ec:	ffff7fff 	.word	0xffff7fff

080048f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80048f0:	233c      	movs	r3, #60	; 0x3c
{
 80048f2:	b570      	push	{r4, r5, r6, lr}
 80048f4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80048f6:	5cc0      	ldrb	r0, [r0, r3]
 80048f8:	2801      	cmp	r0, #1
 80048fa:	d100      	bne.n	80048fe <HAL_TIM_ConfigClockSource+0xe>
 80048fc:	e075      	b.n	80049ea <HAL_TIM_ConfigClockSource+0xfa>
 80048fe:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8004902:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	3301      	adds	r3, #1
 8004906:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8004908:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490a:	4d52      	ldr	r5, [pc, #328]	; (8004a54 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 800490c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004910:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004912:	680b      	ldr	r3, [r1, #0]
 8004914:	2b60      	cmp	r3, #96	; 0x60
 8004916:	d100      	bne.n	800491a <HAL_TIM_ConfigClockSource+0x2a>
 8004918:	e069      	b.n	80049ee <HAL_TIM_ConfigClockSource+0xfe>
 800491a:	d823      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x74>
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d100      	bne.n	8004922 <HAL_TIM_ConfigClockSource+0x32>
 8004920:	e07f      	b.n	8004a22 <HAL_TIM_ConfigClockSource+0x132>
 8004922:	d952      	bls.n	80049ca <HAL_TIM_ConfigClockSource+0xda>
 8004924:	2b50      	cmp	r3, #80	; 0x50
 8004926:	d13b      	bne.n	80049a0 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 8004928:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800492c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	43a6      	bics	r6, r4
 8004934:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004936:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004938:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800493c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493e:	240a      	movs	r4, #10
 8004940:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004942:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004944:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004946:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004948:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800494a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800494c:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800494e:	3919      	subs	r1, #25
 8004950:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004952:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004956:	233d      	movs	r3, #61	; 0x3d
 8004958:	2101      	movs	r1, #1
 800495a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 800495c:	2100      	movs	r1, #0
 800495e:	3b01      	subs	r3, #1
 8004960:	54d1      	strb	r1, [r2, r3]
}
 8004962:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004964:	2480      	movs	r4, #128	; 0x80
 8004966:	0164      	lsls	r4, r4, #5
 8004968:	42a3      	cmp	r3, r4
 800496a:	d03c      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0xf6>
 800496c:	2480      	movs	r4, #128	; 0x80
 800496e:	01a4      	lsls	r4, r4, #6
 8004970:	42a3      	cmp	r3, r4
 8004972:	d117      	bne.n	80049a4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8004974:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004976:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004978:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800497a:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800497c:	688b      	ldr	r3, [r1, #8]
 800497e:	68c9      	ldr	r1, [r1, #12]
 8004980:	432b      	orrs	r3, r5
 8004982:	0209      	lsls	r1, r1, #8
 8004984:	430b      	orrs	r3, r1
 8004986:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004988:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	6881      	ldr	r1, [r0, #8]
 800498e:	01db      	lsls	r3, r3, #7
 8004990:	430b      	orrs	r3, r1
 8004992:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2000      	movs	r0, #0
      break;
 8004996:	e7de      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004998:	2110      	movs	r1, #16
 800499a:	001c      	movs	r4, r3
 800499c:	438c      	bics	r4, r1
 800499e:	d019      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0xe4>
 80049a0:	2001      	movs	r0, #1
 80049a2:	e7d8      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
 80049a4:	2b70      	cmp	r3, #112	; 0x70
 80049a6:	d1fb      	bne.n	80049a0 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 80049a8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049aa:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ac:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ae:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b0:	688b      	ldr	r3, [r1, #8]
 80049b2:	68c9      	ldr	r1, [r1, #12]
 80049b4:	432b      	orrs	r3, r5
 80049b6:	0209      	lsls	r1, r1, #8
 80049b8:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ba:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049bc:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80049be:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80049c0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80049c4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2000      	movs	r0, #0
      break;
 80049c8:	e7c5      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d002      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0xe4>
 80049ce:	d9e3      	bls.n	8004998 <HAL_TIM_ConfigClockSource+0xa8>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d1e5      	bne.n	80049a0 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d4:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80049d6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d8:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049da:	430b      	orrs	r3, r1
 80049dc:	2107      	movs	r1, #7
 80049de:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80049e0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2000      	movs	r0, #0
}
 80049e4:	e7b7      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7b5      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80049ea:	2002      	movs	r0, #2
 80049ec:	e7b9      	b.n	8004962 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	2510      	movs	r5, #16
 80049f0:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80049f2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f4:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 80049f6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fa:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fc:	4e17      	ldr	r6, [pc, #92]	; (8004a5c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fe:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a00:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a02:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a04:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8004a06:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004a08:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0a:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0c:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8004a12:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004a14:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a16:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a18:	3909      	subs	r1, #9
 8004a1a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a1c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2000      	movs	r0, #0
}
 8004a20:	e799      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8004a22:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004a24:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004a26:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a28:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a2a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2c:	43a6      	bics	r6, r4
 8004a2e:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a30:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a36:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a38:	240a      	movs	r4, #10
 8004a3a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004a3c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004a3e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a40:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a42:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004a44:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a46:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a48:	3929      	subs	r1, #41	; 0x29
 8004a4a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a4c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2000      	movs	r0, #0
}
 8004a50:	e781      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	ffff0088 	.word	0xffff0088
 8004a58:	ffff00ff 	.word	0xffff00ff
 8004a5c:	ffff0fff 	.word	0xffff0fff

08004a60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a60:	233c      	movs	r3, #60	; 0x3c
{
 8004a62:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004a64:	5cc3      	ldrb	r3, [r0, r3]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d021      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6a:	233d      	movs	r3, #61	; 0x3d
 8004a6c:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a6e:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8004a72:	6803      	ldr	r3, [r0, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004a76:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a78:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7a:	680d      	ldr	r5, [r1, #0]
 8004a7c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d006      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	05d2      	lsls	r2, r2, #23
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d002      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d104      	bne.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a94:	2280      	movs	r2, #128	; 0x80
 8004a96:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a98:	684a      	ldr	r2, [r1, #4]
 8004a9a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a9e:	233d      	movs	r3, #61	; 0x3d
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004aaa:	2000      	movs	r0, #0
}
 8004aac:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004aae:	2002      	movs	r0, #2
 8004ab0:	e7fc      	b.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400

08004abc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abc:	223c      	movs	r2, #60	; 0x3c
{
 8004abe:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004ac0:	5c83      	ldrb	r3, [r0, r2]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d01e      	beq.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ac6:	68cb      	ldr	r3, [r1, #12]
 8004ac8:	4c0f      	ldr	r4, [pc, #60]	; (8004b08 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8004aca:	4023      	ands	r3, r4
 8004acc:	688c      	ldr	r4, [r1, #8]
 8004ace:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ad0:	4c0e      	ldr	r4, [pc, #56]	; (8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004ad2:	4023      	ands	r3, r4
 8004ad4:	684c      	ldr	r4, [r1, #4]
 8004ad6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	; (8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8004ada:	4023      	ands	r3, r4
 8004adc:	680c      	ldr	r4, [r1, #0]
 8004ade:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ae0:	4c0c      	ldr	r4, [pc, #48]	; (8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004ae2:	4023      	ands	r3, r4
 8004ae4:	690c      	ldr	r4, [r1, #16]
 8004ae6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ae8:	4c0b      	ldr	r4, [pc, #44]	; (8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8004aea:	4023      	ands	r3, r4
 8004aec:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aee:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004af0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af2:	4c0a      	ldr	r4, [pc, #40]	; (8004b1c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004af4:	4023      	ands	r3, r4
 8004af6:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004af8:	6801      	ldr	r1, [r0, #0]
 8004afa:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004afc:	2300      	movs	r3, #0
 8004afe:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8004b00:	2000      	movs	r0, #0
}
 8004b02:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004b04:	2002      	movs	r0, #2
 8004b06:	e7fc      	b.n	8004b02 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8004b08:	fffffcff 	.word	0xfffffcff
 8004b0c:	fffffbff 	.word	0xfffffbff
 8004b10:	fffff7ff 	.word	0xfffff7ff
 8004b14:	ffffefff 	.word	0xffffefff
 8004b18:	ffffdfff 	.word	0xffffdfff
 8004b1c:	ffffbfff 	.word	0xffffbfff

08004b20 <VBS_GetBusVoltage_d>:
  {
    temp_latestConv = pHandle->LatestConv;
  }
  return (temp_latestConv);
#else
  return (pHandle->LatestConv);
 8004b20:	8880      	ldrh	r0, [r0, #4]
#endif
}
 8004b22:	4770      	bx	lr

08004b24 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8004b24:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8004b26:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8004b28:	885b      	ldrh	r3, [r3, #2]
 8004b2a:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8004b2c:	0c00      	lsrs	r0, r0, #16
}
 8004b2e:	4770      	bx	lr

08004b30 <CRM_Init>:
  * @param  pHandle: handler of instance of the CRM component
  * @retval none
  */
__weak void CRM_Init(CurrentRef_Handle_t *pHandle)
{
  switch (pHandle->pParams_str->RefTimerChannel)
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	6802      	ldr	r2, [r0, #0]
 8004b34:	0049      	lsls	r1, r1, #1
 8004b36:	6853      	ldr	r3, [r2, #4]
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d020      	beq.n	8004b7e <CRM_Init+0x4e>
 8004b3c:	d813      	bhi.n	8004b66 <CRM_Init+0x36>
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d019      	beq.n	8004b76 <CRM_Init+0x46>
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d117      	bne.n	8004b76 <CRM_Init+0x46>
      break;
    }

    case LL_TIM_CHANNEL_CH2:
    {
      LL_TIM_OC_SetCompareCH2(pHandle->pParams_str->TIMx, pHandle->StartCntPh);
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	88c1      	ldrh	r1, [r0, #6]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004b4a:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	6811      	ldr	r1, [r2, #0]
 8004b50:	4301      	orrs	r1, r0
 8004b52:	6011      	str	r1, [r2, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004b54:	6a11      	ldr	r1, [r2, #32]
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6213      	str	r3, [r2, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }
  LL_TIM_EnableCounter(pHandle->pParams_str->TIMx);
  LL_TIM_CC_EnableChannel(pHandle->pParams_str->TIMx, pHandle->pParams_str->RefTimerChannel);
  LL_TIM_EnableAllOutputs(pHandle->pParams_str->TIMx);
}
 8004b64:	4770      	bx	lr
  switch (pHandle->pParams_str->RefTimerChannel)
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	0149      	lsls	r1, r1, #5
 8004b6a:	428b      	cmp	r3, r1
 8004b6c:	d103      	bne.n	8004b76 <CRM_Init+0x46>
      LL_TIM_OC_SetCompareCH4(pHandle->pParams_str->TIMx, pHandle->StartCntPh);
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	88c1      	ldrh	r1, [r0, #6]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004b72:	6411      	str	r1, [r2, #64]	; 0x40
}
 8004b74:	e7ea      	b.n	8004b4c <CRM_Init+0x1c>
      LL_TIM_OC_SetCompareCH1(pHandle->pParams_str->TIMx, pHandle->StartCntPh);
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	88c1      	ldrh	r1, [r0, #6]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004b7a:	6351      	str	r1, [r2, #52]	; 0x34
}
 8004b7c:	e7e6      	b.n	8004b4c <CRM_Init+0x1c>
      LL_TIM_OC_SetCompareCH3(pHandle->pParams_str->TIMx, pHandle->StartCntPh);
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	88c1      	ldrh	r1, [r0, #6]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004b82:	63d1      	str	r1, [r2, #60]	; 0x3c
}
 8004b84:	e7e2      	b.n	8004b4c <CRM_Init+0x1c>
 8004b86:	46c0      	nop			; (mov r8, r8)

08004b88 <CRM_SetReference>:
  * @retval none
  */
__weak void CRM_SetReference(CurrentRef_Handle_t *pHandle, uint16_t hCnt)
{
  pHandle->Cnt = hCnt;
  switch (pHandle->pParams_str->RefTimerChannel)
 8004b88:	6802      	ldr	r2, [r0, #0]
  pHandle->Cnt = hCnt;
 8004b8a:	8081      	strh	r1, [r0, #4]
  switch (pHandle->pParams_str->RefTimerChannel)
 8004b8c:	2080      	movs	r0, #128	; 0x80
 8004b8e:	6853      	ldr	r3, [r2, #4]
 8004b90:	0040      	lsls	r0, r0, #1
 8004b92:	4283      	cmp	r3, r0
 8004b94:	d011      	beq.n	8004bba <CRM_SetReference+0x32>
 8004b96:	d806      	bhi.n	8004ba6 <CRM_SetReference+0x1e>
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d00b      	beq.n	8004bb4 <CRM_SetReference+0x2c>
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d109      	bne.n	8004bb4 <CRM_SetReference+0x2c>
      break;
    }

    case LL_TIM_CHANNEL_CH2:
    {
      LL_TIM_OC_SetCompareCH2(pHandle->pParams_str->TIMx, pHandle->Cnt);
 8004ba0:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004ba2:	6399      	str	r1, [r3, #56]	; 0x38
    {
      LL_TIM_OC_SetCompareCH1(pHandle->pParams_str->TIMx, pHandle->Cnt);
      break;
    }
  }  
}
 8004ba4:	4770      	bx	lr
  switch (pHandle->pParams_str->RefTimerChannel)
 8004ba6:	2080      	movs	r0, #128	; 0x80
 8004ba8:	0140      	lsls	r0, r0, #5
 8004baa:	4283      	cmp	r3, r0
 8004bac:	d102      	bne.n	8004bb4 <CRM_SetReference+0x2c>
      LL_TIM_OC_SetCompareCH4(pHandle->pParams_str->TIMx, pHandle->Cnt);
 8004bae:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004bb0:	6419      	str	r1, [r3, #64]	; 0x40
}
 8004bb2:	e7f7      	b.n	8004ba4 <CRM_SetReference+0x1c>
      LL_TIM_OC_SetCompareCH1(pHandle->pParams_str->TIMx, pHandle->Cnt);
 8004bb4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004bb6:	6359      	str	r1, [r3, #52]	; 0x34
}
 8004bb8:	e7f4      	b.n	8004ba4 <CRM_SetReference+0x1c>
      LL_TIM_OC_SetCompareCH3(pHandle->pParams_str->TIMx, pHandle->Cnt);
 8004bba:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004bbc:	63d9      	str	r1, [r3, #60]	; 0x3c
}
 8004bbe:	e7f1      	b.n	8004ba4 <CRM_SetReference+0x1c>

08004bc0 <BADC_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004bc0:	2104      	movs	r1, #4
/*
  * @brief  Initializes ADC1, DMA and NVIC for three bemf voltages reading
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Init( Bemf_ADC_Handle_t *pHandle)
{
 8004bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc4:	46c6      	mov	lr, r8
 8004bc6:	4a54      	ldr	r2, [pc, #336]	; (8004d18 <BADC_Init+0x158>)
 8004bc8:	b500      	push	{lr}
 8004bca:	6853      	ldr	r3, [r2, #4]
 8004bcc:	0004      	movs	r4, r0
 8004bce:	438b      	bics	r3, r1
 8004bd0:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004bd2:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8004bd4:	6853      	ldr	r3, [r2, #4]
 8004bd6:	3104      	adds	r1, #4
 8004bd8:	438b      	bics	r3, r1
 8004bda:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8004bdc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8004bde:	6891      	ldr	r1, [r2, #8]
 8004be0:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <BADC_Init+0x15c>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004be2:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 8004be4:	4019      	ands	r1, r3
 8004be6:	3318      	adds	r3, #24
 8004be8:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004bea:	2502      	movs	r5, #2
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004bec:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8004bee:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8004bf0:	6893      	ldr	r3, [r2, #8]

    /* ADC Calibration */
    LL_ADC_StartCalibration( ADC1 );
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dbfc      	blt.n	8004bf0 <BADC_Init+0x30>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004bf6:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8004bf8:	4219      	tst	r1, r3
 8004bfa:	d1f9      	bne.n	8004bf0 <BADC_Init+0x30>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004bfc:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8004bfe:	4218      	tst	r0, r3
 8004c00:	d1f6      	bne.n	8004bf0 <BADC_Init+0x30>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004c02:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8004c04:	421d      	tst	r5, r3
 8004c06:	d1f3      	bne.n	8004bf0 <BADC_Init+0x30>
  MODIFY_REG(ADCx->CR,
 8004c08:	6893      	ldr	r3, [r2, #8]
 8004c0a:	4944      	ldr	r1, [pc, #272]	; (8004d1c <BADC_Init+0x15c>)
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c14:	6953      	ldr	r3, [r2, #20]
 8004c16:	3106      	adds	r1, #6
 8004c18:	438b      	bics	r3, r1
 8004c1a:	6153      	str	r3, [r2, #20]

    /* Enables the ADC peripheral */
    LL_ADC_Enable( ADC1 );
    LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);  
    /* Wait ADC Ready */
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8004c1c:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8004c1e:	493e      	ldr	r1, [pc, #248]	; (8004d18 <BADC_Init+0x158>)
 8004c20:	680b      	ldr	r3, [r1, #0]
 8004c22:	421a      	tst	r2, r3
 8004c24:	d0fc      	beq.n	8004c20 <BADC_Init+0x60>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004c26:	0023      	movs	r3, r4
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <BADC_Init+0x160>)
 8004c2a:	3352      	adds	r3, #82	; 0x52
 8004c2c:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <BADC_Init+0x164>)
 8004c30:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004c32:	684b      	ldr	r3, [r1, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
    LL_DMA_SetPeriphAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )&ADC1->DR );
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 1 );
    
    /* We allow ADC usage for regular conversion on Systick*/
    pHandle->ADCRegularLocked=false;
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2350      	movs	r3, #80	; 0x50
 8004c40:	54e2      	strb	r2, [r4, r3]
	
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8004c42:	7862      	ldrb	r2, [r4, #1]
 8004c44:	8ae3      	ldrh	r3, [r4, #22]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 8004c46:	8aa6      	ldrh	r6, [r4, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8004c48:	4353      	muls	r3, r2
    hMaxReliableElSpeedUnit *= 2U;
 8004c4a:	4356      	muls	r6, r2

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8004c4c:	22d2      	movs	r2, #210	; 0xd2
 8004c4e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    hMaxReliableElSpeedUnit *= 2U;
 8004c50:	0076      	lsls	r6, r6, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8004c52:	0c3d      	lsrs	r5, r7, #16
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8004c54:	b29b      	uxth	r3, r3
    hMaxReliableElSpeedUnit *= 2U;
 8004c56:	b2b6      	uxth	r6, r6
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8004c58:	52a5      	strh	r5, [r4, r2]

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d959      	bls.n	8004d12 <BADC_Init+0x152>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->BemfTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	0059      	lsls	r1, r3, #1
 8004c62:	18c9      	adds	r1, r1, r3
 8004c64:	4830      	ldr	r0, [pc, #192]	; (8004d28 <BADC_Init+0x168>)
 8004c66:	0049      	lsls	r1, r1, #1
 8004c68:	f7fb fa4e 	bl	8000108 <__udivsi3>
 8004c6c:	b282      	uxth	r2, r0
 8004c6e:	23d0      	movs	r3, #208	; 0xd0
    }

    /* Align MaxPeriod and MinPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8004c70:	21fa      	movs	r1, #250	; 0xfa
 8004c72:	52e2      	strh	r2, [r4, r3]
 8004c74:	4368      	muls	r0, r5
 8004c76:	0089      	lsls	r1, r1, #2
 8004c78:	f7fb fa46 	bl	8000108 <__udivsi3>
 8004c7c:	23c8      	movs	r3, #200	; 0xc8
 8004c7e:	0405      	lsls	r5, r0, #16
 8004c80:	50e5      	str	r5, [r4, r3]

    MinBemfTime = ((1000U * (uint16_t)SPEED_UNIT) << 8) / (6U * hMaxReliableElSpeedUnit);
    pHandle->MinPeriod = ((MinBemfTime * pHandle->OvfFreq) >> 8) / 1000U * 65536UL;
	
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004c82:	3b08      	subs	r3, #8

    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8004c84:	2106      	movs	r1, #6
 8004c86:	0038      	movs	r0, r7
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004c88:	52e6      	strh	r6, [r4, r3]
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8004c8a:	f7fb fa3d 	bl	8000108 <__udivsi3>
 8004c8e:	8b63      	ldrh	r3, [r4, #26]
 8004c90:	0007      	movs	r7, r0
 8004c92:	0019      	movs	r1, r3
 8004c94:	4698      	mov	r8, r3
 8004c96:	f7fb fa37 	bl	8000108 <__udivsi3>
 8004c9a:	22c4      	movs	r2, #196	; 0xc4
                              * pHandle->_Super.DPPConvFactor;
 8004c9c:	69e3      	ldr	r3, [r4, #28]
 8004c9e:	4343      	muls	r3, r0

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8004ca0:	00b8      	lsls	r0, r7, #2
 8004ca2:	19c0      	adds	r0, r0, r7
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8004ca4:	50a3      	str	r3, [r4, r2]
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8004ca6:	0040      	lsls	r0, r0, #1
    if (0U == hMaxReliableElSpeedUnit)
 8004ca8:	2e00      	cmp	r6, #0
 8004caa:	d002      	beq.n	8004cb2 <BADC_Init+0xf2>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8004cac:	0031      	movs	r1, r6
 8004cae:	f7fb fa2b 	bl	8000108 <__udivsi3>
 8004cb2:	23cc      	movs	r3, #204	; 0xcc
 8004cb4:	50e0      	str	r0, [r4, r3]
    }
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004cb6:	330a      	adds	r3, #10
 8004cb8:	5ce0      	ldrb	r0, [r4, r3]
 8004cba:	4643      	mov	r3, r8
 8004cbc:	4343      	muls	r3, r0
 8004cbe:	0018      	movs	r0, r3
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8004cc0:	2348      	movs	r3, #72	; 0x48
 8004cc2:	5ae1      	ldrh	r1, [r4, r3]
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004cc4:	f7fb faaa 	bl	800021c <__divsi3>
 8004cc8:	23d4      	movs	r3, #212	; 0xd4
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8004cca:	3801      	subs	r0, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004ccc:	52e0      	strh	r0, [r4, r3]

    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8004cce:	0023      	movs	r3, r4
 8004cd0:	332e      	adds	r3, #46	; 0x2e
 8004cd2:	6363      	str	r3, [r4, #52]	; 0x34
    pHandle->IsOnSensingEnabled = false;
 8004cd4:	223a      	movs	r2, #58	; 0x3a
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	54a3      	strb	r3, [r4, r2]
    pHandle->ElPeriodSum = 0;
    pHandle->ZcEvents = 0;
 8004cda:	3a14      	subs	r2, #20
    pHandle->ElPeriodSum = 0;
 8004cdc:	6563      	str	r3, [r4, #84]	; 0x54
    pHandle->ZcEvents = 0;
 8004cde:	54a3      	strb	r3, [r4, r2]
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
 8004ce0:	33f6      	adds	r3, #246	; 0xf6
 8004ce2:	5ae2      	ldrh	r2, [r4, r3]
 8004ce4:	3b08      	subs	r3, #8
 8004ce6:	52e2      	strh	r2, [r4, r3]
    
    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8004ce8:	0022      	movs	r2, r4
 8004cea:	3ba4      	subs	r3, #164	; 0xa4
 8004cec:	5ce1      	ldrb	r1, [r4, r3]
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8004cee:	326c      	adds	r2, #108	; 0x6c
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d004      	beq.n	8004d00 <BADC_Init+0x140>
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
    {
      pHandle->SpeedBufferDpp[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8004cfa:	c220      	stmia	r2!, {r5}
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8004cfc:	4299      	cmp	r1, r3
 8004cfe:	d1fa      	bne.n	8004cf6 <BADC_Init+0x136>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d00:	2101      	movs	r1, #1
    }
    LL_TIM_EnableCounter(pHandle->pParams_str->LfTim);
 8004d02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6013      	str	r3, [r2, #0]
  }
}
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	46b8      	mov	r8, r7
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d12:	2096      	movs	r0, #150	; 0x96
      pHandle->BemfTimeout = 150U;
 8004d14:	2296      	movs	r2, #150	; 0x96
 8004d16:	e7aa      	b.n	8004c6e <BADC_Init+0xae>
 8004d18:	40012400 	.word	0x40012400
 8004d1c:	7fffffe8 	.word	0x7fffffe8
 8004d20:	40020008 	.word	0x40020008
 8004d24:	40012440 	.word	0x40012440
 8004d28:	00002710 	.word	0x00002710

08004d2c <BADC_Clear>:
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <BADC_Clear+0x50>)
/*
  * @brief  Resets the ADC status
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Clear( Bemf_ADC_Handle_t *pHandle )
{
 8004d30:	b510      	push	{r4, lr}
 8004d32:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8004d34:	4c12      	ldr	r4, [pc, #72]	; (8004d80 <BADC_Clear+0x54>)
 8004d36:	438b      	bics	r3, r1
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <BADC_Clear+0x58>)
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4022      	ands	r2, r4
 8004d40:	2410      	movs	r4, #16
 8004d42:	4322      	orrs	r2, r4
 8004d44:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	3c0f      	subs	r4, #15
 8004d4a:	43a2      	bics	r2, r4
 8004d4c:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <BADC_Clear+0x5c>)
 8004d50:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004d52:	2204      	movs	r2, #4
 8004d54:	601a      	str	r2, [r3, #0]

  /* Clear EOC */
  LL_ADC_ClearFlag_EOC( ADC1 );

 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8004d56:	2300      	movs	r3, #0
 8004d58:	324c      	adds	r2, #76	; 0x4c
 8004d5a:	5483      	strb	r3, [r0, r2]
  pHandle->ZcEvents = 0;
 8004d5c:	3a2a      	subs	r2, #42	; 0x2a
 8004d5e:	5483      	strb	r3, [r0, r2]
  pHandle->ElPeriodSum = 0;

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;
 8004d60:	2200      	movs	r2, #0
  pHandle->BufferFilled = 0U;
 8004d62:	3167      	adds	r1, #103	; 0x67
  pHandle->ElPeriodSum = 0;
 8004d64:	6543      	str	r3, [r0, #84]	; 0x54
  pHandle->_Super.hMecAccelUnitP = 0;
 8004d66:	8243      	strh	r3, [r0, #18]
  pHandle->BufferFilled = 0U;
 8004d68:	5442      	strb	r2, [r0, r1]
  pHandle->CompSpeed = 0;
 8004d6a:	3155      	adds	r1, #85	; 0x55
 8004d6c:	5243      	strh	r3, [r0, r1]

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0U;
 8004d6e:	3906      	subs	r1, #6
 8004d70:	5243      	strh	r3, [r0, r1]
  pHandle->_Super.hElAngle  = 0;
  
  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 8004d72:	7002      	strb	r2, [r0, #0]
  pHandle->IsLoopClosed=false;
  pHandle->IsAlgorithmConverged = false;
 8004d74:	2264      	movs	r2, #100	; 0x64
  pHandle->_Super.hElAngle  = 0;
 8004d76:	8083      	strh	r3, [r0, #4]
  pHandle->IsAlgorithmConverged = false;
 8004d78:	5283      	strh	r3, [r0, r2]
}
 8004d7a:	bd10      	pop	{r4, pc}
 8004d7c:	40020008 	.word	0x40020008
 8004d80:	7fffffe8 	.word	0x7fffffe8
 8004d84:	40012400 	.word	0x40012400
 8004d88:	40020000 	.word	0x40020000

08004d8c <BADC_Start>:
 * @param  step: current step of the six-step sequence
 */
__weak void BADC_Start(Bemf_ADC_Handle_t *pHandle, uint8_t step)
{

  pHandle->ADCRegularLocked=true;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2350      	movs	r3, #80	; 0x50
{
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(ADCx->CR,
 8004d92:	2610      	movs	r6, #16
 8004d94:	2702      	movs	r7, #2
  pHandle->ADCRegularLocked=true;
 8004d96:	54c2      	strb	r2, [r0, r3]
 8004d98:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <BADC_Start+0x108>)
 8004d9a:	4c3f      	ldr	r4, [pc, #252]	; (8004e98 <BADC_Start+0x10c>)
 8004d9c:	689d      	ldr	r5, [r3, #8]
 8004d9e:	4025      	ands	r5, r4
 8004da0:	4335      	orrs	r5, r6
 8004da2:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004da4:	68dd      	ldr	r5, [r3, #12]
 8004da6:	3e0d      	subs	r6, #13
 8004da8:	4335      	orrs	r5, r6
 8004daa:	60dd      	str	r5, [r3, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004dac:	4d3b      	ldr	r5, [pc, #236]	; (8004e9c <BADC_Start+0x110>)
 8004dae:	682e      	ldr	r6, [r5, #0]
 8004db0:	4316      	orrs	r6, r2
 8004db2:	602e      	str	r6, [r5, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004db4:	4e3a      	ldr	r6, [pc, #232]	; (8004ea0 <BADC_Start+0x114>)
 8004db6:	6077      	str	r7, [r6, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004db8:	682e      	ldr	r6, [r5, #0]
 8004dba:	433e      	orrs	r6, r7
 8004dbc:	602e      	str	r6, [r5, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004dbe:	68de      	ldr	r6, [r3, #12]
 8004dc0:	4d38      	ldr	r5, [pc, #224]	; (8004ea4 <BADC_Start+0x118>)
 8004dc2:	402e      	ands	r6, r5
 8004dc4:	2580      	movs	r5, #128	; 0x80
 8004dc6:	00ed      	lsls	r5, r5, #3
 8004dc8:	4335      	orrs	r5, r6
 8004dca:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8004dcc:	68de      	ldr	r6, [r3, #12]
 8004dce:	4d36      	ldr	r5, [pc, #216]	; (8004ea8 <BADC_Start+0x11c>)
 8004dd0:	402e      	ands	r6, r5
 8004dd2:	2580      	movs	r5, #128	; 0x80
 8004dd4:	012d      	lsls	r5, r5, #4
 8004dd6:	4335      	orrs	r5, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004dd8:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8004dda:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004ddc:	695d      	ldr	r5, [r3, #20]
 8004dde:	43b5      	bics	r5, r6
 8004de0:	615d      	str	r5, [r3, #20]

/* enable ADC source trigger */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  LL_ADC_REG_SetTriggerEdge (ADC1, LL_ADC_REG_TRIG_EXT_FALLING);
  LL_ADC_SetSamplingTimeCommonChannels (ADC1,  LL_ADC_SAMPLINGTIME_1CYCLE_5 );
  switch (step)
 8004de2:	2905      	cmp	r1, #5
 8004de4:	d822      	bhi.n	8004e2c <BADC_Start+0xa0>
 8004de6:	408a      	lsls	r2, r1
 8004de8:	2124      	movs	r1, #36	; 0x24
 8004dea:	4211      	tst	r1, r2
 8004dec:	d140      	bne.n	8004e70 <BADC_Start+0xe4>
 8004dee:	3912      	subs	r1, #18
 8004df0:	4211      	tst	r1, r2
 8004df2:	d123      	bne.n	8004e3c <BADC_Start+0xb0>
 8004df4:	3909      	subs	r1, #9
 8004df6:	4211      	tst	r1, r2
 8004df8:	d018      	beq.n	8004e2c <BADC_Start+0xa0>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004dfa:	689a      	ldr	r2, [r3, #8]
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @param  Phase: Floating phase for bemf acquisition
  */
void BADC_SelectAdcChannel(Bemf_ADC_Handle_t * pHandle, uint8_t Phase)
{
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8004dfc:	0752      	lsls	r2, r2, #29
 8004dfe:	d50b      	bpl.n	8004e18 <BADC_Start+0x8c>
  MODIFY_REG(ADCx->CR,
 8004e00:	2110      	movs	r1, #16
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e02:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CR,
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	4022      	ands	r2, r4
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004e0c:	689a      	ldr	r2, [r3, #8]
  {
    LL_ADC_REG_StopConversion(ADC1);
    while(LL_ADC_REG_IsStopConversionOngoing(ADC1));
 8004e0e:	4211      	tst	r1, r2
 8004e10:	d1fc      	bne.n	8004e0c <BADC_Start+0x80>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e12:	689a      	ldr	r2, [r3, #8]
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8004e14:	4215      	tst	r5, r2
 8004e16:	d1f5      	bne.n	8004e04 <BADC_Start+0x78>
  }
	/* Sampling time configuration */

	/* Regular sequence configuration */
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8004e18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e1a:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	019b      	lsls	r3, r3, #6
 8004e20:	4093      	lsls	r3, r2
 8004e22:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <BADC_Start+0x108>)
 8004e24:	0b5b      	lsrs	r3, r3, #13
 8004e26:	6293      	str	r3, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004e28:	2304      	movs	r3, #4
 8004e2a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <BADC_Start+0x108>)
 8004e2e:	491a      	ldr	r1, [pc, #104]	; (8004e98 <BADC_Start+0x10c>)
 8004e30:	6893      	ldr	r3, [r2, #8]
 8004e32:	400b      	ands	r3, r1
 8004e34:	2104      	movs	r1, #4
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6093      	str	r3, [r2, #8]
}
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e3c:	689a      	ldr	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8004e3e:	2110      	movs	r1, #16
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e40:	2504      	movs	r5, #4
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8004e42:	0752      	lsls	r2, r2, #29
 8004e44:	d509      	bpl.n	8004e5a <BADC_Start+0xce>
  MODIFY_REG(ADCx->CR,
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4022      	ands	r2, r4
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004e4e:	689a      	ldr	r2, [r3, #8]
    while(LL_ADC_REG_IsStopConversionOngoing(ADC1));
 8004e50:	4211      	tst	r1, r2
 8004e52:	d1fc      	bne.n	8004e4e <BADC_Start+0xc2>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e54:	689a      	ldr	r2, [r3, #8]
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8004e56:	4215      	tst	r5, r2
 8004e58:	d1f5      	bne.n	8004e46 <BADC_Start+0xba>
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8004e5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e5c:	699a      	ldr	r2, [r3, #24]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	4093      	lsls	r3, r2
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <BADC_Start+0x108>)
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	6293      	str	r3, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004e6a:	2304      	movs	r3, #4
 8004e6c:	6013      	str	r3, [r2, #0]

  LL_ADC_ClearFlag_EOC(ADC1);
}
 8004e6e:	e7dd      	b.n	8004e2c <BADC_Start+0xa0>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e70:	689a      	ldr	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8004e72:	2110      	movs	r1, #16
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e74:	2504      	movs	r5, #4
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8004e76:	0752      	lsls	r2, r2, #29
 8004e78:	d509      	bpl.n	8004e8e <BADC_Start+0x102>
  MODIFY_REG(ADCx->CR,
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	4022      	ands	r2, r4
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004e82:	689a      	ldr	r2, [r3, #8]
    while(LL_ADC_REG_IsStopConversionOngoing(ADC1));
 8004e84:	4211      	tst	r1, r2
 8004e86:	d1fc      	bne.n	8004e82 <BADC_Start+0xf6>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004e88:	689a      	ldr	r2, [r3, #8]
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8004e8a:	4215      	tst	r5, r2
 8004e8c:	d1f5      	bne.n	8004e7a <BADC_Start+0xee>
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8004e8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	e7e4      	b.n	8004e5e <BADC_Start+0xd2>
 8004e94:	40012400 	.word	0x40012400
 8004e98:	7fffffe8 	.word	0x7fffffe8
 8004e9c:	40020008 	.word	0x40020008
 8004ea0:	40020000 	.word	0x40020000
 8004ea4:	fffff23f 	.word	0xfffff23f
 8004ea8:	fffff3ff 	.word	0xfffff3ff

08004eac <BADC_Stop>:
  MODIFY_REG(ADCx->CR,
 8004eac:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <BADC_Stop+0x1c>)
 8004eae:	4907      	ldr	r1, [pc, #28]	; (8004ecc <BADC_Stop+0x20>)
 8004eb0:	6893      	ldr	r3, [r2, #8]
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	2110      	movs	r1, #16
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	6093      	str	r3, [r2, #8]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <BADC_Stop+0x24>)
 8004ebc:	390e      	subs	r1, #14
 8004ebe:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	6013      	str	r3, [r2, #0]
}
 8004ec4:	4770      	bx	lr
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	40012400 	.word	0x40012400
 8004ecc:	7fffffe8 	.word	0x7fffffe8
 8004ed0:	40020000 	.word	0x40020000

08004ed4 <BADC_SpeedMeasureOn>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004ed4:	2202      	movs	r2, #2
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ed6:	2101      	movs	r1, #1
  LL_TIM_ClearFlag_UPDATE(pHandle->pParams_str->LfTim);
 8004ed8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004eda:	4252      	negs	r2, r2
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	60da      	str	r2, [r3, #12]
}
 8004ee6:	4770      	bx	lr

08004ee8 <BADC_SpeedMeasureOff>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ee8:	2101      	movs	r1, #1
  LL_TIM_DisableIT_UPDATE(pHandle->pParams_str->LfTim);
 8004eea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68d3      	ldr	r3, [r2, #12]
 8004ef0:	438b      	bics	r3, r1
 8004ef2:	60d3      	str	r3, [r2, #12]
}
 8004ef4:	4770      	bx	lr
 8004ef6:	46c0      	nop			; (mov r8, r8)

08004ef8 <BADC_SetSamplingPoint>:
{
 8004ef8:	b510      	push	{r4, lr}
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8004efa:	2428      	movs	r4, #40	; 0x28
 8004efc:	5d12      	ldrb	r2, [r2, r4]
{
 8004efe:	0003      	movs	r3, r0
 8004f00:	0008      	movs	r0, r1
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8004f02:	2a03      	cmp	r2, #3
 8004f04:	d011      	beq.n	8004f2a <BADC_SetSamplingPoint+0x32>
      pHandle->IsOnSensingEnabled=false;
 8004f06:	223a      	movs	r2, #58	; 0x3a
 8004f08:	2100      	movs	r1, #0
 8004f0a:	5499      	strb	r1, [r3, r2]
      pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	322e      	adds	r2, #46	; 0x2e
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34
  if (true == pHandle->pParams_str->gpio_divider_available)  LL_GPIO_ResetOutputPin( pHandle->pParams_str->bemf_divider_port, pHandle->pParams_str->bemf_divider_pin );
 8004f12:	2420      	movs	r4, #32
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	5d1c      	ldrb	r4, [r3, r4]
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	d002      	beq.n	8004f22 <BADC_SetSamplingPoint+0x2a>
 8004f1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004f20:	628b      	str	r3, [r1, #40]	; 0x28
  PWMC_SetADCTriggerChannel( pHandlePWMC, pHandle->pSensing_Params->SamplingPoint);
 8004f22:	8891      	ldrh	r1, [r2, #4]
 8004f24:	f000 faf2 	bl	800550c <PWMC_SetADCTriggerChannel>
}
 8004f28:	bd10      	pop	{r4, pc}
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8004f2a:	3265      	adds	r2, #101	; 0x65
 8004f2c:	5c9a      	ldrb	r2, [r3, r2]
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	d1e9      	bne.n	8004f06 <BADC_SetSamplingPoint+0xe>
    if (!(pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh > pHandle->OnSensingEnThres))
 8004f32:	323a      	adds	r2, #58	; 0x3a
 8004f34:	5c99      	ldrb	r1, [r3, r2]
 8004f36:	2900      	cmp	r1, #0
 8004f38:	d005      	beq.n	8004f46 <BADC_SetSamplingPoint+0x4e>
    else if ((pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh < pHandle->OnSensingDisThres))
 8004f3a:	8b81      	ldrh	r1, [r0, #28]
 8004f3c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004f3e:	4291      	cmp	r1, r2
 8004f40:	d3e1      	bcc.n	8004f06 <BADC_SetSamplingPoint+0xe>
  PWMC_SetADCTriggerChannel( pHandlePWMC, pHandle->pSensing_Params->SamplingPoint);
 8004f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f44:	e7e5      	b.n	8004f12 <BADC_SetSamplingPoint+0x1a>
    if (!(pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh > pHandle->OnSensingEnThres))
 8004f46:	8b84      	ldrh	r4, [r0, #28]
 8004f48:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8004f4a:	428c      	cmp	r4, r1
 8004f4c:	d9f9      	bls.n	8004f42 <BADC_SetSamplingPoint+0x4a>
      pHandle->IsOnSensingEnabled=true;
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]
      pHandle->pSensing_Params = &(pHandle->Pwm_ON);
 8004f52:	001a      	movs	r2, r3
 8004f54:	3228      	adds	r2, #40	; 0x28
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34
 8004f58:	e7db      	b.n	8004f12 <BADC_SetSamplingPoint+0x1a>
 8004f5a:	46c0      	nop			; (mov r8, r8)

08004f5c <BADC_IsZcDetected>:
{
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pHandle->DemagCounter++;
 8004f5e:	22ec      	movs	r2, #236	; 0xec
  uint16_t AdcValue = pHandle->ADC1_DMA_converted[0];
 8004f60:	2352      	movs	r3, #82	; 0x52
 8004f62:	5ac5      	ldrh	r5, [r0, r3]
  pHandle->DemagCounter++;
 8004f64:	5a83      	ldrh	r3, [r0, r2]
 8004f66:	3301      	adds	r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	5283      	strh	r3, [r0, r2]
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8004f6c:	3202      	adds	r2, #2
 8004f6e:	5a82      	ldrh	r2, [r0, r2]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d20b      	bcs.n	8004f8c <BADC_IsZcDetected+0x30>
    if (pHandle->ZcDetected == false)
 8004f74:	2366      	movs	r3, #102	; 0x66
 8004f76:	5cc4      	ldrb	r4, [r0, r3]
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d107      	bne.n	8004f8c <BADC_IsZcDetected+0x30>
      switch(pHandlePWMC->Step)
 8004f7c:	3b39      	subs	r3, #57	; 0x39
 8004f7e:	5cca      	ldrb	r2, [r1, r3]
 8004f80:	2a05      	cmp	r2, #5
 8004f82:	d804      	bhi.n	8004f8e <BADC_IsZcDetected+0x32>
 8004f84:	4949      	ldr	r1, [pc, #292]	; (80050ac <BADC_IsZcDetected+0x150>)
 8004f86:	0093      	lsls	r3, r2, #2
 8004f88:	58cb      	ldr	r3, [r1, r3]
 8004f8a:	469f      	mov	pc, r3
  bool ZcDetection = false;
 8004f8c:	2400      	movs	r4, #0
}
 8004f8e:	0020      	movs	r0, r4
 8004f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(pHandle->Direction == 1)
 8004f92:	235a      	movs	r3, #90	; 0x5a
        pHandle->BemfLastValues[1] = AdcValue;
 8004f94:	8445      	strh	r5, [r0, #34]	; 0x22
        if(pHandle->Direction == 1)
 8004f96:	56c3      	ldrsb	r3, [r0, r3]
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8004f98:	6b41      	ldr	r1, [r0, #52]	; 0x34
        if(pHandle->Direction == 1)
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d064      	beq.n	8005068 <BADC_IsZcDetected+0x10c>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8004f9e:	8849      	ldrh	r1, [r1, #2]
 8004fa0:	42a9      	cmp	r1, r5
 8004fa2:	d2f3      	bcs.n	8004f8c <BADC_IsZcDetected+0x30>
 8004fa4:	4c42      	ldr	r4, [pc, #264]	; (80050b0 <BADC_IsZcDetected+0x154>)
        pHandle->MeasuredElAngle += (S16_60_PHASE_SHIFT/2) - (int16_t)((uint32_t)(pHandle->Zc2CommDelay * S16_60_PHASE_SHIFT)>>9);
 8004fa6:	2140      	movs	r1, #64	; 0x40
 8004fa8:	5a45      	ldrh	r5, [r0, r1]
 8004faa:	4941      	ldr	r1, [pc, #260]	; (80050b0 <BADC_IsZcDetected+0x154>)
 8004fac:	4369      	muls	r1, r5
 8004fae:	0a49      	lsrs	r1, r1, #9
 8004fb0:	1a61      	subs	r1, r4, r1
 8004fb2:	24bc      	movs	r4, #188	; 0xbc
 8004fb4:	5301      	strh	r1, [r0, r4]
        if (pHandle->ZcEvents > pHandle->StartUpConsistThreshold) 
 8004fb6:	2126      	movs	r1, #38	; 0x26
 8004fb8:	3c5a      	subs	r4, #90	; 0x5a
 8004fba:	5c41      	ldrb	r1, [r0, r1]
 8004fbc:	5d04      	ldrb	r4, [r0, r4]
 8004fbe:	428c      	cmp	r4, r1
 8004fc0:	d36e      	bcc.n	80050a0 <BADC_IsZcDetected+0x144>
        if (true == pHandle->IsAlgorithmConverged)
 8004fc2:	2464      	movs	r4, #100	; 0x64
 8004fc4:	5d04      	ldrb	r4, [r0, r4]
        pHandle->ZcDetected = true;
 8004fc6:	2766      	movs	r7, #102	; 0x66
 8004fc8:	2601      	movs	r6, #1
        pHandle->ZcEvents++;
 8004fca:	3101      	adds	r1, #1
        pHandle->ZcDetected = true;
 8004fcc:	55c6      	strb	r6, [r0, r7]
        pHandle->ZcEvents++;
 8004fce:	3f40      	subs	r7, #64	; 0x40
 8004fd0:	55c1      	strb	r1, [r0, r7]
        switch(pHandlePWMC->Step)
 8004fd2:	2a05      	cmp	r2, #5
 8004fd4:	d85c      	bhi.n	8005090 <BADC_IsZcDetected+0x134>
 8004fd6:	212a      	movs	r1, #42	; 0x2a
 8004fd8:	40d1      	lsrs	r1, r2
 8004fda:	420e      	tst	r6, r1
 8004fdc:	d058      	beq.n	8005090 <BADC_IsZcDetected+0x134>
            pHandle->ZC_Counter_Up = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8004fde:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004fe0:	6816      	ldr	r6, [r2, #0]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8004fe2:	6a77      	ldr	r7, [r6, #36]	; 0x24
          if(pHandle->Direction == 1)
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d058      	beq.n	800509a <BADC_IsZcDetected+0x13e>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8004fe8:	22e0      	movs	r2, #224	; 0xe0
 8004fea:	5087      	str	r7, [r0, r2]
            pHandle->ZC_Counter_Last = pHandle->ZC_Counter_Up;
 8004fec:	22e4      	movs	r2, #228	; 0xe4
 8004fee:	5087      	str	r7, [r0, r2]
        if (true == pHandle->IsAlgorithmConverged)
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	d04b      	beq.n	800508c <BADC_IsZcDetected+0x130>
          uint32_t tempReg = (uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * (pHandle->AvrElSpeedDpp * pHandle->Direction)));		  
 8004ff4:	3a30      	subs	r2, #48	; 0x30
 8004ff6:	5882      	ldr	r2, [r0, r2]
 8004ff8:	215c      	movs	r1, #92	; 0x5c
 8004ffa:	3201      	adds	r2, #1
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	5e41      	ldrsh	r1, [r0, r1]
 8005000:	4359      	muls	r1, r3
 8005002:	4663      	mov	r3, ip
 8005004:	4359      	muls	r1, r3
 8005006:	23c4      	movs	r3, #196	; 0xc4
 8005008:	58c0      	ldr	r0, [r0, r3]
 800500a:	f7fb f87d 	bl	8000108 <__udivsi3>
          LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,pHandle->ZC_Counter_Last + (((uint32_t)((pHandle->Zc2CommDelay) * tempReg)) >> 9) );
 800500e:	4345      	muls	r5, r0
 8005010:	0a6d      	lsrs	r5, r5, #9
 8005012:	19ed      	adds	r5, r5, r7
  WRITE_REG(TIMx->ARR, AutoReload);
 8005014:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 8005016:	e7ba      	b.n	8004f8e <BADC_IsZcDetected+0x32>
        if(pHandle->Direction == 1)
 8005018:	235a      	movs	r3, #90	; 0x5a
        pHandle->BemfLastValues[0] = AdcValue;
 800501a:	8405      	strh	r5, [r0, #32]
        if(pHandle->Direction == 1)
 800501c:	56c3      	ldrsb	r3, [r0, r3]
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 800501e:	6b41      	ldr	r1, [r0, #52]	; 0x34
        if(pHandle->Direction == 1)
 8005020:	2b01      	cmp	r3, #1
 8005022:	d015      	beq.n	8005050 <BADC_IsZcDetected+0xf4>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8005024:	8809      	ldrh	r1, [r1, #0]
 8005026:	42a9      	cmp	r1, r5
 8005028:	d9b0      	bls.n	8004f8c <BADC_IsZcDetected+0x30>
 800502a:	4c22      	ldr	r4, [pc, #136]	; (80050b4 <BADC_IsZcDetected+0x158>)
 800502c:	e7bb      	b.n	8004fa6 <BADC_IsZcDetected+0x4a>
        if(pHandle->Direction == 1)
 800502e:	235a      	movs	r3, #90	; 0x5a
        pHandle->BemfLastValues[2] = AdcValue;
 8005030:	8485      	strh	r5, [r0, #36]	; 0x24
        if(pHandle->Direction == 1)
 8005032:	56c3      	ldrsb	r3, [r0, r3]
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8005034:	6b41      	ldr	r1, [r0, #52]	; 0x34
        if(pHandle->Direction == 1)
 8005036:	2b01      	cmp	r3, #1
 8005038:	d022      	beq.n	8005080 <BADC_IsZcDetected+0x124>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 800503a:	8849      	ldrh	r1, [r1, #2]
 800503c:	42a9      	cmp	r1, r5
 800503e:	d2a5      	bcs.n	8004f8c <BADC_IsZcDetected+0x30>
 8005040:	4c1d      	ldr	r4, [pc, #116]	; (80050b8 <BADC_IsZcDetected+0x15c>)
 8005042:	e7b0      	b.n	8004fa6 <BADC_IsZcDetected+0x4a>
        if(pHandle->Direction == 1)
 8005044:	235a      	movs	r3, #90	; 0x5a
        pHandle->BemfLastValues[0] = AdcValue;
 8005046:	8405      	strh	r5, [r0, #32]
        if(pHandle->Direction == 1)
 8005048:	56c3      	ldrsb	r3, [r0, r3]
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 800504a:	6b41      	ldr	r1, [r0, #52]	; 0x34
        if(pHandle->Direction == 1)
 800504c:	2b01      	cmp	r3, #1
 800504e:	d0e9      	beq.n	8005024 <BADC_IsZcDetected+0xc8>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8005050:	8849      	ldrh	r1, [r1, #2]
 8005052:	42a9      	cmp	r1, r5
 8005054:	d300      	bcc.n	8005058 <BADC_IsZcDetected+0xfc>
 8005056:	e799      	b.n	8004f8c <BADC_IsZcDetected+0x30>
 8005058:	4c18      	ldr	r4, [pc, #96]	; (80050bc <BADC_IsZcDetected+0x160>)
 800505a:	e7a4      	b.n	8004fa6 <BADC_IsZcDetected+0x4a>
        if(pHandle->Direction == 1)
 800505c:	235a      	movs	r3, #90	; 0x5a
        pHandle->BemfLastValues[1] = AdcValue;
 800505e:	8445      	strh	r5, [r0, #34]	; 0x22
        if(pHandle->Direction == 1)
 8005060:	56c3      	ldrsb	r3, [r0, r3]
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8005062:	6b41      	ldr	r1, [r0, #52]	; 0x34
        if(pHandle->Direction == 1)
 8005064:	2b01      	cmp	r3, #1
 8005066:	d09a      	beq.n	8004f9e <BADC_IsZcDetected+0x42>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8005068:	8809      	ldrh	r1, [r1, #0]
 800506a:	42a9      	cmp	r1, r5
 800506c:	d800      	bhi.n	8005070 <BADC_IsZcDetected+0x114>
 800506e:	e78d      	b.n	8004f8c <BADC_IsZcDetected+0x30>
 8005070:	4c13      	ldr	r4, [pc, #76]	; (80050c0 <BADC_IsZcDetected+0x164>)
 8005072:	e798      	b.n	8004fa6 <BADC_IsZcDetected+0x4a>
        if(pHandle->Direction == 1)
 8005074:	235a      	movs	r3, #90	; 0x5a
        pHandle->BemfLastValues[2] = AdcValue;            
 8005076:	8485      	strh	r5, [r0, #36]	; 0x24
        if(pHandle->Direction == 1)
 8005078:	56c3      	ldrsb	r3, [r0, r3]
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 800507a:	6b41      	ldr	r1, [r0, #52]	; 0x34
        if(pHandle->Direction == 1)
 800507c:	2b01      	cmp	r3, #1
 800507e:	d0dc      	beq.n	800503a <BADC_IsZcDetected+0xde>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8005080:	8809      	ldrh	r1, [r1, #0]
 8005082:	42a9      	cmp	r1, r5
 8005084:	d800      	bhi.n	8005088 <BADC_IsZcDetected+0x12c>
 8005086:	e781      	b.n	8004f8c <BADC_IsZcDetected+0x30>
 8005088:	2400      	movs	r4, #0
 800508a:	e78c      	b.n	8004fa6 <BADC_IsZcDetected+0x4a>
 800508c:	2401      	movs	r4, #1
 800508e:	e77e      	b.n	8004f8e <BADC_IsZcDetected+0x32>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8005090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005092:	6816      	ldr	r6, [r2, #0]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8005094:	6a77      	ldr	r7, [r6, #36]	; 0x24
          if(pHandle->Direction == 1)
 8005096:	2b01      	cmp	r3, #1
 8005098:	d0a6      	beq.n	8004fe8 <BADC_IsZcDetected+0x8c>
            pHandle->ZC_Counter_Up = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 800509a:	22dc      	movs	r2, #220	; 0xdc
 800509c:	5087      	str	r7, [r0, r2]
            pHandle->ZC_Counter_Last = pHandle->ZC_Counter_Up;
 800509e:	e7a5      	b.n	8004fec <BADC_IsZcDetected+0x90>
          pHandle->IsAlgorithmConverged = true;
 80050a0:	2464      	movs	r4, #100	; 0x64
 80050a2:	2601      	movs	r6, #1
 80050a4:	5506      	strb	r6, [r0, r4]
 80050a6:	3c63      	subs	r4, #99	; 0x63
 80050a8:	e78d      	b.n	8004fc6 <BADC_IsZcDetected+0x6a>
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	0800687c 	.word	0x0800687c
 80050b0:	00002aaa 	.word	0x00002aaa
 80050b4:	00005554 	.word	0x00005554
 80050b8:	00007fff 	.word	0x00007fff
 80050bc:	0000d556 	.word	0x0000d556
 80050c0:	0000aaab 	.word	0x0000aaab

080050c4 <BADC_CalcAvrgMecSpeedUnit>:
{
 80050c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c6:	46c6      	mov	lr, r8
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80050c8:	235c      	movs	r3, #92	; 0x5c
{
 80050ca:	b500      	push	{lr}
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80050cc:	5ec6      	ldrsh	r6, [r0, r3]
{
 80050ce:	0004      	movs	r4, r0
 80050d0:	000d      	movs	r5, r1
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80050d2:	81c6      	strh	r6, [r0, #14]
  if (0 ==  pHandle->AvrElSpeedDpp)
 80050d4:	2e00      	cmp	r6, #0
 80050d6:	d01b      	beq.n	8005110 <BADC_CalcAvrgMecSpeedUnit+0x4c>
    if (pHandle->AvrElSpeedDpp != MAX_PSEUDO_SPEED)
 80050d8:	4b54      	ldr	r3, [pc, #336]	; (800522c <BADC_CalcAvrgMecSpeedUnit+0x168>)
 80050da:	429e      	cmp	r6, r3
 80050dc:	d100      	bne.n	80050e0 <BADC_CalcAvrgMecSpeedUnit+0x1c>
 80050de:	e0a1      	b.n	8005224 <BADC_CalcAvrgMecSpeedUnit+0x160>
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80050e0:	23bc      	movs	r3, #188	; 0xbc
 80050e2:	5ac0      	ldrh	r0, [r0, r3]
 80050e4:	88a3      	ldrh	r3, [r4, #4]
 80050e6:	1ac0      	subs	r0, r0, r3
 80050e8:	23ba      	movs	r3, #186	; 0xba
 80050ea:	b200      	sxth	r0, r0
 80050ec:	52e0      	strh	r0, [r4, r3]
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80050ee:	331a      	adds	r3, #26
 80050f0:	5ae1      	ldrh	r1, [r4, r3]
 80050f2:	f7fb f893 	bl	800021c <__divsi3>
 80050f6:	23be      	movs	r3, #190	; 0xbe
 80050f8:	52e0      	strh	r0, [r4, r3]
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80050fa:	8b63      	ldrh	r3, [r4, #26]
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80050fc:	69e1      	ldr	r1, [r4, #28]
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80050fe:	4373      	muls	r3, r6
                       * (int32_t)SPEED_UNIT )
 8005100:	0098      	lsls	r0, r3, #2
 8005102:	18c0      	adds	r0, r0, r3
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8005104:	7863      	ldrb	r3, [r4, #1]
                       * (int32_t)SPEED_UNIT )
 8005106:	0040      	lsls	r0, r0, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8005108:	4359      	muls	r1, r3
 800510a:	f7fb f887 	bl	800021c <__divsi3>
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800510e:	b206      	sxth	r6, r0
  bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8005110:	0029      	movs	r1, r5
    *pMecSpeedUnit = 0;
 8005112:	802e      	strh	r6, [r5, #0]
  bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8005114:	0020      	movs	r0, r4
 8005116:	f001 f82b 	bl	8006170 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 800511a:	2200      	movs	r2, #0
 800511c:	5eab      	ldrsh	r3, [r5, r2]
void BADC_CalcAvrgElSpeedDpp( Bemf_ADC_Handle_t * pHandle )
{
  uint32_t wCaptBuf;
  
  /* used to validate the average speed measurement */
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 800511e:	214a      	movs	r1, #74	; 0x4a
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 8005120:	81a3      	strh	r3, [r4, #12]
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8005122:	2369      	movs	r3, #105	; 0x69
 8005124:	5c65      	ldrb	r5, [r4, r1]
 8005126:	5ce2      	ldrb	r2, [r4, r3]
  bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8005128:	0006      	movs	r6, r0
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 800512a:	42aa      	cmp	r2, r5
 800512c:	d203      	bcs.n	8005136 <BADC_CalcAvrgMecSpeedUnit+0x72>
  {
    pHandle->BufferFilled++;
 800512e:	5ce2      	ldrb	r2, [r4, r3]
 8005130:	3201      	adds	r2, #1
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	54e2      	strb	r2, [r4, r3]
  }
  else
  {
    /* Nothing to do */
  }
  if (false == pHandle->IsLoopClosed)
 8005136:	2365      	movs	r3, #101	; 0x65
 8005138:	5ce7      	ldrb	r7, [r4, r3]
 800513a:	2f00      	cmp	r7, #0
 800513c:	d105      	bne.n	800514a <BADC_CalcAvrgMecSpeedUnit+0x86>
  {   
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 800513e:	3b07      	subs	r3, #7
 8005140:	5ee3      	ldrsh	r3, [r4, r3]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d147      	bne.n	80051d6 <BADC_CalcAvrgMecSpeedUnit+0x112>
 8005146:	483a      	ldr	r0, [pc, #232]	; (8005230 <BADC_CalcAvrgMecSpeedUnit+0x16c>)
 8005148:	e004      	b.n	8005154 <BADC_CalcAvrgMecSpeedUnit+0x90>
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
  }
  else
  {
    pHandle->Counter_Period =  pHandle->ZC_Counter_Last + pHandle->Last_Zc2Comm_Delay;
 800514a:	23e4      	movs	r3, #228	; 0xe4
 800514c:	58e0      	ldr	r0, [r4, r3]
 800514e:	3304      	adds	r3, #4
 8005150:	58e3      	ldr	r3, [r4, r3]
 8005152:	18c0      	adds	r0, r0, r3
 8005154:	23d8      	movs	r3, #216	; 0xd8
 8005156:	50e0      	str	r0, [r4, r3]
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8005158:	3b24      	subs	r3, #36	; 0x24
 800515a:	58e1      	ldr	r1, [r4, r3]
 800515c:	1c4b      	adds	r3, r1, #1
 800515e:	4698      	mov	r8, r3
  }
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8005160:	4641      	mov	r1, r8
  /* Filtering to fast speed... could be a glitch  ? */
  /* the MAX_PSEUDO_SPEED is temporary in the buffer, and never included in average computation*/
  if (wCaptBuf < pHandle->MinPeriod)
 8005162:	23cc      	movs	r3, #204	; 0xcc
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8005164:	4341      	muls	r1, r0
  if (wCaptBuf < pHandle->MinPeriod)
 8005166:	58e3      	ldr	r3, [r4, r3]
 8005168:	4299      	cmp	r1, r3
 800516a:	d32c      	bcc.n	80051c6 <BADC_CalcAvrgMecSpeedUnit+0x102>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800516c:	23b8      	movs	r3, #184	; 0xb8
 800516e:	5ae3      	ldrh	r3, [r4, r3]
 8005170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	4694      	mov	ip, r2
 8005176:	44a4      	add	ip, r4
 8005178:	4662      	mov	r2, ip
 800517a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800517c:	1a80      	subs	r0, r0, r2
    if (wCaptBuf >= pHandle->MaxPeriod)
 800517e:	22c8      	movs	r2, #200	; 0xc8
 8005180:	58a2      	ldr	r2, [r4, r2]
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005182:	6560      	str	r0, [r4, #84]	; 0x54
    if (wCaptBuf >= pHandle->MaxPeriod)
 8005184:	4291      	cmp	r1, r2
 8005186:	d222      	bcs.n	80051ce <BADC_CalcAvrgMecSpeedUnit+0x10a>
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
    }
    else
    {
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)wCaptBuf ;
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8005188:	225a      	movs	r2, #90	; 0x5a
 800518a:	56a2      	ldrsb	r2, [r4, r2]
 800518c:	434a      	muls	r2, r1
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 800518e:	1880      	adds	r0, r0, r2
 8005190:	6560      	str	r0, [r4, #84]	; 0x54
 8005192:	4660      	mov	r0, ip
    }
    /* Update pointers to speed buffer */
    pHandle->SpeedFIFOIdx++;
 8005194:	3301      	adds	r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	66c2      	str	r2, [r0, #108]	; 0x6c
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
    {
      pHandle->SpeedFIFOIdx = 0U;
 800519a:	1b5a      	subs	r2, r3, r5
 800519c:	1e50      	subs	r0, r2, #1
 800519e:	4182      	sbcs	r2, r0
 80051a0:	4252      	negs	r2, r2
 80051a2:	4013      	ands	r3, r2
 80051a4:	22b8      	movs	r2, #184	; 0xb8
 80051a6:	52a3      	strh	r3, [r4, r2]
    }
    if (((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U)) 
 80051a8:	2369      	movs	r3, #105	; 0x69
 80051aa:	5ce3      	ldrb	r3, [r4, r3]
 80051ac:	429d      	cmp	r5, r3
 80051ae:	d91f      	bls.n	80051f0 <BADC_CalcAvrgMecSpeedUnit+0x12c>
 80051b0:	2900      	cmp	r1, #0
 80051b2:	d01d      	beq.n	80051f0 <BADC_CalcAvrgMecSpeedUnit+0x12c>
        || (false == pHandle->IsLoopClosed))
    {
      uint32_t tempReg = (pHandle->PseudoPeriodConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 80051b4:	23c4      	movs	r3, #196	; 0xc4
 80051b6:	58e0      	ldr	r0, [r4, r3]
 80051b8:	f7fa ffa6 	bl	8000108 <__udivsi3>
 80051bc:	235a      	movs	r3, #90	; 0x5a
      pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 80051be:	225c      	movs	r2, #92	; 0x5c
      uint32_t tempReg = (pHandle->PseudoPeriodConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 80051c0:	56e3      	ldrsb	r3, [r4, r3]
 80051c2:	4343      	muls	r3, r0
      pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 80051c4:	52a3      	strh	r3, [r4, r2]
}
 80051c6:	0030      	movs	r0, r6
 80051c8:	bc80      	pop	{r7}
 80051ca:	46b8      	mov	r8, r7
 80051cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 80051ce:	205a      	movs	r0, #90	; 0x5a
 80051d0:	5620      	ldrsb	r0, [r4, r0]
 80051d2:	4342      	muls	r2, r0
 80051d4:	e7dd      	b.n	8005192 <BADC_CalcAvrgMecSpeedUnit+0xce>
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 80051d6:	22b4      	movs	r2, #180	; 0xb4
 80051d8:	58a1      	ldr	r1, [r4, r2]
 80051da:	1c4a      	adds	r2, r1, #1
 80051dc:	0011      	movs	r1, r2
 80051de:	4359      	muls	r1, r3
 80051e0:	23c4      	movs	r3, #196	; 0xc4
 80051e2:	58e0      	ldr	r0, [r4, r3]
 80051e4:	4690      	mov	r8, r2
 80051e6:	f7fa ff8f 	bl	8000108 <__udivsi3>
 80051ea:	23d8      	movs	r3, #216	; 0xd8
 80051ec:	50e0      	str	r0, [r4, r3]
 80051ee:	e7b7      	b.n	8005160 <BADC_CalcAvrgMecSpeedUnit+0x9c>
        || (false == pHandle->IsLoopClosed))
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	d0df      	beq.n	80051b4 <BADC_CalcAvrgMecSpeedUnit+0xf0>
    else
    {
      /* Average speed allow to smooth the mechanical sensors misalignement */
      int32_t  tElPeriodSum = 0;
      uint8_t i;
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 80051f4:	2100      	movs	r1, #0
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d00d      	beq.n	8005216 <BADC_CalcAvrgMecSpeedUnit+0x152>
 80051fa:	0022      	movs	r2, r4
      int32_t  tElPeriodSum = 0;
 80051fc:	2000      	movs	r0, #0
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	326c      	adds	r2, #108	; 0x6c
      {
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 8005202:	ca02      	ldmia	r2!, {r1}
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8005204:	3301      	adds	r3, #1
 8005206:	b2db      	uxtb	r3, r3
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 8005208:	1840      	adds	r0, r0, r1
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 800520a:	429d      	cmp	r5, r3
 800520c:	d1f9      	bne.n	8005202 <BADC_CalcAvrgMecSpeedUnit+0x13e>
      }             
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
                                               (tElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 800520e:	0029      	movs	r1, r5
 8005210:	f7fb f804 	bl	800021c <__divsi3>
 8005214:	0001      	movs	r1, r0
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
 8005216:	23c4      	movs	r3, #196	; 0xc4
 8005218:	58e0      	ldr	r0, [r4, r3]
 800521a:	f7fa ffff 	bl	800021c <__divsi3>
 800521e:	235c      	movs	r3, #92	; 0x5c
 8005220:	52e0      	strh	r0, [r4, r3]
 8005222:	e7d0      	b.n	80051c6 <BADC_CalcAvrgMecSpeedUnit+0x102>
      *pMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8005224:	23c0      	movs	r3, #192	; 0xc0
 8005226:	5ec6      	ldrsh	r6, [r0, r3]
 8005228:	e772      	b.n	8005110 <BADC_CalcAvrgMecSpeedUnit+0x4c>
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	00007fff 	.word	0x00007fff
 8005230:	0000ffff 	.word	0x0000ffff

08005234 <BADC_SetDirection>:
  if (MC_NULL == pHandle)
 8005234:	2800      	cmp	r0, #0
 8005236:	d001      	beq.n	800523c <BADC_SetDirection+0x8>
    pHandle->Direction = direction;
 8005238:	235a      	movs	r3, #90	; 0x5a
 800523a:	54c1      	strb	r1, [r0, r3]
}
 800523c:	4770      	bx	lr
 800523e:	46c0      	nop			; (mov r8, r8)

08005240 <BADC_IsObserverConverged>:
  return pHandle->IsAlgorithmConverged;
 8005240:	2364      	movs	r3, #100	; 0x64
 8005242:	5cc0      	ldrb	r0, [r0, r3]
}
 8005244:	4770      	bx	lr
 8005246:	46c0      	nop			; (mov r8, r8)

08005248 <BADC_CalcElAngle>:
{
 8005248:	b510      	push	{r4, lr}
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 800524a:	210e      	movs	r1, #14
 800524c:	5e42      	ldrsh	r2, [r0, r1]
 800524e:	4910      	ldr	r1, [pc, #64]	; (8005290 <BADC_CalcElAngle+0x48>)
{
 8005250:	0003      	movs	r3, r0
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 8005252:	428a      	cmp	r2, r1
 8005254:	d015      	beq.n	8005282 <BADC_CalcElAngle+0x3a>
      if (false == pHandle->IsLoopClosed)
 8005256:	2165      	movs	r1, #101	; 0x65
 8005258:	5c41      	ldrb	r1, [r0, r1]
 800525a:	2900      	cmp	r1, #0
 800525c:	d003      	beq.n	8005266 <BADC_CalcElAngle+0x1e>
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;      
 800525e:	22bc      	movs	r2, #188	; 0xbc
 8005260:	5e80      	ldrsh	r0, [r0, r2]
 8005262:	8098      	strh	r0, [r3, #4]
}
 8005264:	bd10      	pop	{r4, pc}
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005266:	24bc      	movs	r4, #188	; 0xbc
 8005268:	5b19      	ldrh	r1, [r3, r4]
 800526a:	b290      	uxth	r0, r2
 800526c:	1841      	adds	r1, r0, r1
 800526e:	5319      	strh	r1, [r3, r4]
        pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005270:	2158      	movs	r1, #88	; 0x58
 8005272:	525a      	strh	r2, [r3, r1]
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005274:	889a      	ldrh	r2, [r3, #4]
 8005276:	1880      	adds	r0, r0, r2
 8005278:	22be      	movs	r2, #190	; 0xbe
 800527a:	5a9a      	ldrh	r2, [r3, r2]
 800527c:	1880      	adds	r0, r0, r2
 800527e:	b200      	sxth	r0, r0
 8005280:	e7ef      	b.n	8005262 <BADC_CalcElAngle+0x1a>
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8005282:	2258      	movs	r2, #88	; 0x58
 8005284:	8880      	ldrh	r0, [r0, #4]
 8005286:	5a9a      	ldrh	r2, [r3, r2]
 8005288:	1880      	adds	r0, r0, r2
 800528a:	b200      	sxth	r0, r0
 800528c:	e7e9      	b.n	8005262 <BADC_CalcElAngle+0x1a>
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	00007fff 	.word	0x00007fff

08005294 <BADC_StepChangeEvent>:
  * @param  hElSpeedDpp: Mechanical speed imposed by virtual speed component
  * @param  pHandlePWMC: handler of the current instance of the PWMC component
  */
void BADC_StepChangeEvent(Bemf_ADC_Handle_t * pHandle, int16_t hElSpeedDpp, PWMC_Handle_t *pHandlePWMC)
{
  pHandle->DemagCounter = 0;
 8005294:	23ec      	movs	r3, #236	; 0xec
 8005296:	2200      	movs	r2, #0
{
 8005298:	b570      	push	{r4, r5, r6, lr}
  pHandle->DemagCounter = 0;
 800529a:	52c2      	strh	r2, [r0, r3]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800529c:	4a27      	ldr	r2, [pc, #156]	; (800533c <BADC_StepChangeEvent+0xa8>)
{
 800529e:	0004      	movs	r4, r0
 80052a0:	6893      	ldr	r3, [r2, #8]
 80052a2:	000d      	movs	r5, r1
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 80052a4:	075b      	lsls	r3, r3, #29
 80052a6:	d50c      	bpl.n	80052c2 <BADC_StepChangeEvent+0x2e>
  MODIFY_REG(ADCx->CR,
 80052a8:	2110      	movs	r1, #16
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80052aa:	2004      	movs	r0, #4
  MODIFY_REG(ADCx->CR,
 80052ac:	4e24      	ldr	r6, [pc, #144]	; (8005340 <BADC_StepChangeEvent+0xac>)
 80052ae:	6893      	ldr	r3, [r2, #8]
 80052b0:	4033      	ands	r3, r6
 80052b2:	430b      	orrs	r3, r1
 80052b4:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 80052b6:	6893      	ldr	r3, [r2, #8]
  {
    LL_ADC_REG_StopConversion(ADC1);
    while(LL_ADC_REG_IsStopConversionOngoing(ADC1));
 80052b8:	4219      	tst	r1, r3
 80052ba:	d1fc      	bne.n	80052b6 <BADC_StepChangeEvent+0x22>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80052bc:	6893      	ldr	r3, [r2, #8]
  while (LL_ADC_REG_IsConversionOngoing(ADC1))
 80052be:	4218      	tst	r0, r3
 80052c0:	d1f5      	bne.n	80052ae <BADC_StepChangeEvent+0x1a>
  }
  BADC_Stop(pHandle);
 80052c2:	0020      	movs	r0, r4
 80052c4:	f7ff fdf2 	bl	8004eac <BADC_Stop>
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 80052c8:	22e4      	movs	r2, #228	; 0xe4
 80052ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052cc:	58a2      	ldr	r2, [r4, r2]
 80052ce:	681e      	ldr	r6, [r3, #0]
  return (uint32_t)(READ_REG(TIMx->ARR));
 80052d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	22e8      	movs	r2, #232	; 0xe8
 80052d6:	50a3      	str	r3, [r4, r2]
  if (false == pHandle->IsLoopClosed)
 80052d8:	2365      	movs	r3, #101	; 0x65
 80052da:	5ce3      	ldrb	r3, [r4, r3]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10d      	bne.n	80052fc <BADC_StepChangeEvent+0x68>
  {
    if (hElSpeedDpp < 0)
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	db08      	blt.n	80052f6 <BADC_StepChangeEvent+0x62>
 80052e4:	235e      	movs	r3, #94	; 0x5e
    }
    else
    {
      pHandle->VirtualElSpeedDpp = hElSpeedDpp;
    }
    pHandle->ZcDetected = false;
 80052e6:	2200      	movs	r2, #0
 80052e8:	52e5      	strh	r5, [r4, r3]
 80052ea:	3308      	adds	r3, #8
 80052ec:	54e2      	strb	r2, [r4, r3]
    else
    {
      pHandle->ZcDetected = false;
    }
  }
  pHandle->StepUpdate = true;
 80052ee:	2367      	movs	r3, #103	; 0x67
 80052f0:	2201      	movs	r2, #1
 80052f2:	54e2      	strb	r2, [r4, r3]
}
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->VirtualElSpeedDpp = - hElSpeedDpp;
 80052f6:	426d      	negs	r5, r5
 80052f8:	b22d      	sxth	r5, r5
 80052fa:	e7f3      	b.n	80052e4 <BADC_StepChangeEvent+0x50>
    if(pHandle->Direction == -1)
 80052fc:	235a      	movs	r3, #90	; 0x5a
 80052fe:	56e3      	ldrsb	r3, [r4, r3]
 8005300:	3301      	adds	r3, #1
 8005302:	425a      	negs	r2, r3
 8005304:	4153      	adcs	r3, r2
 8005306:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <BADC_StepChangeEvent+0xb0>)
 8005308:	425b      	negs	r3, r3
 800530a:	4013      	ands	r3, r2
 800530c:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <BADC_StepChangeEvent+0xb4>)
 800530e:	4694      	mov	ip, r2
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8005310:	22bc      	movs	r2, #188	; 0xbc
 8005312:	5aa1      	ldrh	r1, [r4, r2]
    if(pHandle->Direction == -1)
 8005314:	4463      	add	r3, ip
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8005316:	185b      	adds	r3, r3, r1
 8005318:	52a3      	strh	r3, [r4, r2]
    if ( false == pHandle->ZcDetected)
 800531a:	2366      	movs	r3, #102	; 0x66
 800531c:	5ce2      	ldrb	r2, [r4, r3]
 800531e:	2a00      	cmp	r2, #0
 8005320:	d108      	bne.n	8005334 <BADC_StepChangeEvent+0xa0>
 8005322:	6af3      	ldr	r3, [r6, #44]	; 0x2c
      LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) * 120 / 100);
 8005324:	2164      	movs	r1, #100	; 0x64
 8005326:	0118      	lsls	r0, r3, #4
 8005328:	1ac0      	subs	r0, r0, r3
 800532a:	00c0      	lsls	r0, r0, #3
 800532c:	f7fa feec 	bl	8000108 <__udivsi3>
  WRITE_REG(TIMx->ARR, AutoReload);
 8005330:	62f0      	str	r0, [r6, #44]	; 0x2c
}
 8005332:	e7dc      	b.n	80052ee <BADC_StepChangeEvent+0x5a>
      pHandle->ZcDetected = false;
 8005334:	2200      	movs	r2, #0
 8005336:	54e2      	strb	r2, [r4, r3]
 8005338:	e7d9      	b.n	80052ee <BADC_StepChangeEvent+0x5a>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	40012400 	.word	0x40012400
 8005340:	7fffffe8 	.word	0x7fffffe8
 8005344:	0000aaac 	.word	0x0000aaac
 8005348:	00002aaa 	.word	0x00002aaa

0800534c <BADC_CalcRevUpDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRevUpDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800534c:	235e      	movs	r3, #94	; 0x5e
{
 800534e:	b510      	push	{r4, lr}
 8005350:	0004      	movs	r4, r0
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8005352:	5ec2      	ldrsh	r2, [r0, r3]
 8005354:	8b43      	ldrh	r3, [r0, #26]
                       * (int32_t)SPEED_UNIT )
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 8005356:	69e1      	ldr	r1, [r4, #28]
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8005358:	4353      	muls	r3, r2
                       * (int32_t)SPEED_UNIT )
 800535a:	0098      	lsls	r0, r3, #2
 800535c:	18c0      	adds	r0, r0, r3
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 800535e:	7863      	ldrb	r3, [r4, #1]
                       * (int32_t)SPEED_UNIT )
 8005360:	0040      	lsls	r0, r0, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 8005362:	4359      	muls	r1, r3
 8005364:	f7fa ff5a 	bl	800021c <__divsi3>
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8005368:	b201      	sxth	r1, r0
  if (hSpeed == 0)
 800536a:	2900      	cmp	r1, #0
 800536c:	d104      	bne.n	8005378 <BADC_CalcRevUpDemagTime+0x2c>
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;;
 800536e:	23f6      	movs	r3, #246	; 0xf6
 8005370:	5ae0      	ldrh	r0, [r4, r3]
  }	  
  else
  {
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);		
  }
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8005372:	23ee      	movs	r3, #238	; 0xee
 8005374:	52e0      	strh	r0, [r4, r3]
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
  }  
}
 8005376:	bd10      	pop	{r4, pc}
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);		
 8005378:	23f2      	movs	r3, #242	; 0xf2
 800537a:	5ae0      	ldrh	r0, [r4, r3]
 800537c:	f7fa ff4e 	bl	800021c <__divsi3>
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;;
 8005380:	23f6      	movs	r3, #246	; 0xf6
 8005382:	5ae3      	ldrh	r3, [r4, r3]
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);		
 8005384:	b280      	uxth	r0, r0
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8005386:	4298      	cmp	r0, r3
 8005388:	d2f3      	bcs.n	8005372 <BADC_CalcRevUpDemagTime+0x26>
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 800538a:	22ee      	movs	r2, #238	; 0xee
 800538c:	52a3      	strh	r3, [r4, r2]
}
 800538e:	e7f2      	b.n	8005376 <BADC_CalcRevUpDemagTime+0x2a>

08005390 <BADC_CalcRunDemagTime>:
  * @brief  Calculates and stores in the corresponding variable the demagnetization 
  *         time in closed loop operation  
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRunDemagTime(Bemf_ADC_Handle_t *pHandle)
{
 8005390:	b510      	push	{r4, lr}
  int16_t hSpeed;
  hSpeed = pHandle->_Super.hAvrMecSpeedUnit;
 8005392:	230c      	movs	r3, #12
 8005394:	5ec1      	ldrsh	r1, [r0, r3]
{
 8005396:	0004      	movs	r4, r0
  if (hSpeed < 0) hSpeed = - hSpeed; 
 8005398:	2900      	cmp	r1, #0
 800539a:	da01      	bge.n	80053a0 <BADC_CalcRunDemagTime+0x10>
 800539c:	4249      	negs	r1, r1
 800539e:	b209      	sxth	r1, r1
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 80053a0:	23f0      	movs	r3, #240	; 0xf0
 80053a2:	5ae3      	ldrh	r3, [r4, r3]
 80053a4:	4299      	cmp	r1, r3
 80053a6:	da0c      	bge.n	80053c2 <BADC_CalcRunDemagTime+0x32>
  {   
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
 80053a8:	23f4      	movs	r3, #244	; 0xf4
 80053aa:	5ae0      	ldrh	r0, [r4, r3]
 80053ac:	f7fa ff36 	bl	800021c <__divsi3>
 80053b0:	23ee      	movs	r3, #238	; 0xee
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 80053b2:	22f6      	movs	r2, #246	; 0xf6
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
 80053b4:	b280      	uxth	r0, r0
 80053b6:	52e0      	strh	r0, [r4, r3]
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 80053b8:	5aa2      	ldrh	r2, [r4, r2]
 80053ba:	4290      	cmp	r0, r2
 80053bc:	d200      	bcs.n	80053c0 <BADC_CalcRunDemagTime+0x30>
      pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
    }   
  } 
  else
  {   
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 80053be:	52e2      	strh	r2, [r4, r3]
  }     
}
 80053c0:	bd10      	pop	{r4, pc}
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 80053c2:	23f6      	movs	r3, #246	; 0xf6
 80053c4:	5ae2      	ldrh	r2, [r4, r3]
 80053c6:	3b08      	subs	r3, #8
 80053c8:	52e2      	strh	r2, [r4, r3]
 80053ca:	e7f9      	b.n	80053c0 <BADC_CalcRunDemagTime+0x30>

080053cc <BADC_SetLoopClosed>:
  *         virtual speed sensor transition is ended.  
  * @param  pHandle: handler of the current instance of the STO component
  */
void BADC_SetLoopClosed(Bemf_ADC_Handle_t *pHandle)
{
  pHandle->IsLoopClosed=true;
 80053cc:	2365      	movs	r3, #101	; 0x65
 80053ce:	2201      	movs	r2, #1
 80053d0:	54c2      	strb	r2, [r0, r3]
}
 80053d2:	4770      	bx	lr

080053d4 <BADC_ClearStepUpdate>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @retval bool: step update request
  */
bool BADC_ClearStepUpdate(Bemf_ADC_Handle_t *pHandle)
{ 
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 80053d4:	4908      	ldr	r1, [pc, #32]	; (80053f8 <BADC_ClearStepUpdate+0x24>)
 80053d6:	6e42      	ldr	r2, [r0, #100]	; 0x64
{ 
 80053d8:	0003      	movs	r3, r0
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 80053da:	400a      	ands	r2, r1
 80053dc:	4907      	ldr	r1, [pc, #28]	; (80053fc <BADC_ClearStepUpdate+0x28>)
 80053de:	428a      	cmp	r2, r1
 80053e0:	d007      	beq.n	80053f2 <BADC_ClearStepUpdate+0x1e>
 80053e2:	2265      	movs	r2, #101	; 0x65
 80053e4:	5c80      	ldrb	r0, [r0, r2]
 80053e6:	3a64      	subs	r2, #100	; 0x64
 80053e8:	4050      	eors	r0, r2
  pHandle->StepUpdate = false;
 80053ea:	2267      	movs	r2, #103	; 0x67
 80053ec:	2100      	movs	r1, #0
 80053ee:	5499      	strb	r1, [r3, r2]
  return retValue;
}
 80053f0:	4770      	bx	lr
 80053f2:	2001      	movs	r0, #1
 80053f4:	e7f9      	b.n	80053ea <BADC_ClearStepUpdate+0x16>
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	ff00ff00 	.word	0xff00ff00
 80053fc:	01000100 	.word	0x01000100

08005400 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005404:	4770      	bx	lr
 8005406:	46c0      	nop			; (mov r8, r8)

08005408 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8005408:	7803      	ldrb	r3, [r0, #0]
{
 800540a:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <NTC_Init+0x12>
      pHandle->hFaultState = MC_NO_ERROR;
 8005410:	2300      	movs	r3, #0
 8005412:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005414:	8883      	ldrh	r3, [r0, #4]
 8005416:	8043      	strh	r3, [r0, #2]
}
 8005418:	bd10      	pop	{r4, pc}
      NTC_Clear(pHandle);
 800541a:	f7ff fff1 	bl	8005400 <NTC_Clear>
 800541e:	e7fb      	b.n	8005418 <NTC_Init+0x10>

08005420 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8005420:	7803      	ldrb	r3, [r0, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 8005426:	6942      	ldr	r2, [r0, #20]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8005428:	8843      	ldrh	r3, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800542a:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 800542c:	2110      	movs	r1, #16
 800542e:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005430:	8b00      	ldrh	r0, [r0, #24]
      wTemp *= pHandle->hSensitivity;
 8005432:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005434:	141b      	asrs	r3, r3, #16
 8005436:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 8005438:	b200      	sxth	r0, r0
}
 800543a:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800543c:	88c0      	ldrh	r0, [r0, #6]
 800543e:	e7fb      	b.n	8005438 <NTC_GetAvTemp_C+0x18>

08005440 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005440:	6803      	ldr	r3, [r0, #0]
 8005442:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005444:	8c03      	ldrh	r3, [r0, #32]
 8005446:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 800544c:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800544e:	4770      	bx	lr

08005450 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8005450:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005452:	4770      	bx	lr

08005454 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8005454:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005456:	4770      	bx	lr

08005458 <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 8005458:	2304      	movs	r3, #4
 800545a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800545c:	4770      	bx	lr
 800545e:	46c0      	nop			; (mov r8, r8)

08005460 <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 8005460:	2306      	movs	r3, #6
 8005462:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005464:	4770      	bx	lr
 8005466:	46c0      	nop			; (mov r8, r8)

08005468 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005468:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800546a:	4770      	bx	lr

0800546c <PID_GetKIDivisor>:
__weak uint16_t PID_GetKIDivisor(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
 800546c:	8b40      	ldrh	r0, [r0, #26]
#endif
}
 800546e:	4770      	bx	lr

08005470 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8005470:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005472:	4770      	bx	lr

08005474 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8005474:	2322      	movs	r3, #34	; 0x22
 8005476:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005478:	4770      	bx	lr
 800547a:	46c0      	nop			; (mov r8, r8)

0800547c <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 800547c:	0003      	movs	r3, r0
 800547e:	b570      	push	{r4, r5, r6, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005480:	2216      	movs	r2, #22
 8005482:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005484:	2214      	movs	r2, #20
 8005486:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005488:	2406      	movs	r4, #6
 800548a:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800548c:	2404      	movs	r4, #4
 800548e:	5f1a      	ldrsh	r2, [r3, r4]
 8005490:	2400      	movs	r4, #0
 8005492:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8005494:	2d00      	cmp	r5, #0
 8005496:	d00b      	beq.n	80054b0 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005498:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800549a:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 800549c:	1865      	adds	r5, r4, r1
 800549e:	d41b      	bmi.n	80054d8 <PI_Controller+0x5c>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 80054a0:	4021      	ands	r1, r4
 80054a2:	d424      	bmi.n	80054ee <PI_Controller+0x72>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80054a4:	68dc      	ldr	r4, [r3, #12]
 80054a6:	42ac      	cmp	r4, r5
 80054a8:	db02      	blt.n	80054b0 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80054aa:	691c      	ldr	r4, [r3, #16]
 80054ac:	42ac      	cmp	r4, r5
 80054ae:	dd1c      	ble.n	80054ea <PI_Controller+0x6e>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80054b0:	0025      	movs	r5, r4
 80054b2:	8b99      	ldrh	r1, [r3, #28]
 80054b4:	410a      	asrs	r2, r1
 80054b6:	8bd9      	ldrh	r1, [r3, #30]
 80054b8:	410d      	asrs	r5, r1
 80054ba:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80054bc:	4290      	cmp	r0, r2
 80054be:	da03      	bge.n	80054c8 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80054c0:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80054c2:	18a4      	adds	r4, r4, r2
 80054c4:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80054c8:	4296      	cmp	r6, r2
 80054ca:	dd03      	ble.n	80054d4 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 80054cc:	1ab2      	subs	r2, r6, r2
 80054ce:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 80054d0:	18a4      	adds	r4, r4, r2
 80054d2:	e7f7      	b.n	80054c4 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 80054d4:	b210      	sxth	r0, r2
 80054d6:	e7f5      	b.n	80054c4 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 80054d8:	2c00      	cmp	r4, #0
 80054da:	dde3      	ble.n	80054a4 <PI_Controller+0x28>
          if (wIntegral_Term > 0)
 80054dc:	2900      	cmp	r1, #0
 80054de:	dde1      	ble.n	80054a4 <PI_Controller+0x28>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80054e0:	68dc      	ldr	r4, [r3, #12]
 80054e2:	4904      	ldr	r1, [pc, #16]	; (80054f4 <PI_Controller+0x78>)
            wIntegral_sum_temp = INT32_MAX;
 80054e4:	0025      	movs	r5, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80054e6:	428c      	cmp	r4, r1
 80054e8:	d1e2      	bne.n	80054b0 <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80054ea:	002c      	movs	r4, r5
 80054ec:	e7e0      	b.n	80054b0 <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 80054ee:	4d02      	ldr	r5, [pc, #8]	; (80054f8 <PI_Controller+0x7c>)
 80054f0:	e7d8      	b.n	80054a4 <PI_Controller+0x28>
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	7fffffff 	.word	0x7fffffff
 80054f8:	80000001 	.word	0x80000001

080054fc <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 80054fc:	b510      	push	{r4, lr}
  pHandle->pFctSwitchOffPwm( pHandle );
 80054fe:	6803      	ldr	r3, [r0, #0]
 8005500:	4798      	blx	r3
}
 8005502:	bd10      	pop	{r4, pc}

08005504 <PWMC_SwitchOnPWM>:
/**
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
 8005504:	b510      	push	{r4, lr}
  pHandle->pFctSwitchOnPwm( pHandle );
 8005506:	6843      	ldr	r3, [r0, #4]
 8005508:	4798      	blx	r3
}
 800550a:	bd10      	pop	{r4, pc}

0800550c <PWMC_SetADCTriggerChannel>:
  * @brief  Set the ADC trigger point for bemf acquisition.
  * @param  pHandle Handle on the target instance of the PWMC component
  * @param  SamplingPoint pulse value of the timer channel used for ADC triggering
  */
__weak void PWMC_SetADCTriggerChannel( PWMC_Handle_t * pHandle, uint16_t SamplingPoint )
{
 800550c:	b510      	push	{r4, lr}
  pHandle->pFctSetADCTriggerChannel( pHandle, SamplingPoint );
 800550e:	6883      	ldr	r3, [r0, #8]
 8005510:	4798      	blx	r3
}
 8005512:	bd10      	pop	{r4, pc}

08005514 <PWMC_SetAlignFlag>:
* @param  flag to be applied in uint8_t, 1: motor is in align stage, 2: motor is not in align stage
* @retval none
*/
void PWMC_SetAlignFlag(PWMC_Handle_t *pHandle, int16_t flag)
{
  pHandle->AlignFlag = flag;
 8005514:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 8005516:	4770      	bx	lr

08005518 <PWMC_ForceFastDemagTime>:
  * @param  uint16_t: period where the fast demagnetization is applied
  * @retval none
  */
void PWMC_ForceFastDemagTime(PWMC_Handle_t * pHandle, uint16_t constFastDemagTime )
{
  pHandle->DemagCounterThreshold = constFastDemagTime;
 8005518:	85c1      	strh	r1, [r0, #46]	; 0x2e
}
 800551a:	4770      	bx	lr

0800551c <PWMC_SetFastDemagState>:
  * @param  uint8_t: 0=disable, 1=enable
  * @retval none
  */
void PWMC_SetFastDemagState(PWMC_Handle_t * pHandle, uint8_t State )
{
  if (State == 1)
 800551c:	2901      	cmp	r1, #1
 800551e:	d000      	beq.n	8005522 <PWMC_SetFastDemagState+0x6>
  {
    pHandle->ModUpdateReq = ENABLE_FAST_DEMAG;
  }
  else
  {
    pHandle->ModUpdateReq = DISABLE_FAST_DEMAG;
 8005520:	2102      	movs	r1, #2
  }    
}
 8005522:	2337      	movs	r3, #55	; 0x37
 8005524:	54c1      	strb	r1, [r0, r3]
 8005526:	4770      	bx	lr

08005528 <PWMC_SetQuasiSynchState>:
  {
    pHandle->ModUpdateReq = ENABLE_QUASI_SYNCH;
  }
  else
  {
    pHandle->ModUpdateReq = DISABLE_QUASI_SYNCH;
 8005528:	3901      	subs	r1, #1
 800552a:	1e4b      	subs	r3, r1, #1
 800552c:	4199      	sbcs	r1, r3
  }    
}
 800552e:	2337      	movs	r3, #55	; 0x37
    pHandle->ModUpdateReq = DISABLE_QUASI_SYNCH;
 8005530:	3103      	adds	r1, #3
 8005532:	54c1      	strb	r1, [r0, r3]
}
 8005534:	4770      	bx	lr
 8005536:	46c0      	nop			; (mov r8, r8)

08005538 <PWMC_GetFastDemagState>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetFastDemagState(PWMC_Handle_t * pHandle )
{
  return ((MC_NULL == pHandle->pGetFastDemagFlag) ? 0 : pHandle->pGetFastDemagFlag(pHandle));  
 8005538:	6943      	ldr	r3, [r0, #20]
{
 800553a:	b510      	push	{r4, lr}
  return ((MC_NULL == pHandle->pGetFastDemagFlag) ? 0 : pHandle->pGetFastDemagFlag(pHandle));  
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <PWMC_GetFastDemagState+0xc>
 8005540:	4798      	blx	r3
}
 8005542:	bd10      	pop	{r4, pc}
  return ((MC_NULL == pHandle->pGetFastDemagFlag) ? 0 : pHandle->pGetFastDemagFlag(pHandle));  
 8005544:	2000      	movs	r0, #0
 8005546:	e7fc      	b.n	8005542 <PWMC_GetFastDemagState+0xa>

08005548 <PWMC_GetQuasiSynchState>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetQuasiSynchState(PWMC_Handle_t * pHandle )
{
  return ((MC_NULL == pHandle->pGetQuasiSynchFlag) ? 0 : pHandle->pGetQuasiSynchFlag(pHandle));
 8005548:	6983      	ldr	r3, [r0, #24]
{
 800554a:	b510      	push	{r4, lr}
  return ((MC_NULL == pHandle->pGetQuasiSynchFlag) ? 0 : pHandle->pGetQuasiSynchFlag(pHandle));
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <PWMC_GetQuasiSynchState+0xc>
 8005550:	4798      	blx	r3
}
 8005552:	bd10      	pop	{r4, pc}
  return ((MC_NULL == pHandle->pGetQuasiSynchFlag) ? 0 : pHandle->pGetQuasiSynchFlag(pHandle));
 8005554:	2000      	movs	r0, #0
 8005556:	e7fc      	b.n	8005552 <PWMC_GetQuasiSynchState+0xa>

08005558 <PWMC_ElAngleToStep>:
 * @brief Converts the motor electrical angle to the corresponding step in the six-step sequence
 * @param pHandle pointer on the handle structure of the PWMC instance
 * @retval calculated step
 */
__weak uint8_t  PWMC_ElAngleToStep( PWMC_Handle_t * pHandle )
{
 8005558:	b510      	push	{r4, lr}
  uint8_t Step;
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <PWMC_ElAngleToStep+0x4c>)
 800555c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800555e:	4912      	ldr	r1, [pc, #72]	; (80055a8 <PWMC_ElAngleToStep+0x50>)
 8005560:	18d3      	adds	r3, r2, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	2000      	movs	r0, #0
 8005566:	428b      	cmp	r3, r1
 8005568:	d906      	bls.n	8005578 <PWMC_ElAngleToStep+0x20>
  else if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_2;
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <PWMC_ElAngleToStep+0x54>)
 800556c:	4c10      	ldr	r4, [pc, #64]	; (80055b0 <PWMC_ElAngleToStep+0x58>)
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	b29b      	uxth	r3, r3
 8005572:	3001      	adds	r0, #1
 8005574:	42a3      	cmp	r3, r4
 8005576:	d800      	bhi.n	800557a <PWMC_ElAngleToStep+0x22>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT / 2))) Step = STEP_5;
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT / 2))) Step = STEP_6;
  else {}
  return Step;
}
 8005578:	bd10      	pop	{r4, pc}
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <PWMC_ElAngleToStep+0x5c>)
 800557c:	480e      	ldr	r0, [pc, #56]	; (80055b8 <PWMC_ElAngleToStep+0x60>)
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	b29b      	uxth	r3, r3
 8005582:	4283      	cmp	r3, r0
 8005584:	d80a      	bhi.n	800559c <PWMC_ElAngleToStep+0x44>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 8005586:	42a3      	cmp	r3, r4
 8005588:	d90a      	bls.n	80055a0 <PWMC_ElAngleToStep+0x48>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT / 2))) Step = STEP_5;
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <PWMC_ElAngleToStep+0x64>)
 800558c:	469c      	mov	ip, r3
 800558e:	4462      	add	r2, ip
 8005590:	b292      	uxth	r2, r2
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT / 2))) Step = STEP_6;
 8005592:	4291      	cmp	r1, r2
 8005594:	4189      	sbcs	r1, r1
 8005596:	4249      	negs	r1, r1
 8005598:	1d08      	adds	r0, r1, #4
 800559a:	e7ed      	b.n	8005578 <PWMC_ElAngleToStep+0x20>
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 800559c:	2002      	movs	r0, #2
 800559e:	e7eb      	b.n	8005578 <PWMC_ElAngleToStep+0x20>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 80055a0:	2003      	movs	r0, #3
 80055a2:	e7e9      	b.n	8005578 <PWMC_ElAngleToStep+0x20>
 80055a4:	ffffeaab 	.word	0xffffeaab
 80055a8:	00002aa9 	.word	0x00002aa9
 80055ac:	ffffc001 	.word	0xffffc001
 80055b0:	00002aaa 	.word	0x00002aaa
 80055b4:	00006aaa 	.word	0x00006aaa
 80055b8:	0000d553 	.word	0x0000d553
 80055bc:	00003fff 	.word	0x00003fff

080055c0 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80055c0:	2233      	movs	r2, #51	; 0x33
{
 80055c2:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 80055c4:	5c81      	ldrb	r1, [r0, r2]
{
 80055c6:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 80055c8:	2900      	cmp	r1, #0
 80055ca:	d015      	beq.n	80055f8 <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80055cc:	2100      	movs	r1, #0
 80055ce:	2442      	movs	r4, #66	; 0x42
 80055d0:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80055d2:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80055d4:	2232      	movs	r2, #50	; 0x32
 80055d6:	5c99      	ldrb	r1, [r3, r2]
 80055d8:	2900      	cmp	r1, #0
 80055da:	d002      	beq.n	80055e2 <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80055dc:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 80055de:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80055e0:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80055e2:	2235      	movs	r2, #53	; 0x35
 80055e4:	5c99      	ldrb	r1, [r3, r2]
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d005      	beq.n	80055f6 <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	00c9      	lsls	r1, r1, #3
 80055ee:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 80055f0:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 80055f2:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80055f4:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80055f6:	bd10      	pop	{r4, pc}
 80055f8:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 80055fa:	2000      	movs	r0, #0
 80055fc:	e7ea      	b.n	80055d4 <PWMC_IsFaultOccurred+0x14>
 80055fe:	46c0      	nop			; (mov r8, r8)

08005600 <SixPwm_Init>:
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	4a18      	ldr	r2, [pc, #96]	; (8005664 <SixPwm_Init+0x64>)
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	6811      	ldr	r1, [r2, #0]
  * @brief  It initializes TIMx, DMA1 and NVIC
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void SixPwm_Init( PWMC_SixPwm_Handle_t * pHandle )
{
 8005608:	b530      	push	{r4, r5, lr}
 800560a:	430b      	orrs	r3, r1
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800560c:	2181      	movs	r1, #129	; 0x81
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800560e:	2480      	movs	r4, #128	; 0x80
 8005610:	6013      	str	r3, [r2, #0]
    LL_RCC_HSE_EnableCSS();

    /* Peripheral clocks enabling END ----------------------------------------*/

    /* Clear TIMx break flag. */
    LL_TIM_ClearFlag_BRK( pHandle->pParams_str->TIMx );
 8005612:	6c82      	ldr	r2, [r0, #72]	; 0x48
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005614:	4249      	negs	r1, r1
 8005616:	6813      	ldr	r3, [r2, #0]

	/* Clear the flags */
    pHandle->_Super.OverVoltageFlag = false;
    pHandle->_Super.OverCurrentFlag = false;
    pHandle->_Super.driverProtectionFlag = false;
    pHandle->FastDemagUpdated = true;
 8005618:	2501      	movs	r5, #1
 800561a:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	4321      	orrs	r1, r4
 8005620:	60d9      	str	r1, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005622:	2102      	movs	r1, #2
 8005624:	4249      	negs	r1, r1
 8005626:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	3c10      	subs	r4, #16
 800562c:	43a1      	bics	r1, r4
 800562e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8005630:	6a1c      	ldr	r4, [r3, #32]
 8005632:	490d      	ldr	r1, [pc, #52]	; (8005668 <SixPwm_Init+0x68>)
 8005634:	4321      	orrs	r1, r4
 8005636:	6219      	str	r1, [r3, #32]
    pHandle->_Super.driverProtectionFlag = false;
 8005638:	2400      	movs	r4, #0
 800563a:	2135      	movs	r1, #53	; 0x35
 800563c:	5444      	strb	r4, [r0, r1]
    pHandle->FastDemagUpdated = true;
 800563e:	3106      	adds	r1, #6
 8005640:	5445      	strb	r5, [r0, r1]
    pHandle->_Super.hElAngle = 0;
 8005642:	6304      	str	r4, [r0, #48]	; 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	4329      	orrs	r1, r5
 8005648:	6019      	str	r1, [r3, #0]
    LL_TIM_EnableCounter( pHandle->pParams_str->TIMx );
    if (pHandle->pParams_str->OCPolarity == LL_TIM_OCPOLARITY_HIGH)
 800564a:	6893      	ldr	r3, [r2, #8]
 800564c:	4259      	negs	r1, r3
 800564e:	414b      	adcs	r3, r1
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	63c3      	str	r3, [r0, #60]	; 0x3c
    } 
    else
    {
      pHandle->NegOCPolarity = LL_TIM_OCPOLARITY_HIGH;
    }
    if (pHandle->pParams_str->OCNPolarity == LL_TIM_OCPOLARITY_HIGH)
 8005654:	68d3      	ldr	r3, [r2, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <SixPwm_Init+0x60>
    {
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_LOW;
 800565a:	3302      	adds	r3, #2
 800565c:	6403      	str	r3, [r0, #64]	; 0x40
    else
    {
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_HIGH;
    } 
  }
}
 800565e:	bd30      	pop	{r4, r5, pc}
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005660:	6404      	str	r4, [r0, #64]	; 0x40
}
 8005662:	e7fc      	b.n	800565e <SixPwm_Init+0x5e>
 8005664:	40021000 	.word	0x40021000
 8005668:	00000555 	.word	0x00000555

0800566c <PWMC_SetPhaseVoltage>:
* @param  new duty cycle value.
* @retval none
*/
__weak void PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, uint16_t DutyCycle )
{
  pHandle->CntPh = DutyCycle;
 800566c:	8381      	strh	r1, [r0, #28]
}
 800566e:	4770      	bx	lr

08005670 <SixPwm_ApplyNextStep>:
*/
__weak bool SixPwm_ApplyNextStep( PWMC_SixPwm_Handle_t * pHandle )
{
  bool retVal = false;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
  if (pHandle->_Super.Step != pHandle->_Super.NextStep)
 8005670:	232c      	movs	r3, #44	; 0x2c
 8005672:	222d      	movs	r2, #45	; 0x2d
{
 8005674:	b530      	push	{r4, r5, lr}
  if (pHandle->_Super.Step != pHandle->_Super.NextStep)
 8005676:	5cc1      	ldrb	r1, [r0, r3]
 8005678:	5c83      	ldrb	r3, [r0, r2]
 800567a:	428b      	cmp	r3, r1
 800567c:	d00c      	beq.n	8005698 <SixPwm_ApplyNextStep+0x28>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800567e:	2520      	movs	r5, #32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005680:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695c      	ldr	r4, [r3, #20]
 8005686:	432c      	orrs	r4, r5
 8005688:	615c      	str	r4, [r3, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800568a:	695c      	ldr	r4, [r3, #20]
 800568c:	3d1f      	subs	r5, #31
 800568e:	432c      	orrs	r4, r5
 8005690:	615c      	str	r4, [r3, #20]
  {
    LL_TIM_GenerateEvent_COM( TIMx );
    LL_TIM_GenerateEvent_UPDATE( TIMx );
    pHandle->_Super.Step = pHandle->_Super.NextStep;
 8005692:	5481      	strb	r1, [r0, r2]
    retVal = true;
 8005694:	2001      	movs	r0, #1
  }
  return retVal;
}
 8005696:	bd30      	pop	{r4, r5, pc}
  bool retVal = false;
 8005698:	2000      	movs	r0, #0
 800569a:	e7fc      	b.n	8005696 <SixPwm_ApplyNextStep+0x26>

0800569c <SixPwm_IsFastDemagUpdated>:
* @param  pHandle Pointer on the target component instance.
* @retval bool FastDemag configuration has been updated
*/
__weak bool SixPwm_IsFastDemagUpdated( PWMC_SixPwm_Handle_t * pHandle )
{
  return (pHandle->FastDemagUpdated);
 800569c:	233b      	movs	r3, #59	; 0x3b
 800569e:	5cc0      	ldrb	r0, [r0, r3]
}
 80056a0:	4770      	bx	lr
 80056a2:	46c0      	nop			; (mov r8, r8)

080056a4 <SixPwm_ResetOCPolarity>:
* @brief  It resets the polarity of the timer PWM channel outputs to default.
* @param  pHandle Pointer on the target component instance.
* @retval none
*/
__weak void SixPwm_ResetOCPolarity( PWMC_SixPwm_Handle_t * pHandle )
{
 80056a4:	b510      	push	{r4, lr}
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80056a6:	2402      	movs	r4, #2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80056a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80056aa:	680b      	ldr	r3, [r1, #0]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH1, pHandle->pParams_str->OCPolarity);
 80056ac:	6888      	ldr	r0, [r1, #8]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH1N, pHandle->pParams_str->OCNPolarity);
 80056b0:	68c9      	ldr	r1, [r1, #12]
 80056b2:	43a2      	bics	r2, r4
 80056b4:	4302      	orrs	r2, r0
 80056b6:	621a      	str	r2, [r3, #32]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	3406      	adds	r4, #6
 80056bc:	43a2      	bics	r2, r4
 80056be:	008c      	lsls	r4, r1, #2
 80056c0:	4322      	orrs	r2, r4
 80056c2:	2420      	movs	r4, #32
 80056c4:	621a      	str	r2, [r3, #32]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	43a2      	bics	r2, r4
 80056ca:	0104      	lsls	r4, r0, #4
 80056cc:	4322      	orrs	r2, r4
 80056ce:	2480      	movs	r4, #128	; 0x80
 80056d0:	621a      	str	r2, [r3, #32]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	0200      	lsls	r0, r0, #8
 80056d6:	43a2      	bics	r2, r4
 80056d8:	018c      	lsls	r4, r1, #6
 80056da:	4322      	orrs	r2, r4
 80056dc:	621a      	str	r2, [r3, #32]
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	4c05      	ldr	r4, [pc, #20]	; (80056f8 <SixPwm_ResetOCPolarity+0x54>)
 80056e2:	0289      	lsls	r1, r1, #10
 80056e4:	4022      	ands	r2, r4
 80056e6:	4302      	orrs	r2, r0
 80056e8:	621a      	str	r2, [r3, #32]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	4803      	ldr	r0, [pc, #12]	; (80056fc <SixPwm_ResetOCPolarity+0x58>)
 80056ee:	4002      	ands	r2, r0
 80056f0:	430a      	orrs	r2, r1
 80056f2:	621a      	str	r2, [r3, #32]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH2, pHandle->pParams_str->OCPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH2N, pHandle->pParams_str->OCNPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH3, pHandle->pParams_str->OCPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH3N, pHandle->pParams_str->OCNPolarity);
}
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	fffffdff 	.word	0xfffffdff
 80056fc:	fffff7ff 	.word	0xfffff7ff

08005700 <SixPwm_LoadNextStep>:
{
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	46c6      	mov	lr, r8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005704:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 8005706:	b500      	push	{lr}
 8005708:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800570a:	681d      	ldr	r5, [r3, #0]
{
 800570c:	000e      	movs	r6, r1
  pHandle->_Super.NextStep = PWMC_ElAngleToStep(&(pHandle->_Super));
 800570e:	f7ff ff23 	bl	8005558 <PWMC_ElAngleToStep>
 8005712:	232c      	movs	r3, #44	; 0x2c
 8005714:	54e0      	strb	r0, [r4, r3]
  if (pHandle->_Super.Step != pHandle->_Super.NextStep) 
 8005716:	3301      	adds	r3, #1
 8005718:	5ce3      	ldrb	r3, [r4, r3]
 800571a:	4283      	cmp	r3, r0
 800571c:	d01e      	beq.n	800575c <SixPwm_LoadNextStep+0x5c>
    pHandle->DemagCounter = 0;	  
 800571e:	2300      	movs	r3, #0
 8005720:	2200      	movs	r2, #0
 8005722:	4698      	mov	r8, r3
 8005724:	2344      	movs	r3, #68	; 0x44
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 8005726:	2737      	movs	r7, #55	; 0x37
    pHandle->DemagCounter = 0;	  
 8005728:	52e2      	strh	r2, [r4, r3]
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 800572a:	5de3      	ldrb	r3, [r4, r7]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d011      	beq.n	8005754 <SixPwm_LoadNextStep+0x54>
    if (pHandle->_Super.ModUpdateReq == DISABLE_FAST_DEMAG) 
 8005730:	2b02      	cmp	r3, #2
 8005732:	d100      	bne.n	8005736 <SixPwm_LoadNextStep+0x36>
 8005734:	e0c0      	b.n	80058b8 <SixPwm_LoadNextStep+0x1b8>
    if (pHandle->_Super.ModUpdateReq == ENABLE_QUASI_SYNCH) 
 8005736:	2b03      	cmp	r3, #3
 8005738:	d154      	bne.n	80057e4 <SixPwm_LoadNextStep+0xe4>
      pHandle->QuasiSynchDecay = true;
 800573a:	2201      	movs	r2, #1
 800573c:	3335      	adds	r3, #53	; 0x35
 800573e:	54e2      	strb	r2, [r4, r3]
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8005740:	4643      	mov	r3, r8
 8005742:	55e3      	strb	r3, [r4, r7]
      switch ( pHandle->_Super.NextStep )
 8005744:	232c      	movs	r3, #44	; 0x2c
 8005746:	5ce3      	ldrb	r3, [r4, r3]
 8005748:	2b05      	cmp	r3, #5
 800574a:	d82d      	bhi.n	80057a8 <SixPwm_LoadNextStep+0xa8>
 800574c:	4ac9      	ldr	r2, [pc, #804]	; (8005a74 <SixPwm_LoadNextStep+0x374>)
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	58d3      	ldr	r3, [r2, r3]
 8005752:	469f      	mov	pc, r3
      pHandle->FastDemag = true;
 8005754:	3239      	adds	r2, #57	; 0x39
 8005756:	54a3      	strb	r3, [r4, r2]
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8005758:	4643      	mov	r3, r8
 800575a:	55e3      	strb	r3, [r4, r7]
    if ( pHandle->QuasiSynchDecay == true)
 800575c:	2338      	movs	r3, #56	; 0x38
 800575e:	5ce3      	ldrb	r3, [r4, r3]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ef      	bne.n	8005744 <SixPwm_LoadNextStep+0x44>
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 8005764:	2339      	movs	r3, #57	; 0x39
 8005766:	5ce3      	ldrb	r3, [r4, r3]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d120      	bne.n	80057ae <SixPwm_LoadNextStep+0xae>
    else if ( pHandle->_Super.AlignFlag == 1 )
 800576c:	222a      	movs	r2, #42	; 0x2a
 800576e:	5ea3      	ldrsh	r3, [r4, r2]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d100      	bne.n	8005776 <SixPwm_LoadNextStep+0x76>
 8005774:	e0b1      	b.n	80058da <SixPwm_LoadNextStep+0x1da>
    else if ( pHandle->_Super.AlignFlag == -1 )
 8005776:	3301      	adds	r3, #1
 8005778:	d03f      	beq.n	80057fa <SixPwm_LoadNextStep+0xfa>
      if (pHandle->DemagCounter >= pHandle->_Super.DemagCounterThreshold )
 800577a:	2344      	movs	r3, #68	; 0x44
 800577c:	5ae2      	ldrh	r2, [r4, r3]
 800577e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005780:	429a      	cmp	r2, r3
 8005782:	d300      	bcc.n	8005786 <SixPwm_LoadNextStep+0x86>
 8005784:	e0b2      	b.n	80058ec <SixPwm_LoadNextStep+0x1ec>
      switch ( pHandle->_Super.NextStep )
 8005786:	232c      	movs	r3, #44	; 0x2c
 8005788:	5ce3      	ldrb	r3, [r4, r3]
 800578a:	2b05      	cmp	r3, #5
 800578c:	d80c      	bhi.n	80057a8 <SixPwm_LoadNextStep+0xa8>
 800578e:	4aba      	ldr	r2, [pc, #744]	; (8005a78 <SixPwm_LoadNextStep+0x378>)
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	58d3      	ldr	r3, [r2, r3]
 8005794:	469f      	mov	pc, r3
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005796:	2200      	movs	r2, #0
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005798:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800579a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800579c:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800579e:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 80057a0:	6a2a      	ldr	r2, [r5, #32]
 80057a2:	4bb6      	ldr	r3, [pc, #728]	; (8005a7c <SixPwm_LoadNextStep+0x37c>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	622b      	str	r3, [r5, #32]
}
 80057a8:	bc80      	pop	{r7}
 80057aa:	46b8      	mov	r8, r7
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 80057ae:	2344      	movs	r3, #68	; 0x44
 80057b0:	5ae2      	ldrh	r2, [r4, r3]
 80057b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d2d9      	bcs.n	800576c <SixPwm_LoadNextStep+0x6c>
      pHandle->FastDemagUpdated = false;
 80057b8:	233b      	movs	r3, #59	; 0x3b
 80057ba:	2200      	movs	r2, #0
 80057bc:	54e2      	strb	r2, [r4, r3]
      if (Direction > 0)
 80057be:	2e00      	cmp	r6, #0
 80057c0:	dc00      	bgt.n	80057c4 <SixPwm_LoadNextStep+0xc4>
 80057c2:	e09e      	b.n	8005902 <SixPwm_LoadNextStep+0x202>
        CCWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 80057c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        CWFastDemagPulse = pHandle->_Super.CntPh;
 80057c6:	8ba7      	ldrh	r7, [r4, #28]
        CCWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 80057c8:	6899      	ldr	r1, [r3, #8]
        CCWFastDemagNPolarity = pHandle->pParams_str->OCNPolarity;
 80057ca:	68da      	ldr	r2, [r3, #12]
        CCWFastDemagPulse = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	469c      	mov	ip, r3
        CWFastDemagPolarity = pHandle->NegOCPolarity;
 80057d0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
        CWFastDemagNPolarity = pHandle->NegOCNPolarity;
 80057d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
      switch ( pHandle->_Super.NextStep )
 80057d4:	232c      	movs	r3, #44	; 0x2c
 80057d6:	5ce3      	ldrb	r3, [r4, r3]
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d8e5      	bhi.n	80057a8 <SixPwm_LoadNextStep+0xa8>
 80057dc:	4ca8      	ldr	r4, [pc, #672]	; (8005a80 <SixPwm_LoadNextStep+0x380>)
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	58e3      	ldr	r3, [r4, r3]
 80057e2:	469f      	mov	pc, r3
    if (pHandle->_Super.ModUpdateReq == DISABLE_QUASI_SYNCH) 
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d1b9      	bne.n	800575c <SixPwm_LoadNextStep+0x5c>
      pHandle->QuasiSynchDecay = false;
 80057e8:	2338      	movs	r3, #56	; 0x38
 80057ea:	4642      	mov	r2, r8
 80057ec:	54e2      	strb	r2, [r4, r3]
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 80057ee:	2339      	movs	r3, #57	; 0x39
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 80057f0:	55e2      	strb	r2, [r4, r7]
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 80057f2:	5ce3      	ldrb	r3, [r4, r3]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0b9      	beq.n	800576c <SixPwm_LoadNextStep+0x6c>
 80057f8:	e7d9      	b.n	80057ae <SixPwm_LoadNextStep+0xae>
      switch ( pHandle->_Super.NextStep )
 80057fa:	232c      	movs	r3, #44	; 0x2c
 80057fc:	5ce3      	ldrb	r3, [r4, r3]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d8ce      	bhi.n	80057a0 <SixPwm_LoadNextStep+0xa0>
 8005802:	4aa0      	ldr	r2, [pc, #640]	; (8005a84 <SixPwm_LoadNextStep+0x384>)
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	58d3      	ldr	r3, [r2, r3]
 8005808:	469f      	mov	pc, r3
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 800580a:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800580c:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800580e:	2300      	movs	r3, #0
 8005810:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005812:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8005814:	6a2a      	ldr	r2, [r5, #32]
 8005816:	4b9c      	ldr	r3, [pc, #624]	; (8005a88 <SixPwm_LoadNextStep+0x388>)
 8005818:	4313      	orrs	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 800581a:	2254      	movs	r2, #84	; 0x54
  SET_BIT(TIMx->CCER, Channels);
 800581c:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800581e:	6a2b      	ldr	r3, [r5, #32]
 8005820:	4393      	bics	r3, r2
 8005822:	622b      	str	r3, [r5, #32]
}
 8005824:	e7c0      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005826:	2300      	movs	r3, #0
 8005828:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800582a:	63ab      	str	r3, [r5, #56]	; 0x38
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 800582c:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800582e:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8005830:	2306      	movs	r3, #6
 8005832:	6a2a      	ldr	r2, [r5, #32]
 8005834:	33ff      	adds	r3, #255	; 0xff
 8005836:	4313      	orrs	r3, r2
 8005838:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800583a:	6a2b      	ldr	r3, [r5, #32]
 800583c:	4a93      	ldr	r2, [pc, #588]	; (8005a8c <SixPwm_LoadNextStep+0x38c>)
 800583e:	4013      	ands	r3, r2
 8005840:	622b      	str	r3, [r5, #32]
}
 8005842:	e7b1      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005844:	2300      	movs	r3, #0
 8005846:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005848:	63ab      	str	r3, [r5, #56]	; 0x38
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 800584a:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800584c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 800584e:	23a8      	movs	r3, #168	; 0xa8
 8005850:	6a2a      	ldr	r2, [r5, #32]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4313      	orrs	r3, r2
 8005856:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005858:	6a2b      	ldr	r3, [r5, #32]
 800585a:	4a8d      	ldr	r2, [pc, #564]	; (8005a90 <SixPwm_LoadNextStep+0x390>)
 800585c:	4013      	ands	r3, r2
 800585e:	622b      	str	r3, [r5, #32]
}
 8005860:	e7a2      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005862:	8ba3      	ldrh	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005864:	2251      	movs	r2, #81	; 0x51
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005866:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005868:	2300      	movs	r3, #0
 800586a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800586c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 800586e:	6a2b      	ldr	r3, [r5, #32]
 8005870:	4313      	orrs	r3, r2
 8005872:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005874:	6a2b      	ldr	r3, [r5, #32]
 8005876:	4a87      	ldr	r2, [pc, #540]	; (8005a94 <SixPwm_LoadNextStep+0x394>)
 8005878:	4013      	ands	r3, r2
 800587a:	622b      	str	r3, [r5, #32]
}
 800587c:	e794      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800587e:	2300      	movs	r3, #0
 8005880:	636b      	str	r3, [r5, #52]	; 0x34
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005882:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005884:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005886:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8005888:	23a2      	movs	r3, #162	; 0xa2
 800588a:	6a2a      	ldr	r2, [r5, #32]
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4313      	orrs	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 8005890:	2245      	movs	r2, #69	; 0x45
  SET_BIT(TIMx->CCER, Channels);
 8005892:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005894:	6a2b      	ldr	r3, [r5, #32]
 8005896:	4393      	bics	r3, r2
 8005898:	622b      	str	r3, [r5, #32]
}
 800589a:	e785      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800589c:	2300      	movs	r3, #0
 800589e:	636b      	str	r3, [r5, #52]	; 0x34
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80058a0:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80058a2:	63aa      	str	r2, [r5, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80058a4:	2215      	movs	r2, #21
  WRITE_REG(TIMx->CCR3, CompareValue);
 80058a6:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 80058a8:	6a2b      	ldr	r3, [r5, #32]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058ae:	6a2b      	ldr	r3, [r5, #32]
 80058b0:	4a79      	ldr	r2, [pc, #484]	; (8005a98 <SixPwm_LoadNextStep+0x398>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	622b      	str	r3, [r5, #32]
}
 80058b6:	e777      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
      SixPwm_ResetOCPolarity(pHandle);
 80058b8:	0020      	movs	r0, r4
 80058ba:	f7ff fef3 	bl	80056a4 <SixPwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 80058be:	2220      	movs	r2, #32
 80058c0:	696b      	ldr	r3, [r5, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	616b      	str	r3, [r5, #20]
      pHandle->FastDemag = false;
 80058c6:	4642      	mov	r2, r8
 80058c8:	2339      	movs	r3, #57	; 0x39
 80058ca:	54e2      	strb	r2, [r4, r3]
    if ( pHandle->QuasiSynchDecay == true)
 80058cc:	2338      	movs	r3, #56	; 0x38
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 80058ce:	55e2      	strb	r2, [r4, r7]
    if ( pHandle->QuasiSynchDecay == true)
 80058d0:	5ce3      	ldrb	r3, [r4, r3]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d100      	bne.n	80058d8 <SixPwm_LoadNextStep+0x1d8>
 80058d6:	e745      	b.n	8005764 <SixPwm_LoadNextStep+0x64>
 80058d8:	e734      	b.n	8005744 <SixPwm_LoadNextStep+0x44>
      switch ( pHandle->_Super.NextStep )
 80058da:	332b      	adds	r3, #43	; 0x2b
 80058dc:	5ce3      	ldrb	r3, [r4, r3]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d900      	bls.n	80058e4 <SixPwm_LoadNextStep+0x1e4>
 80058e2:	e75d      	b.n	80057a0 <SixPwm_LoadNextStep+0xa0>
 80058e4:	4a6d      	ldr	r2, [pc, #436]	; (8005a9c <SixPwm_LoadNextStep+0x39c>)
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	58d3      	ldr	r3, [r2, r3]
 80058ea:	469f      	mov	pc, r3
        pHandle->FastDemagUpdated = true;
 80058ec:	233b      	movs	r3, #59	; 0x3b
 80058ee:	2201      	movs	r2, #1
        SixPwm_ResetOCPolarity(pHandle);
 80058f0:	0020      	movs	r0, r4
        pHandle->FastDemagUpdated = true;
 80058f2:	54e2      	strb	r2, [r4, r3]
        SixPwm_ResetOCPolarity(pHandle);
 80058f4:	f7ff fed6 	bl	80056a4 <SixPwm_ResetOCPolarity>
 80058f8:	2220      	movs	r2, #32
 80058fa:	696b      	ldr	r3, [r5, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	616b      	str	r3, [r5, #20]
}
 8005900:	e741      	b.n	8005786 <SixPwm_LoadNextStep+0x86>
        CCWFastDemagPulse = pHandle->_Super.CntPh;
 8005902:	8ba3      	ldrh	r3, [r4, #28]
        CWFastDemagPulse = 0;
 8005904:	2700      	movs	r7, #0
        CCWFastDemagPulse = pHandle->_Super.CntPh;
 8005906:	469c      	mov	ip, r3
        CWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 8005908:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        CCWFastDemagPolarity = pHandle->NegOCPolarity;
 800590a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        CWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 800590c:	689e      	ldr	r6, [r3, #8]
        CWFastDemagNPolarity = pHandle->pParams_str->OCNPolarity;
 800590e:	68d8      	ldr	r0, [r3, #12]
        CCWFastDemagNPolarity = pHandle->NegOCNPolarity;
 8005910:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005912:	e75f      	b.n	80057d4 <SixPwm_LoadNextStep+0xd4>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005914:	2300      	movs	r3, #0
 8005916:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005918:	63ab      	str	r3, [r5, #56]	; 0x38
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 800591a:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800591c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 800591e:	6a2a      	ldr	r2, [r5, #32]
 8005920:	4b5f      	ldr	r3, [pc, #380]	; (8005aa0 <SixPwm_LoadNextStep+0x3a0>)
 8005922:	4313      	orrs	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 8005924:	2250      	movs	r2, #80	; 0x50
  SET_BIT(TIMx->CCER, Channels);
 8005926:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005928:	6a2b      	ldr	r3, [r5, #32]
 800592a:	4393      	bics	r3, r2
 800592c:	622b      	str	r3, [r5, #32]
}
 800592e:	e73b      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005930:	2300      	movs	r3, #0
 8005932:	636b      	str	r3, [r5, #52]	; 0x34
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005934:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005936:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005938:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 800593a:	2255      	movs	r2, #85	; 0x55
 800593c:	6a2b      	ldr	r3, [r5, #32]
 800593e:	4313      	orrs	r3, r2
 8005940:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005942:	6a2b      	ldr	r3, [r5, #32]
 8005944:	4a57      	ldr	r2, [pc, #348]	; (8005aa4 <SixPwm_LoadNextStep+0x3a4>)
 8005946:	4013      	ands	r3, r2
 8005948:	622b      	str	r3, [r5, #32]
}
 800594a:	e72d      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800594c:	2300      	movs	r3, #0
 800594e:	636b      	str	r3, [r5, #52]	; 0x34
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005950:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005952:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005954:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8005956:	23aa      	movs	r3, #170	; 0xaa
 8005958:	6a2a      	ldr	r2, [r5, #32]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4313      	orrs	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 800595e:	2205      	movs	r2, #5
  SET_BIT(TIMx->CCER, Channels);
 8005960:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005962:	6a2b      	ldr	r3, [r5, #32]
 8005964:	4393      	bics	r3, r2
 8005966:	622b      	str	r3, [r5, #32]
}
 8005968:	e71e      	b.n	80057a8 <SixPwm_LoadNextStep+0xa8>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 800596a:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800596c:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800596e:	2300      	movs	r3, #0
 8005970:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005972:	e7e1      	b.n	8005938 <SixPwm_LoadNextStep+0x238>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005974:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005976:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005978:	2300      	movs	r3, #0
 800597a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800597c:	e7ce      	b.n	800591c <SixPwm_LoadNextStep+0x21c>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800597e:	2300      	movs	r3, #0
 8005980:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005982:	63ab      	str	r3, [r5, #56]	; 0x38
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005984:	8ba3      	ldrh	r3, [r4, #28]
 8005986:	e7e5      	b.n	8005954 <SixPwm_LoadNextStep+0x254>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005988:	2300      	movs	r3, #0
 800598a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800598c:	63ab      	str	r3, [r5, #56]	; 0x38
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 800598e:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005990:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 8005992:	e705      	b.n	80057a0 <SixPwm_LoadNextStep+0xa0>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005994:	2300      	movs	r3, #0
 8005996:	636b      	str	r3, [r5, #52]	; 0x34
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8005998:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800599a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800599c:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 800599e:	e6ff      	b.n	80057a0 <SixPwm_LoadNextStep+0xa0>
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059a0:	2300      	movs	r3, #0
 80059a2:	636b      	str	r3, [r5, #52]	; 0x34
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80059a4:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059a6:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059a8:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 80059aa:	e6f9      	b.n	80057a0 <SixPwm_LoadNextStep+0xa0>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80059ac:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059ae:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059b0:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059b2:	2300      	movs	r3, #0
 80059b4:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 80059b6:	e6f3      	b.n	80057a0 <SixPwm_LoadNextStep+0xa0>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 80059b8:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059ba:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059bc:	2300      	movs	r3, #0
 80059be:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059c0:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 80059c2:	e6ed      	b.n	80057a0 <SixPwm_LoadNextStep+0xa0>
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059c4:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059c6:	636f      	str	r7, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059c8:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059ca:	4663      	mov	r3, ip
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80059cc:	2202      	movs	r2, #2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059ce:	63eb      	str	r3, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80059d0:	6a2b      	ldr	r3, [r5, #32]
 80059d2:	4393      	bics	r3, r2
 80059d4:	4333      	orrs	r3, r6
 80059d6:	622b      	str	r3, [r5, #32]
 80059d8:	6a2b      	ldr	r3, [r5, #32]
 80059da:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <SixPwm_LoadNextStep+0x3a8>)
 80059dc:	0236      	lsls	r6, r6, #8
 80059de:	4013      	ands	r3, r2
 80059e0:	2208      	movs	r2, #8
 80059e2:	4333      	orrs	r3, r6
 80059e4:	622b      	str	r3, [r5, #32]
 80059e6:	6a2b      	ldr	r3, [r5, #32]
 80059e8:	4393      	bics	r3, r2
 80059ea:	0082      	lsls	r2, r0, #2
 80059ec:	4313      	orrs	r3, r2
 80059ee:	622b      	str	r3, [r5, #32]
 80059f0:	6a2b      	ldr	r3, [r5, #32]
 80059f2:	4a2e      	ldr	r2, [pc, #184]	; (8005aac <SixPwm_LoadNextStep+0x3ac>)
 80059f4:	0280      	lsls	r0, r0, #10
 80059f6:	4013      	ands	r3, r2
 80059f8:	4303      	orrs	r3, r0
 80059fa:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 80059fc:	e78f      	b.n	800591e <SixPwm_LoadNextStep+0x21e>
  WRITE_REG(TIMx->CCR1, CompareValue);
 80059fe:	4663      	mov	r3, ip
 8005a00:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a02:	2300      	movs	r3, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005a04:	2002      	movs	r0, #2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a06:	63af      	str	r7, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a08:	63eb      	str	r3, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005a0a:	6a2b      	ldr	r3, [r5, #32]
 8005a0c:	4383      	bics	r3, r0
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	622b      	str	r3, [r5, #32]
 8005a12:	6a2b      	ldr	r3, [r5, #32]
 8005a14:	301e      	adds	r0, #30
 8005a16:	4383      	bics	r3, r0
 8005a18:	0109      	lsls	r1, r1, #4
 8005a1a:	4319      	orrs	r1, r3
 8005a1c:	6229      	str	r1, [r5, #32]
 8005a1e:	2108      	movs	r1, #8
 8005a20:	6a2b      	ldr	r3, [r5, #32]
 8005a22:	438b      	bics	r3, r1
 8005a24:	0091      	lsls	r1, r2, #2
 8005a26:	430b      	orrs	r3, r1
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	622b      	str	r3, [r5, #32]
 8005a2c:	6a2b      	ldr	r3, [r5, #32]
 8005a2e:	0192      	lsls	r2, r2, #6
 8005a30:	438b      	bics	r3, r1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005a36:	e780      	b.n	800593a <SixPwm_LoadNextStep+0x23a>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a3c:	4663      	mov	r3, ip
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005a3e:	2220      	movs	r2, #32
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a40:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a42:	63ef      	str	r7, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005a44:	6a2b      	ldr	r3, [r5, #32]
 8005a46:	4393      	bics	r3, r2
 8005a48:	0132      	lsls	r2, r6, #4
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	622b      	str	r3, [r5, #32]
 8005a4e:	6a2b      	ldr	r3, [r5, #32]
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <SixPwm_LoadNextStep+0x3a8>)
 8005a52:	0236      	lsls	r6, r6, #8
 8005a54:	4013      	ands	r3, r2
 8005a56:	2280      	movs	r2, #128	; 0x80
 8005a58:	431e      	orrs	r6, r3
 8005a5a:	622e      	str	r6, [r5, #32]
 8005a5c:	6a2b      	ldr	r3, [r5, #32]
 8005a5e:	4393      	bics	r3, r2
 8005a60:	0182      	lsls	r2, r0, #6
 8005a62:	4313      	orrs	r3, r2
 8005a64:	622b      	str	r3, [r5, #32]
 8005a66:	6a2b      	ldr	r3, [r5, #32]
 8005a68:	4a10      	ldr	r2, [pc, #64]	; (8005aac <SixPwm_LoadNextStep+0x3ac>)
 8005a6a:	0280      	lsls	r0, r0, #10
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	4318      	orrs	r0, r3
 8005a70:	6228      	str	r0, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005a72:	e770      	b.n	8005956 <SixPwm_LoadNextStep+0x256>
 8005a74:	08006894 	.word	0x08006894
 8005a78:	080068ac 	.word	0x080068ac
 8005a7c:	00000555 	.word	0x00000555
 8005a80:	080068c4 	.word	0x080068c4
 8005a84:	080068dc 	.word	0x080068dc
 8005a88:	00000501 	.word	0x00000501
 8005a8c:	fffffbaf 	.word	0xfffffbaf
 8005a90:	fffffbfa 	.word	0xfffffbfa
 8005a94:	fffffafb 	.word	0xfffffafb
 8005a98:	fffffabf 	.word	0xfffffabf
 8005a9c:	080068f4 	.word	0x080068f4
 8005aa0:	00000505 	.word	0x00000505
 8005aa4:	fffffaff 	.word	0xfffffaff
 8005aa8:	fffffdff 	.word	0xfffffdff
 8005aac:	fffff7ff 	.word	0xfffff7ff
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005ab0:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005ab2:	636f      	str	r7, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005ab4:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005ab6:	4663      	mov	r3, ip
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005ab8:	2002      	movs	r0, #2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005aba:	63eb      	str	r3, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005abc:	6a2b      	ldr	r3, [r5, #32]
 8005abe:	4383      	bics	r3, r0
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	622b      	str	r3, [r5, #32]
 8005ac4:	6a2b      	ldr	r3, [r5, #32]
 8005ac6:	4826      	ldr	r0, [pc, #152]	; (8005b60 <SixPwm_LoadNextStep+0x460>)
 8005ac8:	0209      	lsls	r1, r1, #8
 8005aca:	4003      	ands	r3, r0
 8005acc:	4319      	orrs	r1, r3
 8005ace:	6229      	str	r1, [r5, #32]
 8005ad0:	2108      	movs	r1, #8
 8005ad2:	6a2b      	ldr	r3, [r5, #32]
 8005ad4:	438b      	bics	r3, r1
 8005ad6:	0091      	lsls	r1, r2, #2
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	622b      	str	r3, [r5, #32]
 8005adc:	6a2b      	ldr	r3, [r5, #32]
 8005ade:	4921      	ldr	r1, [pc, #132]	; (8005b64 <SixPwm_LoadNextStep+0x464>)
 8005ae0:	0292      	lsls	r2, r2, #10
 8005ae2:	400b      	ands	r3, r1
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005ae8:	e719      	b.n	800591e <SixPwm_LoadNextStep+0x21e>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005aea:	4663      	mov	r3, ip
 8005aec:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005aee:	2300      	movs	r3, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005af0:	2202      	movs	r2, #2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005af2:	63af      	str	r7, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005af4:	63eb      	str	r3, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005af6:	6a2b      	ldr	r3, [r5, #32]
 8005af8:	4393      	bics	r3, r2
 8005afa:	4333      	orrs	r3, r6
 8005afc:	622b      	str	r3, [r5, #32]
 8005afe:	6a2b      	ldr	r3, [r5, #32]
 8005b00:	321e      	adds	r2, #30
 8005b02:	4393      	bics	r3, r2
 8005b04:	0136      	lsls	r6, r6, #4
 8005b06:	431e      	orrs	r6, r3
 8005b08:	622e      	str	r6, [r5, #32]
 8005b0a:	6a2b      	ldr	r3, [r5, #32]
 8005b0c:	3a18      	subs	r2, #24
 8005b0e:	4393      	bics	r3, r2
 8005b10:	0082      	lsls	r2, r0, #2
 8005b12:	4313      	orrs	r3, r2
 8005b14:	2280      	movs	r2, #128	; 0x80
 8005b16:	622b      	str	r3, [r5, #32]
 8005b18:	6a2b      	ldr	r3, [r5, #32]
 8005b1a:	0180      	lsls	r0, r0, #6
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	4318      	orrs	r0, r3
 8005b20:	6228      	str	r0, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005b22:	e70a      	b.n	800593a <SixPwm_LoadNextStep+0x23a>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005b24:	2300      	movs	r3, #0
 8005b26:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005b28:	4663      	mov	r3, ip
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005b2a:	2020      	movs	r0, #32
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005b2c:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005b2e:	63ef      	str	r7, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005b30:	6a2b      	ldr	r3, [r5, #32]
 8005b32:	4383      	bics	r3, r0
 8005b34:	0108      	lsls	r0, r1, #4
 8005b36:	4303      	orrs	r3, r0
 8005b38:	622b      	str	r3, [r5, #32]
 8005b3a:	6a2b      	ldr	r3, [r5, #32]
 8005b3c:	4808      	ldr	r0, [pc, #32]	; (8005b60 <SixPwm_LoadNextStep+0x460>)
 8005b3e:	0209      	lsls	r1, r1, #8
 8005b40:	4003      	ands	r3, r0
 8005b42:	430b      	orrs	r3, r1
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	622b      	str	r3, [r5, #32]
 8005b48:	6a2b      	ldr	r3, [r5, #32]
 8005b4a:	438b      	bics	r3, r1
 8005b4c:	0191      	lsls	r1, r2, #6
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	622b      	str	r3, [r5, #32]
 8005b52:	6a2b      	ldr	r3, [r5, #32]
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <SixPwm_LoadNextStep+0x464>)
 8005b56:	0292      	lsls	r2, r2, #10
 8005b58:	400b      	ands	r3, r1
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005b5e:	e6fa      	b.n	8005956 <SixPwm_LoadNextStep+0x256>
 8005b60:	fffffdff 	.word	0xfffffdff
 8005b64:	fffff7ff 	.word	0xfffff7ff

08005b68 <SixPwm_TurnOnLowSides>:
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b68:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 8005b6a:	b510      	push	{r4, lr}

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005b6c:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b6e:	681c      	ldr	r4, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005b70:	2336      	movs	r3, #54	; 0x36
 8005b72:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005b74:	3b38      	subs	r3, #56	; 0x38
 8005b76:	6123      	str	r3, [r4, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005b7c:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005b7e:	63e3      	str	r3, [r4, #60]	; 0x3c

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  SixPwm_ResetOCPolarity(pHandle);
 8005b80:	f7ff fd90 	bl	80056a4 <SixPwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8005b84:	2220      	movs	r2, #32
 8005b86:	6963      	ldr	r3, [r4, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	6163      	str	r3, [r4, #20]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	4313      	orrs	r3, r2
 8005b94:	6463      	str	r3, [r4, #68]	; 0x44
  LL_TIM_GenerateEvent_COM( TIMx );
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
}
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <SixPwm_SwitchOnPWM>:
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b98:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 8005b9a:	b570      	push	{r4, r5, r6, lr}

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005b9c:	2236      	movs	r2, #54	; 0x36
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b9e:	681c      	ldr	r4, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005ba0:	2300      	movs	r3, #0
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	5483      	strb	r3, [r0, r2]
  pHandle->DemagCounter = 0;
 8005ba6:	320e      	adds	r2, #14
 8005ba8:	5283      	strh	r3, [r0, r2]
{
 8005baa:	0005      	movs	r5, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8005bac:	2073      	movs	r0, #115	; 0x73
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005bae:	68e2      	ldr	r2, [r4, #12]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	60e2      	str	r2, [r4, #12]
  SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
 8005bb4:	6862      	ldr	r2, [r4, #4]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	6062      	str	r2, [r4, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
 8005bba:	6862      	ldr	r2, [r4, #4]
 8005bbc:	3103      	adds	r1, #3
 8005bbe:	438a      	bics	r2, r1
 8005bc0:	6062      	str	r2, [r4, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005bc2:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005bc4:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005bc6:	63e3      	str	r3, [r4, #60]	; 0x3c
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8005bc8:	69a3      	ldr	r3, [r4, #24]
 8005bca:	315c      	adds	r1, #92	; 0x5c
 8005bcc:	4383      	bics	r3, r0
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	61a3      	str	r3, [r4, #24]
 8005bd2:	69a2      	ldr	r2, [r4, #24]
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <SixPwm_SwitchOnPWM+0x90>)
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	23c0      	movs	r3, #192	; 0xc0
 8005bda:	01db      	lsls	r3, r3, #7
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	61a3      	str	r3, [r4, #24]
 8005be0:	69e3      	ldr	r3, [r4, #28]
 8005be2:	4383      	bics	r3, r0
 8005be4:	430b      	orrs	r3, r1
 8005be6:	61e3      	str	r3, [r4, #28]
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
  SixPwm_ResetOCPolarity( pHandle );
 8005be8:	0028      	movs	r0, r5
 8005bea:	f7ff fd5b 	bl	80056a4 <SixPwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8005bee:	2220      	movs	r2, #32
 8005bf0:	6963      	ldr	r3, [r4, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	6163      	str	r3, [r4, #20]
  LL_TIM_GenerateEvent_COM( TIMx );
	/* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6463      	str	r3, [r4, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6463      	str	r3, [r4, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
  if (true == pHandle->Oversampling )
 8005c0a:	233a      	movs	r3, #58	; 0x3a
 8005c0c:	5ceb      	ldrb	r3, [r5, r3]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <SixPwm_SwitchOnPWM+0x86>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005c12:	2170      	movs	r1, #112	; 0x70
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	438b      	bics	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	6063      	str	r3, [r4, #4]
  }
  else
  {
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
  }	  
}
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	2270      	movs	r2, #112	; 0x70
 8005c20:	6863      	ldr	r3, [r4, #4]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	6063      	str	r3, [r4, #4]
 8005c26:	e7f9      	b.n	8005c1c <SixPwm_SwitchOnPWM+0x84>
 8005c28:	ffff8cff 	.word	0xffff8cff

08005c2c <SixPwm_SetADCTriggerChannel>:
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c2c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005c2e:	681b      	ldr	r3, [r3, #0]

  pHandle->_Super.ADCTriggerCnt = SamplingPoint;
 8005c30:	8401      	strh	r1, [r0, #32]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005c32:	6419      	str	r1, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, pHandle->_Super.ADCTriggerCnt);
}
 8005c34:	4770      	bx	lr
 8005c36:	46c0      	nop			; (mov r8, r8)

08005c38 <SixPwm_SwitchOffPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2136      	movs	r1, #54	; 0x36
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 8005c3e:	b510      	push	{r4, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005c40:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005c42:	4c09      	ldr	r4, [pc, #36]	; (8005c68 <SixPwm_SwitchOffPWM+0x30>)
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005c44:	5442      	strb	r2, [r0, r1]
 8005c46:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005c48:	4021      	ands	r1, r4
 8005c4a:	6459      	str	r1, [r3, #68]	; 0x44
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005c4c:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  pHandle->_Super.CntPh = 0;
 8005c54:	8382      	strh	r2, [r0, #28]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	438a      	bics	r2, r1
 8005c5a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	316f      	adds	r1, #111	; 0x6f
 8005c60:	438a      	bics	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
  LL_TIM_SetTriggerOutput(pHandle->pParams_str->TIMx, LL_TIM_TRGO_RESET);
  return;
}
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	ffff7fff 	.word	0xffff7fff

08005c6c <SixPwm_BRK_IRQHandler>:
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
__weak void * SixPwm_BRK_IRQHandler( PWMC_SixPwm_Handle_t * pHandle )
{
  pHandle->_Super.OverCurrentFlag = true;
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	2332      	movs	r3, #50	; 0x32
 8005c70:	54c1      	strb	r1, [r0, r3]
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
 8005c72:	6c83      	ldr	r3, [r0, #72]	; 0x48
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
  return MC_NULL;
}
 8005c74:	2000      	movs	r0, #0
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
 8005c76:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c7e:	2202      	movs	r2, #2
 8005c80:	4252      	negs	r2, r2
 8005c82:	611a      	str	r2, [r3, #16]
}
 8005c84:	4770      	bx	lr
 8005c86:	46c0      	nop			; (mov r8, r8)

08005c88 <SixPwm_FastDemagFlag>:
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif

  return (pHandle->FastDemag);
 8005c88:	2339      	movs	r3, #57	; 0x39
 8005c8a:	5cc0      	ldrb	r0, [r0, r3]
}
 8005c8c:	4770      	bx	lr
 8005c8e:	46c0      	nop			; (mov r8, r8)

08005c90 <SixPwm_QuasiSynchFlag>:
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif

  return (pHandle->QuasiSynchDecay);
 8005c90:	2338      	movs	r3, #56	; 0x38
 8005c92:	5cc0      	ldrb	r0, [r0, r3]
}
 8005c94:	4770      	bx	lr
 8005c96:	46c0      	nop			; (mov r8, r8)

08005c98 <SixPwm_UpdatePwmDemagCounter>:
  * @brief  This function updates the demagnetization counter
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void SixPwm_UpdatePwmDemagCounter( PWMC_SixPwm_Handle_t * pHandle )
{
 8005c98:	b510      	push	{r4, lr}
  pHandle->DemagCounter += LL_TIM_GetRepetitionCounter(TIM1) + 1;
 8005c9a:	2444      	movs	r4, #68	; 0x44
  return (uint32_t)(READ_REG(TIMx->RCR));
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <SixPwm_UpdatePwmDemagCounter+0x1c>)
 8005c9e:	5b02      	ldrh	r2, [r0, r4]
 8005ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	1852      	adds	r2, r2, r1
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	5302      	strh	r2, [r0, r4]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	60da      	str	r2, [r3, #12]
  LL_TIM_EnableIT_UPDATE(TIM1);
}
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	40012c00 	.word	0x40012c00

08005cb8 <SixPwm_DisablePwmDemagCounter>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005cb8:	2101      	movs	r1, #1
 8005cba:	4a02      	ldr	r2, [pc, #8]	; (8005cc4 <SixPwm_DisablePwmDemagCounter+0xc>)
 8005cbc:	68d3      	ldr	r3, [r2, #12]
 8005cbe:	438b      	bics	r3, r1
 8005cc0:	60d3      	str	r3, [r2, #12]
  * @retval none
  */
__weak void SixPwm_DisablePwmDemagCounter( PWMC_SixPwm_Handle_t * pHandle )
{
  LL_TIM_DisableIT_UPDATE(TIM1);
}
 8005cc2:	4770      	bx	lr
 8005cc4:	40012c00 	.word	0x40012c00

08005cc8 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005cc8:	8a43      	ldrh	r3, [r0, #18]
 8005cca:	8981      	ldrh	r1, [r0, #12]
{
 8005ccc:	b530      	push	{r4, r5, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005cce:	18c9      	adds	r1, r1, r3
 8005cd0:	0849      	lsrs	r1, r1, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005cd2:	8943      	ldrh	r3, [r0, #10]
 8005cd4:	040d      	lsls	r5, r1, #16
 8005cd6:	430d      	orrs	r5, r1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <RVBS_Clear+0x26>
 8005cdc:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 8005cde:	6944      	ldr	r4, [r0, #20]
 8005ce0:	005a      	lsls	r2, r3, #1
 8005ce2:	5311      	strh	r1, [r2, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	8942      	ldrh	r2, [r0, #10]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d8f8      	bhi.n	8005ce0 <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8005cee:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8005cf0:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8005cf2:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005cf4:	bd30      	pop	{r4, r5, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)

08005cf8 <RVBS_Init>:
{
 8005cf8:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8005cfa:	f7ff ffe5 	bl	8005cc8 <RVBS_Clear>
}
 8005cfe:	bd10      	pop	{r4, pc}

08005d00 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8005d00:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005d02:	8982      	ldrh	r2, [r0, #12]
 8005d04:	89c1      	ldrh	r1, [r0, #14]
{
 8005d06:	0003      	movs	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005d08:	428a      	cmp	r2, r1
 8005d0a:	d00d      	beq.n	8005d28 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005d0c:	88c4      	ldrh	r4, [r0, #6]
 8005d0e:	8a40      	ldrh	r0, [r0, #18]
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d807      	bhi.n	8005d24 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8005d14:	7c18      	ldrb	r0, [r3, #16]
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d10f      	bne.n	8005d3a <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005d1a:	42a1      	cmp	r1, r4
 8005d1c:	d913      	bls.n	8005d46 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8005d1e:	2201      	movs	r2, #1
 8005d20:	741a      	strb	r2, [r3, #16]
          fault = MC_NO_ERROR;
 8005d22:	e000      	b.n	8005d26 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8005d24:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005d26:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005d28:	88c0      	ldrh	r0, [r0, #6]
 8005d2a:	4282      	cmp	r2, r0
 8005d2c:	d30b      	bcc.n	8005d46 <RVBS_CheckFaultState+0x46>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005d2e:	8a5b      	ldrh	r3, [r3, #18]
 8005d30:	4298      	cmp	r0, r3
 8005d32:	4180      	sbcs	r0, r0
 8005d34:	4240      	negs	r0, r0
 8005d36:	0080      	lsls	r0, r0, #2
 8005d38:	e7f5      	b.n	8005d26 <RVBS_CheckFaultState+0x26>
          fault = MC_NO_ERROR;
 8005d3a:	2000      	movs	r0, #0
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005d3c:	42a2      	cmp	r2, r4
 8005d3e:	d2f2      	bcs.n	8005d26 <RVBS_CheckFaultState+0x26>
          pHandle->OverVoltageHysteresisUpDir = false;
 8005d40:	7418      	strb	r0, [r3, #16]
          fault = MC_OVER_VOLT;
 8005d42:	3002      	adds	r0, #2
 8005d44:	e7ef      	b.n	8005d26 <RVBS_CheckFaultState+0x26>
        fault = MC_OVER_VOLT;
 8005d46:	2002      	movs	r0, #2
 8005d48:	e7ed      	b.n	8005d26 <RVBS_CheckFaultState+0x26>
 8005d4a:	46c0      	nop			; (mov r8, r8)

08005d4c <RVBS_CalcAvVbus>:
{
 8005d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4e:	46c6      	mov	lr, r8
    if (0xFFFFU == hAux)
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <RVBS_CalcAvVbus+0x64>)
{
 8005d52:	0004      	movs	r4, r0
 8005d54:	000d      	movs	r5, r1
 8005d56:	b500      	push	{lr}
    if (0xFFFFU == hAux)
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	d01d      	beq.n	8005d98 <RVBS_CalcAvVbus+0x4c>
      pHandle->aBuffer[pHandle->index] = hAux;
 8005d5c:	7e43      	ldrb	r3, [r0, #25]
 8005d5e:	6942      	ldr	r2, [r0, #20]
 8005d60:	4698      	mov	r8, r3
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	5299      	strh	r1, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005d66:	7a87      	ldrb	r7, [r0, #10]
 8005d68:	8946      	ldrh	r6, [r0, #10]
 8005d6a:	2f00      	cmp	r7, #0
 8005d6c:	d01e      	beq.n	8005dac <RVBS_CalcAvVbus+0x60>
 8005d6e:	2300      	movs	r3, #0
      wtemp = 0u;
 8005d70:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 8005d72:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005d74:	3301      	adds	r3, #1
 8005d76:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 8005d78:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005d7a:	3202      	adds	r2, #2
 8005d7c:	42bb      	cmp	r3, r7
 8005d7e:	d1f8      	bne.n	8005d72 <RVBS_CalcAvVbus+0x26>
      wtemp /= pHandle->LowPassFilterBW;
 8005d80:	0031      	movs	r1, r6
 8005d82:	f7fa f9c1 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005d86:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005d88:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005d8a:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8005d8c:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005d8e:	45b0      	cmp	r8, r6
 8005d90:	d209      	bcs.n	8005da6 <RVBS_CalcAvVbus+0x5a>
        pHandle->index++;
 8005d92:	4647      	mov	r7, r8
 8005d94:	3701      	adds	r7, #1
 8005d96:	7667      	strb	r7, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f7ff ffb1 	bl	8005d00 <RVBS_CheckFaultState>
 8005d9e:	8120      	strh	r0, [r4, #8]
}
 8005da0:	bc80      	pop	{r7}
 8005da2:	46b8      	mov	r8, r7
 8005da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	7663      	strb	r3, [r4, #25]
 8005daa:	e7f5      	b.n	8005d98 <RVBS_CalcAvVbus+0x4c>
      wtemp /= pHandle->LowPassFilterBW;
 8005dac:	2000      	movs	r0, #0
 8005dae:	e7eb      	b.n	8005d88 <RVBS_CalcAvVbus+0x3c>
 8005db0:	0000ffff 	.word	0x0000ffff

08005db4 <RUC_Init>:
  */
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS)
{
  if (MC_NULL == pHandle)
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d01a      	beq.n	8005dee <RUC_Init+0x3a>
    pHandle->pVSS = pVSS;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005db8:	6943      	ldr	r3, [r0, #20]
    pHandle->pSTC = pSTC;
 8005dba:	6501      	str	r1, [r0, #80]	; 0x50
    pHandle->pVSS = pVSS;
 8005dbc:	6542      	str	r2, [r0, #84]	; 0x54
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <RUC_Init+0x3c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005dc2:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01e      	beq.n	8005e06 <RUC_Init+0x52>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005dc8:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01e      	beq.n	8005e0c <RUC_Init+0x58>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005dce:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01e      	beq.n	8005e12 <RUC_Init+0x5e>
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	2105      	movs	r1, #5
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <RUC_Init+0x3e>
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005dde:	0053      	lsls	r3, r2, #1
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	18c3      	adds	r3, r0, r3
 8005de8:	615a      	str	r2, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 8005dea:	234a      	movs	r3, #74	; 0x4a
 8005dec:	54c1      	strb	r1, [r0, r3]

    }
  }
}
 8005dee:	4770      	bx	lr
      bPhase++;
 8005df0:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005df2:	1e4a      	subs	r2, r1, #1
 8005df4:	0053      	lsls	r3, r2, #1
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	2200      	movs	r2, #0
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	18c3      	adds	r3, r0, r3
 8005dfe:	615a      	str	r2, [r3, #20]
      pHandle->bPhaseNbr = bPhase;
 8005e00:	234a      	movs	r3, #74	; 0x4a
 8005e02:	54c1      	strb	r1, [r0, r3]
 8005e04:	e7f3      	b.n	8005dee <RUC_Init+0x3a>
      bPhase++;
 8005e06:	2102      	movs	r1, #2
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005e08:	1e4a      	subs	r2, r1, #1
 8005e0a:	e7f3      	b.n	8005df4 <RUC_Init+0x40>
      bPhase++;
 8005e0c:	2103      	movs	r1, #3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005e0e:	1e4a      	subs	r2, r1, #1
 8005e10:	e7f0      	b.n	8005df4 <RUC_Init+0x40>
      bPhase++;
 8005e12:	2104      	movs	r1, #4
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005e14:	1e4a      	subs	r2, r1, #1
 8005e16:	e7ed      	b.n	8005df4 <RUC_Init+0x40>

08005e18 <RUC_Clear>:
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */

__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8005e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1a:	46c6      	mov	lr, r8
 8005e1c:	0004      	movs	r4, r0
 8005e1e:	000d      	movs	r5, r1
 8005e20:	b500      	push	{lr}
  if (MC_NULL == pHandle)
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d038      	beq.n	8005e98 <RUC_Clear+0x80>
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	4698      	mov	r8, r3
 8005e2a:	4642      	mov	r2, r8
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8005e2c:	6d46      	ldr	r6, [r0, #84]	; 0x54
    pHandle->bStageCnt = 0U;
 8005e2e:	334f      	adds	r3, #79	; 0x4f
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8005e30:	6d07      	ldr	r7, [r0, #80]	; 0x50
    pHandle->hDirection = hMotorDirection;
 8005e32:	80c1      	strh	r1, [r0, #6]
    pHandle->bStageCnt = 0U;
 8005e34:	54c2      	strb	r2, [r0, r3]

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8005e36:	0030      	movs	r0, r6
 8005e38:	f000 f9ca 	bl	80061d0 <VSS_Clear>

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	0038      	movs	r0, r7
 8005e40:	f000 f8dc 	bl	8005ffc <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8005e44:	8861      	ldrh	r1, [r4, #2]
 8005e46:	b2ad      	uxth	r5, r5
 8005e48:	4369      	muls	r1, r5
 8005e4a:	0030      	movs	r0, r6
 8005e4c:	b209      	sxth	r1, r1
 8005e4e:	f000 fa6d 	bl	800632c <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, STC_GetDutyCycleRef(pSTC), 0U);
 8005e52:	0038      	movs	r0, r7
 8005e54:	f000 f8cc 	bl	8005ff0 <STC_GetDutyCycleRef>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	b201      	sxth	r1, r0
 8005e5c:	0038      	movs	r0, r7
 8005e5e:	f000 f8d3 	bl	8006008 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalPulse, (uint32_t)(pPhaseParams->hDurationms));
 8005e62:	2310      	movs	r3, #16
 8005e64:	5ee1      	ldrsh	r1, [r4, r3]
 8005e66:	89a2      	ldrh	r2, [r4, #12]
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f000 f8cd 	bl	8006008 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms );
 8005e6e:	89e1      	ldrh	r1, [r4, #14]
 8005e70:	89a2      	ldrh	r2, [r4, #12]
 8005e72:	4369      	muls	r1, r5
 8005e74:	0030      	movs	r0, r6
 8005e76:	b209      	sxth	r1, r1
 8005e78:	f000 fa64 	bl	8006344 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
                                              / 1000U );
 8005e7c:	21fa      	movs	r1, #250	; 0xfa
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005e80:	8820      	ldrh	r0, [r4, #0]
                                              / 1000U );
 8005e82:	0089      	lsls	r1, r1, #2
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005e84:	4358      	muls	r0, r3
                                              / 1000U );
 8005e86:	f7fa f93f 	bl	8000108 <__udivsi3>

    pHandle->hPhaseRemainingTicks++;

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005e8a:	6963      	ldr	r3, [r4, #20]
    pHandle->EnteredZone1 = false;
 8005e8c:	4642      	mov	r2, r8
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005e8e:	60a3      	str	r3, [r4, #8]
    pHandle->EnteredZone1 = false;
 8005e90:	234e      	movs	r3, #78	; 0x4e
    pHandle->hPhaseRemainingTicks++;
 8005e92:	3001      	adds	r0, #1
 8005e94:	80a0      	strh	r0, [r4, #4]
    pHandle->EnteredZone1 = false;
 8005e96:	54e2      	strb	r2, [r4, r3]
  }
}
 8005e98:	bc80      	pop	{r7}
 8005e9a:	46b8      	mov	r8, r7
 8005e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)

08005ea0 <RUC_UpdatePulse>:
  * @brief  Update rev-up duty cycle relative to actual Vbus value to be applied
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  BusVHandle: pointer to the bus voltage sensor
  */
__weak void RUC_UpdatePulse(RevUpCtrl_Handle_t *pHandle, BusVoltageSensor_Handle_t *BusVHandle)
{
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	0004      	movs	r4, r0
 8005ea4:	0008      	movs	r0, r1
  if (MC_NULL == pHandle)
 8005ea6:	2c00      	cmp	r4, #0
 8005ea8:	d007      	beq.n	8005eba <RUC_UpdatePulse+0x1a>
    /* Nothing to do */
  }
  else
  {
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
                                  / VBS_GetAvBusVoltage_V(BusVHandle);
 8005eaa:	f7fe fe3b 	bl	8004b24 <VBS_GetAvBusVoltage_V>
 8005eae:	0001      	movs	r1, r0
 8005eb0:	206e      	movs	r0, #110	; 0x6e
 8005eb2:	f7fa f9b3 	bl	800021c <__divsi3>
    pHandle->PulseUpdateFactor = tPulseUpdateFactor;						
 8005eb6:	2348      	movs	r3, #72	; 0x48
 8005eb8:	52e0      	strh	r0, [r4, r3]
  }
}
 8005eba:	bd10      	pop	{r4, pc}

08005ebc <RUC_Exec>:
  * @brief  6-Step Main revup controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to true when entire revup phases have been completed.
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	1e04      	subs	r4, r0, #0
  bool retVal = true;

  if (MC_NULL == pHandle)
 8005ec0:	d033      	beq.n	8005f2a <RUC_Exec+0x6e>
  {
    retVal = false;
  }
  else
  {
    if (pHandle->hPhaseRemainingTicks > 0U)
 8005ec2:	8883      	ldrh	r3, [r0, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d006      	beq.n	8005ed6 <RUC_Exec+0x1a>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	8083      	strh	r3, [r0, #4]

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <RUC_Exec+0x1a>
  bool retVal = true;
 8005ed2:	2001      	movs	r0, #1
        retVal = false;
      }
    }
  }
  return (retVal);
}
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d026      	beq.n	8005f2a <RUC_Exec+0x6e>
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10;
 8005edc:	2248      	movs	r2, #72	; 0x48
        (void)STC_ExecRamp(pHandle->pSTC, hPulse,
 8005ede:	881d      	ldrh	r5, [r3, #0]
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10;
 8005ee0:	5aa0      	ldrh	r0, [r4, r2]
 8005ee2:	889b      	ldrh	r3, [r3, #4]
 8005ee4:	210a      	movs	r1, #10
 8005ee6:	4358      	muls	r0, r3
 8005ee8:	f7fa f998 	bl	800021c <__divsi3>
        (void)STC_ExecRamp(pHandle->pSTC, hPulse,
 8005eec:	002a      	movs	r2, r5
 8005eee:	b201      	sxth	r1, r0
 8005ef0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005ef2:	f000 f889 	bl	8006008 <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005ef6:	68a3      	ldr	r3, [r4, #8]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005ef8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005efa:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005efc:	8859      	ldrh	r1, [r3, #2]
 8005efe:	88e3      	ldrh	r3, [r4, #6]
 8005f00:	4359      	muls	r1, r3
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005f02:	b209      	sxth	r1, r1
 8005f04:	f000 fa1e 	bl	8006344 <VSS_SetMecAcceleration>
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005f08:	21fa      	movs	r1, #250	; 0xfa
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005f0a:	68a5      	ldr	r5, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005f0c:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005f0e:	882b      	ldrh	r3, [r5, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005f10:	0089      	lsls	r1, r1, #2
 8005f12:	4358      	muls	r0, r3
 8005f14:	f7fa f8f8 	bl	8000108 <__udivsi3>
        pHandle->bStageCnt++;
 8005f18:	224f      	movs	r2, #79	; 0x4f
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005f1a:	68ab      	ldr	r3, [r5, #8]
        pHandle->hPhaseRemainingTicks++;
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	80a0      	strh	r0, [r4, #4]
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005f20:	60a3      	str	r3, [r4, #8]
        pHandle->bStageCnt++;
 8005f22:	5ca3      	ldrb	r3, [r4, r2]
 8005f24:	3301      	adds	r3, #1
 8005f26:	54a3      	strb	r3, [r4, r2]
 8005f28:	e7d3      	b.n	8005ed2 <RUC_Exec+0x16>
    retVal = false;
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e7d2      	b.n	8005ed4 <RUC_Exec+0x18>
 8005f2e:	46c0      	nop			; (mov r8, r8)

08005f30 <RUC_IsAlignStageNow>:
  */
uint8_t RUC_IsAlignStageNow(RevUpCtrl_Handle_t *pHandle)
{
  uint8_t align_flag = 0;

  if (MC_NULL == pHandle)
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d00b      	beq.n	8005f4c <RUC_IsAlignStageNow+0x1c>
    /* Nothing to do */
  }
  else
  {
    int16_t speed;
    speed = RUC_GetPhaseFinalMecSpeed01Hz(pHandle, pHandle->bStageCnt);
 8005f34:	234f      	movs	r3, #79	; 0x4f
    hRetVal = pHandle->ParamsData[bPhase].hFinalMecSpeedUnit;
 8005f36:	5cc2      	ldrb	r2, [r0, r3]
 8005f38:	0053      	lsls	r3, r2, #1
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	18c0      	adds	r0, r0, r3
    if (0 == speed)
 8005f40:	230e      	movs	r3, #14
 8005f42:	5ec0      	ldrsh	r0, [r0, r3]
 8005f44:	4243      	negs	r3, r0
 8005f46:	4158      	adcs	r0, r3
  uint8_t align_flag = 0;
 8005f48:	b2c0      	uxtb	r0, r0
    {
      align_flag = 1;
    }
  }
  return (align_flag);
}
 8005f4a:	4770      	bx	lr
  uint8_t align_flag = 0;
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7fc      	b.n	8005f4a <RUC_IsAlignStageNow+0x1a>

08005f50 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle)
{
  bool retVal = false;

  if (MC_NULL == pHandle)
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d008      	beq.n	8005f66 <RUC_FirstAccelerationStageReached+0x16>
  {
    /* Nothing to do */
  }
  else
  {
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8005f54:	234f      	movs	r3, #79	; 0x4f
 8005f56:	5cc2      	ldrb	r2, [r0, r3]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	5cc3      	ldrb	r3, [r0, r3]
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	4140      	adcs	r0, r0
 8005f62:	b2c0      	uxtb	r0, r0
    {
      retVal = true;
    }
  }
  return (retVal);
}
 8005f64:	4770      	bx	lr
  bool retVal = false;
 8005f66:	2000      	movs	r0, #0
 8005f68:	e7fc      	b.n	8005f64 <RUC_FirstAccelerationStageReached+0x14>
 8005f6a:	46c0      	nop			; (mov r8, r8)

08005f6c <RUC_GetDirection>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Returns direction of the motor.
  */
__weak int16_t RUC_GetDirection(RevUpCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : (int16_t)pHandle->hDirection);
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d002      	beq.n	8005f76 <RUC_GetDirection+0xa>
 8005f70:	2306      	movs	r3, #6
 8005f72:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005f74:	4770      	bx	lr
  return ((MC_NULL == pHandle) ? 0U : (int16_t)pHandle->hDirection);
 8005f76:	2000      	movs	r0, #0
 8005f78:	e7fc      	b.n	8005f74 <RUC_GetDirection+0x8>
 8005f7a:	46c0      	nop			; (mov r8, r8)

08005f7c <STC_Init>:
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  if (MC_NULL == pHandle)
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d00f      	beq.n	8005fa0 <STC_Init+0x24>
  }
  else
  {
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005f80:	2328      	movs	r3, #40	; 0x28
    pHandle->SPD = SPD_Handle;
 8005f82:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005f84:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8005f86:	5cc3      	ldrb	r3, [r0, r3]
 8005f88:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005f8a:	222a      	movs	r2, #42	; 0x2a
 8005f8c:	5e83      	ldrsh	r3, [r0, r2]
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	6043      	str	r3, [r0, #4]
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 8005f92:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005f9c:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005f9e:	6183      	str	r3, [r0, #24]
  }
}
 8005fa0:	4770      	bx	lr
 8005fa2:	46c0      	nop			; (mov r8, r8)

08005fa4 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  if (MC_NULL == pHandle)
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d000      	beq.n	8005faa <STC_SetSpeedSensor+0x6>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SPD = SPD_Handle;
 8005fa8:	6141      	str	r1, [r0, #20]
  }
}
 8005faa:	4770      	bx	lr

08005fac <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d001      	beq.n	8005fb4 <STC_GetSpeedSensor+0x8>
 8005fb0:	6940      	ldr	r0, [r0, #20]
}
 8005fb2:	4770      	bx	lr
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e7fc      	b.n	8005fb2 <STC_GetSpeedSensor+0x6>

08005fb8 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	1e04      	subs	r4, r0, #0
  if (MC_NULL == pHandle)
 8005fbc:	d005      	beq.n	8005fca <STC_Clear+0x12>
  {
    /* Nothing to do */
  }
  else
  {
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005fbe:	7803      	ldrb	r3, [r0, #0]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d003      	beq.n	8005fcc <STC_Clear+0x14>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 8005fc4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	60a3      	str	r3, [r4, #8]
  }
}
 8005fca:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005fcc:	2100      	movs	r1, #0
 8005fce:	6900      	ldr	r0, [r0, #16]
 8005fd0:	f7ff fa4a 	bl	8005468 <PID_SetIntegralTerm>
 8005fd4:	e7f6      	b.n	8005fc4 <STC_Clear+0xc>
 8005fd6:	46c0      	nop			; (mov r8, r8)

08005fd8 <STC_GetMecSpeedRefUnit>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d006      	beq.n	8005fea <STC_GetMecSpeedRefUnit+0x12>
 8005fdc:	6843      	ldr	r3, [r0, #4]
 8005fde:	17d8      	asrs	r0, r3, #31
 8005fe0:	0400      	lsls	r0, r0, #16
 8005fe2:	0c00      	lsrs	r0, r0, #16
 8005fe4:	18c0      	adds	r0, r0, r3
 8005fe6:	1400      	asrs	r0, r0, #16
#endif
}
 8005fe8:	4770      	bx	lr
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 8005fea:	2000      	movs	r0, #0
 8005fec:	e7fc      	b.n	8005fe8 <STC_GetMecSpeedRefUnit+0x10>
 8005fee:	46c0      	nop			; (mov r8, r8)

08005ff0 <STC_GetDutyCycleRef>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d001      	beq.n	8005ff8 <STC_GetDutyCycleRef+0x8>
 8005ff4:	8940      	ldrh	r0, [r0, #10]
#endif
}
 8005ff6:	4770      	bx	lr
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7fc      	b.n	8005ff6 <STC_GetDutyCycleRef+0x6>

08005ffc <STC_SetControlMode>:
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, MC_ControlMode_t bMode )
{
  if (MC_NULL == pHandle)
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d002      	beq.n	8006006 <STC_SetControlMode+0xa>
    /* Nothing to do */
  }
  else
  {
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006000:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8006002:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006004:	60c3      	str	r3, [r0, #12]
  }
}
 8006006:	4770      	bx	lr

08006008 <STC_ExecRamp>:
  *         the boundary of the application (Above max application speed or below min  
  *         application speed in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	0004      	movs	r4, r0
 800600c:	000e      	movs	r6, r1
 800600e:	0017      	movs	r7, r2
  bool allowedRange = true;

  if (MC_NULL == pHandle)
 8006010:	2800      	cmp	r0, #0
 8006012:	d00b      	beq.n	800602c <STC_ExecRamp+0x24>
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006014:	7803      	ldrb	r3, [r0, #0]
 8006016:	2b04      	cmp	r3, #4
 8006018:	d021      	beq.n	800605e <STC_ExecRamp+0x56>
    {
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 800601a:	6842      	ldr	r2, [r0, #4]
 800601c:	17d3      	asrs	r3, r2, #31
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	189b      	adds	r3, r3, r2
 8006024:	141d      	asrs	r5, r3, #16
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006026:	8bc3      	ldrh	r3, [r0, #30]
 8006028:	4299      	cmp	r1, r3
 800602a:	dd01      	ble.n	8006030 <STC_ExecRamp+0x28>
    allowedRange = false;
 800602c:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
      }
    }
  }
  return (allowedRange);
}
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006030:	2224      	movs	r2, #36	; 0x24
 8006032:	5e83      	ldrsh	r3, [r0, r2]
 8006034:	428b      	cmp	r3, r1
 8006036:	dcf9      	bgt.n	800602c <STC_ExecRamp+0x24>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8006038:	8c03      	ldrh	r3, [r0, #32]
 800603a:	4299      	cmp	r1, r3
 800603c:	da03      	bge.n	8006046 <STC_ExecRamp+0x3e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800603e:	2222      	movs	r2, #34	; 0x22
 8006040:	5e83      	ldrsh	r3, [r0, r2]
 8006042:	428b      	cmp	r3, r1
 8006044:	dbf2      	blt.n	800602c <STC_ExecRamp+0x24>
      if (0U == hDurationms)
 8006046:	2f00      	cmp	r7, #0
 8006048:	d110      	bne.n	800606c <STC_ExecRamp+0x64>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800604a:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800604c:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800604e:	2b03      	cmp	r3, #3
 8006050:	d01c      	beq.n	800608c <STC_ExecRamp+0x84>
          pHandle->DutyCycleRef = ((int32_t)hTargetFinal) * 65536;
 8006052:	60a6      	str	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	2001      	movs	r0, #1
 8006058:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800605a:	61a3      	str	r3, [r4, #24]
 800605c:	e7e7      	b.n	800602e <STC_ExecRamp+0x26>
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 800605e:	f7ff ffc7 	bl	8005ff0 <STC_GetDutyCycleRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 8006062:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006064:	429e      	cmp	r6, r3
 8006066:	dce1      	bgt.n	800602c <STC_ExecRamp+0x24>
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 8006068:	b205      	sxth	r5, r0
 800606a:	e7ec      	b.n	8006046 <STC_ExecRamp+0x3e>
        wAux /= 1000U;
 800606c:	21fa      	movs	r1, #250	; 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800606e:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8006070:	8066      	strh	r6, [r4, #2]
        wAux /= 1000U;
 8006072:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006074:	4378      	muls	r0, r7
        wAux /= 1000U;
 8006076:	f7fa f847 	bl	8000108 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800607a:	1b76      	subs	r6, r6, r5
        pHandle->RampRemainingStep++;
 800607c:	1c41      	adds	r1, r0, #1
 800607e:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006080:	0430      	lsls	r0, r6, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006082:	f7fa f8cb 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8006086:	61a0      	str	r0, [r4, #24]
 8006088:	2001      	movs	r0, #1
 800608a:	e7d0      	b.n	800602e <STC_ExecRamp+0x26>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800608c:	6066      	str	r6, [r4, #4]
 800608e:	e7e1      	b.n	8006054 <STC_ExecRamp+0x4c>

08006090 <STC_StopRamp>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 8006090:	2800      	cmp	r0, #0
 8006092:	d002      	beq.n	800609a <STC_StopRamp+0xa>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->RampRemainingStep = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006098:	6183      	str	r3, [r0, #24]
  }
}
 800609a:	4770      	bx	lr

0800609c <STC_CalcSpeedReference>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t motor dutycycle reference. This value represents actually the
  *         dutycycle expressed in digit.
  */
__weak uint16_t STC_CalcSpeedReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	1e05      	subs	r5, r0, #0
  uint16_t hDutyCycleReference;

  if (MC_NULL == pHandle)
 80060a0:	d032      	beq.n	8006108 <STC_CalcSpeedReference+0x6c>
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80060a2:	7802      	ldrb	r2, [r0, #0]
 80060a4:	2a04      	cmp	r2, #4
 80060a6:	d011      	beq.n	80060cc <STC_CalcSpeedReference+0x30>
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 80060a8:	68eb      	ldr	r3, [r5, #12]
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80060aa:	6846      	ldr	r6, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d911      	bls.n	80060d4 <STC_CalcSpeedReference+0x38>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 80060b0:	69a9      	ldr	r1, [r5, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80060b2:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80060b4:	1876      	adds	r6, r6, r1
      /* Compute speed error */
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80060b6:	17f4      	asrs	r4, r6, #31
 80060b8:	0424      	lsls	r4, r4, #16
 80060ba:	0c24      	lsrs	r4, r4, #16
 80060bc:	19a4      	adds	r4, r4, r6
      pHandle->RampRemainingStep--;
 80060be:	60eb      	str	r3, [r5, #12]
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80060c0:	1424      	asrs	r4, r4, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 80060c2:	2a03      	cmp	r2, #3
 80060c4:	d00f      	beq.n	80060e6 <STC_CalcSpeedReference+0x4a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
    }
    else
    {
      pHandle->DutyCycleRef = wCurrentReference;
 80060c6:	60ae      	str	r6, [r5, #8]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hDutyCycleReference = (int16_t)(wCurrentReference >> 16);
#else
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 80060c8:	b2a0      	uxth	r0, r4
#endif
    }
  }
  return (hDutyCycleReference);
}
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->RampRemainingStep > 1U)
 80060cc:	68eb      	ldr	r3, [r5, #12]
      wCurrentReference = pHandle->DutyCycleRef;
 80060ce:	6886      	ldr	r6, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d8ed      	bhi.n	80060b0 <STC_CalcSpeedReference+0x14>
    else if (1U == pHandle->RampRemainingStep)
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d019      	beq.n	800610c <STC_CalcSpeedReference+0x70>
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80060d8:	17f0      	asrs	r0, r6, #31
 80060da:	0400      	lsls	r0, r0, #16
 80060dc:	0c00      	lsrs	r0, r0, #16
 80060de:	1980      	adds	r0, r0, r6
 80060e0:	1404      	asrs	r4, r0, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 80060e2:	2a03      	cmp	r2, #3
 80060e4:	d1ef      	bne.n	80060c6 <STC_CalcSpeedReference+0x2a>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80060e6:	6968      	ldr	r0, [r5, #20]
 80060e8:	f000 f832 	bl	8006150 <SPD_GetAvrgMecSpeedUnit>
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <STC_CalcSpeedReference+0x84>)
 80060ee:	429e      	cmp	r6, r3
 80060f0:	db12      	blt.n	8006118 <STC_CalcSpeedReference+0x7c>
      else hError = hTargetSpeed - hMeasuredSpeed;
 80060f2:	1a21      	subs	r1, r4, r0
 80060f4:	b209      	sxth	r1, r1
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80060f6:	6928      	ldr	r0, [r5, #16]
 80060f8:	f7ff f9c0 	bl	800547c <PI_Controller>
 80060fc:	0003      	movs	r3, r0
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
 80060fe:	041b      	lsls	r3, r3, #16
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8006100:	b280      	uxth	r0, r0
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8006102:	606e      	str	r6, [r5, #4]
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
 8006104:	60ab      	str	r3, [r5, #8]
 8006106:	e7e0      	b.n	80060ca <STC_CalcSpeedReference+0x2e>
    hDutyCycleReference = 0;
 8006108:	2000      	movs	r0, #0
 800610a:	e7de      	b.n	80060ca <STC_CalcSpeedReference+0x2e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800610c:	2302      	movs	r3, #2
 800610e:	5eec      	ldrsh	r4, [r5, r3]
      pHandle->RampRemainingStep = 0U;
 8006110:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006112:	0426      	lsls	r6, r4, #16
      pHandle->RampRemainingStep = 0U;
 8006114:	60eb      	str	r3, [r5, #12]
 8006116:	e7d4      	b.n	80060c2 <STC_CalcSpeedReference+0x26>
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 8006118:	1b01      	subs	r1, r0, r4
 800611a:	b209      	sxth	r1, r1
 800611c:	e7eb      	b.n	80060f6 <STC_CalcSpeedReference+0x5a>
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	ffff0001 	.word	0xffff0001

08006124 <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. 
  *         Expressed in the unit defined by #SPEED_UNIT
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
 8006124:	2800      	cmp	r0, #0
 8006126:	d002      	beq.n	800612e <STC_GetMecSpeedRefUnitDefault+0xa>
 8006128:	232a      	movs	r3, #42	; 0x2a
 800612a:	5ec0      	ldrsh	r0, [r0, r3]
}
 800612c:	4770      	bx	lr
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
 800612e:	2000      	movs	r0, #0
 8006130:	e7fc      	b.n	800612c <STC_GetMecSpeedRefUnitDefault+0x8>
 8006132:	46c0      	nop			; (mov r8, r8)

08006134 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006134:	b510      	push	{r4, lr}
 8006136:	1e04      	subs	r4, r0, #0
  if (MC_NULL == pHandle)
 8006138:	d004      	beq.n	8006144 <STC_ForceSpeedReferenceToCurrentSpeed+0x10>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800613a:	6940      	ldr	r0, [r0, #20]
 800613c:	f000 f808 	bl	8006150 <SPD_GetAvrgMecSpeedUnit>
 8006140:	0400      	lsls	r0, r0, #16
 8006142:	6060      	str	r0, [r4, #4]
  }
}
 8006144:	bd10      	pop	{r4, pc}
 8006146:	46c0      	nop			; (mov r8, r8)

08006148 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8006148:	2304      	movs	r3, #4
 800614a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800614c:	4770      	bx	lr
 800614e:	46c0      	nop			; (mov r8, r8)

08006150 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8006150:	230c      	movs	r3, #12
 8006152:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8006154:	4770      	bx	lr
 8006156:	46c0      	nop			; (mov r8, r8)

08006158 <SPD_GetElSpeedDpp>:
__weak int16_t SPD_GetElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
 8006158:	230e      	movs	r3, #14
 800615a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800615c:	4770      	bx	lr
 800615e:	46c0      	nop			; (mov r8, r8)

08006160 <SPD_Check>:
{
  bool SpeedSensorReliability = true;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  if ((MC_NULL == pHandle) || (pHandle->bSpeedErrorNumber == pHandle->bMaximumSpeedErrorsNumber))
#else
  if (pHandle->bSpeedErrorNumber == pHandle->bMaximumSpeedErrorsNumber)
 8006160:	7803      	ldrb	r3, [r0, #0]
 8006162:	78c0      	ldrb	r0, [r0, #3]
 8006164:	1a18      	subs	r0, r3, r0
 8006166:	1e43      	subs	r3, r0, #1
 8006168:	4198      	sbcs	r0, r3
  }
  else
  {
    /* Nothing to do */
  }
  return (SpeedSensorReliability);
 800616a:	b2c0      	uxtb	r0, r0
}
 800616c:	4770      	bx	lr
 800616e:	46c0      	nop			; (mov r8, r8)

08006170 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8006170:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8006172:	2200      	movs	r2, #0
 8006174:	5e8a      	ldrsh	r2, [r1, r2]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006176:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006178:	7803      	ldrb	r3, [r0, #0]
    if (*pMecSpeedUnit < 0)
 800617a:	2a00      	cmp	r2, #0
 800617c:	db24      	blt.n	80061c8 <SPD_IsMecSpeedReliable+0x58>
      hAux = -(*pMecSpeedUnit);
      hAbsMecSpeedUnit = (uint16_t)hAux;
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800617e:	b292      	uxth	r2, r2
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006180:	8ac6      	ldrh	r6, [r0, #22]
    {
      SpeedError = true;
 8006182:	2101      	movs	r1, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006184:	8a85      	ldrh	r5, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006186:	4296      	cmp	r6, r2
 8006188:	d802      	bhi.n	8006190 <SPD_IsMecSpeedReliable+0x20>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800618a:	4295      	cmp	r5, r2
 800618c:	41ad      	sbcs	r5, r5
 800618e:	4269      	negs	r1, r5
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8006190:	2512      	movs	r5, #18
 8006192:	5f42      	ldrsh	r2, [r0, r5]
 8006194:	2a00      	cmp	r2, #0
 8006196:	db14      	blt.n	80061c2 <SPD_IsMecSpeedReliable+0x52>
      hAux = -(pHandle->hMecAccelUnitP);
      hAbsMecAccelUnitP = (uint16_t)hAux;
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8006198:	b292      	uxth	r2, r2
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800619a:	8b05      	ldrh	r5, [r0, #24]
 800619c:	4295      	cmp	r5, r2
 800619e:	d301      	bcc.n	80061a4 <SPD_IsMecSpeedReliable+0x34>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d009      	beq.n	80061b8 <SPD_IsMecSpeedReliable+0x48>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	d901      	bls.n	80061ac <SPD_IsMecSpeedReliable+0x3c>
      {
        bSpeedErrorNumber++;
 80061a8:	3301      	adds	r3, #1
 80061aa:	b2db      	uxtb	r3, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80061ac:	7003      	strb	r3, [r0, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80061ae:	1b18      	subs	r0, r3, r4
 80061b0:	1e42      	subs	r2, r0, #1
 80061b2:	4190      	sbcs	r0, r2
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 80061b4:	b2c0      	uxtb	r0, r0
}
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
        bSpeedErrorNumber = 0u;
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	4149      	adcs	r1, r1
 80061bc:	4249      	negs	r1, r1
 80061be:	400b      	ands	r3, r1
 80061c0:	e7f4      	b.n	80061ac <SPD_IsMecSpeedReliable+0x3c>
      hAux = -(pHandle->hMecAccelUnitP);
 80061c2:	4252      	negs	r2, r2
 80061c4:	b292      	uxth	r2, r2
      hAbsMecAccelUnitP = (uint16_t)hAux;
 80061c6:	e7e8      	b.n	800619a <SPD_IsMecSpeedReliable+0x2a>
      hAux = -(*pMecSpeedUnit);
 80061c8:	4252      	negs	r2, r2
 80061ca:	b292      	uxth	r2, r2
      hAbsMecSpeedUnit = (uint16_t)hAux;
 80061cc:	e7d8      	b.n	8006180 <SPD_IsMecSpeedReliable+0x10>
 80061ce:	46c0      	nop			; (mov r8, r8)

080061d0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80061d0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80061d2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80061d4:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80061d6:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80061d8:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80061da:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 80061dc:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 80061de:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->hRemainingStep = 0U;
 80061e0:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 80061e2:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80061e4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 80061e6:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80061e8:	4770      	bx	lr
 80061ea:	46c0      	nop			; (mov r8, r8)

080061ec <VSS_Init>:
{
 80061ec:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 80061ee:	f7ff ffef 	bl	80061d0 <VSS_Clear>
}
 80061f2:	bd10      	pop	{r4, pc}

080061f4 <VSS_CalcElAngle>:
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	46c6      	mov	lr, r8
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 80061f8:	2333      	movs	r3, #51	; 0x33
{
 80061fa:	b500      	push	{lr}
    if (true == pHandle->bCopyObserver)
 80061fc:	5cc3      	ldrb	r3, [r0, r3]
{
 80061fe:	0004      	movs	r4, r0
 8006200:	000e      	movs	r6, r1
    if (true == pHandle->bCopyObserver)
 8006202:	2b00      	cmp	r3, #0
 8006204:	d006      	beq.n	8006214 <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8006206:	2300      	movs	r3, #0
 8006208:	5ecd      	ldrsh	r5, [r1, r3]
    pHandle->_Super.hElAngle = hRetAngle;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800620a:	0028      	movs	r0, r5
    pHandle->_Super.hElAngle = hRetAngle;
 800620c:	80a5      	strh	r5, [r4, #4]
}
 800620e:	bc80      	pop	{r7}
 8006210:	46b8      	mov	r8, r7
 8006212:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006214:	230e      	movs	r3, #14
 8006216:	5ec7      	ldrsh	r7, [r0, r3]
 8006218:	8e05      	ldrh	r5, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800621a:	7841      	ldrb	r1, [r0, #1]
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800621c:	19ed      	adds	r5, r5, r7
 800621e:	b2ab      	uxth	r3, r5
 8006220:	b22d      	sxth	r5, r5
 8006222:	8605      	strh	r5, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006224:	0038      	movs	r0, r7
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006226:	4698      	mov	r8, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006228:	f7f9 fff8 	bl	800021c <__divsi3>
 800622c:	88e3      	ldrh	r3, [r4, #6]
 800622e:	18c0      	adds	r0, r0, r3
      if (true == pHandle->bTransitionStarted)
 8006230:	232c      	movs	r3, #44	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006232:	80e0      	strh	r0, [r4, #6]
      if (true == pHandle->bTransitionStarted)
 8006234:	5ce3      	ldrb	r3, [r4, r3]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0e7      	beq.n	800620a <VSS_CalcElAngle+0x16>
        if (0 == pHandle->hTransitionRemainingSteps)
 800623a:	232e      	movs	r3, #46	; 0x2e
 800623c:	5ee0      	ldrsh	r0, [r4, r3]
 800623e:	2800      	cmp	r0, #0
 8006240:	d01a      	beq.n	8006278 <VSS_CalcElAngle+0x84>
          pHandle->hTransitionRemainingSteps--;
 8006242:	3801      	subs	r0, #1
 8006244:	b200      	sxth	r0, r0
 8006246:	85e0      	strh	r0, [r4, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8006248:	2f00      	cmp	r7, #0
 800624a:	db22      	blt.n	8006292 <VSS_CalcElAngle+0x9e>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800624c:	4643      	mov	r3, r8
 800624e:	8837      	ldrh	r7, [r6, #0]
 8006250:	1afe      	subs	r6, r7, r3
 8006252:	2301      	movs	r3, #1
 8006254:	4698      	mov	r8, r3
 8006256:	b236      	sxth	r6, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8006258:	2336      	movs	r3, #54	; 0x36
 800625a:	5ee1      	ldrsh	r1, [r4, r3]
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800625c:	4370      	muls	r0, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800625e:	f7f9 ffdd 	bl	800021c <__divsi3>
          hAngleCorr *= hSignCorr;
 8006262:	4643      	mov	r3, r8
 8006264:	4358      	muls	r0, r3
            pHandle->bTransitionLocked = true;
 8006266:	2332      	movs	r3, #50	; 0x32
          hAngleCorr *= hSignCorr;
 8006268:	b280      	uxth	r0, r0
          if (hAngleDiff >= 0)
 800626a:	2e00      	cmp	r6, #0
 800626c:	db0b      	blt.n	8006286 <VSS_CalcElAngle+0x92>
            pHandle->bTransitionLocked = true;
 800626e:	2201      	movs	r2, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006270:	1a38      	subs	r0, r7, r0
            pHandle->bTransitionLocked = true;
 8006272:	54e2      	strb	r2, [r4, r3]
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006274:	b205      	sxth	r5, r0
 8006276:	e7c8      	b.n	800620a <VSS_CalcElAngle+0x16>
          hRetAngle = *(int16_t *)pInputVars_str;
 8006278:	2300      	movs	r3, #0
 800627a:	5ef5      	ldrsh	r5, [r6, r3]
          pHandle->bTransitionEnded = true;
 800627c:	2201      	movs	r2, #1
 800627e:	232d      	movs	r3, #45	; 0x2d
 8006280:	54e2      	strb	r2, [r4, r3]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8006282:	7020      	strb	r0, [r4, #0]
 8006284:	e7c1      	b.n	800620a <VSS_CalcElAngle+0x16>
            if (false == pHandle->bTransitionLocked)
 8006286:	5ce3      	ldrb	r3, [r4, r3]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0be      	beq.n	800620a <VSS_CalcElAngle+0x16>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800628c:	19c0      	adds	r0, r0, r7
 800628e:	b205      	sxth	r5, r0
 8006290:	e7bb      	b.n	800620a <VSS_CalcElAngle+0x16>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8006292:	4643      	mov	r3, r8
 8006294:	8837      	ldrh	r7, [r6, #0]
 8006296:	1bde      	subs	r6, r3, r7
 8006298:	4b01      	ldr	r3, [pc, #4]	; (80062a0 <VSS_CalcElAngle+0xac>)
 800629a:	b236      	sxth	r6, r6
 800629c:	4698      	mov	r8, r3
 800629e:	e7db      	b.n	8006258 <VSS_CalcElAngle+0x64>
 80062a0:	0000ffff 	.word	0x0000ffff

080062a4 <VSS_CalcAvrgMecSpeedUnit>:
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into
  * TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 80062a4:	b570      	push	{r4, r5, r6, lr}
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 80062a6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 80062a8:	0004      	movs	r4, r0
 80062aa:	000d      	movs	r5, r1
    if (pHandle->hRemainingStep > 1u)
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d91c      	bls.n	80062ea <VSS_CalcAvrgMecSpeedUnit+0x46>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80062b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062b2:	6a02      	ldr	r2, [r0, #32]
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80062b4:	69e1      	ldr	r1, [r4, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80062b6:	189b      	adds	r3, r3, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80062b8:	8b42      	ldrh	r2, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80062ba:	6243      	str	r3, [r0, #36]	; 0x24
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80062bc:	141b      	asrs	r3, r3, #16
 80062be:	81c3      	strh	r3, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80062c0:	4353      	muls	r3, r2
 80062c2:	0098      	lsls	r0, r3, #2
 80062c4:	18c0      	adds	r0, r0, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80062c6:	7863      	ldrb	r3, [r4, #1]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80062c8:	0040      	lsls	r0, r0, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80062ca:	4359      	muls	r1, r3
 80062cc:	f7f9 ffa6 	bl	800021c <__divsi3>
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80062d0:	b200      	sxth	r0, r0
 80062d2:	8028      	strh	r0, [r5, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80062d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80062d6:	81a0      	strh	r0, [r4, #12]
      pHandle->hRemainingStep--;
 80062d8:	3b01      	subs	r3, #1
 80062da:	8523      	strh	r3, [r4, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80062dc:	232d      	movs	r3, #45	; 0x2d
 80062de:	5ce0      	ldrb	r0, [r4, r3]
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d10b      	bne.n	80062fc <VSS_CalcAvrgMecSpeedUnit+0x58>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80062e4:	78e3      	ldrb	r3, [r4, #3]
 80062e6:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->hRemainingStep)
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d00b      	beq.n	8006306 <VSS_CalcAvrgMecSpeedUnit+0x62>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80062ee:	220c      	movs	r2, #12
 80062f0:	5e83      	ldrsh	r3, [r0, r2]
 80062f2:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 80062f4:	232d      	movs	r3, #45	; 0x2d
 80062f6:	5ce0      	ldrb	r0, [r4, r3]
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d0f3      	beq.n	80062e4 <VSS_CalcAvrgMecSpeedUnit+0x40>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80062fc:	0029      	movs	r1, r5
 80062fe:	0020      	movs	r0, r4
 8006300:	f7ff ff36 	bl	8006170 <SPD_IsMecSpeedReliable>
 8006304:	e7f0      	b.n	80062e8 <VSS_CalcAvrgMecSpeedUnit+0x44>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8006306:	222a      	movs	r2, #42	; 0x2a
 8006308:	5e83      	ldrsh	r3, [r0, r2]
 800630a:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800630c:	8183      	strh	r3, [r0, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800630e:	69c0      	ldr	r0, [r0, #28]
 8006310:	4358      	muls	r0, r3
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006312:	8b63      	ldrh	r3, [r4, #26]
 8006314:	0099      	lsls	r1, r3, #2
 8006316:	18c9      	adds	r1, r1, r3
 8006318:	0049      	lsls	r1, r1, #1
 800631a:	f7f9 ff7f 	bl	800021c <__divsi3>
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800631e:	7863      	ldrb	r3, [r4, #1]
 8006320:	4343      	muls	r3, r0
 8006322:	81e3      	strh	r3, [r4, #14]
      pHandle->hRemainingStep = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	8523      	strh	r3, [r4, #40]	; 0x28
 8006328:	e7d8      	b.n	80062dc <VSS_CalcAvrgMecSpeedUnit+0x38>
 800632a:	46c0      	nop			; (mov r8, r8)

0800632c <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	000d      	movs	r5, r1
 8006330:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 8006332:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006334:	7841      	ldrb	r1, [r0, #1]
 8006336:	0028      	movs	r0, r5
 8006338:	f7f9 ff70 	bl	800021c <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 800633c:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800633e:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	46c0      	nop			; (mov r8, r8)

08006344 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	46ce      	mov	lr, r9
 8006348:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800634a:	232c      	movs	r3, #44	; 0x2c
{
 800634c:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 800634e:	5cc3      	ldrb	r3, [r0, r3]
{
 8006350:	0004      	movs	r4, r0
 8006352:	000e      	movs	r6, r1
 8006354:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <VSS_SetMecAcceleration+0x36>
    {
      if (0U == hDurationms)
 800635a:	2a00      	cmp	r2, #0
 800635c:	d111      	bne.n	8006382 <VSS_SetMecAcceleration+0x3e>
      {
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800635e:	8181      	strh	r1, [r0, #12]

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006360:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006362:	69c0      	ldr	r0, [r0, #28]
 8006364:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006366:	0099      	lsls	r1, r3, #2
 8006368:	18c9      	adds	r1, r1, r3
 800636a:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 800636c:	f7f9 ff56 	bl	800021c <__divsi3>

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006370:	7863      	ldrb	r3, [r4, #1]

        pHandle->hRemainingStep = 0U;
 8006372:	8525      	strh	r5, [r4, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006374:	4343      	muls	r3, r0

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006376:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006378:	81e3      	strh	r3, [r4, #14]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800637a:	bcc0      	pop	{r6, r7}
 800637c:	46b9      	mov	r9, r7
 800637e:	46b0      	mov	r8, r6
 8006380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8006382:	21fa      	movs	r1, #250	; 0xfa
 8006384:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8006386:	0089      	lsls	r1, r1, #2
 8006388:	4350      	muls	r0, r2
 800638a:	f7f9 febd 	bl	8000108 <__udivsi3>
        hNbrStep++;
 800638e:	3001      	adds	r0, #1
 8006390:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006392:	230e      	movs	r3, #14
 8006394:	5ee7      	ldrsh	r7, [r4, r3]
        pHandle->hRemainingStep = hNbrStep;
 8006396:	8525      	strh	r5, [r4, #40]	; 0x28
        if (0U == hNbrStep)
 8006398:	2d00      	cmp	r5, #0
 800639a:	d103      	bne.n	80063a4 <VSS_SetMecAcceleration+0x60>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800639c:	043f      	lsls	r7, r7, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800639e:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80063a0:	6267      	str	r7, [r4, #36]	; 0x24
}
 80063a2:	e7ea      	b.n	800637a <VSS_SetMecAcceleration+0x36>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80063a4:	7863      	ldrb	r3, [r4, #1]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80063a6:	69e0      	ldr	r0, [r4, #28]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80063a8:	4699      	mov	r9, r3
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80063aa:	8b63      	ldrh	r3, [r4, #26]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80063ac:	4370      	muls	r0, r6
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80063ae:	0099      	lsls	r1, r3, #2
 80063b0:	18c9      	adds	r1, r1, r3
 80063b2:	0049      	lsls	r1, r1, #1
 80063b4:	f7f9 ff32 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80063b8:	b203      	sxth	r3, r0
 80063ba:	4698      	mov	r8, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80063bc:	4649      	mov	r1, r9
 80063be:	0038      	movs	r0, r7
 80063c0:	f7f9 ff2c 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80063c4:	4643      	mov	r3, r8
 80063c6:	1a18      	subs	r0, r3, r0
 80063c8:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80063ca:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80063cc:	f7f9 ff26 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80063d0:	464b      	mov	r3, r9
 80063d2:	4358      	muls	r0, r3
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80063d4:	043f      	lsls	r7, r7, #16
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80063d6:	6220      	str	r0, [r4, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80063d8:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80063da:	6267      	str	r7, [r4, #36]	; 0x24
    }
 80063dc:	e7cd      	b.n	800637a <VSS_SetMecAcceleration+0x36>
 80063de:	46c0      	nop			; (mov r8, r8)

080063e0 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80063e0:	2900      	cmp	r1, #0
 80063e2:	d006      	beq.n	80063f2 <VSS_SetStartTransition+0x12>
    {
      pHandle->bTransitionStarted = true;
 80063e4:	232c      	movs	r3, #44	; 0x2c
 80063e6:	2201      	movs	r2, #1
 80063e8:	54c2      	strb	r2, [r0, r3]

      if (0 == pHandle->hTransitionSteps)
 80063ea:	2136      	movs	r1, #54	; 0x36
 80063ec:	5e43      	ldrsh	r3, [r0, r1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <VSS_SetStartTransition+0x16>
  bool bAux = true;
 80063f2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80063f4:	4770      	bx	lr
        pHandle->bTransitionEnded = true;
 80063f6:	212d      	movs	r1, #45	; 0x2d
 80063f8:	5442      	strb	r2, [r0, r1]
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80063fa:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80063fc:	2000      	movs	r0, #0
 80063fe:	e7f9      	b.n	80063f4 <VSS_SetStartTransition+0x14>

08006400 <VSS_TransitionEnded>:
__weak bool VSS_TransitionEnded(VirtualSpeedSensor_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
 8006400:	232d      	movs	r3, #45	; 0x2d
 8006402:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 8006404:	4770      	bx	lr
 8006406:	46c0      	nop			; (mov r8, r8)

08006408 <memset>:
 8006408:	0003      	movs	r3, r0
 800640a:	1882      	adds	r2, r0, r2
 800640c:	4293      	cmp	r3, r2
 800640e:	d100      	bne.n	8006412 <memset+0xa>
 8006410:	4770      	bx	lr
 8006412:	7019      	strb	r1, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	e7f9      	b.n	800640c <memset+0x4>

08006418 <__libc_init_array>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	2600      	movs	r6, #0
 800641c:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x38>)
 800641e:	4d0d      	ldr	r5, [pc, #52]	; (8006454 <__libc_init_array+0x3c>)
 8006420:	1b64      	subs	r4, r4, r5
 8006422:	10a4      	asrs	r4, r4, #2
 8006424:	42a6      	cmp	r6, r4
 8006426:	d109      	bne.n	800643c <__libc_init_array+0x24>
 8006428:	2600      	movs	r6, #0
 800642a:	f000 f823 	bl	8006474 <_init>
 800642e:	4c0a      	ldr	r4, [pc, #40]	; (8006458 <__libc_init_array+0x40>)
 8006430:	4d0a      	ldr	r5, [pc, #40]	; (800645c <__libc_init_array+0x44>)
 8006432:	1b64      	subs	r4, r4, r5
 8006434:	10a4      	asrs	r4, r4, #2
 8006436:	42a6      	cmp	r6, r4
 8006438:	d105      	bne.n	8006446 <__libc_init_array+0x2e>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	00b3      	lsls	r3, r6, #2
 800643e:	58eb      	ldr	r3, [r5, r3]
 8006440:	4798      	blx	r3
 8006442:	3601      	adds	r6, #1
 8006444:	e7ee      	b.n	8006424 <__libc_init_array+0xc>
 8006446:	00b3      	lsls	r3, r6, #2
 8006448:	58eb      	ldr	r3, [r5, r3]
 800644a:	4798      	blx	r3
 800644c:	3601      	adds	r6, #1
 800644e:	e7f2      	b.n	8006436 <__libc_init_array+0x1e>
 8006450:	0800690c 	.word	0x0800690c
 8006454:	0800690c 	.word	0x0800690c
 8006458:	08006910 	.word	0x08006910
 800645c:	0800690c 	.word	0x0800690c

08006460 <memcpy>:
 8006460:	2300      	movs	r3, #0
 8006462:	b510      	push	{r4, lr}
 8006464:	429a      	cmp	r2, r3
 8006466:	d100      	bne.n	800646a <memcpy+0xa>
 8006468:	bd10      	pop	{r4, pc}
 800646a:	5ccc      	ldrb	r4, [r1, r3]
 800646c:	54c4      	strb	r4, [r0, r3]
 800646e:	3301      	adds	r3, #1
 8006470:	e7f8      	b.n	8006464 <memcpy+0x4>
	...

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
