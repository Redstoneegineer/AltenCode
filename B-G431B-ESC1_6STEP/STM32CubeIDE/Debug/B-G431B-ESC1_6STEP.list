
B-G431B-ESC1_6STEP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000864c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a78  08008a78  00020374  2**0
                  CONTENTS
  4 .ARM          00000008  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a80  08008a80  00020374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  08008a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  20000374  08008dfc  00020374  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001880  08008dfc  00021880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003cbcd  00000000  00000000  000203e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007a  00000000  00000000  0005cfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0003df61  00000000  00000000  0005d02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007541  00000000  00000000  0009af8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001960  00000000  00000000  000a24d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdcef  00000000  00000000  000a3e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002dff  00000000  00000000  001a1b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000196d1  00000000  00000000  001a491e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00029c96  00000000  00000000  001bdfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004a74  00000000  00000000  001e7c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000374 	.word	0x20000374
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800880c 	.word	0x0800880c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000378 	.word	0x20000378
 8000214:	0800880c 	.word	0x0800880c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b970 	b.w	8000b1c <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9e08      	ldr	r6, [sp, #32]
 800085a:	460d      	mov	r5, r1
 800085c:	4604      	mov	r4, r0
 800085e:	460f      	mov	r7, r1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d14a      	bne.n	80008fa <__udivmoddi4+0xa6>
 8000864:	428a      	cmp	r2, r1
 8000866:	4694      	mov	ip, r2
 8000868:	d965      	bls.n	8000936 <__udivmoddi4+0xe2>
 800086a:	fab2 f382 	clz	r3, r2
 800086e:	b143      	cbz	r3, 8000882 <__udivmoddi4+0x2e>
 8000870:	fa02 fc03 	lsl.w	ip, r2, r3
 8000874:	f1c3 0220 	rsb	r2, r3, #32
 8000878:	409f      	lsls	r7, r3
 800087a:	fa20 f202 	lsr.w	r2, r0, r2
 800087e:	4317      	orrs	r7, r2
 8000880:	409c      	lsls	r4, r3
 8000882:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000886:	fa1f f58c 	uxth.w	r5, ip
 800088a:	fbb7 f1fe 	udiv	r1, r7, lr
 800088e:	0c22      	lsrs	r2, r4, #16
 8000890:	fb0e 7711 	mls	r7, lr, r1, r7
 8000894:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000898:	fb01 f005 	mul.w	r0, r1, r5
 800089c:	4290      	cmp	r0, r2
 800089e:	d90a      	bls.n	80008b6 <__udivmoddi4+0x62>
 80008a0:	eb1c 0202 	adds.w	r2, ip, r2
 80008a4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008a8:	f080 811c 	bcs.w	8000ae4 <__udivmoddi4+0x290>
 80008ac:	4290      	cmp	r0, r2
 80008ae:	f240 8119 	bls.w	8000ae4 <__udivmoddi4+0x290>
 80008b2:	3902      	subs	r1, #2
 80008b4:	4462      	add	r2, ip
 80008b6:	1a12      	subs	r2, r2, r0
 80008b8:	b2a4      	uxth	r4, r4
 80008ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80008be:	fb0e 2210 	mls	r2, lr, r0, r2
 80008c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008c6:	fb00 f505 	mul.w	r5, r0, r5
 80008ca:	42a5      	cmp	r5, r4
 80008cc:	d90a      	bls.n	80008e4 <__udivmoddi4+0x90>
 80008ce:	eb1c 0404 	adds.w	r4, ip, r4
 80008d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008d6:	f080 8107 	bcs.w	8000ae8 <__udivmoddi4+0x294>
 80008da:	42a5      	cmp	r5, r4
 80008dc:	f240 8104 	bls.w	8000ae8 <__udivmoddi4+0x294>
 80008e0:	4464      	add	r4, ip
 80008e2:	3802      	subs	r0, #2
 80008e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	2100      	movs	r1, #0
 80008ec:	b11e      	cbz	r6, 80008f6 <__udivmoddi4+0xa2>
 80008ee:	40dc      	lsrs	r4, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	e9c6 4300 	strd	r4, r3, [r6]
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0xbc>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	f000 80ed 	beq.w	8000ade <__udivmoddi4+0x28a>
 8000904:	2100      	movs	r1, #0
 8000906:	e9c6 0500 	strd	r0, r5, [r6]
 800090a:	4608      	mov	r0, r1
 800090c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000910:	fab3 f183 	clz	r1, r3
 8000914:	2900      	cmp	r1, #0
 8000916:	d149      	bne.n	80009ac <__udivmoddi4+0x158>
 8000918:	42ab      	cmp	r3, r5
 800091a:	d302      	bcc.n	8000922 <__udivmoddi4+0xce>
 800091c:	4282      	cmp	r2, r0
 800091e:	f200 80f8 	bhi.w	8000b12 <__udivmoddi4+0x2be>
 8000922:	1a84      	subs	r4, r0, r2
 8000924:	eb65 0203 	sbc.w	r2, r5, r3
 8000928:	2001      	movs	r0, #1
 800092a:	4617      	mov	r7, r2
 800092c:	2e00      	cmp	r6, #0
 800092e:	d0e2      	beq.n	80008f6 <__udivmoddi4+0xa2>
 8000930:	e9c6 4700 	strd	r4, r7, [r6]
 8000934:	e7df      	b.n	80008f6 <__udivmoddi4+0xa2>
 8000936:	b902      	cbnz	r2, 800093a <__udivmoddi4+0xe6>
 8000938:	deff      	udf	#255	; 0xff
 800093a:	fab2 f382 	clz	r3, r2
 800093e:	2b00      	cmp	r3, #0
 8000940:	f040 8090 	bne.w	8000a64 <__udivmoddi4+0x210>
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094a:	fa1f fe8c 	uxth.w	lr, ip
 800094e:	2101      	movs	r1, #1
 8000950:	fbb2 f5f7 	udiv	r5, r2, r7
 8000954:	fb07 2015 	mls	r0, r7, r5, r2
 8000958:	0c22      	lsrs	r2, r4, #16
 800095a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800095e:	fb0e f005 	mul.w	r0, lr, r5
 8000962:	4290      	cmp	r0, r2
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0x124>
 8000966:	eb1c 0202 	adds.w	r2, ip, r2
 800096a:	f105 38ff 	add.w	r8, r5, #4294967295
 800096e:	d202      	bcs.n	8000976 <__udivmoddi4+0x122>
 8000970:	4290      	cmp	r0, r2
 8000972:	f200 80cb 	bhi.w	8000b0c <__udivmoddi4+0x2b8>
 8000976:	4645      	mov	r5, r8
 8000978:	1a12      	subs	r2, r2, r0
 800097a:	b2a4      	uxth	r4, r4
 800097c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000980:	fb07 2210 	mls	r2, r7, r0, r2
 8000984:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000988:	fb0e fe00 	mul.w	lr, lr, r0
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x14e>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f100 32ff 	add.w	r2, r0, #4294967295
 8000998:	d202      	bcs.n	80009a0 <__udivmoddi4+0x14c>
 800099a:	45a6      	cmp	lr, r4
 800099c:	f200 80bb 	bhi.w	8000b16 <__udivmoddi4+0x2c2>
 80009a0:	4610      	mov	r0, r2
 80009a2:	eba4 040e 	sub.w	r4, r4, lr
 80009a6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009aa:	e79f      	b.n	80008ec <__udivmoddi4+0x98>
 80009ac:	f1c1 0720 	rsb	r7, r1, #32
 80009b0:	408b      	lsls	r3, r1
 80009b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ba:	fa05 f401 	lsl.w	r4, r5, r1
 80009be:	fa20 f307 	lsr.w	r3, r0, r7
 80009c2:	40fd      	lsrs	r5, r7
 80009c4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009c8:	4323      	orrs	r3, r4
 80009ca:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ce:	fa1f fe8c 	uxth.w	lr, ip
 80009d2:	fb09 5518 	mls	r5, r9, r8, r5
 80009d6:	0c1c      	lsrs	r4, r3, #16
 80009d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009dc:	fb08 f50e 	mul.w	r5, r8, lr
 80009e0:	42a5      	cmp	r5, r4
 80009e2:	fa02 f201 	lsl.w	r2, r2, r1
 80009e6:	fa00 f001 	lsl.w	r0, r0, r1
 80009ea:	d90b      	bls.n	8000a04 <__udivmoddi4+0x1b0>
 80009ec:	eb1c 0404 	adds.w	r4, ip, r4
 80009f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009f4:	f080 8088 	bcs.w	8000b08 <__udivmoddi4+0x2b4>
 80009f8:	42a5      	cmp	r5, r4
 80009fa:	f240 8085 	bls.w	8000b08 <__udivmoddi4+0x2b4>
 80009fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000a02:	4464      	add	r4, ip
 8000a04:	1b64      	subs	r4, r4, r5
 8000a06:	b29d      	uxth	r5, r3
 8000a08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a18:	45a6      	cmp	lr, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x1da>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a24:	d26c      	bcs.n	8000b00 <__udivmoddi4+0x2ac>
 8000a26:	45a6      	cmp	lr, r4
 8000a28:	d96a      	bls.n	8000b00 <__udivmoddi4+0x2ac>
 8000a2a:	3b02      	subs	r3, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a32:	fba3 9502 	umull	r9, r5, r3, r2
 8000a36:	eba4 040e 	sub.w	r4, r4, lr
 8000a3a:	42ac      	cmp	r4, r5
 8000a3c:	46c8      	mov	r8, r9
 8000a3e:	46ae      	mov	lr, r5
 8000a40:	d356      	bcc.n	8000af0 <__udivmoddi4+0x29c>
 8000a42:	d053      	beq.n	8000aec <__udivmoddi4+0x298>
 8000a44:	b156      	cbz	r6, 8000a5c <__udivmoddi4+0x208>
 8000a46:	ebb0 0208 	subs.w	r2, r0, r8
 8000a4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a52:	40ca      	lsrs	r2, r1
 8000a54:	40cc      	lsrs	r4, r1
 8000a56:	4317      	orrs	r7, r2
 8000a58:	e9c6 7400 	strd	r7, r4, [r6]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a64:	f1c3 0120 	rsb	r1, r3, #32
 8000a68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a70:	fa25 f101 	lsr.w	r1, r5, r1
 8000a74:	409d      	lsls	r5, r3
 8000a76:	432a      	orrs	r2, r5
 8000a78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7c:	fa1f fe8c 	uxth.w	lr, ip
 8000a80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a84:	fb07 1510 	mls	r5, r7, r0, r1
 8000a88:	0c11      	lsrs	r1, r2, #16
 8000a8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a92:	428d      	cmp	r5, r1
 8000a94:	fa04 f403 	lsl.w	r4, r4, r3
 8000a98:	d908      	bls.n	8000aac <__udivmoddi4+0x258>
 8000a9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aa2:	d22f      	bcs.n	8000b04 <__udivmoddi4+0x2b0>
 8000aa4:	428d      	cmp	r5, r1
 8000aa6:	d92d      	bls.n	8000b04 <__udivmoddi4+0x2b0>
 8000aa8:	3802      	subs	r0, #2
 8000aaa:	4461      	add	r1, ip
 8000aac:	1b49      	subs	r1, r1, r5
 8000aae:	b292      	uxth	r2, r2
 8000ab0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ab4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ab8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000abc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ac0:	4291      	cmp	r1, r2
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x282>
 8000ac4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000acc:	d216      	bcs.n	8000afc <__udivmoddi4+0x2a8>
 8000ace:	4291      	cmp	r1, r2
 8000ad0:	d914      	bls.n	8000afc <__udivmoddi4+0x2a8>
 8000ad2:	3d02      	subs	r5, #2
 8000ad4:	4462      	add	r2, ip
 8000ad6:	1a52      	subs	r2, r2, r1
 8000ad8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000adc:	e738      	b.n	8000950 <__udivmoddi4+0xfc>
 8000ade:	4631      	mov	r1, r6
 8000ae0:	4630      	mov	r0, r6
 8000ae2:	e708      	b.n	80008f6 <__udivmoddi4+0xa2>
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	e6e6      	b.n	80008b6 <__udivmoddi4+0x62>
 8000ae8:	4610      	mov	r0, r2
 8000aea:	e6fb      	b.n	80008e4 <__udivmoddi4+0x90>
 8000aec:	4548      	cmp	r0, r9
 8000aee:	d2a9      	bcs.n	8000a44 <__udivmoddi4+0x1f0>
 8000af0:	ebb9 0802 	subs.w	r8, r9, r2
 8000af4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000af8:	3b01      	subs	r3, #1
 8000afa:	e7a3      	b.n	8000a44 <__udivmoddi4+0x1f0>
 8000afc:	4645      	mov	r5, r8
 8000afe:	e7ea      	b.n	8000ad6 <__udivmoddi4+0x282>
 8000b00:	462b      	mov	r3, r5
 8000b02:	e794      	b.n	8000a2e <__udivmoddi4+0x1da>
 8000b04:	4640      	mov	r0, r8
 8000b06:	e7d1      	b.n	8000aac <__udivmoddi4+0x258>
 8000b08:	46d0      	mov	r8, sl
 8000b0a:	e77b      	b.n	8000a04 <__udivmoddi4+0x1b0>
 8000b0c:	3d02      	subs	r5, #2
 8000b0e:	4462      	add	r2, ip
 8000b10:	e732      	b.n	8000978 <__udivmoddi4+0x124>
 8000b12:	4608      	mov	r0, r1
 8000b14:	e70a      	b.n	800092c <__udivmoddi4+0xd8>
 8000b16:	4464      	add	r4, ip
 8000b18:	3802      	subs	r0, #2
 8000b1a:	e742      	b.n	80009a2 <__udivmoddi4+0x14e>

08000b1c <__aeabi_idiv0>:
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0b      	ldr	r4, [pc, #44]	; (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b4a:	f003 f8e7 	bl	8003d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f007 fe2b 	bl	80087a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f000 fbaf 	bl	80012b4 <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   r0, =_estack
 8000b58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 8000b64:	08008a88 	.word	0x08008a88
  ldr r2, =_sbss
 8000b68:	20000374 	.word	0x20000374
  ldr r4, =_ebss
 8000b6c:	20001880 	.word	0x20001880

08000b70 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <BusFault_Handler>
	...

08000b74 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000b74:	b570      	push	{r4, r5, r6, lr}
 8000b76:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000b78:	6940      	ldr	r0, [r0, #20]
 8000b7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b7c:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000b7e:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b80:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000b82:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000b86:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b8a:	6960      	ldr	r0, [r4, #20]
 8000b8c:	f104 011c 	add.w	r1, r4, #28
 8000b90:	462b      	mov	r3, r5
 8000b92:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b98:	4718      	bx	r3
 8000b9a:	bf00      	nop

08000b9c <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000b9c:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000b9e:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000ba0:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000ba2:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ba6:	4c1e      	ldr	r4, [pc, #120]	; (8000c20 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000ba8:	01db      	lsls	r3, r3, #7
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000baa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000bae:	784a      	ldrb	r2, [r1, #1]
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000bb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000bb4:	78ca      	ldrb	r2, [r1, #3]
 8000bb6:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 8000bba:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000bc4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bc8:	5ca2      	ldrb	r2, [r4, r2]
 8000bca:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000bce:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bd0:	5ca2      	ldrb	r2, [r4, r2]
 8000bd2:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000bd6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000bd8:	5ca2      	ldrb	r2, [r4, r2]
 8000bda:	4c12      	ldr	r4, [pc, #72]	; (8000c24 <ASPEP_sendBeacon+0x88>)
 8000bdc:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000be0:	5ca2      	ldrb	r2, [r4, r2]
 8000be2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000be6:	f043 0305 	orr.w	r3, r3, #5
 8000bea:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000bee:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000bf0:	b14b      	cbz	r3, 8000c06 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf2:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000bf4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000bf8:	b913      	cbnz	r3, 8000c00 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c04:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c06:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c10:	6481      	str	r1, [r0, #72]	; 0x48
 8000c12:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c14:	2204      	movs	r2, #4
 8000c16:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 8000c18:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c1c:	6940      	ldr	r0, [r0, #20]
 8000c1e:	4718      	bx	r3
 8000c20:	08008834 	.word	0x08008834
 8000c24:	08008824 	.word	0x08008824

08000c28 <ASPEP_sendPing>:
{
 8000c28:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000c2a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000c2c:	f890 c060 	ldrb.w	ip, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000c30:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c34:	4d1d      	ldr	r5, [pc, #116]	; (8000cac <ASPEP_sendPing+0x84>)
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c36:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8000c3a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000c3e:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c42:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8000c46:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000c4a:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c4e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c52:	b2d3      	uxtb	r3, r2
 8000c54:	4c16      	ldr	r4, [pc, #88]	; (8000cb0 <ASPEP_sendPing+0x88>)
 8000c56:	f043 0306 	orr.w	r3, r3, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c5a:	f042 0106 	orr.w	r1, r2, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c5e:	5ce3      	ldrb	r3, [r4, r3]
 8000c60:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000c64:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c66:	5ce3      	ldrb	r3, [r4, r3]
 8000c68:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000c6c:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c6e:	5ce3      	ldrb	r3, [r4, r3]
 8000c70:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000c74:	5ceb      	ldrb	r3, [r5, r3]
 8000c76:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000c7a:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000c7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c80:	b143      	cbz	r3, 8000c94 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c82:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000c84:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000c88:	b913      	cbnz	r3, 8000c90 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000c90:	bc30      	pop	{r4, r5}
 8000c92:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c94:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c9e:	6481      	str	r1, [r0, #72]	; 0x48
 8000ca0:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000ca6:	6940      	ldr	r0, [r0, #20]
}
 8000ca8:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000caa:	4718      	bx	r3
 8000cac:	08008824 	.word	0x08008824
 8000cb0:	08008834 	.word	0x08008834

08000cb4 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000cb4:	2a0a      	cmp	r2, #10
{
 8000cb6:	b410      	push	{r4}
 8000cb8:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 8000cba:	d00b      	beq.n	8000cd4 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000cbc:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000cc0:	2a01      	cmp	r2, #1
 8000cc2:	d921      	bls.n	8000d08 <ASPEP_getBuffer+0x54>
 8000cc4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000cc8:	2a01      	cmp	r2, #1
 8000cca:	d911      	bls.n	8000cf0 <ASPEP_getBuffer+0x3c>
        result = false;
 8000ccc:	2000      	movs	r0, #0
}
 8000cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cd2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000cd4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000cd8:	2a01      	cmp	r2, #1
 8000cda:	d8f7      	bhi.n	8000ccc <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000cdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 8000cde:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000ce0:	3204      	adds	r2, #4
 8000ce2:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000ce4:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 8000ce8:	4620      	mov	r0, r4
}
 8000cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cee:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cf0:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000cf2:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cf4:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000cf8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cfc:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cfe:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000d00:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d04:	600a      	str	r2, [r1, #0]
}
 8000d06:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d08:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000d0a:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d0c:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000d10:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d14:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d16:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000d18:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d1c:	600a      	str	r2, [r1, #0]
}
 8000d1e:	4770      	bx	lr

08000d20 <ASPEP_sendPacket>:
{
 8000d20:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000d22:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
 8000d26:	2802      	cmp	r0, #2
 8000d28:	d001      	beq.n	8000d2e <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000d2e:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000d32:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000d36:	f89c 006c 	ldrb.w	r0, [ip, #108]	; 0x6c
 8000d3a:	2801      	cmp	r0, #1
 8000d3c:	d104      	bne.n	8000d48 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000d3e:	f64f 60ca 	movw	r0, #65226	; 0xfeca
 8000d42:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000d44:	3202      	adds	r2, #2
 8000d46:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000d48:	2b0a      	cmp	r3, #10
 8000d4a:	d105      	bne.n	8000d58 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000d4c:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000d50:	b378      	cbz	r0, 8000db2 <ASPEP_sendPacket+0x92>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000d52:	2000      	movs	r0, #0
 8000d54:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000d58:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000d5c:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d5e:	4d35      	ldr	r5, [pc, #212]	; (8000e34 <ASPEP_sendPacket+0x114>)
 8000d60:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d62:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d64:	5d2e      	ldrb	r6, [r5, r4]
 8000d66:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000d6a:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000d6c:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d70:	5d2e      	ldrb	r6, [r5, r4]
 8000d72:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000d76:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d78:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d7a:	5d2c      	ldrb	r4, [r5, r4]
 8000d7c:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000d80:	406c      	eors	r4, r5
 8000d82:	4d2d      	ldr	r5, [pc, #180]	; (8000e38 <ASPEP_sendPacket+0x118>)
  *headerPtr |= (uint32_t)crc << 28;
 8000d84:	5d2c      	ldrb	r4, [r5, r4]
 8000d86:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000d8a:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000d90:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 8000d94:	b1e9      	cbz	r1, 8000dd2 <ASPEP_sendPacket+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d96:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000d98:	2b09      	cmp	r3, #9
 8000d9a:	d00c      	beq.n	8000db6 <ASPEP_sendPacket+0x96>
      else if (MCTL_SYNC == dataType)
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	d031      	beq.n	8000e04 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d135      	bne.n	8000e10 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8000da4:	f89c 0024 	ldrb.w	r0, [ip, #36]	; 0x24
 8000da8:	bb80      	cbnz	r0, 8000e0c <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
}
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000db2:	2001      	movs	r0, #1
}
 8000db4:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000db6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8000dba:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 8000dbc:	458e      	cmp	lr, r1
 8000dbe:	bf14      	ite	ne
 8000dc0:	2003      	movne	r0, #3
 8000dc2:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000dc4:	f8dc 1044 	ldr.w	r1, [ip, #68]	; 0x44
 8000dc8:	b381      	cbz	r1, 8000e2c <ASPEP_sendPacket+0x10c>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000dca:	2102      	movs	r1, #2
 8000dcc:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000dce:	809a      	strh	r2, [r3, #4]
}
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d025      	beq.n	8000e22 <ASPEP_sendPacket+0x102>
      else if (MCTL_SYNC == dataType)
 8000dd6:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000dd8:	f04f 0303 	mov.w	r3, #3
 8000ddc:	bf0b      	itete	eq
 8000dde:	f88c 302e 	strbeq.w	r3, [ip, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000de2:	f88c 3024 	strbne.w	r3, [ip, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000de6:	f10c 0328 	addeq.w	r3, ip, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000dea:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000dee:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8000df2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000df4:	f8dc 3058 	ldr.w	r3, [ip, #88]	; 0x58
 8000df8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000dfc:	4671      	mov	r1, lr
 8000dfe:	4798      	blx	r3
 8000e00:	2000      	movs	r0, #0
}
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 8000e04:	f89c 302e 	ldrb.w	r3, [ip, #46]	; 0x2e
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d003      	beq.n	8000e14 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 8000e0c:	2003      	movs	r0, #3
}
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t result = ASPEP_OK;
 8000e10:	2000      	movs	r0, #0
}
 8000e12:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->syncBuffer.state = pending;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f88c 302e 	strb.w	r3, [ip, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000e1a:	f8ac 202c 	strh.w	r2, [ip, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000e1e:	2000      	movs	r0, #0
}
 8000e20:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000e22:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8000e26:	2103      	movs	r1, #3
 8000e28:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e2a:	e7e0      	b.n	8000dee <ASPEP_sendPacket+0xce>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e2c:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 8000e30:	e7cb      	b.n	8000dca <ASPEP_sendPacket+0xaa>
 8000e32:	bf00      	nop
 8000e34:	08008834 	.word	0x08008834
 8000e38:	08008824 	.word	0x08008824

08000e3c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000e3c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000e3e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
{
 8000e44:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000e46:	d013      	beq.n	8000e70 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000e48:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000e4e:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000e52:	2a02      	cmp	r2, #2
 8000e54:	d013      	beq.n	8000e7e <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d11d      	bne.n	8000e96 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e5a:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e5e:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e60:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e62:	2204      	movs	r2, #4
 8000e64:	6940      	ldr	r0, [r0, #20]
 8000e66:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000e6e:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000e70:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000e74:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000e76:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000e78:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000e7c:	d10b      	bne.n	8000e96 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e84:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e86:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000e88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e8a:	6960      	ldr	r0, [r4, #20]
 8000e8c:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000e94:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000e96:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e9a:	b1cb      	cbz	r3, 8000ed0 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000e9c:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000e9e:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000ea0:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	889a      	ldrh	r2, [r3, #4]
 8000ea6:	6960      	ldr	r0, [r4, #20]
 8000ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000eaa:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000eac:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d007      	beq.n	8000ec4 <ASPEP_HWDataTransmittedIT+0x88>
 8000eb4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d003      	beq.n	8000ec4 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000ec0:	b662      	cpsie	i
}
 8000ec2:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000ec4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ec6:	0063      	lsls	r3, r4, #1
 8000ec8:	3368      	adds	r3, #104	; 0x68
 8000eca:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000ecc:	6463      	str	r3, [r4, #68]	; 0x44
        {
 8000ece:	e7f7      	b.n	8000ec0 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000ed0:	64a3      	str	r3, [r4, #72]	; 0x48
 8000ed2:	e7f5      	b.n	8000ec0 <ASPEP_HWDataTransmittedIT+0x84>

08000ed4 <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000ed4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000ed8:	69c2      	ldr	r2, [r0, #28]
{
 8000eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 8000ede:	2500      	movs	r5, #0
{
 8000ee0:	4604      	mov	r4, r0
    *packetLength = 0;
 8000ee2:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000ee4:	b193      	cbz	r3, 8000f0c <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000ee6:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000eea:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 8000eee:	2e01      	cmp	r6, #1
 8000ef0:	d054      	beq.n	8000f9c <ASPEP_RXframeProcess+0xc8>
 8000ef2:	2e02      	cmp	r6, #2
 8000ef4:	d03e      	beq.n	8000f74 <ASPEP_RXframeProcess+0xa0>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d033      	beq.n	8000f62 <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000efa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000efc:	6960      	ldr	r0, [r4, #20]
 8000efe:	2204      	movs	r2, #4
 8000f00:	f104 011c 	add.w	r1, r4, #28
 8000f04:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000f06:	4628      	mov	r0, r5
 8000f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000f0c:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d0f8      	beq.n	8000f06 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f14:	042b      	lsls	r3, r5, #16
 8000f16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f1a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000f1e:	489b      	ldr	r0, [pc, #620]	; (800118c <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f20:	4d9b      	ldr	r5, [pc, #620]	; (8001190 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f22:	f082 0209 	eor.w	r2, r2, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000f26:	5c81      	ldrb	r1, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f28:	f043 020f 	orr.w	r2, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000f2c:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f30:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000f32:	5ceb      	ldrb	r3, [r5, r3]
 8000f34:	ea42 7303 	orr.w	r3, r2, r3, lsl #28
 8000f38:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000f3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d03a      	beq.n	8000fb8 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000f44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f48:	b913      	cbnz	r3, 8000f50 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000f50:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000f52:	6960      	ldr	r0, [r4, #20]
 8000f54:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8000f56:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000f5a:	4798      	blx	r3
}
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000f62:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000f64:	2905      	cmp	r1, #5
 8000f66:	f000 809e 	beq.w	80010a6 <ASPEP_RXframeProcess+0x1d2>
          else if (PING == pHandle->rxPacketType)
 8000f6a:	2906      	cmp	r1, #6
 8000f6c:	f000 80e3 	beq.w	8001136 <ASPEP_RXframeProcess+0x262>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000f70:	4635      	mov	r5, r6
 8000f72:	e7c2      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000f74:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8000f76:	2e05      	cmp	r6, #5
 8000f78:	d060      	beq.n	800103c <ASPEP_RXframeProcess+0x168>
          else if (PING == pHandle->rxPacketType)
 8000f7a:	2e06      	cmp	r6, #6
 8000f7c:	f000 80e2 	beq.w	8001144 <ASPEP_RXframeProcess+0x270>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000f80:	2e09      	cmp	r6, #9
 8000f82:	d1ba      	bne.n	8000efa <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000f84:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000f88:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000f8c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000f8e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f90:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000f92:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f96:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000f98:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000f9a:	e7ae      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000f9c:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8000f9e:	2905      	cmp	r1, #5
 8000fa0:	d016      	beq.n	8000fd0 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 8000fa2:	2906      	cmp	r1, #6
 8000fa4:	d1a9      	bne.n	8000efa <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000fa6:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000faa:	4631      	mov	r1, r6
 8000fac:	f7ff fe3c 	bl	8000c28 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000fb6:	e7a0      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000fb8:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000fc2:	64a1      	str	r1, [r4, #72]	; 0x48
 8000fc4:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fca:	6960      	ldr	r0, [r4, #20]
 8000fcc:	4798      	blx	r3
  return (result);
 8000fce:	e7bf      	b.n	8000f50 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000fd0:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000fd2:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fd4:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fd8:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fdc:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fe0:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000fe4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000fe8:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fea:	4281      	cmp	r1, r0
 8000fec:	bf28      	it	cs
 8000fee:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ff0:	42b3      	cmp	r3, r6
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	bf28      	it	cs
 8000ff6:	46b4      	movcs	ip, r6
 8000ff8:	f36c 0507 	bfi	r5, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ffc:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001000:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001004:	45bc      	cmp	ip, r7
 8001006:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001008:	f361 250f 	bfi	r5, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800100c:	bf28      	it	cs
 800100e:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001010:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001012:	f369 4517 	bfi	r5, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001016:	46c1      	mov	r9, r8
 8001018:	bf28      	it	cs
 800101a:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800101c:	f369 651f 	bfi	r5, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001020:	42b3      	cmp	r3, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001022:	66e5      	str	r5, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001024:	f240 8093 	bls.w	800114e <ASPEP_RXframeProcess+0x27a>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001028:	2300      	movs	r3, #0
 800102a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 800102e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8001032:	4620      	mov	r0, r4
 8001034:	f7ff fdb2 	bl	8000b9c <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001038:	2500      	movs	r5, #0
 800103a:	e75e      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800103c:	7f46      	ldrb	r6, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800103e:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001042:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001044:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001048:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800104c:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001050:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001054:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001056:	42b0      	cmp	r0, r6
 8001058:	bf28      	it	cs
 800105a:	4630      	movcs	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800105c:	4563      	cmp	r3, ip
 800105e:	461f      	mov	r7, r3
 8001060:	4629      	mov	r1, r5
 8001062:	bf28      	it	cs
 8001064:	4667      	movcs	r7, ip
 8001066:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800106a:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800106e:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001072:	4577      	cmp	r7, lr
 8001074:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001076:	f360 210f 	bfi	r1, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800107a:	bf28      	it	cs
 800107c:	46f2      	movcs	sl, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800107e:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001080:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001084:	46ca      	mov	sl, r9
 8001086:	bf28      	it	cs
 8001088:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800108a:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800108e:	4563      	cmp	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001090:	66e1      	str	r1, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001092:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8001096:	d96b      	bls.n	8001170 <ASPEP_RXframeProcess+0x29c>
 8001098:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 800109c:	4620      	mov	r0, r4
 800109e:	f7ff fd7d 	bl	8000b9c <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80010a2:	2500      	movs	r5, #0
 80010a4:	e729      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010a6:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010a8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010ac:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010ae:	f890 e06c 	ldrb.w	lr, [r0, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010b2:	f890 706e 	ldrb.w	r7, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010b6:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010ba:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010be:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010c0:	42a9      	cmp	r1, r5
 80010c2:	bf28      	it	cs
 80010c4:	4629      	movcs	r1, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010c6:	4573      	cmp	r3, lr
 80010c8:	4618      	mov	r0, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80010ca:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010ce:	bf28      	it	cs
 80010d0:	4670      	movcs	r0, lr
 80010d2:	f360 0607 	bfi	r6, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80010d6:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010da:	45b8      	cmp	r8, r7
 80010dc:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010de:	f361 260f 	bfi	r6, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010e2:	bf28      	it	cs
 80010e4:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010e6:	45ca      	cmp	sl, r9
 80010e8:	46d4      	mov	ip, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010ea:	f360 4617 	bfi	r6, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010ee:	bf28      	it	cs
 80010f0:	46cc      	movcs	ip, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010f2:	f36c 661f 	bfi	r6, ip, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010f6:	4573      	cmp	r3, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010f8:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010fa:	d898      	bhi.n	800102e <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80010fc:	428d      	cmp	r5, r1
 80010fe:	d896      	bhi.n	800102e <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001100:	45b8      	cmp	r8, r7
 8001102:	d894      	bhi.n	800102e <ASPEP_RXframeProcess+0x15a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001104:	45ca      	cmp	sl, r9
 8001106:	d892      	bhi.n	800102e <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001108:	f3c2 1302 	ubfx	r3, r2, #4, #3
 800110c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8001110:	429a      	cmp	r2, r3
 8001112:	d18c      	bne.n	800102e <ASPEP_RXframeProcess+0x15a>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001114:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001116:	1c42      	adds	r2, r0, #1
 8001118:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800111a:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800111c:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 800111e:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001122:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001124:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001126:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001128:	f8a4 c00e 	strh.w	ip, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800112c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001130:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8001134:	e77b      	b.n	800102e <ASPEP_RXframeProcess+0x15a>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8001136:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800113a:	4631      	mov	r1, r6
 800113c:	f7ff fd74 	bl	8000c28 <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001140:	4635      	mov	r5, r6
 8001142:	e6da      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001144:	7f42      	ldrb	r2, [r0, #29]
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff fd6e 	bl	8000c28 <ASPEP_sendPing>
 800114c:	e6d5      	b.n	8000efa <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800114e:	4288      	cmp	r0, r1
 8001150:	f63f af6a 	bhi.w	8001028 <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001154:	45bc      	cmp	ip, r7
 8001156:	f63f af67 	bhi.w	8001028 <ASPEP_RXframeProcess+0x154>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800115a:	45f0      	cmp	r8, lr
 800115c:	f63f af64 	bhi.w	8001028 <ASPEP_RXframeProcess+0x154>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001160:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8001164:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8001168:	4299      	cmp	r1, r3
 800116a:	f47f af5d 	bne.w	8001028 <ASPEP_RXframeProcess+0x154>
 800116e:	e75e      	b.n	800102e <ASPEP_RXframeProcess+0x15a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001170:	4286      	cmp	r6, r0
 8001172:	d891      	bhi.n	8001098 <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001174:	4577      	cmp	r7, lr
 8001176:	d88f      	bhi.n	8001098 <ASPEP_RXframeProcess+0x1c4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001178:	45c1      	cmp	r9, r8
 800117a:	d88d      	bhi.n	8001098 <ASPEP_RXframeProcess+0x1c4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800117c:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8001180:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001184:	1aeb      	subs	r3, r5, r3
 8001186:	425d      	negs	r5, r3
 8001188:	415d      	adcs	r5, r3
 800118a:	e785      	b.n	8001098 <ASPEP_RXframeProcess+0x1c4>
 800118c:	08008834 	.word	0x08008834
 8001190:	08008824 	.word	0x08008824

08001194 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001194:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8001196:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 800119a:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 800119c:	b13b      	cbz	r3, 80011ae <ASPEP_HWDataReceivedIT+0x1a>
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d104      	bne.n	80011ac <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 80011a2:	2200      	movs	r2, #0
 80011a4:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 80011a8:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80011ac:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80011ae:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80011b0:	4a1e      	ldr	r2, [pc, #120]	; (800122c <ASPEP_HWDataReceivedIT+0x98>)
 80011b2:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80011ba:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80011c2:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	b95b      	cbnz	r3, 80011e6 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80011ce:	7f03      	ldrb	r3, [r0, #28]
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 80011d8:	d809      	bhi.n	80011ee <ASPEP_HWDataReceivedIT+0x5a>
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d81e      	bhi.n	800121c <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80011de:	2301      	movs	r3, #1
 80011e0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80011e4:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80011e6:	2304      	movs	r3, #4
 80011e8:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	d1f5      	bne.n	80011de <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80011f2:	8b83      	ldrh	r3, [r0, #28]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 80011fa:	b17b      	cbz	r3, 800121c <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 80011fc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8001200:	429a      	cmp	r2, r3
 8001202:	d30f      	bcc.n	8001224 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001204:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8001208:	6981      	ldr	r1, [r0, #24]
 800120a:	6940      	ldr	r0, [r0, #20]
 800120c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001210:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001212:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8001214:	2301      	movs	r3, #1
 8001216:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 800121a:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 800121c:	2301      	movs	r3, #1
 800121e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8001222:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8001224:	2302      	movs	r3, #2
 8001226:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 800122a:	bd10      	pop	{r4, pc}
 800122c:	08008834 	.word	0x08008834

08001230 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8001230:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001232:	2200      	movs	r2, #0
 8001234:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001238:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800123a:	6940      	ldr	r0, [r0, #20]
 800123c:	2204      	movs	r2, #4
 800123e:	311c      	adds	r1, #28
 8001240:	4718      	bx	r3
 8001242:	bf00      	nop

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b510      	push	{r4, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001248:	2238      	movs	r2, #56	; 0x38
 800124a:	2100      	movs	r1, #0
 800124c:	a806      	add	r0, sp, #24
 800124e:	f007 faa3 	bl	8008798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001252:	2000      	movs	r0, #0
 8001254:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001258:	e9cd 0003 	strd	r0, r0, [sp, #12]
 800125c:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800125e:	f003 fe95 	bl	8004f8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001264:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001266:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001268:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800126c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001270:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001274:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001276:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127e:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001282:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f003 ff00 	bl	8005088 <HAL_RCC_OscConfig>
 8001288:	b108      	cbz	r0, 800128e <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 800128a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128e:	2104      	movs	r1, #4
 8001290:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001294:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129c:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a2:	f004 f975 	bl	8005590 <HAL_RCC_ClockConfig>
 80012a6:	b108      	cbz	r0, 80012ac <SystemClock_Config+0x68>
 80012a8:	b672      	cpsid	i
  while (1)
 80012aa:	e7fe      	b.n	80012aa <SystemClock_Config+0x66>
  HAL_RCC_EnableCSS();
 80012ac:	f004 fa9e 	bl	80057ec <HAL_RCC_EnableCSS>
}
 80012b0:	b014      	add	sp, #80	; 0x50
 80012b2:	bd10      	pop	{r4, pc}

080012b4 <main>:
{
 80012b4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	2400      	movs	r4, #0
{
 80012ba:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 80012bc:	f002 fd5e 	bl	8003d7c <HAL_Init>
  SystemClock_Config();
 80012c0:	f7ff ffc0 	bl	8001244 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 80012c8:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4da9      	ldr	r5, [pc, #676]	; (8001574 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	941b      	str	r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 80012d2:	48a9      	ldr	r0, [pc, #676]	; (8001578 <main+0x2c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	64eb      	str	r3, [r5, #76]	; 0x4c
 80012da:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	9304      	str	r3, [sp, #16]
 80012e2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	64eb      	str	r3, [r5, #76]	; 0x4c
 80012ec:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	9305      	str	r3, [sp, #20]
 80012f4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64eb      	str	r3, [r5, #76]	; 0x4c
 80012fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	9306      	str	r3, [sp, #24]
 8001306:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001310:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001312:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8001316:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 800131a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 800131e:	f003 fe2f 	bl	8004f80 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001322:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001326:	4895      	ldr	r0, [pc, #596]	; (800157c <main+0x2c8>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001328:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800132a:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001332:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	f04f 0820 	mov.w	r8, #32
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800133c:	f003 fd26 	bl	8004d8c <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 8001340:	488d      	ldr	r0, [pc, #564]	; (8001578 <main+0x2c4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 8001344:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001346:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	e9cd 8617 	strd	r8, r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 800134c:	f003 fd1e 	bl	8004d8c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001350:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	64ab      	str	r3, [r5, #72]	; 0x48
 8001358:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001364:	4333      	orrs	r3, r6
 8001366:	64ab      	str	r3, [r5, #72]	; 0x48
 8001368:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 800136a:	4d85      	ldr	r5, [pc, #532]	; (8001580 <main+0x2cc>)
  ADC_MultiModeTypeDef multimode = {0};
 800136c:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136e:	4033      	ands	r3, r6
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001370:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001372:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001374:	223c      	movs	r2, #60	; 0x3c
 8001376:	a817      	add	r0, sp, #92	; 0x5c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001378:	9b03      	ldr	r3, [sp, #12]
  ADC_MultiModeTypeDef multimode = {0};
 800137a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800137e:	f007 fa0b 	bl	8008798 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	4621      	mov	r1, r4
 8001384:	4642      	mov	r2, r8
 8001386:	a80f      	add	r0, sp, #60	; 0x3c
 8001388:	f007 fa06 	bl	8008798 <memset>
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001390:	e9c5 4604 	strd	r4, r6, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001394:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 2;
 8001398:	622f      	str	r7, [r5, #32]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800139a:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013a4:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013a6:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Instance = ADC1;
 80013aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013ae:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	2404      	movs	r4, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b4:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80013b6:	602b      	str	r3, [r5, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013b8:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ba:	61ac      	str	r4, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	f002 fd08 	bl	8003dd0 <HAL_ADC_Init>
 80013c0:	b108      	cbz	r0, 80013c6 <main+0x112>
 80013c2:	b672      	cpsid	i
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0x110>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013c6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013c8:	a90b      	add	r1, sp, #44	; 0x2c
 80013ca:	4628      	mov	r0, r5
 80013cc:	f003 fb5e 	bl	8004a8c <HAL_ADCEx_MultiModeConfigChannel>
 80013d0:	b108      	cbz	r0, 80013d6 <main+0x122>
 80013d2:	b672      	cpsid	i
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <main+0x120>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013d6:	4b6b      	ldr	r3, [pc, #428]	; (8001584 <main+0x2d0>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80013d8:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
  sConfigInjected.InjectedOffset = 0;
 80013dc:	e9cd 401b 	strd	r4, r0, [sp, #108]	; 0x6c
  sConfigInjected.QueueInjectedContext = DISABLE;
 80013e0:	f88d 0082 	strb.w	r0, [sp, #130]	; 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80013e4:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013e8:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80013ec:	f04f 087f 	mov.w	r8, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 80013f0:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80013f4:	f44f 7980 	mov.w	r9, #256	; 0x100
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80013f8:	a917      	add	r1, sp, #92	; 0x5c
 80013fa:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013fc:	e9cd 3b17 	strd	r3, fp, [sp, #92]	; 0x5c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 8001400:	e9cd a921 	strd	sl, r9, [sp, #132]	; 0x84
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001404:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001406:	961f      	str	r6, [sp, #124]	; 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001408:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800140c:	f003 f84a 	bl	80044a4 <HAL_ADCEx_InjectedConfigChannel>
 8001410:	b108      	cbz	r0, 8001416 <main+0x162>
 8001412:	b672      	cpsid	i
  while (1)
 8001414:	e7fe      	b.n	8001414 <main+0x160>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001416:	f8df c188 	ldr.w	ip, [pc, #392]	; 80015a0 <main+0x2ec>
  sConfig.Offset = 0;
 800141a:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141c:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	a90f      	add	r1, sp, #60	; 0x3c
 8001420:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001422:	e9cd 4811 	strd	r4, r8, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001426:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	f002 fdd4 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 8001430:	b108      	cbz	r0, 8001436 <main+0x182>
 8001432:	b672      	cpsid	i
  while (1)
 8001434:	e7fe      	b.n	8001434 <main+0x180>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001438:	4d53      	ldr	r5, [pc, #332]	; (8001588 <main+0x2d4>)
 800143a:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143c:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800143e:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	f002 fdc9 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 8001446:	4601      	mov	r1, r0
 8001448:	b108      	cbz	r0, 800144e <main+0x19a>
 800144a:	b672      	cpsid	i
  while (1)
 800144c:	e7fe      	b.n	800144c <main+0x198>
  hadc2.Instance = ADC2;
 800144e:	4d4f      	ldr	r5, [pc, #316]	; (800158c <main+0x2d8>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001450:	9001      	str	r0, [sp, #4]
 8001452:	223c      	movs	r2, #60	; 0x3c
 8001454:	a817      	add	r0, sp, #92	; 0x5c
 8001456:	f007 f99f 	bl	8008798 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800145a:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 800145c:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <main+0x2dc>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800145e:	83a9      	strh	r1, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001460:	4628      	mov	r0, r5
  hadc2.Instance = ADC2;
 8001462:	602b      	str	r3, [r5, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001464:	e9c5 1101 	strd	r1, r1, [r5, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001468:	e9c5 1104 	strd	r1, r1, [r5, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800146c:	60ef      	str	r7, [r5, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800146e:	61ac      	str	r4, [r5, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001470:	622e      	str	r6, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001472:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001476:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800147a:	63e9      	str	r1, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800147c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001480:	f002 fca6 	bl	8003dd0 <HAL_ADC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	b108      	cbz	r0, 800148c <main+0x1d8>
 8001488:	b672      	cpsid	i
  while (1)
 800148a:	e7fe      	b.n	800148a <main+0x1d6>
  sConfigInjected.InjectedOffset = 0;
 800148c:	e9cd 431b 	strd	r4, r3, [sp, #108]	; 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001490:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001494:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001498:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800149c:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_17;
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <main+0x2e0>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80014a0:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80014a2:	a917      	add	r1, sp, #92	; 0x5c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 80014a4:	e9cd a921 	strd	sl, r9, [sp, #132]	; 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80014a8:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80014ac:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigInjected.InjectedNbrOfConversion = 1;
 80014b0:	961f      	str	r6, [sp, #124]	; 0x7c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_17;
 80014b2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80014b4:	f002 fff6 	bl	80044a4 <HAL_ADCEx_InjectedConfigChannel>
 80014b8:	4604      	mov	r4, r0
 80014ba:	b108      	cbz	r0, 80014c0 <main+0x20c>
 80014bc:	b672      	cpsid	i
  while (1)
 80014be:	e7fe      	b.n	80014be <main+0x20a>
  htim1.Instance = TIM1;
 80014c0:	4d35      	ldr	r5, [pc, #212]	; (8001598 <main+0x2e4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c2:	9008      	str	r0, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c4:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 80014c8:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014cc:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 80014d0:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 80014d4:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014dc:	9015      	str	r0, [sp, #84]	; 0x54
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014de:	4601      	mov	r1, r0
 80014e0:	2234      	movs	r2, #52	; 0x34
 80014e2:	a817      	add	r0, sp, #92	; 0x5c
 80014e4:	f007 f958 	bl	8008798 <memset>
  htim1.Instance = TIM1;
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <main+0x2e8>)
 80014ea:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ec:	4628      	mov	r0, r5
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 80014ee:	f241 6322 	movw	r3, #5666	; 0x1622
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80014f6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 80014fc:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fe:	f004 fb85 	bl	8005c0c <HAL_TIM_Base_Init>
 8001502:	b108      	cbz	r0, 8001508 <main+0x254>
 8001504:	b672      	cpsid	i
  while (1)
 8001506:	e7fe      	b.n	8001506 <main+0x252>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150c:	a90b      	add	r1, sp, #44	; 0x2c
 800150e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001510:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001512:	f004 fc8d 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 8001516:	b108      	cbz	r0, 800151c <main+0x268>
 8001518:	b672      	cpsid	i
  while (1)
 800151a:	e7fe      	b.n	800151a <main+0x266>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800151c:	4628      	mov	r0, r5
 800151e:	f004 fbff 	bl	8005d20 <HAL_TIM_PWM_Init>
 8001522:	b108      	cbz	r0, 8001528 <main+0x274>
 8001524:	b672      	cpsid	i
  while (1)
 8001526:	e7fe      	b.n	8001526 <main+0x272>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001528:	2370      	movs	r3, #112	; 0x70
 800152a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800152c:	2680      	movs	r6, #128	; 0x80
 800152e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001530:	4819      	ldr	r0, [pc, #100]	; (8001598 <main+0x2e4>)
 8001532:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001534:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001538:	f004 fe8e 	bl	8006258 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	b108      	cbz	r0, 8001542 <main+0x28e>
 800153e:	b672      	cpsid	i
  while (1)
 8001540:	e7fe      	b.n	8001540 <main+0x28c>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001542:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001546:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154a:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001550:	4602      	mov	r2, r0
 8001552:	a90f      	add	r1, sp, #60	; 0x3c
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <main+0x2e4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001556:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f004 fd7c 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 800155c:	b108      	cbz	r0, 8001562 <main+0x2ae>
 800155e:	b672      	cpsid	i
  while (1)
 8001560:	e7fe      	b.n	8001560 <main+0x2ac>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <main+0x2e4>)
 8001564:	2204      	movs	r2, #4
 8001566:	a90f      	add	r1, sp, #60	; 0x3c
 8001568:	f004 fd74 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 800156c:	b1d0      	cbz	r0, 80015a4 <main+0x2f0>
 800156e:	b672      	cpsid	i
  while (1)
 8001570:	e7fe      	b.n	8001570 <main+0x2bc>
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	20000390 	.word	0x20000390
 8001584:	3ac04000 	.word	0x3ac04000
 8001588:	14f00020 	.word	0x14f00020
 800158c:	200003fc 	.word	0x200003fc
 8001590:	50000100 	.word	0x50000100
 8001594:	47520000 	.word	0x47520000
 8001598:	20000528 	.word	0x20000528
 800159c:	40012c00 	.word	0x40012c00
 80015a0:	04300002 	.word	0x04300002
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015a4:	4864      	ldr	r0, [pc, #400]	; (8001738 <main+0x484>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	a90f      	add	r1, sp, #60	; 0x3c
 80015aa:	f004 fd53 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	b108      	cbz	r0, 80015b4 <main+0x300>
 80015b0:	b672      	cpsid	i
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <main+0x2fe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b4:	4860      	ldr	r0, [pc, #384]	; (8001738 <main+0x484>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	a90f      	add	r1, sp, #60	; 0x3c
 80015ba:	f004 fd4b 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 80015be:	b108      	cbz	r0, 80015c4 <main+0x310>
 80015c0:	b672      	cpsid	i
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0x30e>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80015c4:	237f      	movs	r3, #127	; 0x7f
 80015c6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	e9cd 031b 	strd	r0, r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	e9cd 031f 	strd	r0, r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015de:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e2:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 3;
 80015e6:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	4853      	ldr	r0, [pc, #332]	; (8001738 <main+0x484>)
  sBreakDeadTimeConfig.Break2Filter = 3;
 80015ea:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ec:	a917      	add	r1, sp, #92	; 0x5c
 80015ee:	f004 fe7d 	bl	80062ec <HAL_TIMEx_ConfigBreakDeadTime>
 80015f2:	4604      	mov	r4, r0
 80015f4:	b108      	cbz	r0, 80015fa <main+0x346>
 80015f6:	b672      	cpsid	i
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <main+0x344>
  htim2.Instance = TIM2;
 80015fa:	4d50      	ldr	r5, [pc, #320]	; (800173c <main+0x488>)
  HAL_TIM_MspPostInit(&htim1);
 80015fc:	484e      	ldr	r0, [pc, #312]	; (8001738 <main+0x484>)
 80015fe:	f002 f8ff 	bl	8003800 <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = LF_TIMER_PSC;
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001608:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160c:	4628      	mov	r0, r5
  htim2.Init.Period = LF_TIMER_ARR;
 800160e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 8001616:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800161e:	9411      	str	r4, [sp, #68]	; 0x44
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001624:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = LF_TIMER_ARR;
 8001626:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001628:	f004 faf0 	bl	8005c0c <HAL_TIM_Base_Init>
 800162c:	b108      	cbz	r0, 8001632 <main+0x37e>
 800162e:	b672      	cpsid	i
  while (1)
 8001630:	e7fe      	b.n	8001630 <main+0x37c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001636:	a917      	add	r1, sp, #92	; 0x5c
 8001638:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163c:	f004 fbf8 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 8001640:	b108      	cbz	r0, 8001646 <main+0x392>
 8001642:	b672      	cpsid	i
  while (1)
 8001644:	e7fe      	b.n	8001644 <main+0x390>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001646:	2310      	movs	r3, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001648:	a90f      	add	r1, sp, #60	; 0x3c
 800164a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800164c:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800164e:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001650:	f004 fe02 	bl	8006258 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4602      	mov	r2, r0
 8001656:	b108      	cbz	r0, 800165c <main+0x3a8>
 8001658:	b672      	cpsid	i
  while (1)
 800165a:	e7fe      	b.n	800165a <main+0x3a6>
  huart2.Instance = USART2;
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <main+0x48c>)
 800165e:	4c39      	ldr	r4, [pc, #228]	; (8001744 <main+0x490>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 8001662:	f44f 10e1 	mov.w	r0, #1843200	; 0x1c2000
 8001666:	e9c3 4000 	strd	r4, r0, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166a:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166c:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 800166e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001672:	e9c3 2104 	strd	r2, r1, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001676:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800167a:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167e:	f005 f8c1 	bl	8006804 <HAL_UART_Init>
 8001682:	b108      	cbz	r0, 8001688 <main+0x3d4>
 8001684:	b672      	cpsid	i
  while (1)
 8001686:	e7fe      	b.n	8001686 <main+0x3d2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	482d      	ldr	r0, [pc, #180]	; (8001740 <main+0x48c>)
 800168c:	f005 f944 	bl	8006918 <HAL_UARTEx_SetTxFifoThreshold>
 8001690:	4601      	mov	r1, r0
 8001692:	b108      	cbz	r0, 8001698 <main+0x3e4>
 8001694:	b672      	cpsid	i
  while (1)
 8001696:	e7fe      	b.n	8001696 <main+0x3e2>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	4829      	ldr	r0, [pc, #164]	; (8001740 <main+0x48c>)
 800169a:	f005 f97f 	bl	800699c <HAL_UARTEx_SetRxFifoThreshold>
 800169e:	b108      	cbz	r0, 80016a4 <main+0x3f0>
 80016a0:	b672      	cpsid	i
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <main+0x3ee>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016a4:	4826      	ldr	r0, [pc, #152]	; (8001740 <main+0x48c>)
 80016a6:	f005 f919 	bl	80068dc <HAL_UARTEx_DisableFifoMode>
 80016aa:	4604      	mov	r4, r0
 80016ac:	b108      	cbz	r0, 80016b2 <main+0x3fe>
 80016ae:	b672      	cpsid	i
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <main+0x3fc>
  MX_MotorControl_Init();
 80016b2:	f000 febb 	bl	800242c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80016b6:	2103      	movs	r1, #3
 80016b8:	2201      	movs	r2, #1
 80016ba:	2026      	movs	r0, #38	; 0x26
 80016bc:	f003 fa64 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c0:	2026      	movs	r0, #38	; 0x26
 80016c2:	f003 fa9f 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80016c6:	4622      	mov	r2, r4
 80016c8:	2103      	movs	r1, #3
 80016ca:	200b      	movs	r0, #11
 80016cc:	f003 fa5c 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016d0:	200b      	movs	r0, #11
 80016d2:	f003 fa97 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80016d6:	4622      	mov	r2, r4
 80016d8:	2102      	movs	r1, #2
 80016da:	201c      	movs	r0, #28
 80016dc:	f003 fa54 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e0:	201c      	movs	r0, #28
 80016e2:	f003 fa8f 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80016e6:	4622      	mov	r2, r4
 80016e8:	2101      	movs	r1, #1
 80016ea:	2018      	movs	r0, #24
 80016ec:	f003 fa4c 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80016f0:	2018      	movs	r0, #24
 80016f2:	f003 fa87 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80016f6:	4622      	mov	r2, r4
 80016f8:	2101      	movs	r1, #1
 80016fa:	2019      	movs	r0, #25
 80016fc:	f003 fa44 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001700:	2019      	movs	r0, #25
 8001702:	f003 fa7f 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	4611      	mov	r1, r2
 800170a:	2012      	movs	r0, #18
 800170c:	f003 fa3c 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001710:	2012      	movs	r0, #18
 8001712:	f003 fa77 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001716:	2028      	movs	r0, #40	; 0x28
 8001718:	4622      	mov	r2, r4
 800171a:	2103      	movs	r1, #3
 800171c:	f003 fa34 	bl	8004b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001720:	2028      	movs	r0, #40	; 0x28
 8001722:	f003 fa6f 	bl	8004c04 <HAL_NVIC_EnableIRQ>
	  MC_ProgramSpeedRampMotor1(700,5000);
 8001726:	f241 3188 	movw	r1, #5000	; 0x1388
 800172a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800172e:	f000 f819 	bl	8001764 <MC_ProgramSpeedRampMotor1>
	  MC_StartMotor1();
 8001732:	f000 f80b 	bl	800174c <MC_StartMotor1>
  while (1)
 8001736:	e7f6      	b.n	8001726 <main+0x472>
 8001738:	20000528 	.word	0x20000528
 800173c:	20000574 	.word	0x20000574
 8001740:	200005c0 	.word	0x200005c0
 8001744:	40004400 	.word	0x40004400

08001748 <Error_Handler>:
 8001748:	b672      	cpsid	i
  while (1)
 800174a:	e7fe      	b.n	800174a <Error_Handler+0x2>

0800174c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <MC_StartMotor1+0x8>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	f000 b870 	b.w	8001834 <MCI_StartMotor>
 8001754:	20001818 	.word	0x20001818

08001758 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <MC_StopMotor1+0x8>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	f000 b880 	b.w	8001860 <MCI_StopMotor>
 8001760:	20001818 	.word	0x20001818

08001764 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001764:	b410      	push	{r4}
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8001766:	4c04      	ldr	r4, [pc, #16]	; (8001778 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8001768:	4603      	mov	r3, r0
 800176a:	460a      	mov	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 800176c:	6820      	ldr	r0, [r4, #0]
}
 800176e:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8001772:	4619      	mov	r1, r3
 8001774:	f000 b81e 	b.w	80017b4 <MCI_ExecSpeedRamp>
 8001778:	20001818 	.word	0x20001818

0800177c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 800177c:	4b01      	ldr	r3, [pc, #4]	; (8001784 <MC_GetSTMStateMotor1+0x8>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	f000 b852 	b.w	8001828 <MCI_GetSTMState>
 8001784:	20001818 	.word	0x20001818

08001788 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <MC_APP_PostMediumFrequencyHook_M1>:
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pSixStepVars = pSixStepVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001790:	f04f 0c00 	mov.w	ip, #0
    pHandle->pSixStepVars = pSixStepVars;
 8001794:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001798:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800179a:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 800179e:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 80017a2:	f8a0 c012 	strh.w	ip, [r0, #18]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80017a6:	f880 c01a 	strb.w	ip, [r0, #26]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80017aa:	f8a0 c014 	strh.w	ip, [r0, #20]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80017ae:	f8c0 c016 	str.w	ip, [r0, #22]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017b2:	4770      	bx	lr

080017b4 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 80017b4:	89c3      	ldrh	r3, [r0, #14]
    {
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
      pHandle->hFinalSpeed = hFinalSpeed;
      pHandle->hDurationms = hDurationms;
 80017b6:	8242      	strh	r2, [r0, #18]
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 80017b8:	fb13 f301 	smulbb	r3, r3, r1
 80017bc:	2b00      	cmp	r3, #0
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80017be:	bfab      	itete	ge
 80017c0:	2301      	movge	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
    else
    {
      pHandle->DirectCommand = MCI_STOP;
 80017c2:	2305      	movlt	r3, #5
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80017c4:	7303      	strbge	r3, [r0, #12]
      pHandle->DirectCommand = MCI_STOP;
 80017c6:	7503      	strblt	r3, [r0, #20]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017c8:	f240 3301 	movw	r3, #769	; 0x301
      pHandle->hFinalSpeed = hFinalSpeed;
 80017cc:	81c1      	strh	r1, [r0, #14]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017ce:	8343      	strh	r3, [r0, #26]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80017d4:	8ac3      	ldrh	r3, [r0, #22]
    pHandle->PastFaults |= hSetErrors;
 80017d6:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80017da:	430b      	orrs	r3, r1
 80017dc:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 80017e0:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80017e4:	82c3      	strh	r3, [r0, #22]
    pHandle->PastFaults |= hSetErrors;
 80017e6:	8301      	strh	r1, [r0, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80017ec:	7e83      	ldrb	r3, [r0, #26]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d000      	beq.n	80017f4 <MCI_ExecBufferedCommands+0x8>
 80017f2:	4770      	bx	lr
{
 80017f4:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80017f6:	7b03      	ldrb	r3, [r0, #12]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	4604      	mov	r4, r0
 80017fc:	d002      	beq.n	8001804 <MCI_ExecBufferedCommands+0x18>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80017fe:	2303      	movs	r3, #3
 8001800:	76a3      	strb	r3, [r4, #26]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001802:	bd10      	pop	{r4, pc}
          pHandle->pSixStepVars->bDriveInput = INTERNAL;
 8001804:	6843      	ldr	r3, [r0, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	711a      	strb	r2, [r3, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800180a:	6800      	ldr	r0, [r0, #0]
 800180c:	2103      	movs	r1, #3
 800180e:	f006 fdd5 	bl	80083bc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001812:	8a62      	ldrh	r2, [r4, #18]
 8001814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	f006 fdd5 	bl	80083c8 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800181e:	2800      	cmp	r0, #0
 8001820:	d0ed      	beq.n	80017fe <MCI_ExecBufferedCommands+0x12>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001822:	2302      	movs	r3, #2
 8001824:	76a3      	strb	r3, [r4, #26]
}
 8001826:	bd10      	pop	{r4, pc}

08001828 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001828:	7d40      	ldrb	r0, [r0, #21]
 800182a:	4770      	bx	lr

0800182c <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 800182c:	8b00      	ldrh	r0, [r0, #24]
 800182e:	4770      	bx	lr

08001830 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001830:	8ac0      	ldrh	r0, [r0, #22]
 8001832:	4770      	bx	lr

08001834 <MCI_StartMotor>:
{
 8001834:	b510      	push	{r4, lr}
 8001836:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001838:	f7ff fff6 	bl	8001828 <MCI_GetSTMState>
 800183c:	b108      	cbz	r0, 8001842 <MCI_StartMotor+0xe>
  bool retVal = false;
 800183e:	2000      	movs	r0, #0
}
 8001840:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff fff2 	bl	800182c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001848:	2800      	cmp	r0, #0
 800184a:	d1f8      	bne.n	800183e <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff ffef 	bl	8001830 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001852:	2800      	cmp	r0, #0
 8001854:	d1f3      	bne.n	800183e <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001856:	2001      	movs	r0, #1
 8001858:	7520      	strb	r0, [r4, #20]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800185a:	76a0      	strb	r0, [r4, #26]
}
 800185c:	bd10      	pop	{r4, pc}
 800185e:	bf00      	nop

08001860 <MCI_StopMotor>:
{
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001864:	f7ff ffe0 	bl	8001828 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001868:	b150      	cbz	r0, 8001880 <MCI_StopMotor+0x20>
 800186a:	f1b0 040c 	subs.w	r4, r0, #12
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800186e:	4628      	mov	r0, r5
    if ((IDLE == State) || (ICLWAIT == State))
 8001870:	bf18      	it	ne
 8001872:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001874:	f7ff ffda 	bl	800182c <MCI_GetOccurredFaults>
 8001878:	b140      	cbz	r0, 800188c <MCI_StopMotor+0x2c>
  bool retVal = false;
 800187a:	2400      	movs	r4, #0
}
 800187c:	4620      	mov	r0, r4
 800187e:	bd38      	pop	{r3, r4, r5, pc}
      status = false;
 8001880:	4604      	mov	r4, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001882:	4628      	mov	r0, r5
 8001884:	f7ff ffd2 	bl	800182c <MCI_GetOccurredFaults>
 8001888:	2800      	cmp	r0, #0
 800188a:	d1f6      	bne.n	800187a <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800188c:	4628      	mov	r0, r5
 800188e:	f7ff ffcf 	bl	8001830 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001892:	2800      	cmp	r0, #0
 8001894:	d1f1      	bne.n	800187a <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001896:	2c00      	cmp	r4, #0
 8001898:	d0ef      	beq.n	800187a <MCI_StopMotor+0x1a>
      pHandle->DirectCommand = MCI_STOP;
 800189a:	2305      	movs	r3, #5
 800189c:	752b      	strb	r3, [r5, #20]
      retVal = true;
 800189e:	e7ed      	b.n	800187c <MCI_StopMotor+0x1c>

080018a0 <MCI_FaultAcknowledged>:
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80018a4:	f7ff ffc0 	bl	8001828 <MCI_GetSTMState>
 80018a8:	280b      	cmp	r0, #11
 80018aa:	d001      	beq.n	80018b0 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 80018ac:	2000      	movs	r0, #0
}
 80018ae:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff ffbd 	bl	8001830 <MCI_GetCurrentFaults>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d1f8      	bne.n	80018ac <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80018ba:	2302      	movs	r3, #2
 80018bc:	7523      	strb	r3, [r4, #20]
      pHandle->PastFaults = MC_NO_FAULTS;
 80018be:	8320      	strh	r0, [r4, #24]
      reVal = true;
 80018c0:	2001      	movs	r0, #1
}
 80018c2:	bd10      	pop	{r4, pc}

080018c4 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80018c4:	8b03      	ldrh	r3, [r0, #24]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80018c6:	8ac0      	ldrh	r0, [r0, #22]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80018c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80018d0:	7ec0      	ldrb	r0, [r0, #27]
 80018d2:	4770      	bx	lr

080018d4 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80018d4:	7b03      	ldrb	r3, [r0, #12]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <MCI_GetImposedMotorDirection+0xa>
  int16_t retVal = 1;
 80018da:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 80018dc:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 80018de:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bfac      	ite	ge
 80018e6:	2001      	movge	r0, #1
 80018e8:	f04f 30ff 	movlt.w	r0, #4294967295
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80018f0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80018f8:	8a40      	ldrh	r0, [r0, #18]
 80018fa:	4770      	bx	lr

080018fc <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80018fc:	6800      	ldr	r0, [r0, #0]
 80018fe:	f006 bdad 	b.w	800845c <STC_StopRamp>
 8001902:	bf00      	nop

08001904 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001904:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001906:	6800      	ldr	r0, [r0, #0]
 8001908:	f006 fd32 	bl	8008370 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 800190c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001910:	f006 bdf4 	b.w	80084fc <SPD_GetAvrgMecSpeedUnit>

08001914 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001914:	6800      	ldr	r0, [r0, #0]
 8001916:	f006 bd43 	b.w	80083a0 <STC_GetMecSpeedRefUnit>
 800191a:	bf00      	nop

0800191c <MCI_GetDutyCycleRef>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval uint16_t Teref
  */
__weak uint16_t MCI_GetDutyCycleRef( MCI_Handle_t * pHandle )
{
  return ( pHandle->pSixStepVars->DutyCycleRef );
 800191c:	6843      	ldr	r3, [r0, #4]
}
 800191e:	8818      	ldrh	r0, [r3, #0]
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop

08001924 <SixStep_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_Clear(uint8_t bMotor)
{
 8001924:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN SixStep_Clear 0 */

  /* USER CODE END SixStep_Clear 0 */

  STC_Clear(pSTC[bMotor]);
 8001926:	4e0f      	ldr	r6, [pc, #60]	; (8001964 <SixStep_Clear+0x40>)
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
  BADC_Stop( &Bemf_ADC_M1 );
 8001928:	4d0f      	ldr	r5, [pc, #60]	; (8001968 <SixStep_Clear+0x44>)
{
 800192a:	4604      	mov	r4, r0
  STC_Clear(pSTC[bMotor]);
 800192c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001930:	f006 fd22 	bl	8008378 <STC_Clear>
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
 8001934:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001938:	f006 fd3c 	bl	80083b4 <STC_GetDutyCycleRef>
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <SixStep_Clear+0x48>)
 800193e:	4602      	mov	r2, r0
 8001940:	f823 2034 	strh.w	r2, [r3, r4, lsl #3]
  BADC_Stop( &Bemf_ADC_M1 );
 8001944:	4628      	mov	r0, r5
 8001946:	f005 fa79 	bl	8006e3c <BADC_Stop>
  BADC_Clear( &Bemf_ADC_M1 );
 800194a:	4628      	mov	r0, r5
 800194c:	f005 f9ba 	bl	8006cc4 <BADC_Clear>
  BADC_SpeedMeasureOff(&Bemf_ADC_M1);
 8001950:	4628      	mov	r0, r5
 8001952:	f005 faad 	bl	8006eb0 <BADC_SpeedMeasureOff>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SixStep_Clear+0x4c>)
 8001958:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN SixStep_Clear 1 */

  /* USER CODE END SixStep_Clear 1 */
}
 800195c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001960:	f005 bfa2 	b.w	80078a8 <PWMC_SwitchOffPWM>
 8001964:	2000028c 	.word	0x2000028c
 8001968:	20000000 	.word	0x20000000
 800196c:	20000678 	.word	0x20000678
 8001970:	20000688 	.word	0x20000688

08001974 <MCboot>:
  if (MC_NULL == pMCIList)
 8001974:	2800      	cmp	r0, #0
 8001976:	d04c      	beq.n	8001a12 <MCboot+0x9e>
{
 8001978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800197c:	4e25      	ldr	r6, [pc, #148]	; (8001a14 <MCboot+0xa0>)
    bMCBootCompleted = (uint8_t )0;
 800197e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001a4c <MCboot+0xd8>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 8001982:	4d25      	ldr	r5, [pc, #148]	; (8001a18 <MCboot+0xa4>)
 8001984:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001986:	4825      	ldr	r0, [pc, #148]	; (8001a1c <MCboot+0xa8>)
 8001988:	6030      	str	r0, [r6, #0]
    bMCBootCompleted = (uint8_t )0;
 800198a:	2700      	movs	r7, #0
 800198c:	f888 7000 	strb.w	r7, [r8]
    SixPwm_Init(&PWM_Handle_M1);
 8001990:	f005 fff6 	bl	8007980 <SixPwm_Init>
    ASPEP_start(&aspepOverUartA);
 8001994:	4822      	ldr	r0, [pc, #136]	; (8001a20 <MCboot+0xac>)
 8001996:	f7ff f8ed 	bl	8000b74 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 800199a:	4822      	ldr	r0, [pc, #136]	; (8001a24 <MCboot+0xb0>)
 800199c:	f005 fef8 	bl	8007790 <PID_HandleInit>
    BADC_Init (&Bemf_ADC_M1);
 80019a0:	4821      	ldr	r0, [pc, #132]	; (8001a28 <MCboot+0xb4>)
 80019a2:	f005 f843 	bl	8006a2c <BADC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 80019a6:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <MCboot+0xb4>)
 80019a8:	491e      	ldr	r1, [pc, #120]	; (8001a24 <MCboot+0xb0>)
 80019aa:	6828      	ldr	r0, [r5, #0]
 80019ac:	f006 fcc6 	bl	800833c <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80019b0:	481e      	ldr	r0, [pc, #120]	; (8001a2c <MCboot+0xb8>)
 80019b2:	f006 fde7 	bl	8008584 <VSS_Init>
    RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1);
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <MCboot+0xb8>)
 80019b8:	6829      	ldr	r1, [r5, #0]
 80019ba:	481d      	ldr	r0, [pc, #116]	; (8001a30 <MCboot+0xbc>)
 80019bc:	f006 fbc0 	bl	8008140 <RUC_Init>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80019c0:	481c      	ldr	r0, [pc, #112]	; (8001a34 <MCboot+0xc0>)
 80019c2:	f001 fba7 	bl	8003114 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <MCboot+0xc4>)
 80019c8:	f006 fb60 	bl	800808c <RVBS_Init>
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 80019cc:	481b      	ldr	r0, [pc, #108]	; (8001a3c <MCboot+0xc8>)
 80019ce:	f001 fba1 	bl	8003114 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 80019d2:	481b      	ldr	r0, [pc, #108]	; (8001a40 <MCboot+0xcc>)
 80019d4:	f005 fea6 	bl	8007724 <NTC_Init>
    SixStep_Clear(M1);
 80019d8:	4638      	mov	r0, r7
 80019da:	f7ff ffa3 	bl	8001924 <SixStep_Clear>
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019de:	6833      	ldr	r3, [r6, #0]
    SixStepVars[M1].bDriveInput = EXTERNAL;
 80019e0:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <MCboot+0xd0>)
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019e2:	4e19      	ldr	r6, [pc, #100]	; (8001a48 <MCboot+0xd4>)
 80019e4:	6829      	ldr	r1, [r5, #0]
    SixStepVars[M1].bDriveInput = EXTERNAL;
 80019e6:	f04f 0901 	mov.w	r9, #1
 80019ea:	f882 9004 	strb.w	r9, [r2, #4]
    MCI_Init(&Mci[M1], pSTC[M1], &SixStepVars[M1], pwmcHandle[M1] );
 80019ee:	4630      	mov	r0, r6
 80019f0:	f7ff fece 	bl	8001790 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 80019f4:	6828      	ldr	r0, [r5, #0]
 80019f6:	f006 fd6f 	bl	80084d8 <STC_GetMecSpeedRefUnitDefault>
 80019fa:	463a      	mov	r2, r7
 80019fc:	4601      	mov	r1, r0
 80019fe:	4630      	mov	r0, r6
 8001a00:	f7ff fed8 	bl	80017b4 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001a04:	6026      	str	r6, [r4, #0]
    MC_APP_BootHook();
 8001a06:	f7ff febf 	bl	8001788 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001a0a:	f888 9000 	strb.w	r9, [r8]
}
 8001a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a12:	4770      	bx	lr
 8001a14:	20000688 	.word	0x20000688
 8001a18:	2000028c 	.word	0x2000028c
 8001a1c:	20000144 	.word	0x20000144
 8001a20:	200002f0 	.word	0x200002f0
 8001a24:	20000118 	.word	0x20000118
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000254 	.word	0x20000254
 8001a30:	20000190 	.word	0x20000190
 8001a34:	20000244 	.word	0x20000244
 8001a38:	200000fc 	.word	0x200000fc
 8001a3c:	20000218 	.word	0x20000218
 8001a40:	20000228 	.word	0x20000228
 8001a44:	20000678 	.word	0x20000678
 8001a48:	20000650 	.word	0x20000650
 8001a4c:	20000680 	.word	0x20000680

08001a50 <SixStep_InitAdditionalMethods>:
__weak void SixStep_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <SixStep_CalcSpeedRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_CalcSpeedRef(uint8_t bMotor)
{
 8001a54:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(SixStepVars[bMotor].bDriveInput == INTERNAL)
 8001a56:	4d07      	ldr	r5, [pc, #28]	; (8001a74 <SixStep_CalcSpeedRef+0x20>)
 8001a58:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	b103      	cbz	r3, 8001a62 <SixStep_CalcSpeedRef+0xe>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001a60:	bd38      	pop	{r3, r4, r5, pc}
    SixStepVars[bMotor].DutyCycleRef = STC_CalcSpeedReference(pSTC[bMotor]);
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SixStep_CalcSpeedRef+0x24>)
 8001a64:	4604      	mov	r4, r0
 8001a66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a6a:	f006 fcfd 	bl	8008468 <STC_CalcSpeedReference>
 8001a6e:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
}
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
 8001a74:	20000678 	.word	0x20000678
 8001a78:	2000028c 	.word	0x2000028c

08001a7c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001a7c:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001a7e:	8018      	strh	r0, [r3, #0]
}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000682 	.word	0x20000682

08001a88 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001a8a:	8818      	ldrh	r0, [r3, #0]
 8001a8c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a8e:	fab0 f080 	clz	r0, r0
 8001a92:	0940      	lsrs	r0, r0, #5
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000682 	.word	0x20000682

08001a9c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a9c:	4b01      	ldr	r3, [pc, #4]	; (8001aa4 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a9e:	8018      	strh	r0, [r3, #0]
}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000686 	.word	0x20000686

08001aa8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001aaa:	8818      	ldrh	r0, [r3, #0]
 8001aac:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001aae:	fab0 f080 	clz	r0, r0
 8001ab2:	0940      	lsrs	r0, r0, #5
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000686 	.word	0x20000686

08001abc <TSK_MediumFrequencyTaskM1>:
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001abe:	4ca4      	ldr	r4, [pc, #656]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001ac0:	48a4      	ldr	r0, [pc, #656]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
{
 8001ac2:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001ac4:	2300      	movs	r3, #0
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001ac6:	a901      	add	r1, sp, #4
  int16_t wAux = 0;
 8001ac8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001acc:	f005 faea 	bl	80070a4 <BADC_CalcAvrgMecSpeedUnit>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff fead 	bl	8001830 <MCI_GetCurrentFaults>
 8001ad6:	b118      	cbz	r0, 8001ae0 <TSK_MediumFrequencyTaskM1+0x24>
    Mci[M1].State = FAULT_NOW;
 8001ad8:	230a      	movs	r3, #10
 8001ada:	7563      	strb	r3, [r4, #21]
}
 8001adc:	b002      	add	sp, #8
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff fea3 	bl	800182c <MCI_GetOccurredFaults>
 8001ae6:	bb68      	cbnz	r0, 8001b44 <TSK_MediumFrequencyTaskM1+0x88>
      switch (Mci[M1].State)
 8001ae8:	7d63      	ldrb	r3, [r4, #21]
 8001aea:	2b13      	cmp	r3, #19
 8001aec:	d8f6      	bhi.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <TSK_MediumFrequencyTaskM1+0x38>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001c75 	.word	0x08001c75
 8001af8:	08001add 	.word	0x08001add
 8001afc:	08001add 	.word	0x08001add
 8001b00:	08001add 	.word	0x08001add
 8001b04:	08001c29 	.word	0x08001c29
 8001b08:	08001add 	.word	0x08001add
 8001b0c:	08001bf5 	.word	0x08001bf5
 8001b10:	08001add 	.word	0x08001add
 8001b14:	08001bd1 	.word	0x08001bd1
 8001b18:	08001add 	.word	0x08001add
 8001b1c:	08001b45 	.word	0x08001b45
 8001b20:	08001bc5 	.word	0x08001bc5
 8001b24:	08001add 	.word	0x08001add
 8001b28:	08001add 	.word	0x08001add
 8001b2c:	08001add 	.word	0x08001add
 8001b30:	08001add 	.word	0x08001add
 8001b34:	08001b6d 	.word	0x08001b6d
 8001b38:	08001add 	.word	0x08001add
 8001b3c:	08001add 	.word	0x08001add
 8001b40:	08001b4d 	.word	0x08001b4d
      Mci[M1].State = FAULT_OVER;
 8001b44:	230b      	movs	r3, #11
 8001b46:	7563      	strb	r3, [r4, #21]
}
 8001b48:	b002      	add	sp, #8
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b4c:	7d23      	ldrb	r3, [r4, #20]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	f000 80ac 	beq.w	8001cac <TSK_MediumFrequencyTaskM1+0x1f0>
            if (! RUC_Exec(&RevUpControlM1))
 8001b54:	4880      	ldr	r0, [pc, #512]	; (8001d58 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001b56:	f006 fb67 	bl	8008228 <RUC_Exec>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	f040 80c4 	bne.w	8001cea <TSK_MediumFrequencyTaskM1+0x22e>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001b62:	487b      	ldr	r0, [pc, #492]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
 8001b64:	2110      	movs	r1, #16
 8001b66:	f7ff fe35 	bl	80017d4 <MCI_FaultProcessing>
 8001b6a:	e7b7      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001b6c:	7d23      	ldrb	r3, [r4, #20]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	f000 809c 	beq.w	8001cac <TSK_MediumFrequencyTaskM1+0x1f0>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001b74:	f7ff ff88 	bl	8001a88 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d0af      	beq.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
              SixPwm_SwitchOffPWM(pwmcHandle[M1]);
 8001b7c:	4d77      	ldr	r5, [pc, #476]	; (8001d5c <TSK_MediumFrequencyTaskM1+0x2a0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b7e:	4e78      	ldr	r6, [pc, #480]	; (8001d60 <TSK_MediumFrequencyTaskM1+0x2a4>)
              SixPwm_SwitchOffPWM(pwmcHandle[M1]);
 8001b80:	6828      	ldr	r0, [r5, #0]
 8001b82:	f006 fa1f 	bl	8007fc4 <SixPwm_SwitchOffPWM>
              SixStepVars[M1].bDriveInput = EXTERNAL;
 8001b86:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <TSK_MediumFrequencyTaskM1+0x2a8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b88:	4977      	ldr	r1, [pc, #476]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001b8a:	6830      	ldr	r0, [r6, #0]
              SixStepVars[M1].bDriveInput = EXTERNAL;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	711a      	strb	r2, [r3, #4]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b90:	f006 fbea 	bl	8008368 <STC_SetSpeedSensor>
              BADC_Clear(&Bemf_ADC_M1);
 8001b94:	486f      	ldr	r0, [pc, #444]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001b96:	f005 f895 	bl	8006cc4 <BADC_Clear>
              SixStep_Clear( M1 );
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fec2 	bl	8001924 <SixStep_Clear>
              BADC_SetDirection(&Bemf_ADC_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8001ba0:	486b      	ldr	r0, [pc, #428]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
 8001ba2:	f7ff fe97 	bl	80018d4 <MCI_GetImposedMotorDirection>
 8001ba6:	b2c1      	uxtb	r1, r0
 8001ba8:	486a      	ldr	r0, [pc, #424]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001baa:	f005 fb35 	bl	8007218 <BADC_SetDirection>
              BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001bae:	6832      	ldr	r2, [r6, #0]
 8001bb0:	496e      	ldr	r1, [pc, #440]	; (8001d6c <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001bb2:	4868      	ldr	r0, [pc, #416]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001bb4:	f005 f984 	bl	8006ec0 <BADC_SetSamplingPoint>
                Mci[M1].State = START;
 8001bb8:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001bba:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001bbc:	7563      	strb	r3, [r4, #21]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001bbe:	f005 fe75 	bl	80078ac <PWMC_SwitchOnPWM>
 8001bc2:	e78b      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001bc4:	7d23      	ldrb	r3, [r4, #20]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d188      	bne.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	82a3      	strh	r3, [r4, #20]
 8001bce:	e785      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001bd0:	f7ff ff6a 	bl	8001aa8 <TSK_StopPermanencyTimeHasElapsedM1>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d081      	beq.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001bd8:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001bda:	4963      	ldr	r1, [pc, #396]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f006 fbc3 	bl	8008368 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001be4:	f006 fcc0 	bl	8008568 <VSS_Clear>
            BADC_Clear(&Bemf_ADC_M1);
 8001be8:	485a      	ldr	r0, [pc, #360]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001bea:	f005 f86b 	bl	8006cc4 <BADC_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	82a3      	strh	r3, [r4, #20]
 8001bf2:	e773      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001bf4:	7d23      	ldrb	r3, [r4, #20]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d058      	beq.n	8001cac <TSK_MediumFrequencyTaskM1+0x1f0>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001bfa:	4855      	ldr	r0, [pc, #340]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
            BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001bfc:	4c55      	ldr	r4, [pc, #340]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001bfe:	f7ff fdf5 	bl	80017ec <MCI_ExecBufferedCommands>
            SixStep_CalcSpeedRef( M1 );
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff ff26 	bl	8001a54 <SixStep_CalcSpeedRef>
            BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1._Super, pSTC[M1] );
 8001c08:	4b55      	ldr	r3, [pc, #340]	; (8001d60 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001c0a:	4958      	ldr	r1, [pc, #352]	; (8001d6c <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f005 f956 	bl	8006ec0 <BADC_SetSamplingPoint>
            (void) BADC_CalcRunDemagTime (&Bemf_ADC_M1);
 8001c14:	4620      	mov	r0, r4
 8001c16:	f005 fb95 	bl	8007344 <BADC_CalcRunDemagTime>
            PWMC_ForceFastDemagTime (pwmcHandle[M1], Bemf_ADC_M1.DemagCounterThreshold);
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001c1c:	f8b4 10f2 	ldrh.w	r1, [r4, #242]	; 0xf2
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	f005 fe49 	bl	80078b8 <PWMC_ForceFastDemagTime>
 8001c26:	e759      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001c28:	7d23      	ldrb	r3, [r4, #20]
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d03e      	beq.n	8001cac <TSK_MediumFrequencyTaskM1+0x1f0>
            if(! RUC_Exec(&RevUpControlM1))
 8001c2e:	484a      	ldr	r0, [pc, #296]	; (8001d58 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c30:	f006 fafa 	bl	8008228 <RUC_Exec>
 8001c34:	4602      	mov	r2, r0
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d146      	bne.n	8001cc8 <TSK_MediumFrequencyTaskM1+0x20c>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001c3a:	4845      	ldr	r0, [pc, #276]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	f7ff fdc9 	bl	80017d4 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001c42:	4849      	ldr	r0, [pc, #292]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001c44:	f10d 0106 	add.w	r1, sp, #6
 8001c48:	f006 fcf2 	bl	8008630 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001c4c:	4842      	ldr	r0, [pc, #264]	; (8001d58 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c4e:	f006 fb3b 	bl	80082c8 <RUC_FirstAccelerationStageReached>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	f43f af42 	beq.w	8001adc <TSK_MediumFrequencyTaskM1+0x20>
             ObserverConverged = BADC_IsObserverConverged( &Bemf_ADC_M1);
 8001c58:	483e      	ldr	r0, [pc, #248]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001c5a:	f005 fae1 	bl	8007220 <BADC_IsObserverConverged>
 8001c5e:	4605      	mov	r5, r0
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001c60:	4629      	mov	r1, r5
 8001c62:	4841      	ldr	r0, [pc, #260]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001c64:	f006 fd86 	bl	8008774 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	f43f af37 	beq.w	8001adc <TSK_MediumFrequencyTaskM1+0x20>
              Mci[M1].State = SWITCH_OVER;
 8001c6e:	2313      	movs	r3, #19
 8001c70:	7563      	strb	r3, [r4, #21]
 8001c72:	e733      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001c74:	7d23      	ldrb	r3, [r4, #20]
 8001c76:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	f47f af2e 	bne.w	8001adc <TSK_MediumFrequencyTaskM1+0x20>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001c80:	4833      	ldr	r0, [pc, #204]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
 8001c82:	f7ff fe27 	bl	80018d4 <MCI_GetImposedMotorDirection>
 8001c86:	4601      	mov	r1, r0
 8001c88:	4833      	ldr	r0, [pc, #204]	; (8001d58 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c8a:	f006 fa7b 	bl	8008184 <RUC_Clear>
              RUC_UpdatePulse(&RevUpControlM1, &BusVoltageSensor_M1._Super);
 8001c8e:	4938      	ldr	r1, [pc, #224]	; (8001d70 <TSK_MediumFrequencyTaskM1+0x2b4>)
 8001c90:	4831      	ldr	r0, [pc, #196]	; (8001d58 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001c92:	f006 fabb 	bl	800820c <RUC_UpdatePulse>
              SixPwm_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	f006 f928 	bl	8007ef0 <SixPwm_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001ca0:	2014      	movs	r0, #20
 8001ca2:	f7ff feeb 	bl	8001a7c <TSK_SetChargeBootCapDelayM1>
              Mci[M1].State = CHARGE_BOOT_CAP;
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	7563      	strb	r3, [r4, #21]
 8001caa:	e717      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
    SixPwm_SwitchOffPWM(pwmcHandle[motor]);
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f006 f988 	bl	8007fc4 <SixPwm_SwitchOffPWM>
  SixStep_Clear(motor);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fe35 	bl	8001924 <SixStep_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001cba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001cbe:	f7ff feed 	bl	8001a9c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	7563      	strb	r3, [r4, #21]
}
 8001cc6:	e709      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
            (void) BADC_CalcRevUpDemagTime (&Bemf_ADC_M1);
 8001cc8:	4d22      	ldr	r5, [pc, #136]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f005 fb18 	bl	8007300 <BADC_CalcRevUpDemagTime>
            PWMC_ForceFastDemagTime (pwmcHandle[M1], Bemf_ADC_M1.DemagCounterThreshold);
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001cd2:	f8b5 10f2 	ldrh.w	r1, [r5, #242]	; 0xf2
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	f005 fdee 	bl	80078b8 <PWMC_ForceFastDemagTime>
            SixStepVars[M1].DutyCycleRef = STC_CalcSpeedReference( pSTC[M1] );
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	f006 fbc2 	bl	8008468 <STC_CalcSpeedReference>
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001ce6:	8018      	strh	r0, [r3, #0]
 8001ce8:	e7ab      	b.n	8001c42 <TSK_MediumFrequencyTaskM1+0x186>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001cea:	481f      	ldr	r0, [pc, #124]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001cec:	f10d 0106 	add.w	r1, sp, #6
 8001cf0:	f006 fc9e 	bl	8008630 <VSS_CalcAvrgMecSpeedUnit>
 8001cf4:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001cf6:	481c      	ldr	r0, [pc, #112]	; (8001d68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001cf8:	f006 fd4a 	bl	8008790 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001cfc:	b325      	cbz	r5, 8001d48 <TSK_MediumFrequencyTaskM1+0x28c>
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8001d00:	481c      	ldr	r0, [pc, #112]	; (8001d74 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001d02:	881e      	ldrh	r6, [r3, #0]
                STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 8001d04:	4d16      	ldr	r5, [pc, #88]	; (8001d60 <TSK_MediumFrequencyTaskM1+0x2a4>)
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001d06:	f005 fd61 	bl	80077cc <PID_GetKIDivisor>
 8001d0a:	b201      	sxth	r1, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001d0c:	fb06 f101 	mul.w	r1, r6, r1
 8001d10:	4818      	ldr	r0, [pc, #96]	; (8001d74 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001d12:	f005 fd51 	bl	80077b8 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 8001d16:	490f      	ldr	r1, [pc, #60]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001d18:	6828      	ldr	r0, [r5, #0]
 8001d1a:	f006 fb25 	bl	8008368 <STC_SetSpeedSensor>
                SixStep_InitAdditionalMethods(M1);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff fe96 	bl	8001a50 <SixStep_InitAdditionalMethods>
                SixStep_CalcSpeedRef(M1);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fe95 	bl	8001a54 <SixStep_CalcSpeedRef>
                BADC_SetLoopClosed(&Bemf_ADC_M1);
 8001d2a:	480a      	ldr	r0, [pc, #40]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001d2c:	f005 fb26 	bl	800737c <BADC_SetLoopClosed>
                BADC_SpeedMeasureOn(&Bemf_ADC_M1);
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <TSK_MediumFrequencyTaskM1+0x298>)
 8001d32:	f005 f8b3 	bl	8006e9c <BADC_SpeedMeasureOn>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001d36:	6828      	ldr	r0, [r5, #0]
 8001d38:	f006 fbd2 	bl	80084e0 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <TSK_MediumFrequencyTaskM1+0x294>)
 8001d3e:	f7ff fd55 	bl	80017ec <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001d42:	2306      	movs	r3, #6
 8001d44:	7563      	strb	r3, [r4, #21]
 8001d46:	e6c9      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
              LoopClosed = LoopClosed || tempBool;
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d1d8      	bne.n	8001cfe <TSK_MediumFrequencyTaskM1+0x242>
 8001d4c:	e6c6      	b.n	8001adc <TSK_MediumFrequencyTaskM1+0x20>
 8001d4e:	bf00      	nop
 8001d50:	20000650 	.word	0x20000650
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000190 	.word	0x20000190
 8001d5c:	20000688 	.word	0x20000688
 8001d60:	2000028c 	.word	0x2000028c
 8001d64:	20000678 	.word	0x20000678
 8001d68:	20000254 	.word	0x20000254
 8001d6c:	20000144 	.word	0x20000144
 8001d70:	200000fc 	.word	0x200000fc
 8001d74:	20000118 	.word	0x20000118

08001d78 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MC_Scheduler+0x78>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d000      	beq.n	8001d82 <MC_Scheduler+0xa>
 8001d80:	4770      	bx	lr
{
 8001d82:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001d84:	4c1b      	ldr	r4, [pc, #108]	; (8001df4 <MC_Scheduler+0x7c>)
 8001d86:	8823      	ldrh	r3, [r4, #0]
 8001d88:	b19b      	cbz	r3, 8001db2 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 8001d90:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001d92:	8813      	ldrh	r3, [r2, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b11b      	cbz	r3, 8001da0 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001d98:	8813      	ldrh	r3, [r2, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <MC_Scheduler+0x84>)
 8001da2:	8813      	ldrh	r3, [r2, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b11b      	cbz	r3, 8001db0 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001da8:	8813      	ldrh	r3, [r2, #0]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	8013      	strh	r3, [r2, #0]
}
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001db2:	4d13      	ldr	r5, [pc, #76]	; (8001e00 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001db4:	f7ff fe82 	bl	8001abc <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001db8:	f7ff fce8 	bl	800178c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001dc2:	6883      	ldr	r3, [r0, #8]
 8001dc4:	4798      	blx	r3
 8001dc6:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001dc8:	b130      	cbz	r0, 8001dd8 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001dca:	4629      	mov	r1, r5
 8001dcc:	220a      	movs	r2, #10
 8001dce:	f851 0b08 	ldr.w	r0, [r1], #8
 8001dd2:	6803      	ldr	r3, [r0, #0]
 8001dd4:	4798      	blx	r3
 8001dd6:	b908      	cbnz	r0, 8001ddc <MC_Scheduler+0x64>
{
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e7d8      	b.n	8001d8e <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f000 fa79 	bl	80022d4 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001de2:	6828      	ldr	r0, [r5, #0]
 8001de4:	89ea      	ldrh	r2, [r5, #14]
 8001de6:	6846      	ldr	r6, [r0, #4]
 8001de8:	68a9      	ldr	r1, [r5, #8]
 8001dea:	230a      	movs	r3, #10
 8001dec:	47b0      	blx	r6
 8001dee:	e7f3      	b.n	8001dd8 <MC_Scheduler+0x60>
 8001df0:	20000680 	.word	0x20000680
 8001df4:	20000684 	.word	0x20000684
 8001df8:	20000682 	.word	0x20000682
 8001dfc:	20000686 	.word	0x20000686
 8001e00:	200002cc 	.word	0x200002cc

08001e04 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hSixStepReturn;
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == SixPwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001e08:	4849      	ldr	r0, [pc, #292]	; (8001f30 <TSK_HighFrequencyTask+0x12c>)
 8001e0a:	4f4a      	ldr	r7, [pc, #296]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
{
 8001e0c:	b083      	sub	sp, #12
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == SixPwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001e0e:	f005 fac3 	bl	8007398 <BADC_ClearStepUpdate>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d070      	beq.n	8001ef8 <TSK_HighFrequencyTask+0xf4>
  {
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State )) /*  only for sensor-less*/
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <TSK_HighFrequencyTask+0x134>)
 8001e18:	7d5b      	ldrb	r3, [r3, #21]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d075      	beq.n	8001f0a <TSK_HighFrequencyTask+0x106>
 8001e1e:	2b13      	cmp	r3, #19
 8001e20:	d054      	beq.n	8001ecc <TSK_HighFrequencyTask+0xc8>
        PWMC_SetAlignFlag(&PWM_Handle_M1._Super, 0);
      }
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
    }
    (void)BADC_CalcElAngle (&Bemf_ADC_M1);
 8001e22:	4e43      	ldr	r6, [pc, #268]	; (8001f30 <TSK_HighFrequencyTask+0x12c>)
 8001e24:	4630      	mov	r0, r6
 8001e26:	f005 f9ff 	bl	8007228 <BADC_CalcElAngle>
inline uint16_t SixStep_StatorController(void)
{
  uint16_t hCodeError = MC_NO_ERROR;
  int16_t hElAngle, hSpeed, hDirection;
  SpeednPosFdbk_Handle_t *speedHandle;
  RCM_ReadOngoingConv();
 8001e2a:	f001 fbc9 	bl	80035c0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001e2e:	f001 fb77 	bl	8003520 <RCM_ExecNextConv>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001e32:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <TSK_HighFrequencyTask+0x138>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	f006 fa9b 	bl	8008370 <STC_GetSpeedSensor>
 8001e3a:	4605      	mov	r5, r0
  if(false == BADC_IsObserverConverged(&Bemf_ADC_M1))
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f005 f9ef 	bl	8007220 <BADC_IsObserverConverged>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d03d      	beq.n	8001ec2 <TSK_HighFrequencyTask+0xbe>
  {
    hElAngle = SPD_GetElAngle(speedHandle);
  }
  else
  {
    hElAngle = SPD_GetElAngle(&Bemf_ADC_M1._Super);
 8001e46:	4630      	mov	r0, r6
 8001e48:	f006 fb54 	bl	80084f4 <SPD_GetElAngle>
 8001e4c:	4604      	mov	r4, r0
  }
  hSpeed = SPD_GetElSpeedDpp(speedHandle);
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f006 fb58 	bl	8008504 <SPD_GetElSpeedDpp>
 8001e54:	4680      	mov	r8, r0
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8001e56:	483a      	ldr	r0, [pc, #232]	; (8001f40 <TSK_HighFrequencyTask+0x13c>)
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8001e58:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001f54 <TSK_HighFrequencyTask+0x150>
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8001e5c:	f006 fa6a 	bl	8008334 <RUC_GetDirection>
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <TSK_HighFrequencyTask+0x140>)
 8001e62:	f8b9 1000 	ldrh.w	r1, [r9]
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8001e66:	4605      	mov	r5, r0
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	f005 fdc5 	bl	80079f8 <PWMC_SetPhaseVoltage>
  if (hDirection > 0)
 8001e6e:	2d00      	cmp	r5, #0
  {
    SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 8001e70:	bfcc      	ite	gt
 8001e72:	f504 4380 	addgt.w	r3, r4, #16384	; 0x4000
  }
  else
  {
    SixStepVars[M1].qElAngle = hElAngle - S16_90_PHASE_SHIFT;
 8001e76:	f5a4 4380 	suble.w	r3, r4, #16384	; 0x4000
 8001e7a:	b21b      	sxth	r3, r3
  }
  PWM_Handle_M1._Super.hElAngle = SixStepVars[M1].qElAngle;
  SixPwm_LoadNextStep( &PWM_Handle_M1, hDirection );
 8001e7c:	482d      	ldr	r0, [pc, #180]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
 8001e7e:	f8a9 3006 	strh.w	r3, [r9, #6]
 8001e82:	4629      	mov	r1, r5
  PWM_Handle_M1._Super.hElAngle = SixStepVars[M1].qElAngle;
 8001e84:	863b      	strh	r3, [r7, #48]	; 0x30
  SixPwm_LoadNextStep( &PWM_Handle_M1, hDirection );
 8001e86:	f005 fdff 	bl	8007a88 <SixPwm_LoadNextStep>
  if (true == SixPwm_ApplyNextStep(&PWM_Handle_M1))
 8001e8a:	482a      	ldr	r0, [pc, #168]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
 8001e8c:	f005 fdb6 	bl	80079fc <SixPwm_ApplyNextStep>
 8001e90:	b118      	cbz	r0, 8001e9a <TSK_HighFrequencyTask+0x96>
  {
    if (false == Bemf_ADC_M1.IsLoopClosed)
 8001e92:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d044      	beq.n	8001f24 <TSK_HighFrequencyTask+0x120>
    {
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed, &PWM_Handle_M1._Super);
    }
  }
  BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1._Super.Step );
 8001e9a:	4825      	ldr	r0, [pc, #148]	; (8001f30 <TSK_HighFrequencyTask+0x12c>)
 8001e9c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001ea0:	f004 ff20 	bl	8006ce4 <BADC_Start>
    SixPwm_UpdatePwmDemagCounter( &PWM_Handle_M1 );
 8001ea4:	4823      	ldr	r0, [pc, #140]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
 8001ea6:	f006 f8bb 	bl	8008020 <SixPwm_UpdatePwmDemagCounter>
  GLOBAL_TIMESTAMP++;
 8001eaa:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <TSK_HighFrequencyTask+0x144>)
  if (0U == MCPA_UART_A.Mark)
 8001eac:	4827      	ldr	r0, [pc, #156]	; (8001f4c <TSK_HighFrequencyTask+0x148>)
  GLOBAL_TIMESTAMP++;
 8001eae:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001eb0:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001eb8:	b9c1      	cbnz	r1, 8001eec <TSK_HighFrequencyTask+0xe8>
}
 8001eba:	2000      	movs	r0, #0
 8001ebc:	b003      	add	sp, #12
 8001ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hElAngle = SPD_GetElAngle(speedHandle);
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f006 fb16 	bl	80084f4 <SPD_GetElAngle>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	e7c0      	b.n	8001e4e <TSK_HighFrequencyTask+0x4a>
          PWMC_SetAlignFlag(&PWM_Handle_M1._Super, 0);
 8001ecc:	4819      	ldr	r0, [pc, #100]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f005 fcf0 	bl	80078b4 <PWMC_SetAlignFlag>
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001ed4:	481e      	ldr	r0, [pc, #120]	; (8001f50 <TSK_HighFrequencyTask+0x14c>)
 8001ed6:	f006 fb0d 	bl	80084f4 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001eda:	f10d 0106 	add.w	r1, sp, #6
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001ede:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001ee0:	481b      	ldr	r0, [pc, #108]	; (8001f50 <TSK_HighFrequencyTask+0x14c>)
      int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 8001ee2:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001ee6:	f006 fb51 	bl	800858c <VSS_CalcElAngle>
 8001eea:	e79a      	b.n	8001e22 <TSK_HighFrequencyTask+0x1e>
    MCPA_dataLog (&MCPA_UART_A);
 8001eec:	f005 faa0 	bl	8007430 <MCPA_dataLog>
}
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	b003      	add	sp, #12
 8001ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((true == BADC_ClearStepUpdate(&Bemf_ADC_M1)) || (false == SixPwm_IsFastDemagUpdated(&PWM_Handle_M1)))
 8001ef8:	4638      	mov	r0, r7
 8001efa:	f005 fd99 	bl	8007a30 <SixPwm_IsFastDemagUpdated>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d089      	beq.n	8001e16 <TSK_HighFrequencyTask+0x12>
    SixPwm_DisablePwmDemagCounter( &PWM_Handle_M1 );
 8001f02:	4638      	mov	r0, r7
 8001f04:	f006 f89c 	bl	8008040 <SixPwm_DisablePwmDemagCounter>
 8001f08:	e7cf      	b.n	8001eaa <TSK_HighFrequencyTask+0xa6>
        if (0U == RUC_IsAlignStageNow(&RevUpControlM1))
 8001f0a:	480d      	ldr	r0, [pc, #52]	; (8001f40 <TSK_HighFrequencyTask+0x13c>)
 8001f0c:	f006 f9ce 	bl	80082ac <RUC_IsAlignStageNow>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d0db      	beq.n	8001ecc <TSK_HighFrequencyTask+0xc8>
          PWMC_SetAlignFlag(&PWM_Handle_M1._Super, RUC_GetDirection(&RevUpControlM1));
 8001f14:	480a      	ldr	r0, [pc, #40]	; (8001f40 <TSK_HighFrequencyTask+0x13c>)
 8001f16:	f006 fa0d 	bl	8008334 <RUC_GetDirection>
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
 8001f1e:	f005 fcc9 	bl	80078b4 <PWMC_SetAlignFlag>
 8001f22:	e7d7      	b.n	8001ed4 <TSK_HighFrequencyTask+0xd0>
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed, &PWM_Handle_M1._Super);
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <TSK_HighFrequencyTask+0x130>)
 8001f26:	4802      	ldr	r0, [pc, #8]	; (8001f30 <TSK_HighFrequencyTask+0x12c>)
 8001f28:	4641      	mov	r1, r8
 8001f2a:	f005 f9a3 	bl	8007274 <BADC_StepChangeEvent>
 8001f2e:	e7b4      	b.n	8001e9a <TSK_HighFrequencyTask+0x96>
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000144 	.word	0x20000144
 8001f38:	20000650 	.word	0x20000650
 8001f3c:	2000028c 	.word	0x2000028c
 8001f40:	20000190 	.word	0x20000190
 8001f44:	20000688 	.word	0x20000688
 8001f48:	2000187c 	.word	0x2000187c
 8001f4c:	200002a0 	.word	0x200002a0
 8001f50:	20000254 	.word	0x20000254
 8001f54:	20000678 	.word	0x20000678

08001f58 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001f5a:	4604      	mov	r4, r0
{
 8001f5c:	b083      	sub	sp, #12
  if (M1 == bMotor)
 8001f5e:	b1a8      	cbz	r0, 8001f8c <TSK_SafetyTask_PWMOFF+0x34>
  }
  else
  {
    /* Nothing to do */
  }
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f60:	4e20      	ldr	r6, [pc, #128]	; (8001fe4 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001f62:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001f66:	f005 fcef 	bl	8007948 <PWMC_IsFaultOccurred>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <TSK_SafetyTask_PWMOFF+0x90>)
 8001f6c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f70:	4601      	mov	r1, r0
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f72:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f76:	43ca      	mvns	r2, r1
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	9001      	str	r0, [sp, #4]
 8001f7c:	f7ff fc2a 	bl	80017d4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001f80:	9801      	ldr	r0, [sp, #4]
 8001f82:	f7ff fc9f 	bl	80018c4 <MCI_GetFaultState>
 8001f86:	b9e8      	cbnz	r0, 8001fc4 <TSK_SafetyTask_PWMOFF+0x6c>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001f88:	b003      	add	sp, #12
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001f8c:	4817      	ldr	r0, [pc, #92]	; (8001fec <TSK_SafetyTask_PWMOFF+0x94>)
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f8e:	4e15      	ldr	r6, [pc, #84]	; (8001fe4 <TSK_SafetyTask_PWMOFF+0x8c>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001f90:	f001 f9ca 	bl	8003328 <RCM_ExecRegularConv>
 8001f94:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <TSK_SafetyTask_PWMOFF+0x98>)
 8001f98:	f005 fbd0 	bl	800773c <NTC_CalcAvTemp>
 8001f9c:	4607      	mov	r7, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f9e:	6830      	ldr	r0, [r6, #0]
 8001fa0:	f005 fcd2 	bl	8007948 <PWMC_IsFaultOccurred>
 8001fa4:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001fa8:	f001 f9be 	bl	8003328 <RCM_ExecRegularConv>
 8001fac:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001fae:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001fb0:	f006 f898 	bl	80080e4 <RVBS_CalcAvVbus>
 8001fb4:	4338      	orrs	r0, r7
 8001fb6:	f000 000e 	and.w	r0, r0, #14
 8001fba:	ea45 0100 	orr.w	r1, r5, r0
 8001fbe:	b289      	uxth	r1, r1
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <TSK_SafetyTask_PWMOFF+0x90>)
 8001fc2:	e7d8      	b.n	8001f76 <TSK_SafetyTask_PWMOFF+0x1e>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001fc4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001fc8:	f005 fc6e 	bl	80078a8 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001fcc:	480b      	ldr	r0, [pc, #44]	; (8001ffc <TSK_SafetyTask_PWMOFF+0xa4>)
 8001fce:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001fd2:	b923      	cbnz	r3, 8001fde <TSK_SafetyTask_PWMOFF+0x86>
    SixStep_Clear(bMotor);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fca5 	bl	8001924 <SixStep_Clear>
}
 8001fda:	b003      	add	sp, #12
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MCPA_flushDataLog (&MCPA_UART_A);
 8001fde:	f005 faeb 	bl	80075b8 <MCPA_flushDataLog>
 8001fe2:	e7f7      	b.n	8001fd4 <TSK_SafetyTask_PWMOFF+0x7c>
 8001fe4:	20000688 	.word	0x20000688
 8001fe8:	20000650 	.word	0x20000650
 8001fec:	20000218 	.word	0x20000218
 8001ff0:	20000228 	.word	0x20000228
 8001ff4:	20000244 	.word	0x20000244
 8001ff8:	200000fc 	.word	0x200000fc
 8001ffc:	200002a0 	.word	0x200002a0

08002000 <TSK_SafetyTask>:
{
 8002000:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <TSK_SafetyTask+0x1c>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d000      	beq.n	800200c <TSK_SafetyTask+0xc>
}
 800200a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff ffa3 	bl	8001f58 <TSK_SafetyTask_PWMOFF>
}
 8002012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002016:	f001 ba4f 	b.w	80034b8 <RCM_ExecUserConv>
 800201a:	bf00      	nop
 800201c:	20000680 	.word	0x20000680

08002020 <MC_RunMotorControlTasks>:
{
 8002020:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <MC_RunMotorControlTasks+0x14>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b903      	cbnz	r3, 800202a <MC_RunMotorControlTasks+0xa>
}
 8002028:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800202a:	f7ff fea5 	bl	8001d78 <MC_Scheduler>
    TSK_SafetyTask();
 800202e:	f7ff ffe7 	bl	8002000 <TSK_SafetyTask>
}
 8002032:	bd08      	pop	{r3, pc}
 8002034:	20000680 	.word	0x20000680

08002038 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  SixPwm_SwitchOffPWM(pwmcHandle[M1]);
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <TSK_HardwareFaultTask+0x18>)
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	f005 ffc1 	bl	8007fc4 <SixPwm_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <TSK_HardwareFaultTask+0x1c>)
 8002048:	2200      	movs	r2, #0
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	f7ff bbc2 	b.w	80017d4 <MCI_FaultProcessing>
 8002050:	20000688 	.word	0x20000688
 8002054:	20000650 	.word	0x20000650

08002058 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002058:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800205a:	f7ff fb8f 	bl	800177c <MC_GetSTMStateMotor1>
 800205e:	b918      	cbnz	r0, 8002068 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002064:	f7ff bb72 	b.w	800174c <MC_StartMotor1>
}
 8002068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 800206c:	f7ff bb74 	b.w	8001758 <MC_StopMotor1>

08002070 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002070:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002072:	493b      	ldr	r1, [pc, #236]	; (8002160 <mc_lock_pins+0xf0>)
 8002074:	4a3b      	ldr	r2, [pc, #236]	; (8002164 <mc_lock_pins+0xf4>)
 8002076:	61ca      	str	r2, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002078:	2010      	movs	r0, #16
 800207a:	61c8      	str	r0, [r1, #28]
 800207c:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800207e:	61ca      	str	r2, [r1, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002080:	69cc      	ldr	r4, [r1, #28]
 8002082:	940b      	str	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 8002088:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800208a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800208c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800208e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	920a      	str	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002094:	f44f 7080 	mov.w	r0, #256	; 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <mc_lock_pins+0xf8>)
  (void) temp;
 800209a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800209c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800209e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020a6:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020aa:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 80020ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020be:	f44f 3282 	mov.w	r2, #66560	; 0x10400
  (void) temp;
 80020c2:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020c6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ce:	f44f 3088 	mov.w	r0, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020d2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  (void) temp;
 80020d6:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020da:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020dc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020de:	69d8      	ldr	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <mc_lock_pins+0xfc>)
  temp = READ_REG(GPIOx->LCKR);
 80020e2:	9006      	str	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020e4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e8:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
  (void) temp;
 80020ec:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ee:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f2:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020f4:	69d0      	ldr	r0, [r2, #28]
 80020f6:	9005      	str	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020fc:	f44f 3090 	mov.w	r0, #73728	; 0x12000
  (void) temp;
 8002100:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002102:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002104:	61cc      	str	r4, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002106:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002108:	69c9      	ldr	r1, [r1, #28]
 800210a:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800210c:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210e:	4918      	ldr	r1, [pc, #96]	; (8002170 <mc_lock_pins+0x100>)
  (void) temp;
 8002110:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002112:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002114:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002116:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002118:	69d1      	ldr	r1, [r2, #28]
 800211a:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800211c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002120:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
  (void) temp;
 8002124:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002126:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002128:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800212c:	69d1      	ldr	r1, [r2, #28]
 800212e:	9102      	str	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002130:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 8002136:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002138:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800213a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800213c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800213e:	69d9      	ldr	r1, [r3, #28]
 8002140:	9101      	str	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002142:	f44f 3384 	mov.w	r3, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002146:	f44f 6100 	mov.w	r1, #2048	; 0x800
  (void) temp;
 800214a:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800214c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800214e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002150:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002152:	69d3      	ldr	r3, [r2, #28]
 8002154:	9300      	str	r3, [sp, #0]
  (void) temp;
 8002156:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_BEMF_W_GPIO_Port, M1_BEMF_W_Pin);
}
 8002158:	b00c      	add	sp, #48	; 0x30
 800215a:	bc30      	pop	{r4, r5}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	48000800 	.word	0x48000800
 8002164:	00010010 	.word	0x00010010
 8002168:	00010100 	.word	0x00010100
 800216c:	48000400 	.word	0x48000400
 8002170:	00010020 	.word	0x00010020

08002174 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002178:	b087      	sub	sp, #28
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <RI_SetRegCommandParser+0xc4>)
 800217c:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002180:	9304      	str	r3, [sp, #16]
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <RI_SetRegCommandParser+0xc8>)
 8002184:	9305      	str	r3, [sp, #20]
    uint16_t size = 0U;
 8002186:	2600      	movs	r6, #0
    uint8_t * rxData = pHandle->rxBuffer;
 8002188:	f8d0 e004 	ldr.w	lr, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 800218c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    uint16_t size = 0U;
 8002190:	f8ad 600e 	strh.w	r6, [sp, #14]
{
 8002194:	4607      	mov	r7, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002196:	81c6      	strh	r6, [r0, #14]
 8002198:	eb08 0901 	add.w	r9, r8, r1
  uint8_t retVal = MCP_CMD_OK;
 800219c:	46b2      	mov	sl, r6

    while (rxLength > 0)
    {
      number_of_item ++;
 800219e:	3601      	adds	r6, #1
    while (rxLength > 0)
 80021a0:	2b00      	cmp	r3, #0
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80021a2:	f1a3 0c02 	sub.w	ip, r3, #2
      number_of_item ++;
 80021a6:	b2f6      	uxtb	r6, r6
    while (rxLength > 0)
 80021a8:	dd43      	ble.n	8002232 <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021aa:	fa0f f18c 	sxth.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80021ae:	fa1f f48c 	uxth.w	r4, ip
      regID = *dataElementID & REG_MASK;
 80021b2:	f8be c000 	ldrh.w	ip, [lr]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80021b6:	f10e 0502 	add.w	r5, lr, #2
      if (motorID > NBR_OF_MOTORS)
 80021ba:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021be:	f10d 030e 	add.w	r3, sp, #14
 80021c2:	462a      	mov	r2, r5
      regID = *dataElementID & REG_MASK;
 80021c4:	f02c 0007 	bic.w	r0, ip, #7
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80021c8:	fa5f fe8c 	uxtb.w	lr, ip
      if (motorID > NBR_OF_MOTORS)
 80021cc:	d11e      	bne.n	800220c <RI_SetRegCommandParser+0x98>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80021ce:	9100      	str	r1, [sp, #0]
 80021d0:	f00e 0c07 	and.w	ip, lr, #7
 80021d4:	a906      	add	r1, sp, #24
 80021d6:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80021da:	f00e 0138 	and.w	r1, lr, #56	; 0x38
 80021de:	f85c bc08 	ldr.w	fp, [ip, #-8]
 80021e2:	47d8      	blx	fp
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
 80021e4:	f8bd e00e 	ldrh.w	lr, [sp, #14]
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 80021e8:	2e01      	cmp	r6, #1
        rxLength = (int16_t) (rxLength - size);
 80021ea:	eba4 0c0e 	sub.w	ip, r4, lr
 80021ee:	fa0f f38c 	sxth.w	r3, ip
        if ((1U == number_of_item) && (0 == rxLength))
 80021f2:	d013      	beq.n	800221c <RI_SetRegCommandParser+0xa8>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 80021f4:	45c1      	cmp	r9, r8
 80021f6:	d00d      	beq.n	8002214 <RI_SetRegCommandParser+0xa0>
          {
            *txData = accessResult;
 80021f8:	f808 0b01 	strb.w	r0, [r8], #1
            txData = txData+1;
            pHandle->txLength++;
 80021fc:	89fa      	ldrh	r2, [r7, #14]
 80021fe:	3201      	adds	r2, #1
        rxData = rxData+size;
 8002200:	44ae      	add	lr, r5
            pHandle->txLength++;
 8002202:	81fa      	strh	r2, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002204:	2800      	cmp	r0, #0
 8002206:	d0ca      	beq.n	800219e <RI_SetRegCommandParser+0x2a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002208:	2807      	cmp	r0, #7
 800220a:	d10d      	bne.n	8002228 <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800220c:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800220e:	b007      	add	sp, #28
 8002210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002214:	2008      	movs	r0, #8
}
 8002216:	b007      	add	sp, #28
 8002218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e9      	bne.n	80021f4 <RI_SetRegCommandParser+0x80>
    if (MCP_CMD_OK == retVal)
 8002220:	2800      	cmp	r0, #0
 8002222:	d1f4      	bne.n	800220e <RI_SetRegCommandParser+0x9a>
      pHandle->txLength = 0;
 8002224:	81f8      	strh	r0, [r7, #14]
 8002226:	e7f2      	b.n	800220e <RI_SetRegCommandParser+0x9a>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002228:	280a      	cmp	r0, #10
 800222a:	d0ef      	beq.n	800220c <RI_SetRegCommandParser+0x98>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800222c:	f04f 0a01 	mov.w	sl, #1
 8002230:	e7b5      	b.n	800219e <RI_SetRegCommandParser+0x2a>
 8002232:	4650      	mov	r0, sl
 8002234:	e7f4      	b.n	8002220 <RI_SetRegCommandParser+0xac>
 8002236:	bf00      	nop
 8002238:	08002469 	.word	0x08002469
 800223c:	08002569 	.word	0x08002569

08002240 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002244:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 800224c:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 800224e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <RI_GetRegCommandParser+0x8c>)
 8002254:	9304      	str	r3, [sp, #16]
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <RI_GetRegCommandParser+0x90>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002258:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 800225c:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800225e:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8002260:	f1b8 0f00 	cmp.w	r8, #0
 8002264:	d023      	beq.n	80022ae <RI_GetRegCommandParser+0x6e>
 8002266:	4607      	mov	r7, r0
 8002268:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 800226a:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 800226c:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002270:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002274:	f001 0e07 	and.w	lr, r1, #7
 8002278:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 800227c:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002280:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8002282:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002286:	f10d 030e 	add.w	r3, sp, #14
 800228a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800228e:	f001 0138 	and.w	r1, r1, #56	; 0x38
      if (motorID > NBR_OF_MOTORS)
 8002292:	d10c      	bne.n	80022ae <RI_GetRegCommandParser+0x6e>
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002294:	9500      	str	r5, [sp, #0]
 8002296:	f85e ac08 	ldr.w	sl, [lr, #-8]
 800229a:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 800229c:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 80022a0:	fa19 f383 	uxtah	r3, r9, r3
 80022a4:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 80022a6:	b130      	cbz	r0, 80022b6 <RI_GetRegCommandParser+0x76>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80022a8:	b006      	add	sp, #24
 80022aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t retVal = MCP_CMD_NOK;
 80022ae:	2001      	movs	r0, #1
}
 80022b0:	b006      	add	sp, #24
 80022b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          txData = txData+size;
 80022b6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80022ba:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80022bc:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 80022be:	440a      	add	r2, r1
          txData = txData+size;
 80022c0:	440e      	add	r6, r1
          pHandle->txLength += size;
 80022c2:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80022c4:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1d0      	bne.n	800226c <RI_GetRegCommandParser+0x2c>
 80022ca:	e7ed      	b.n	80022a8 <RI_GetRegCommandParser+0x68>
 80022cc:	080029a9 	.word	0x080029a9
 80022d0:	08002ae9 	.word	0x08002ae9

080022d4 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80022d6:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022d8:	882b      	ldrh	r3, [r5, #0]

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022da:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022de:	f023 0207 	bic.w	r2, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80022e6:	b082      	sub	sp, #8
 80022e8:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80022ea:	b292      	uxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80022ec:	d051      	beq.n	8002392 <MCP_ReceivedPacket+0xbe>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80022ee:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022f0:	4e4c      	ldr	r6, [pc, #304]	; (8002424 <MCP_ReceivedPacket+0x150>)
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80022fa:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80022fc:	eb06 0683 	add.w	r6, r6, r3, lsl #2

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002300:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002302:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002304:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002306:	8999      	ldrh	r1, [r3, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002308:	3802      	subs	r0, #2
 800230a:	b280      	uxth	r0, r0
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800230c:	3901      	subs	r1, #1

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 800230e:	2300      	movs	r3, #0

    switch (command)
 8002310:	2a38      	cmp	r2, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002312:	81a0      	strh	r0, [r4, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002314:	b289      	uxth	r1, r1
    pHandle->txLength = 0U;
 8002316:	81e3      	strh	r3, [r4, #14]
    switch (command)
 8002318:	d829      	bhi.n	800236e <MCP_ReceivedPacket+0x9a>
 800231a:	2a38      	cmp	r2, #56	; 0x38
 800231c:	d81e      	bhi.n	800235c <MCP_ReceivedPacket+0x88>
 800231e:	e8df f002 	tbb	[pc, r2]
 8002322:	1d60      	.short	0x1d60
 8002324:	1d1d1d1d 	.word	0x1d1d1d1d
 8002328:	1d681d1d 	.word	0x1d681d1d
 800232c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002330:	1d5b1d1d 	.word	0x1d5b1d1d
 8002334:	1d1d1d1d 	.word	0x1d1d1d1d
 8002338:	1d531d1d 	.word	0x1d531d1d
 800233c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002340:	1d4d1d1d 	.word	0x1d4d1d1d
 8002344:	1d1d1d1d 	.word	0x1d1d1d1d
 8002348:	1d6d1d1d 	.word	0x1d6d1d1d
 800234c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002350:	1d491d1d 	.word	0x1d491d1d
 8002354:	1d1d1d1d 	.word	0x1d1d1d1d
 8002358:	1d1d      	.short	0x1d1d
 800235a:	78          	.byte	0x78
 800235b:	00          	.byte	0x00
 800235c:	2300      	movs	r3, #0
 800235e:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002360:	68a2      	ldr	r2, [r4, #8]
 8002362:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002364:	89e3      	ldrh	r3, [r4, #14]
 8002366:	3301      	adds	r3, #1
 8002368:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800236a:	b002      	add	sp, #8
 800236c:	bd70      	pop	{r4, r5, r6, pc}
    switch (command)
 800236e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002372:	bf18      	it	ne
 8002374:	2002      	movne	r0, #2
 8002376:	d1f3      	bne.n	8002360 <MCP_ReceivedPacket+0x8c>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002378:	b20a      	sxth	r2, r1
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800237a:	492b      	ldr	r1, [pc, #172]	; (8002428 <MCP_ReceivedPacket+0x154>)
 800237c:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8002380:	b1ae      	cbz	r6, 80023ae <MCP_ReceivedPacket+0xda>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002382:	68a3      	ldr	r3, [r4, #8]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4629      	mov	r1, r5
 8002388:	f104 030e 	add.w	r3, r4, #14
 800238c:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800238e:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002390:	e7e6      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002392:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002394:	6821      	ldr	r1, [r4, #0]
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002396:	f3c2 03c4 	ubfx	r3, r2, #3, #5
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800239a:	3802      	subs	r0, #2
 800239c:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800239e:	3502      	adds	r5, #2
    pHandle->txLength = 0U;
 80023a0:	2200      	movs	r2, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80023a2:	2b01      	cmp	r3, #1
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023a4:	8989      	ldrh	r1, [r1, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023a6:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80023a8:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 80023aa:	81e2      	strh	r2, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80023ac:	d937      	bls.n	800241e <MCP_ReceivedPacket+0x14a>
        MCPResponse = MCP_CMD_OK;
 80023ae:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80023b0:	200d      	movs	r0, #13
 80023b2:	e7d5      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
        if (IDLE == MCI_GetSTMState(pMCI))
 80023b4:	4630      	mov	r0, r6
 80023b6:	f7ff fa37 	bl	8001828 <MCI_GetSTMState>
 80023ba:	b128      	cbz	r0, 80023c8 <MCP_ReceivedPacket+0xf4>
          (void)MCI_StopMotor(pMCI);
 80023bc:	4630      	mov	r0, r6
 80023be:	f7ff fa4f 	bl	8001860 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023c2:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 80023c4:	2000      	movs	r0, #0
 80023c6:	e7cb      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80023c8:	4630      	mov	r0, r6
 80023ca:	f7ff fa33 	bl	8001834 <MCI_StartMotor>
 80023ce:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023d2:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80023d4:	b2c0      	uxtb	r0, r0
 80023d6:	e7c3      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80023d8:	4620      	mov	r0, r4
 80023da:	f7ff ff31 	bl	8002240 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023de:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023e0:	e7be      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
        *pHandle->txBuffer = MCP_VERSION;
 80023e2:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 80023e4:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 80023e6:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80023e8:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80023ea:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023ec:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80023ee:	2000      	movs	r0, #0
        break;
 80023f0:	e7b6      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff febe 	bl	8002174 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023f8:	89e3      	ldrh	r3, [r4, #14]
        break;
 80023fa:	e7b1      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
        if (RUN == MCI_GetSTMState(pMCI))
 80023fc:	4630      	mov	r0, r6
 80023fe:	f7ff fa13 	bl	8001828 <MCI_GetSTMState>
 8002402:	2806      	cmp	r0, #6
 8002404:	d1dd      	bne.n	80023c2 <MCP_ReceivedPacket+0xee>
          MCI_StopRamp(pMCI);
 8002406:	4630      	mov	r0, r6
 8002408:	f7ff fa78 	bl	80018fc <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800240c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800240e:	2000      	movs	r0, #0
 8002410:	e7a6      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
        (void)MCI_FaultAcknowledged(pMCI);
 8002412:	4630      	mov	r0, r6
 8002414:	f7ff fa44 	bl	80018a0 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002418:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800241a:	2000      	movs	r0, #0
        break;
 800241c:	e7a0      	b.n	8002360 <MCP_ReceivedPacket+0x8c>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800241e:	3901      	subs	r1, #1
 8002420:	e7aa      	b.n	8002378 <MCP_ReceivedPacket+0xa4>
 8002422:	bf00      	nop
 8002424:	20000650 	.word	0x20000650
 8002428:	200017a8 	.word	0x200017a8

0800242c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800242c:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800242e:	f003 f9b3 	bl	8005798 <HAL_RCC_GetHCLKFreq>
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_MotorControl_Init+0x30>)
 8002434:	fba3 3000 	umull	r3, r0, r3, r0
 8002438:	09c0      	lsrs	r0, r0, #7
 800243a:	f002 fbf1 	bl	8004c20 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_MotorControl_Init+0x34>)
 8002440:	2200      	movs	r2, #0
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f002 fb9e 	bl	8004b88 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_MotorControl_Init+0x38>)
 800244e:	f7ff fa91 	bl	8001974 <MCboot>
  mc_lock_pins();
}
 8002452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002456:	f7ff be0b 	b.w	8002070 <mc_lock_pins>
 800245a:	bf00      	nop
 800245c:	10624dd3 	.word	0x10624dd3
 8002460:	20000370 	.word	0x20000370
 8002464:	20001818 	.word	0x20001818

08002468 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002468:	b510      	push	{r4, lr}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800246a:	3908      	subs	r1, #8
{
 800246c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
  switch(typeID)
 8002470:	2920      	cmp	r1, #32
 8002472:	d812      	bhi.n	800249a <RI_SetRegisterGlobal+0x32>
 8002474:	e8df f001 	tbb	[pc, r1]
 8002478:	11111115 	.word	0x11111115
 800247c:	11111111 	.word	0x11111111
 8002480:	1111111d 	.word	0x1111111d
 8002484:	11111111 	.word	0x11111111
 8002488:	1111112d 	.word	0x1111112d
 800248c:	11111111 	.word	0x11111111
 8002490:	11111135 	.word	0x11111135
 8002494:	11111111 	.word	0x11111111
 8002498:	4c          	.byte	0x4c
 8002499:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800249a:	2200      	movs	r2, #0
 800249c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800249e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 80024a0:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024a2:	2848      	cmp	r0, #72	; 0x48
      *size = 1;
 80024a4:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024a8:	bf0c      	ite	eq
 80024aa:	2004      	moveq	r0, #4
 80024ac:	2005      	movne	r0, #5
      *size = 1;
 80024ae:	801a      	strh	r2, [r3, #0]
}
 80024b0:	bd10      	pop	{r4, pc}
      switch (regID)
 80024b2:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 80024b6:	d04e      	beq.n	8002556 <RI_SetRegisterGlobal+0xee>
 80024b8:	d93c      	bls.n	8002534 <RI_SetRegisterGlobal+0xcc>
 80024ba:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 80024be:	d04a      	beq.n	8002556 <RI_SetRegisterGlobal+0xee>
 80024c0:	f641 3258 	movw	r2, #7000	; 0x1b58
 80024c4:	4290      	cmp	r0, r2
 80024c6:	bf14      	ite	ne
 80024c8:	2005      	movne	r0, #5
 80024ca:	2004      	moveq	r0, #4
      *size = 2;
 80024cc:	2202      	movs	r2, #2
 80024ce:	801a      	strh	r2, [r3, #0]
}
 80024d0:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024d2:	2818      	cmp	r0, #24
      *size = 4;
 80024d4:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024d8:	bf0c      	ite	eq
 80024da:	4610      	moveq	r0, r2
 80024dc:	2005      	movne	r0, #5
      *size = 4;
 80024de:	801a      	strh	r2, [r3, #0]
}
 80024e0:	bd10      	pop	{r4, pc}
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80024e2:	2101      	movs	r1, #1
 80024e4:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024e6:	f992 0000 	ldrsb.w	r0, [r2]
 80024ea:	b358      	cbz	r0, 8002544 <RI_SetRegisterGlobal+0xdc>
 80024ec:	fa1f fc8c 	uxth.w	ip, ip
 80024f0:	1850      	adds	r0, r2, r1
 80024f2:	e004      	b.n	80024fe <RI_SetRegisterGlobal+0x96>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80024f4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024f6:	f992 4000 	ldrsb.w	r4, [r2]
 80024fa:	3001      	adds	r0, #1
 80024fc:	b314      	cbz	r4, 8002544 <RI_SetRegisterGlobal+0xdc>
    *size = *size + 1U;
 80024fe:	f101 0e01 	add.w	lr, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002502:	4561      	cmp	r1, ip
    tempdestString++;
 8002504:	4602      	mov	r2, r0
    *size = *size + 1U;
 8002506:	fa1f f18e 	uxth.w	r1, lr
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800250a:	d3f3      	bcc.n	80024f4 <RI_SetRegisterGlobal+0x8c>
      retVal = MCP_ERROR_RO_REG;
 800250c:	2004      	movs	r0, #4
}
 800250e:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 8002510:	8812      	ldrh	r2, [r2, #0]
 8002512:	3202      	adds	r2, #2
 8002514:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8002516:	fa1f fc8c 	uxth.w	ip, ip
 800251a:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 800251c:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 800251e:	d81c      	bhi.n	800255a <RI_SetRegisterGlobal+0xf2>
        switch (regID)
 8002520:	28a8      	cmp	r0, #168	; 0xa8
 8002522:	d0f3      	beq.n	800250c <RI_SetRegisterGlobal+0xa4>
 8002524:	d812      	bhi.n	800254c <RI_SetRegisterGlobal+0xe4>
 8002526:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 800252a:	2828      	cmp	r0, #40	; 0x28
 800252c:	bf14      	ite	ne
 800252e:	2005      	movne	r0, #5
 8002530:	2004      	moveq	r0, #4
}
 8002532:	bd10      	pop	{r4, pc}
 8002534:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002538:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 800253c:	bf14      	ite	ne
 800253e:	2005      	movne	r0, #5
 8002540:	2004      	moveq	r0, #4
 8002542:	e7c3      	b.n	80024cc <RI_SetRegisterGlobal+0x64>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002544:	2300      	movs	r3, #0
 8002546:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002548:	2004      	movs	r0, #4
  return (retVal);
 800254a:	e7e0      	b.n	800250e <RI_SetRegisterGlobal+0xa6>
            retVal = MCP_ERROR_RO_REG;
 800254c:	28e8      	cmp	r0, #232	; 0xe8
 800254e:	bf14      	ite	ne
 8002550:	2005      	movne	r0, #5
 8002552:	2004      	moveq	r0, #4
}
 8002554:	bd10      	pop	{r4, pc}
  uint8_t retVal = MCP_CMD_OK;
 8002556:	2000      	movs	r0, #0
 8002558:	e7b8      	b.n	80024cc <RI_SetRegisterGlobal+0x64>
        *size = 0;
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800255e:	200a      	movs	r0, #10
}
 8002560:	bd10      	pop	{r4, pc}
 8002562:	bf00      	nop
 8002564:	0000      	movs	r0, r0
	...

08002568 <RI_SetRegisterMotor1>:
{
 8002568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800256c:	b086      	sub	sp, #24
  switch(typeID)
 800256e:	3908      	subs	r1, #8
{
 8002570:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
  switch(typeID)
 8002578:	2920      	cmp	r1, #32
 800257a:	d812      	bhi.n	80025a2 <RI_SetRegisterMotor1+0x3a>
 800257c:	e8df f001 	tbb	[pc, r1]
 8002580:	11111117 	.word	0x11111117
 8002584:	11111111 	.word	0x11111111
 8002588:	1111112d 	.word	0x1111112d
 800258c:	11111111 	.word	0x11111111
 8002590:	111111ab 	.word	0x111111ab
 8002594:	11111111 	.word	0x11111111
 8002598:	1111114e 	.word	0x1111114e
 800259c:	11111111 	.word	0x11111111
 80025a0:	69          	.byte	0x69
 80025a1:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80025a2:	2300      	movs	r3, #0
 80025a4:	802b      	strh	r3, [r5, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80025a6:	2007      	movs	r0, #7
}
 80025a8:	b006      	add	sp, #24
 80025aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (regID)
 80025ae:	f5b0 6fd9 	cmp.w	r0, #1736	; 0x6c8
 80025b2:	f000 8169 	beq.w	8002888 <RI_SetRegisterMotor1+0x320>
 80025b6:	f200 80ab 	bhi.w	8002710 <RI_SetRegisterMotor1+0x1a8>
 80025ba:	2848      	cmp	r0, #72	; 0x48
 80025bc:	f000 8142 	beq.w	8002844 <RI_SetRegisterMotor1+0x2dc>
 80025c0:	2888      	cmp	r0, #136	; 0x88
 80025c2:	f040 8145 	bne.w	8002850 <RI_SetRegisterMotor1+0x2e8>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80025c6:	7813      	ldrb	r3, [r2, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	f000 8153 	beq.w	8002874 <RI_SetRegisterMotor1+0x30c>
  uint8_t retVal = MCP_CMD_OK;
 80025ce:	2000      	movs	r0, #0
      *size = 1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	802b      	strh	r3, [r5, #0]
}
 80025d4:	b006      	add	sp, #24
 80025d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80025da:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 80025de:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 80025e0:	f000 812c 	beq.w	800283c <RI_SetRegisterMotor1+0x2d4>
 80025e4:	f240 80ac 	bls.w	8002740 <RI_SetRegisterMotor1+0x1d8>
 80025e8:	f241 43d0 	movw	r3, #5328	; 0x14d0
 80025ec:	4298      	cmp	r0, r3
 80025ee:	f000 8155 	beq.w	800289c <RI_SetRegisterMotor1+0x334>
 80025f2:	f240 8097 	bls.w	8002724 <RI_SetRegisterMotor1+0x1bc>
 80025f6:	f641 3358 	movw	r3, #7000	; 0x1b58
 80025fa:	4298      	cmp	r0, r3
 80025fc:	f000 8120 	beq.w	8002840 <RI_SetRegisterMotor1+0x2d8>
 8002600:	d978      	bls.n	80026f4 <RI_SetRegisterMotor1+0x18c>
 8002602:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002606:	f641 3390 	movw	r3, #7056	; 0x1b90
 800260a:	4298      	cmp	r0, r3
 800260c:	bf14      	ite	ne
 800260e:	2005      	movne	r0, #5
 8002610:	2004      	moveq	r0, #4
      *size = 2;
 8002612:	2302      	movs	r3, #2
 8002614:	802b      	strh	r3, [r5, #0]
}
 8002616:	b006      	add	sp, #24
 8002618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *size= 1U ; /* /0 is the min String size */
 800261c:	2201      	movs	r2, #1
 800261e:	802a      	strh	r2, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002620:	f994 3000 	ldrsb.w	r3, [r4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a9 	beq.w	800277c <RI_SetRegisterMotor1+0x214>
 800262a:	fa1f f18c 	uxth.w	r1, ip
 800262e:	18a3      	adds	r3, r4, r2
 8002630:	e006      	b.n	8002640 <RI_SetRegisterMotor1+0xd8>
    *size = *size + 1U;
 8002632:	802a      	strh	r2, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002634:	f994 0000 	ldrsb.w	r0, [r4]
 8002638:	3301      	adds	r3, #1
 800263a:	2800      	cmp	r0, #0
 800263c:	f000 809e 	beq.w	800277c <RI_SetRegisterMotor1+0x214>
    *size = *size + 1U;
 8002640:	1c50      	adds	r0, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002642:	4291      	cmp	r1, r2
    tempdestString++;
 8002644:	461c      	mov	r4, r3
    *size = *size + 1U;
 8002646:	b282      	uxth	r2, r0
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002648:	d8f3      	bhi.n	8002632 <RI_SetRegisterMotor1+0xca>
      retVal = MCP_ERROR_RO_REG;
 800264a:	2004      	movs	r0, #4
}
 800264c:	b006      	add	sp, #24
 800264e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002652:	8812      	ldrh	r2, [r2, #0]
      *size = rawSize + 2U;
 8002654:	1c93      	adds	r3, r2, #2
 8002656:	b29b      	uxth	r3, r3
      if (*size > (uint16_t)dataAvailable)
 8002658:	fa1f f18c 	uxth.w	r1, ip
 800265c:	428b      	cmp	r3, r1
      *size = rawSize + 2U;
 800265e:	802b      	strh	r3, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 8002660:	f200 80f2 	bhi.w	8002848 <RI_SetRegisterMotor1+0x2e0>
 8002664:	f5b0 6fa5 	cmp.w	r0, #1320	; 0x528
      rawData++;
 8002668:	f104 0102 	add.w	r1, r4, #2
        switch (regID)
 800266c:	f000 817c 	beq.w	8002968 <RI_SetRegisterMotor1+0x400>
 8002670:	f200 8093 	bhi.w	800279a <RI_SetRegisterMotor1+0x232>
 8002674:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8002678:	f000 8168 	beq.w	800294c <RI_SetRegisterMotor1+0x3e4>
 800267c:	f240 8082 	bls.w	8002784 <RI_SetRegisterMotor1+0x21c>
 8002680:	f5b0 7f0a 	cmp.w	r0, #552	; 0x228
 8002684:	f040 8108 	bne.w	8002898 <RI_SetRegisterMotor1+0x330>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002688:	f012 0607 	ands.w	r6, r2, #7
 800268c:	f040 80f0 	bne.w	8002870 <RI_SetRegisterMotor1+0x308>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002690:	b2d2      	uxtb	r2, r2
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002692:	2a2f      	cmp	r2, #47	; 0x2f
 8002694:	f200 80ec 	bhi.w	8002870 <RI_SetRegisterMotor1+0x308>
              for (i = 0; i <nbrOfPhase; i++)
 8002698:	08d5      	lsrs	r5, r2, #3
 800269a:	f000 80c4 	beq.w	8002826 <RI_SetRegisterMotor1+0x2be>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800269e:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8002994 <RI_SetRegisterMotor1+0x42c>
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 80026a2:	4fb7      	ldr	r7, [pc, #732]	; (8002980 <RI_SetRegisterMotor1+0x418>)
 80026a4:	4631      	mov	r1, r6
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80026a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
              revUpPhase.hFinalPulse = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80026aa:	88e3      	ldrh	r3, [r4, #6]
 80026ac:	f8ad 3010 	strh.w	r3, [sp, #16]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80026b0:	fb88 0302 	smull	r0, r3, r8, r2
 80026b4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80026b8:	f8ad 300e 	strh.w	r3, [sp, #14]
              for (i = 0; i <nbrOfPhase; i++)
 80026bc:	3601      	adds	r6, #1
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80026be:	f834 3f08 	ldrh.w	r3, [r4, #8]!
 80026c2:	f8ad 300c 	strh.w	r3, [sp, #12]
              (void)RUC_SetPhase(&RevUpControlM1, i, &revUpPhase);
 80026c6:	aa03      	add	r2, sp, #12
 80026c8:	4638      	mov	r0, r7
 80026ca:	f005 fe07 	bl	80082dc <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++)
 80026ce:	b2f1      	uxtb	r1, r6
 80026d0:	428d      	cmp	r5, r1
 80026d2:	d8e8      	bhi.n	80026a6 <RI_SetRegisterMotor1+0x13e>
 80026d4:	e0a7      	b.n	8002826 <RI_SetRegisterMotor1+0x2be>
      switch (regID)
 80026d6:	2858      	cmp	r0, #88	; 0x58
 80026d8:	f000 80dc 	beq.w	8002894 <RI_SetRegisterMotor1+0x32c>
 80026dc:	2898      	cmp	r0, #152	; 0x98
 80026de:	f000 80b9 	beq.w	8002854 <RI_SetRegisterMotor1+0x2ec>
          retVal = MCP_ERROR_RO_REG;
 80026e2:	2818      	cmp	r0, #24
 80026e4:	bf14      	ite	ne
 80026e6:	2005      	movne	r0, #5
 80026e8:	2004      	moveq	r0, #4
      *size = 4;
 80026ea:	2304      	movs	r3, #4
 80026ec:	802b      	strh	r3, [r5, #0]
}
 80026ee:	b006      	add	sp, #24
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f4:	f020 0340 	bic.w	r3, r0, #64	; 0x40
 80026f8:	f641 3210 	movw	r2, #6928	; 0x1b10
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f000 809f 	beq.w	8002840 <RI_SetRegisterMotor1+0x2d8>
 8002702:	f641 2390 	movw	r3, #6800	; 0x1a90
 8002706:	4298      	cmp	r0, r3
 8002708:	bf14      	ite	ne
 800270a:	2005      	movne	r0, #5
 800270c:	2004      	moveq	r0, #4
 800270e:	e780      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
 8002710:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8002714:	f040 809c 	bne.w	8002850 <RI_SetRegisterMotor1+0x2e8>
          PWMC_SetQuasiSynchState(&(&PWM_Handle_M1)->_Super, regdata8);
 8002718:	489a      	ldr	r0, [pc, #616]	; (8002984 <RI_SetRegisterMotor1+0x41c>)
 800271a:	7811      	ldrb	r1, [r2, #0]
 800271c:	f005 f8d4 	bl	80078c8 <PWMC_SetQuasiSynchState>
  uint8_t retVal = MCP_CMD_OK;
 8002720:	2000      	movs	r0, #0
          break;
 8002722:	e755      	b.n	80025d0 <RI_SetRegisterMotor1+0x68>
 8002724:	f241 4350 	movw	r3, #5200	; 0x1450
 8002728:	4298      	cmp	r0, r3
 800272a:	f000 80c8 	beq.w	80028be <RI_SetRegisterMotor1+0x356>
 800272e:	f241 4390 	movw	r3, #5264	; 0x1490
 8002732:	4298      	cmp	r0, r3
 8002734:	d10d      	bne.n	8002752 <RI_SetRegisterMotor1+0x1ea>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002736:	4894      	ldr	r0, [pc, #592]	; (8002988 <RI_SetRegisterMotor1+0x420>)
 8002738:	f005 f850 	bl	80077dc <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 800273c:	2000      	movs	r0, #0
          break;
 800273e:	e768      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
 8002740:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 8002744:	f000 80b5 	beq.w	80028b2 <RI_SetRegisterMotor1+0x34a>
 8002748:	d90d      	bls.n	8002766 <RI_SetRegisterMotor1+0x1fe>
 800274a:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 800274e:	d075      	beq.n	800283c <RI_SetRegisterMotor1+0x2d4>
 8002750:	d901      	bls.n	8002756 <RI_SetRegisterMotor1+0x1ee>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002752:	2005      	movs	r0, #5
 8002754:	e75d      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
 8002756:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800275a:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 800275e:	bf14      	ite	ne
 8002760:	2005      	movne	r0, #5
 8002762:	2004      	moveq	r0, #4
 8002764:	e755      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
 8002766:	2890      	cmp	r0, #144	; 0x90
 8002768:	f000 809d 	beq.w	80028a6 <RI_SetRegisterMotor1+0x33e>
 800276c:	28d0      	cmp	r0, #208	; 0xd0
 800276e:	d1f0      	bne.n	8002752 <RI_SetRegisterMotor1+0x1ea>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002770:	4885      	ldr	r0, [pc, #532]	; (8002988 <RI_SetRegisterMotor1+0x420>)
 8002772:	b209      	sxth	r1, r1
 8002774:	f005 f816 	bl	80077a4 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002778:	2000      	movs	r0, #0
          break;
 800277a:	e74a      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
    *tempdestString = (int8_t)0;
 800277c:	2300      	movs	r3, #0
 800277e:	7023      	strb	r3, [r4, #0]
      retVal = MCP_ERROR_RO_REG;
 8002780:	2004      	movs	r0, #4
  return (retVal);
 8002782:	e763      	b.n	800264c <RI_SetRegisterMotor1+0xe4>
 8002784:	28a8      	cmp	r0, #168	; 0xa8
 8002786:	f43f af60 	beq.w	800264a <RI_SetRegisterMotor1+0xe2>
 800278a:	d94e      	bls.n	800282a <RI_SetRegisterMotor1+0x2c2>
            retVal = MCP_ERROR_RO_REG;
 800278c:	28e8      	cmp	r0, #232	; 0xe8
 800278e:	bf14      	ite	ne
 8002790:	2005      	movne	r0, #5
 8002792:	2004      	moveq	r0, #4
}
 8002794:	b006      	add	sp, #24
 8002796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279a:	f5b0 6ffd 	cmp.w	r0, #2024	; 0x7e8
 800279e:	f000 8093 	beq.w	80028c8 <RI_SetRegisterMotor1+0x360>
 80027a2:	f640 0328 	movw	r3, #2088	; 0x828
 80027a6:	4298      	cmp	r0, r3
 80027a8:	d176      	bne.n	8002898 <RI_SetRegisterMotor1+0x330>
            BemfOnAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027aa:	8860      	ldrh	r0, [r4, #2]
 80027ac:	0300      	lsls	r0, r0, #12
 80027ae:	f7fd ffaf 	bl	8000710 <__aeabi_i2d>
 80027b2:	a371      	add	r3, pc, #452	; (adr r3, 8002978 <RI_SetRegisterMotor1+0x410>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fd2e 	bl	8000218 <__aeabi_dmul>
 80027bc:	f7fe f812 	bl	80007e4 <__aeabi_d2uiz>
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027c0:	88a2      	ldrh	r2, [r4, #4]
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 80027c2:	0103      	lsls	r3, r0, #4
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027c4:	0310      	lsls	r0, r2, #12
            BemfOnAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027c6:	f8ad 300e 	strh.w	r3, [sp, #14]
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80027ca:	f7fd ffa1 	bl	8000710 <__aeabi_i2d>
 80027ce:	a36a      	add	r3, pc, #424	; (adr r3, 8002978 <RI_SetRegisterMotor1+0x410>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd fd20 	bl	8000218 <__aeabi_dmul>
 80027d8:	f7fe f804 	bl	80007e4 <__aeabi_d2uiz>
            BemfOnAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027dc:	88e3      	ldrh	r3, [r4, #6]
 80027de:	4a6b      	ldr	r2, [pc, #428]	; (800298c <RI_SetRegisterMotor1+0x424>)
 80027e0:	f241 6522 	movw	r5, #5666	; 0x1622
 80027e4:	fb05 f303 	mul.w	r3, r5, r3
 80027e8:	fba2 1303 	umull	r1, r3, r2, r3
 80027ec:	095b      	lsrs	r3, r3, #5
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027ee:	8961      	ldrh	r1, [r4, #10]
            BemfOnAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027f0:	f8ad 3010 	strh.w	r3, [sp, #16]
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027f4:	8923      	ldrh	r3, [r4, #8]
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027f6:	fb05 f101 	mul.w	r1, r5, r1
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027fa:	fb05 f403 	mul.w	r4, r5, r3
 80027fe:	fba2 3404 	umull	r3, r4, r2, r4
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002802:	fba2 2101 	umull	r2, r1, r2, r1
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 8002806:	0100      	lsls	r0, r0, #4
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002808:	0949      	lsrs	r1, r1, #5
            BemfOnAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 800280a:	f8ad 000c 	strh.w	r0, [sp, #12]
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800280e:	0964      	lsrs	r4, r4, #5
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002810:	f8ad 1004 	strh.w	r1, [sp, #4]
            (void)BADC_SetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &BemfOnAdcConfig,&OnSensingEnThres,&OnSensingHisteresys);
 8002814:	485e      	ldr	r0, [pc, #376]	; (8002990 <RI_SetRegisterMotor1+0x428>)
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002816:	f8ad 4002 	strh.w	r4, [sp, #2]
            (void)BADC_SetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &BemfOnAdcConfig,&OnSensingEnThres,&OnSensingHisteresys);
 800281a:	ab01      	add	r3, sp, #4
 800281c:	f10d 0202 	add.w	r2, sp, #2
 8002820:	a903      	add	r1, sp, #12
 8002822:	f004 fdd9 	bl	80073d8 <BADC_SetBemfOnTimeSensorlessParam>
  uint8_t retVal = MCP_CMD_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	e6be      	b.n	80025a8 <RI_SetRegisterMotor1+0x40>
 800282a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
            retVal = MCP_ERROR_RO_REG;
 800282e:	2828      	cmp	r0, #40	; 0x28
 8002830:	bf14      	ite	ne
 8002832:	2005      	movne	r0, #5
 8002834:	2004      	moveq	r0, #4
}
 8002836:	b006      	add	sp, #24
 8002838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t retVal = MCP_CMD_OK;
 800283c:	2000      	movs	r0, #0
 800283e:	e6e8      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
 8002840:	2004      	movs	r0, #4
 8002842:	e6e6      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
            retVal = MCP_ERROR_RO_REG;
 8002844:	2004      	movs	r0, #4
 8002846:	e6c3      	b.n	80025d0 <RI_SetRegisterMotor1+0x68>
        *size = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800284c:	200a      	movs	r0, #10
 800284e:	e6ab      	b.n	80025a8 <RI_SetRegisterMotor1+0x40>
 8002850:	2005      	movs	r0, #5
 8002852:	e6bd      	b.n	80025d0 <RI_SetRegisterMotor1+0x68>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002854:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002858:	494e      	ldr	r1, [pc, #312]	; (8002994 <RI_SetRegisterMotor1+0x42c>)
 800285a:	484f      	ldr	r0, [pc, #316]	; (8002998 <RI_SetRegisterMotor1+0x430>)
 800285c:	fb81 2103 	smull	r2, r1, r1, r3
 8002860:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002864:	2200      	movs	r2, #0
 8002866:	b209      	sxth	r1, r1
 8002868:	f7fe ffa4 	bl	80017b4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800286c:	2000      	movs	r0, #0
          break;
 800286e:	e73c      	b.n	80026ea <RI_SetRegisterMotor1+0x182>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002870:	200a      	movs	r0, #10
            break;
 8002872:	e699      	b.n	80025a8 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002874:	4848      	ldr	r0, [pc, #288]	; (8002998 <RI_SetRegisterMotor1+0x430>)
 8002876:	f7ff f84d 	bl	8001914 <MCI_GetMecSpeedRefUnit>
 800287a:	2200      	movs	r2, #0
 800287c:	4601      	mov	r1, r0
 800287e:	4846      	ldr	r0, [pc, #280]	; (8002998 <RI_SetRegisterMotor1+0x430>)
 8002880:	f7fe ff98 	bl	80017b4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002884:	2000      	movs	r0, #0
 8002886:	e6a3      	b.n	80025d0 <RI_SetRegisterMotor1+0x68>
          PWMC_SetFastDemagState(&(&PWM_Handle_M1)->_Super, regdata8);
 8002888:	483e      	ldr	r0, [pc, #248]	; (8002984 <RI_SetRegisterMotor1+0x41c>)
 800288a:	7811      	ldrb	r1, [r2, #0]
 800288c:	f005 f816 	bl	80078bc <PWMC_SetFastDemagState>
  uint8_t retVal = MCP_CMD_OK;
 8002890:	2000      	movs	r0, #0
          break;
 8002892:	e69d      	b.n	80025d0 <RI_SetRegisterMotor1+0x68>
          retVal = MCP_ERROR_RO_REG;
 8002894:	2004      	movs	r0, #4
 8002896:	e728      	b.n	80026ea <RI_SetRegisterMotor1+0x182>
 8002898:	2005      	movs	r0, #5
 800289a:	e685      	b.n	80025a8 <RI_SetRegisterMotor1+0x40>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800289c:	483a      	ldr	r0, [pc, #232]	; (8002988 <RI_SetRegisterMotor1+0x420>)
 800289e:	f004 ffb9 	bl	8007814 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80028a2:	2000      	movs	r0, #0
          break;
 80028a4:	e6b5      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028a6:	4838      	ldr	r0, [pc, #224]	; (8002988 <RI_SetRegisterMotor1+0x420>)
 80028a8:	b209      	sxth	r1, r1
 80028aa:	f004 ff79 	bl	80077a0 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 80028ae:	2000      	movs	r0, #0
          break;
 80028b0:	e6af      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028b2:	4835      	ldr	r0, [pc, #212]	; (8002988 <RI_SetRegisterMotor1+0x420>)
 80028b4:	b209      	sxth	r1, r1
 80028b6:	f004 ffa5 	bl	8007804 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 80028ba:	2000      	movs	r0, #0
          break;
 80028bc:	e6a9      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028be:	4832      	ldr	r0, [pc, #200]	; (8002988 <RI_SetRegisterMotor1+0x420>)
 80028c0:	f004 ff7e 	bl	80077c0 <PID_SetKPDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80028c4:	2000      	movs	r0, #0
          break;
 80028c6:	e6a4      	b.n	8002612 <RI_SetRegisterMotor1+0xaa>
            BemfAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028c8:	8860      	ldrh	r0, [r4, #2]
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80028ca:	4d30      	ldr	r5, [pc, #192]	; (800298c <RI_SetRegisterMotor1+0x424>)
            BemfAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028cc:	0300      	lsls	r0, r0, #12
 80028ce:	f7fd ff1f 	bl	8000710 <__aeabi_i2d>
 80028d2:	a329      	add	r3, pc, #164	; (adr r3, 8002978 <RI_SetRegisterMotor1+0x410>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd fc9e 	bl	8000218 <__aeabi_dmul>
 80028dc:	f7fd ff82 	bl	80007e4 <__aeabi_d2uiz>
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028e0:	88a2      	ldrh	r2, [r4, #4]
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 80028e2:	0103      	lsls	r3, r0, #4
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028e4:	0310      	lsls	r0, r2, #12
            BemfAdcConfig.AdcThresholdUp = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028e6:	f8ad 3006 	strh.w	r3, [sp, #6]
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 80028ea:	f7fd ff11 	bl	8000710 <__aeabi_i2d>
 80028ee:	a322      	add	r3, pc, #136	; (adr r3, 8002978 <RI_SetRegisterMotor1+0x410>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fc90 	bl	8000218 <__aeabi_dmul>
 80028f8:	f7fd ff74 	bl	80007e4 <__aeabi_d2uiz>
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80028fc:	88e2      	ldrh	r2, [r4, #6]
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 80028fe:	8923      	ldrh	r3, [r4, #8]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002900:	89a1      	ldrh	r1, [r4, #12]
            bemfAdcDemagConfig.DemagMinimumThreshold = *(uint16_t *)&rawData[8]; //cstat !MISRAC2012-Rule-11.3
 8002902:	8964      	ldrh	r4, [r4, #10]
 8002904:	f8ad 4012 	strh.w	r4, [sp, #18]
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002908:	f241 6622 	movw	r6, #5666	; 0x1622
 800290c:	fb06 f202 	mul.w	r2, r6, r2
 8002910:	fba5 5202 	umull	r5, r2, r5, r2
                                               * ADC_REFERENCE_VOLTAGE *1000))) << 4;
 8002914:	0100      	lsls	r0, r0, #4
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002916:	0952      	lsrs	r2, r2, #5
            BemfAdcConfig.AdcThresholdDown = ((uint16_t)((4096 * ConvertedData) / (BEMF_ON_SENSING_DIVIDER\
 8002918:	f8ad 0004 	strh.w	r0, [sp, #4]
            BemfAdcConfig.SamplingPoint = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800291c:	f8ad 2008 	strh.w	r2, [sp, #8]
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 8002920:	481e      	ldr	r0, [pc, #120]	; (800299c <RI_SetRegisterMotor1+0x434>)
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <RI_SetRegisterMotor1+0x438>)
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	fba0 0303 	umull	r0, r3, r0, r3
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 800292a:	fba2 2001 	umull	r2, r0, r2, r1
 800292e:	0880      	lsrs	r0, r0, #2
            Zc2CommDelay = (uint16_t) ((ConvertedData * 256) / 30);
 8002930:	0919      	lsrs	r1, r3, #4
 8002932:	f8ad 1002 	strh.w	r1, [sp, #2]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002936:	f8ad 000c 	strh.w	r0, [sp, #12]
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&Zc2CommDelay,&bemfAdcDemagConfig);
 800293a:	ab03      	add	r3, sp, #12
 800293c:	4814      	ldr	r0, [pc, #80]	; (8002990 <RI_SetRegisterMotor1+0x428>)
 800293e:	f10d 0202 	add.w	r2, sp, #2
 8002942:	a901      	add	r1, sp, #4
 8002944:	f004 fd38 	bl	80073b8 <BADC_SetBemfSensorlessParam>
  uint8_t retVal = MCP_CMD_OK;
 8002948:	2000      	movs	r0, #0
 800294a:	e62d      	b.n	80025a8 <RI_SetRegisterMotor1+0x40>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800294c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8002950:	4910      	ldr	r1, [pc, #64]	; (8002994 <RI_SetRegisterMotor1+0x42c>)
 8002952:	88e2      	ldrh	r2, [r4, #6]
 8002954:	fb81 0103 	smull	r0, r1, r1, r3
 8002958:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800295c:	480e      	ldr	r0, [pc, #56]	; (8002998 <RI_SetRegisterMotor1+0x430>)
 800295e:	b209      	sxth	r1, r1
 8002960:	f7fe ff28 	bl	80017b4 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002964:	2000      	movs	r0, #0
            break;
 8002966:	e61f      	b.n	80025a8 <RI_SetRegisterMotor1+0x40>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002968:	480e      	ldr	r0, [pc, #56]	; (80029a4 <RI_SetRegisterMotor1+0x43c>)
}
 800296a:	b006      	add	sp, #24
 800296c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002970:	f004 be50 	b.w	8007614 <MCPA_cfgLog>
 8002974:	f3af 8000 	nop.w
 8002978:	2d7cbcf7 	.word	0x2d7cbcf7
 800297c:	3f0ca64d 	.word	0x3f0ca64d
 8002980:	20000190 	.word	0x20000190
 8002984:	20000144 	.word	0x20000144
 8002988:	20000118 	.word	0x20000118
 800298c:	51eb851f 	.word	0x51eb851f
 8002990:	20000000 	.word	0x20000000
 8002994:	2aaaaaab 	.word	0x2aaaaaab
 8002998:	20000650 	.word	0x20000650
 800299c:	88888889 	.word	0x88888889
 80029a0:	aaaaaaab 	.word	0xaaaaaaab
 80029a4:	200002a0 	.word	0x200002a0

080029a8 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80029a8:	b510      	push	{r4, lr}
    switch (typeID)
 80029aa:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80029ae:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 80029b2:	f1bc 0f20 	cmp.w	ip, #32
 80029b6:	d812      	bhi.n	80029de <RI_GetRegisterGlobal+0x36>
 80029b8:	e8df f00c 	tbb	[pc, ip]
 80029bc:	1111111b 	.word	0x1111111b
 80029c0:	11111111 	.word	0x11111111
 80029c4:	11111129 	.word	0x11111129
 80029c8:	11111111 	.word	0x11111111
 80029cc:	11111122 	.word	0x11111122
 80029d0:	11111111 	.word	0x11111111
 80029d4:	11111137 	.word	0x11111137
 80029d8:	11111111 	.word	0x11111111
 80029dc:	13          	.byte	0x13
 80029dd:	00          	.byte	0x00
 80029de:	2007      	movs	r0, #7
}
 80029e0:	bd10      	pop	{r4, pc}
        switch (regID)
 80029e2:	2828      	cmp	r0, #40	; 0x28
 80029e4:	d02d      	beq.n	8002a42 <RI_GetRegisterGlobal+0x9a>
        *size = (*rawSize) + 2U;
 80029e6:	8812      	ldrh	r2, [r2, #0]
 80029e8:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80029ea:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80029ec:	b292      	uxth	r2, r2
 80029ee:	801a      	strh	r2, [r3, #0]
}
 80029f0:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 80029f2:	f1be 0f00 	cmp.w	lr, #0
 80029f6:	dd22      	ble.n	8002a3e <RI_GetRegisterGlobal+0x96>
          *size = 1;
 80029f8:	2201      	movs	r2, #1
 80029fa:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80029fc:	2005      	movs	r0, #5
}
 80029fe:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002a00:	f1be 0f03 	cmp.w	lr, #3
 8002a04:	dd19      	ble.n	8002a3a <RI_GetRegisterGlobal+0x92>
          *size = 4;
 8002a06:	2204      	movs	r2, #4
 8002a08:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a0a:	2005      	movs	r0, #5
}
 8002a0c:	bd10      	pop	{r4, pc}
        if (freeSpace >= 2)
 8002a0e:	f1be 0f01 	cmp.w	lr, #1
 8002a12:	dd12      	ble.n	8002a3a <RI_GetRegisterGlobal+0x92>
          switch (regID)
 8002a14:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002a18:	d05b      	beq.n	8002ad2 <RI_GetRegisterGlobal+0x12a>
    uint8_t retVal = MCP_CMD_OK;
 8002a1a:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002a1e:	bf14      	ite	ne
 8002a20:	2005      	movne	r0, #5
 8002a22:	2000      	moveq	r0, #0
          *size = 2;
 8002a24:	2202      	movs	r2, #2
 8002a26:	801a      	strh	r2, [r3, #0]
}
 8002a28:	bd10      	pop	{r4, pc}
        switch (regID)
 8002a2a:	2820      	cmp	r0, #32
 8002a2c:	d02d      	beq.n	8002a8a <RI_GetRegisterGlobal+0xe2>
 8002a2e:	2860      	cmp	r0, #96	; 0x60
 8002a30:	d011      	beq.n	8002a56 <RI_GetRegisterGlobal+0xae>
            *size= 0 ; /* */
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a36:	2005      	movs	r0, #5
}
 8002a38:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a3a:	2008      	movs	r0, #8
}
 8002a3c:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a3e:	4608      	mov	r0, r1
}
 8002a40:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a42:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a46:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a48:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a4c:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a4e:	d834      	bhi.n	8002aba <RI_GetRegisterGlobal+0x112>
 8002a50:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a52:	2008      	movs	r0, #8
 8002a54:	e7cb      	b.n	80029ee <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a56:	4c20      	ldr	r4, [pc, #128]	; (8002ad8 <RI_GetRegisterGlobal+0x130>)
 8002a58:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a60:	b180      	cbz	r0, 8002a84 <RI_GetRegisterGlobal+0xdc>
 8002a62:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002a66:	46a4      	mov	ip, r4
 8002a68:	e008      	b.n	8002a7c <RI_GetRegisterGlobal+0xd4>
    *tempdestString = *tempsrcString;
 8002a6a:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002a6e:	8819      	ldrh	r1, [r3, #0]
 8002a70:	3101      	adds	r1, #1
 8002a72:	b289      	uxth	r1, r1
 8002a74:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a76:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002a7a:	b118      	cbz	r0, 8002a84 <RI_GetRegisterGlobal+0xdc>
 8002a7c:	458e      	cmp	lr, r1
 8002a7e:	d8f4      	bhi.n	8002a6a <RI_GetRegisterGlobal+0xc2>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002a80:	2006      	movs	r0, #6
}
 8002a82:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8002a84:	2000      	movs	r0, #0
 8002a86:	7010      	strb	r0, [r2, #0]
}
 8002a88:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a8a:	4c14      	ldr	r4, [pc, #80]	; (8002adc <RI_GetRegisterGlobal+0x134>)
 8002a8c:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002a90:	2101      	movs	r1, #1
 8002a92:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0f5      	beq.n	8002a84 <RI_GetRegisterGlobal+0xdc>
 8002a98:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002a9c:	46a4      	mov	ip, r4
 8002a9e:	e009      	b.n	8002ab4 <RI_GetRegisterGlobal+0x10c>
    *tempdestString = *tempsrcString;
 8002aa0:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002aa4:	8819      	ldrh	r1, [r3, #0]
 8002aa6:	3101      	adds	r1, #1
 8002aa8:	b289      	uxth	r1, r1
 8002aaa:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002aac:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d0e7      	beq.n	8002a84 <RI_GetRegisterGlobal+0xdc>
 8002ab4:	458e      	cmp	lr, r1
 8002ab6:	d8f3      	bhi.n	8002aa0 <RI_GetRegisterGlobal+0xf8>
 8002ab8:	e7e2      	b.n	8002a80 <RI_GetRegisterGlobal+0xd8>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002aba:	4909      	ldr	r1, [pc, #36]	; (8002ae0 <RI_GetRegisterGlobal+0x138>)
 8002abc:	6848      	ldr	r0, [r1, #4]
 8002abe:	680c      	ldr	r4, [r1, #0]
 8002ac0:	8909      	ldrh	r1, [r1, #8]
 8002ac2:	f8c2 0006 	str.w	r0, [r2, #6]
 8002ac6:	f8c2 4002 	str.w	r4, [r2, #2]
 8002aca:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002acc:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002ace:	220c      	movs	r2, #12
 8002ad0:	e78d      	b.n	80029ee <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	e7a6      	b.n	8002a24 <RI_GetRegisterGlobal+0x7c>
 8002ad6:	bf00      	nop
 8002ad8:	08008934 	.word	0x08008934
 8002adc:	08008944 	.word	0x08008944
 8002ae0:	080089c0 	.word	0x080089c0
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	461d      	mov	r5, r3
    switch (typeID)
 8002af0:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002af4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8002af8:	4614      	mov	r4, r2
    switch (typeID)
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d812      	bhi.n	8002b24 <RI_GetRegisterMotor1+0x3c>
 8002afe:	e8df f003 	tbb	[pc, r3]
 8002b02:	112f      	.short	0x112f
 8002b04:	11111111 	.word	0x11111111
 8002b08:	11491111 	.word	0x11491111
 8002b0c:	11111111 	.word	0x11111111
 8002b10:	11701111 	.word	0x11701111
 8002b14:	11111111 	.word	0x11111111
 8002b18:	11831111 	.word	0x11831111
 8002b1c:	11111111 	.word	0x11111111
 8002b20:	1111      	.short	0x1111
 8002b22:	15          	.byte	0x15
 8002b23:	00          	.byte	0x00
 8002b24:	2007      	movs	r0, #7
  }
 8002b26:	b006      	add	sp, #24
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rawData++;
 8002b2c:	f5b0 7fd4 	cmp.w	r0, #424	; 0x1a8
 8002b30:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002b34:	f000 8244 	beq.w	8002fc0 <RI_GetRegisterMotor1+0x4d8>
 8002b38:	d87e      	bhi.n	8002c38 <RI_GetRegisterMotor1+0x150>
 8002b3a:	28a8      	cmp	r0, #168	; 0xa8
 8002b3c:	f000 8236 	beq.w	8002fac <RI_GetRegisterMotor1+0x4c4>
 8002b40:	28e8      	cmp	r0, #232	; 0xe8
 8002b42:	d16b      	bne.n	8002c1c <RI_GetRegisterMotor1+0x134>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b44:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002b48:	220b      	movs	r2, #11
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b4a:	f1bc 0f0c 	cmp.w	ip, #12
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002b4e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b50:	f200 81b2 	bhi.w	8002eb8 <RI_GetRegisterMotor1+0x3d0>
 8002b54:	230d      	movs	r3, #13
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b56:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002b58:	802b      	strh	r3, [r5, #0]
  }
 8002b5a:	b006      	add	sp, #24
 8002b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace > 0)
 8002b60:	f1bc 0f00 	cmp.w	ip, #0
 8002b64:	f340 81b5 	ble.w	8002ed2 <RI_GetRegisterMotor1+0x3ea>
          switch (regID)
 8002b68:	f5b0 6fd9 	cmp.w	r0, #1736	; 0x6c8
 8002b6c:	f000 81cd 	beq.w	8002f0a <RI_GetRegisterMotor1+0x422>
 8002b70:	f200 80d8 	bhi.w	8002d24 <RI_GetRegisterMotor1+0x23c>
 8002b74:	2848      	cmp	r0, #72	; 0x48
 8002b76:	f000 81ce 	beq.w	8002f16 <RI_GetRegisterMotor1+0x42e>
 8002b7a:	2888      	cmp	r0, #136	; 0x88
 8002b7c:	f040 81ab 	bne.w	8002ed6 <RI_GetRegisterMotor1+0x3ee>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002b80:	48b7      	ldr	r0, [pc, #732]	; (8002e60 <RI_GetRegisterMotor1+0x378>)
 8002b82:	f7fe fea5 	bl	80018d0 <MCI_GetControlMode>
 8002b86:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b88:	2000      	movs	r0, #0
          *size = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	802b      	strh	r3, [r5, #0]
  }
 8002b8e:	b006      	add	sp, #24
 8002b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 2)
 8002b94:	f1bc 0f01 	cmp.w	ip, #1
 8002b98:	f340 8122 	ble.w	8002de0 <RI_GetRegisterMotor1+0x2f8>
          switch (regID)
 8002b9c:	f241 4350 	movw	r3, #5200	; 0x1450
 8002ba0:	4298      	cmp	r0, r3
 8002ba2:	f000 8236 	beq.w	8003012 <RI_GetRegisterMotor1+0x52a>
 8002ba6:	f240 80e2 	bls.w	8002d6e <RI_GetRegisterMotor1+0x286>
 8002baa:	f641 3310 	movw	r3, #6928	; 0x1b10
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	f000 8229 	beq.w	8003006 <RI_GetRegisterMotor1+0x51e>
 8002bb4:	f240 80cc 	bls.w	8002d50 <RI_GetRegisterMotor1+0x268>
 8002bb8:	f641 3390 	movw	r3, #7056	; 0x1b90
 8002bbc:	4298      	cmp	r0, r3
 8002bbe:	f000 822e 	beq.w	800301e <RI_GetRegisterMotor1+0x536>
 8002bc2:	f641 33d0 	movw	r3, #7120	; 0x1bd0
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	f040 80b6 	bne.w	8002d38 <RI_GetRegisterMotor1+0x250>
              *regdataU16 = BADC_GetLastBemfValue(&Bemf_ADC_M1, 2);
 8002bcc:	48a5      	ldr	r0, [pc, #660]	; (8002e64 <RI_GetRegisterMotor1+0x37c>)
 8002bce:	2102      	movs	r1, #2
 8002bd0:	f004 fbd8 	bl	8007384 <BADC_GetLastBemfValue>
 8002bd4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002bd6:	2000      	movs	r0, #0
          *size = 2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	802b      	strh	r3, [r5, #0]
  }
 8002bdc:	b006      	add	sp, #24
 8002bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (freeSpace >= 4)
 8002be2:	f1bc 0f03 	cmp.w	ip, #3
 8002be6:	f340 80fb 	ble.w	8002de0 <RI_GetRegisterMotor1+0x2f8>
          switch (regID)
 8002bea:	2858      	cmp	r0, #88	; 0x58
 8002bec:	f000 8184 	beq.w	8002ef8 <RI_GetRegisterMotor1+0x410>
 8002bf0:	2898      	cmp	r0, #152	; 0x98
 8002bf2:	f000 8178 	beq.w	8002ee6 <RI_GetRegisterMotor1+0x3fe>
 8002bf6:	2818      	cmp	r0, #24
 8002bf8:	f000 816f 	beq.w	8002eda <RI_GetRegisterMotor1+0x3f2>
 8002bfc:	2005      	movs	r0, #5
          *size = 4;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	802b      	strh	r3, [r5, #0]
  }
 8002c02:	b006      	add	sp, #24
 8002c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (regID)
 8002c08:	28a0      	cmp	r0, #160	; 0xa0
 8002c0a:	f000 8109 	beq.w	8002e20 <RI_GetRegisterMotor1+0x338>
 8002c0e:	28e0      	cmp	r0, #224	; 0xe0
 8002c10:	f000 80ea 	beq.w	8002de8 <RI_GetRegisterMotor1+0x300>
            *size= 0 ; /* */
 8002c14:	2300      	movs	r3, #0
 8002c16:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c18:	2005      	movs	r0, #5
            break;
 8002c1a:	e784      	b.n	8002b26 <RI_GetRegisterMotor1+0x3e>
 8002c1c:	2868      	cmp	r0, #104	; 0x68
 8002c1e:	f040 81c0 	bne.w	8002fa2 <RI_GetRegisterMotor1+0x4ba>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c22:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002c26:	223c      	movs	r2, #60	; 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c28:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002c2c:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c2e:	f200 8129 	bhi.w	8002e84 <RI_GetRegisterMotor1+0x39c>
 8002c32:	233e      	movs	r3, #62	; 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c34:	2008      	movs	r0, #8
 8002c36:	e78f      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
 8002c38:	f5b0 6ffd 	cmp.w	r0, #2024	; 0x7e8
 8002c3c:	f000 8171 	beq.w	8002f22 <RI_GetRegisterMotor1+0x43a>
 8002c40:	f640 0328 	movw	r3, #2088	; 0x828
 8002c44:	4298      	cmp	r0, r3
 8002c46:	d142      	bne.n	8002cce <RI_GetRegisterMotor1+0x1e6>
            (void)BADC_GetBemfOnTimeSensorlessParam(&Bemf_ADC_M1, &bemfOnAdcConfig,&OnSensingEnThres,&OnSensingDisThres);
 8002c48:	ab01      	add	r3, sp, #4
 8002c4a:	f10d 0202 	add.w	r2, sp, #2
 8002c4e:	4885      	ldr	r0, [pc, #532]	; (8002e64 <RI_GetRegisterMotor1+0x37c>)
 8002c50:	a903      	add	r1, sp, #12
 8002c52:	f004 fbdf 	bl	8007414 <BADC_GetBemfOnTimeSensorlessParam>
                                      (bemfOnAdcConfig.AdcThresholdUp >> 4)) / 4096);
 8002c56:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002c5a:	0900      	lsrs	r0, r0, #4
 8002c5c:	f7fd fd58 	bl	8000710 <__aeabi_i2d>
 8002c60:	a37d      	add	r3, pc, #500	; (adr r3, 8002e58 <RI_GetRegisterMotor1+0x370>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd fad7 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c6a:	f7fd fdbb 	bl	80007e4 <__aeabi_d2uiz>
                                      (bemfOnAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002c6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c72:	8060      	strh	r0, [r4, #2]
                                      (bemfOnAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002c74:	0918      	lsrs	r0, r3, #4
 8002c76:	f7fd fd4b 	bl	8000710 <__aeabi_i2d>
 8002c7a:	a377      	add	r3, pc, #476	; (adr r3, 8002e58 <RI_GetRegisterMotor1+0x370>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd faca 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c84:	f7fd fdae 	bl	80007e4 <__aeabi_d2uiz>
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c8c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002c90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002c94:	80a0      	strh	r0, [r4, #4]
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c96:	2664      	movs	r6, #100	; 0x64
 8002c98:	4873      	ldr	r0, [pc, #460]	; (8002e68 <RI_GetRegisterMotor1+0x380>)
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002c9a:	fb06 f202 	mul.w	r2, r6, r2
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002c9e:	fb06 f101 	mul.w	r1, r6, r1
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002ca2:	fb06 f303 	mul.w	r3, r6, r3
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	fba0 6202 	umull	r6, r2, r0, r2
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002cac:	0849      	lsrs	r1, r1, #1
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002cae:	085b      	lsrs	r3, r3, #1
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002cb0:	fba0 6101 	umull	r6, r1, r0, r1
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002cb4:	0ad2      	lsrs	r2, r2, #11
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002cb6:	fba0 0303 	umull	r0, r3, r0, r3
 8002cba:	0adb      	lsrs	r3, r3, #11
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002cbc:	0ac9      	lsrs	r1, r1, #11
            *ConvertedData = (uint16_t) ((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES);
 8002cbe:	8122      	strh	r2, [r4, #8]
            *rawSize = 10;
 8002cc0:	220a      	movs	r2, #10
            *ConvertedData = (uint16_t) ((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES);
 8002cc2:	8163      	strh	r3, [r4, #10]
            *ConvertedData = (uint16_t)((100 * bemfOnAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002cc4:	80e1      	strh	r1, [r4, #6]
            *rawSize = 10;
 8002cc6:	8022      	strh	r2, [r4, #0]
            break;
 8002cc8:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8002cca:	2000      	movs	r0, #0
 8002ccc:	e744      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
 8002cce:	f5b0 7f0a 	cmp.w	r0, #552	; 0x228
 8002cd2:	f040 8166 	bne.w	8002fa2 <RI_GetRegisterMotor1+0x4ba>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cd6:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002cda:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cdc:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002ce0:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ce2:	f240 80b5 	bls.w	8002e50 <RI_GetRegisterMotor1+0x368>
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8002ce6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8002e80 <RI_GetRegisterMotor1+0x398>
 8002cea:	4627      	mov	r7, r4
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002cec:	2600      	movs	r6, #0
                (void)RUC_GetPhase( &RevUpControlM1 ,i, &revUpPhase);
 8002cee:	b2f1      	uxtb	r1, r6
 8002cf0:	aa03      	add	r2, sp, #12
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	f005 fb06 	bl	8008304 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002cf8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8002cfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	f8c7 3002 	str.w	r3, [r7, #2]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8002d06:	3601      	adds	r6, #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002d08:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002d0c:	80fb      	strh	r3, [r7, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8002d0e:	2e05      	cmp	r6, #5
                *durationms  = revUpPhase.hDurationms;
 8002d10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002d14:	f827 3f08 	strh.w	r3, [r7, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8002d18:	d1e9      	bne.n	8002cee <RI_GetRegisterMotor1+0x206>
        *size = (*rawSize) + 2U;
 8002d1a:	8823      	ldrh	r3, [r4, #0]
 8002d1c:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8002d1e:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	e719      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
 8002d24:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8002d28:	f040 80d5 	bne.w	8002ed6 <RI_GetRegisterMotor1+0x3ee>
              *data = PWMC_GetQuasiSynchState(&(&PWM_Handle_M1)->_Super);
 8002d2c:	484f      	ldr	r0, [pc, #316]	; (8002e6c <RI_GetRegisterMotor1+0x384>)
 8002d2e:	f004 fdd9 	bl	80078e4 <PWMC_GetQuasiSynchState>
 8002d32:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d34:	2000      	movs	r0, #0
              break;
 8002d36:	e728      	b.n	8002b8a <RI_GetRegisterMotor1+0xa2>
 8002d38:	f641 3350 	movw	r3, #6992	; 0x1b50
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	f040 8182 	bne.w	8003046 <RI_GetRegisterMotor1+0x55e>
              *regdataU16 = BADC_GetLastBemfValue(&Bemf_ADC_M1, 0);
 8002d42:	4848      	ldr	r0, [pc, #288]	; (8002e64 <RI_GetRegisterMotor1+0x37c>)
 8002d44:	2100      	movs	r1, #0
 8002d46:	f004 fb1d 	bl	8007384 <BADC_GetLastBemfValue>
 8002d4a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d4c:	2000      	movs	r0, #0
              break;
 8002d4e:	e743      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
 8002d50:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002d54:	4298      	cmp	r0, r3
 8002d56:	f000 8150 	beq.w	8002ffa <RI_GetRegisterMotor1+0x512>
 8002d5a:	f641 2390 	movw	r3, #6800	; 0x1a90
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	d133      	bne.n	8002dca <RI_GetRegisterMotor1+0x2e2>
              *regdataU16 = MCI_GetDutyCycleRef(pMCIN);
 8002d62:	483f      	ldr	r0, [pc, #252]	; (8002e60 <RI_GetRegisterMotor1+0x378>)
 8002d64:	f7fe fdda 	bl	800191c <MCI_GetDutyCycleRef>
 8002d68:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d6a:	2000      	movs	r0, #0
              break;
 8002d6c:	e734      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
 8002d6e:	f5b0 6fb2 	cmp.w	r0, #1424	; 0x590
 8002d72:	f000 813c 	beq.w	8002fee <RI_GetRegisterMotor1+0x506>
 8002d76:	d909      	bls.n	8002d8c <RI_GetRegisterMotor1+0x2a4>
 8002d78:	f5b0 6f65 	cmp.w	r0, #3664	; 0xe50
 8002d7c:	d002      	beq.n	8002d84 <RI_GetRegisterMotor1+0x29c>
 8002d7e:	f5b0 6f69 	cmp.w	r0, #3728	; 0xe90
 8002d82:	d10f      	bne.n	8002da4 <RI_GetRegisterMotor1+0x2bc>
          *size = 2;
 8002d84:	2302      	movs	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8002d86:	2000      	movs	r0, #0
          *size = 2;
 8002d88:	802b      	strh	r3, [r5, #0]
 8002d8a:	e727      	b.n	8002bdc <RI_GetRegisterMotor1+0xf4>
 8002d8c:	28d0      	cmp	r0, #208	; 0xd0
 8002d8e:	f000 8128 	beq.w	8002fe2 <RI_GetRegisterMotor1+0x4fa>
 8002d92:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 8002d96:	d10f      	bne.n	8002db8 <RI_GetRegisterMotor1+0x2d0>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002d98:	4835      	ldr	r0, [pc, #212]	; (8002e70 <RI_GetRegisterMotor1+0x388>)
 8002d9a:	f004 fd35 	bl	8007808 <PID_GetKD>
 8002d9e:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002da0:	2000      	movs	r0, #0
              break;
 8002da2:	e719      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
 8002da4:	f5b0 6fba 	cmp.w	r0, #1488	; 0x5d0
 8002da8:	f040 814d 	bne.w	8003046 <RI_GetRegisterMotor1+0x55e>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002dac:	4831      	ldr	r0, [pc, #196]	; (8002e74 <RI_GetRegisterMotor1+0x38c>)
 8002dae:	f004 fcdd 	bl	800776c <NTC_GetAvTemp_C>
 8002db2:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002db4:	2000      	movs	r0, #0
              break;
 8002db6:	e70f      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
 8002db8:	2890      	cmp	r0, #144	; 0x90
 8002dba:	f040 8144 	bne.w	8003046 <RI_GetRegisterMotor1+0x55e>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002dbe:	482c      	ldr	r0, [pc, #176]	; (8002e70 <RI_GetRegisterMotor1+0x388>)
 8002dc0:	f004 fcf2 	bl	80077a8 <PID_GetKP>
 8002dc4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002dc6:	2000      	movs	r0, #0
              break;
 8002dc8:	e706      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
 8002dca:	f241 4390 	movw	r3, #5264	; 0x1490
 8002dce:	4298      	cmp	r0, r3
 8002dd0:	f040 8139 	bne.w	8003046 <RI_GetRegisterMotor1+0x55e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002dd4:	4826      	ldr	r0, [pc, #152]	; (8002e70 <RI_GetRegisterMotor1+0x388>)
 8002dd6:	f004 fcfb 	bl	80077d0 <PID_GetKIDivisorPOW2>
 8002dda:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ddc:	2000      	movs	r0, #0
              break;
 8002dde:	e6fb      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002de0:	2008      	movs	r0, #8
  }
 8002de2:	b006      	add	sp, #24
 8002de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <RI_GetRegisterMotor1+0x390>)
 8002dea:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8002dec:	2301      	movs	r3, #1
 8002dee:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002df0:	f102 0124 	add.w	r1, r2, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002df4:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 8002df8:	b17a      	cbz	r2, 8002e1a <RI_GetRegisterMotor1+0x332>
 8002dfa:	fa1f fc8c 	uxth.w	ip, ip
 8002dfe:	e008      	b.n	8002e12 <RI_GetRegisterMotor1+0x32a>
    *tempdestString = *tempsrcString;
 8002e00:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002e04:	882b      	ldrh	r3, [r5, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002e0c:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002e10:	b11a      	cbz	r2, 8002e1a <RI_GetRegisterMotor1+0x332>
 8002e12:	459c      	cmp	ip, r3
 8002e14:	d8f4      	bhi.n	8002e00 <RI_GetRegisterMotor1+0x318>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002e16:	2006      	movs	r0, #6
 8002e18:	e685      	b.n	8002b26 <RI_GetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	7020      	strb	r0, [r4, #0]
    return (retVal);
 8002e1e:	e682      	b.n	8002b26 <RI_GetRegisterMotor1+0x3e>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <RI_GetRegisterMotor1+0x394>)
  *size= 1U ; /* /0 is the min String size */
 8002e22:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002e24:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8002e26:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002e28:	f991 2000 	ldrsb.w	r2, [r1]
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d0f4      	beq.n	8002e1a <RI_GetRegisterMotor1+0x332>
 8002e30:	fa1f fc8c 	uxth.w	ip, ip
 8002e34:	e009      	b.n	8002e4a <RI_GetRegisterMotor1+0x362>
    *tempdestString = *tempsrcString;
 8002e36:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002e3a:	882b      	ldrh	r3, [r5, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002e42:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	d0e7      	beq.n	8002e1a <RI_GetRegisterMotor1+0x332>
 8002e4a:	459c      	cmp	ip, r3
 8002e4c:	d8f3      	bhi.n	8002e36 <RI_GetRegisterMotor1+0x34e>
 8002e4e:	e7e2      	b.n	8002e16 <RI_GetRegisterMotor1+0x32e>
 8002e50:	232a      	movs	r3, #42	; 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e52:	2008      	movs	r0, #8
            break;
 8002e54:	e680      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
 8002e56:	bf00      	nop
 8002e58:	189374bc 	.word	0x189374bc
 8002e5c:	4011df00 	.word	0x4011df00
 8002e60:	20000650 	.word	0x20000650
 8002e64:	20000000 	.word	0x20000000
 8002e68:	b910895b 	.word	0xb910895b
 8002e6c:	20000144 	.word	0x20000144
 8002e70:	20000118 	.word	0x20000118
 8002e74:	20000228 	.word	0x20000228
 8002e78:	20000294 	.word	0x20000294
 8002e7c:	20000298 	.word	0x20000298
 8002e80:	20000190 	.word	0x20000190
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8002e84:	4a74      	ldr	r2, [pc, #464]	; (8003058 <RI_GetRegisterMotor1+0x570>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	f102 0730 	add.w	r7, r2, #48	; 0x30
 8002e8c:	6814      	ldr	r4, [r2, #0]
 8002e8e:	6850      	ldr	r0, [r2, #4]
 8002e90:	6891      	ldr	r1, [r2, #8]
 8002e92:	68d6      	ldr	r6, [r2, #12]
 8002e94:	60de      	str	r6, [r3, #12]
 8002e96:	3210      	adds	r2, #16
 8002e98:	42ba      	cmp	r2, r7
 8002e9a:	601c      	str	r4, [r3, #0]
 8002e9c:	6058      	str	r0, [r3, #4]
 8002e9e:	6099      	str	r1, [r3, #8]
 8002ea0:	f103 0310 	add.w	r3, r3, #16
 8002ea4:	d1f2      	bne.n	8002e8c <RI_GetRegisterMotor1+0x3a4>
 8002ea6:	6810      	ldr	r0, [r2, #0]
 8002ea8:	6851      	ldr	r1, [r2, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	6018      	str	r0, [r3, #0]
 8002eb0:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8002eb2:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002eb4:	233e      	movs	r3, #62	; 0x3e
 8002eb6:	e64f      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
              SixStepFwConfig_reg_t const *pSixStepConfig_reg = SixStepConfig_reg[motorID];
 8002eb8:	4a68      	ldr	r2, [pc, #416]	; (800305c <RI_GetRegisterMotor1+0x574>)
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	6850      	ldr	r0, [r2, #4]
 8002ec0:	6058      	str	r0, [r3, #4]
 8002ec2:	6019      	str	r1, [r3, #0]
 8002ec4:	8911      	ldrh	r1, [r2, #8]
 8002ec6:	7a92      	ldrb	r2, [r2, #10]
 8002ec8:	729a      	strb	r2, [r3, #10]
 8002eca:	8119      	strh	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8002ecc:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8002ece:	230d      	movs	r3, #13
 8002ed0:	e642      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	e627      	b.n	8002b26 <RI_GetRegisterMotor1+0x3e>
 8002ed6:	2005      	movs	r0, #5
 8002ed8:	e657      	b.n	8002b8a <RI_GetRegisterMotor1+0xa2>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002eda:	4861      	ldr	r0, [pc, #388]	; (8003060 <RI_GetRegisterMotor1+0x578>)
 8002edc:	f7fe fcf2 	bl	80018c4 <MCI_GetFaultState>
 8002ee0:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ee2:	2000      	movs	r0, #0
              break;
 8002ee4:	e68b      	b.n	8002bfe <RI_GetRegisterMotor1+0x116>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ee6:	485e      	ldr	r0, [pc, #376]	; (8003060 <RI_GetRegisterMotor1+0x578>)
 8002ee8:	f7fe fd14 	bl	8001914 <MCI_GetMecSpeedRefUnit>
 8002eec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ef0:	0040      	lsls	r0, r0, #1
 8002ef2:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ef4:	2000      	movs	r0, #0
              break;
 8002ef6:	e682      	b.n	8002bfe <RI_GetRegisterMotor1+0x116>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ef8:	4859      	ldr	r0, [pc, #356]	; (8003060 <RI_GetRegisterMotor1+0x578>)
 8002efa:	f7fe fd03 	bl	8001904 <MCI_GetAvrgMecSpeedUnit>
 8002efe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f02:	0040      	lsls	r0, r0, #1
 8002f04:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f06:	2000      	movs	r0, #0
              break;
 8002f08:	e679      	b.n	8002bfe <RI_GetRegisterMotor1+0x116>
              *data = PWMC_GetFastDemagState(&(&PWM_Handle_M1)->_Super);
 8002f0a:	4856      	ldr	r0, [pc, #344]	; (8003064 <RI_GetRegisterMotor1+0x57c>)
 8002f0c:	f004 fce4 	bl	80078d8 <PWMC_GetFastDemagState>
 8002f10:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f12:	2000      	movs	r0, #0
              break;
 8002f14:	e639      	b.n	8002b8a <RI_GetRegisterMotor1+0xa2>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002f16:	4852      	ldr	r0, [pc, #328]	; (8003060 <RI_GetRegisterMotor1+0x578>)
 8002f18:	f7fe fc86 	bl	8001828 <MCI_GetSTMState>
 8002f1c:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002f1e:	2000      	movs	r0, #0
              break;
 8002f20:	e633      	b.n	8002b8a <RI_GetRegisterMotor1+0xa2>
            (void)BADC_GetBemfSensorlessParam(&Bemf_ADC_M1, &bemfAdcConfig,&Zc2CommDelay,&bemfAdcDemagConfig);
 8002f22:	ab03      	add	r3, sp, #12
 8002f24:	f10d 0202 	add.w	r2, sp, #2
 8002f28:	484f      	ldr	r0, [pc, #316]	; (8003068 <RI_GetRegisterMotor1+0x580>)
 8002f2a:	a901      	add	r1, sp, #4
 8002f2c:	f004 fa60 	bl	80073f0 <BADC_GetBemfSensorlessParam>
                                      (bemfAdcConfig.AdcThresholdUp >> 4)) / 4096);
 8002f30:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002f34:	0900      	lsrs	r0, r0, #4
 8002f36:	f7fd fbeb 	bl	8000710 <__aeabi_i2d>
 8002f3a:	a345      	add	r3, pc, #276	; (adr r3, 8003050 <RI_GetRegisterMotor1+0x568>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f96a 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f44:	f7fd fc4e 	bl	80007e4 <__aeabi_d2uiz>
                                      (bemfAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002f48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f4c:	8060      	strh	r0, [r4, #2]
                                      (bemfAdcConfig.AdcThresholdDown >> 4)) / 4096);
 8002f4e:	0918      	lsrs	r0, r3, #4
 8002f50:	f7fd fbde 	bl	8000710 <__aeabi_i2d>
 8002f54:	a33e      	add	r3, pc, #248	; (adr r3, 8003050 <RI_GetRegisterMotor1+0x568>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd f95d 	bl	8000218 <__aeabi_dmul>
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f5e:	f7fd fc41 	bl	80007e4 <__aeabi_d2uiz>
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f62:	f8bd 3008 	ldrh.w	r3, [sp, #8]
            *ConvertedData = bemfAdcDemagConfig.DemagMinimumThreshold;
 8002f66:	f8bd 1012 	ldrh.w	r1, [sp, #18]
            *ConvertedData = (uint16_t)((1000 * BEMF_ON_SENSING_DIVIDER * ADC_REFERENCE_VOLTAGE * \
 8002f6a:	80a0      	strh	r0, [r4, #4]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f6c:	2264      	movs	r2, #100	; 0x64
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	4a3e      	ldr	r2, [pc, #248]	; (800306c <RI_GetRegisterMotor1+0x584>)
            *ConvertedData = bemfAdcDemagConfig.DemagMinimumThreshold;
 8002f74:	8161      	strh	r1, [r4, #10]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0adb      	lsrs	r3, r3, #11
            *ConvertedData = (uint16_t) ((Zc2CommDelay * 30) / 256);
 8002f7e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPoint) / PWM_PERIOD_CYCLES);
 8002f82:	80e3      	strh	r3, [r4, #6]
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002f84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            *ConvertedData = (uint16_t) ((Zc2CommDelay * 30) / 256);
 8002f88:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002f8c:	11d2      	asrs	r2, r2, #7
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002f8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f92:	005b      	lsls	r3, r3, #1
            *ConvertedData = (uint16_t) ((Zc2CommDelay * 30) / 256);
 8002f94:	8122      	strh	r2, [r4, #8]
            *rawSize = 12;
 8002f96:	220c      	movs	r2, #12
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002f98:	81a3      	strh	r3, [r4, #12]
            *rawSize = 12;
 8002f9a:	8022      	strh	r2, [r4, #0]
            break;
 8002f9c:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e5da      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
        *size = (*rawSize) + 2U;
 8002fa2:	8823      	ldrh	r3, [r4, #0]
 8002fa4:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002fa6:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	e5d5      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fac:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002fb0:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fb2:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002fb6:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fb8:	d838      	bhi.n	800302c <RI_GetRegisterMotor1+0x544>
 8002fba:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002fbc:	2008      	movs	r0, #8
 8002fbe:	e5cb      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002fc0:	4827      	ldr	r0, [pc, #156]	; (8003060 <RI_GetRegisterMotor1+0x578>)
 8002fc2:	f7fe fc95 	bl	80018f0 <MCI_GetLastRampFinalSpeed>
 8002fc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fca:	0043      	lsls	r3, r0, #1
 8002fcc:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002fd0:	4823      	ldr	r0, [pc, #140]	; (8003060 <RI_GetRegisterMotor1+0x578>)
 8002fd2:	f7fe fc91 	bl	80018f8 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002fd6:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002fd8:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8002fda:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fdc:	2000      	movs	r0, #0
            break;
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e5ba      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002fe2:	4823      	ldr	r0, [pc, #140]	; (8003070 <RI_GetRegisterMotor1+0x588>)
 8002fe4:	f004 fbe4 	bl	80077b0 <PID_GetKI>
 8002fe8:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002fea:	2000      	movs	r0, #0
              break;
 8002fec:	e5f4      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002fee:	4821      	ldr	r0, [pc, #132]	; (8003074 <RI_GetRegisterMotor1+0x58c>)
 8002ff0:	f003 fd16 	bl	8006a20 <VBS_GetAvBusVoltage_V>
 8002ff4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ff6:	2000      	movs	r0, #0
              break;
 8002ff8:	e5ee      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8002ffa:	481d      	ldr	r0, [pc, #116]	; (8003070 <RI_GetRegisterMotor1+0x588>)
 8002ffc:	f004 fc08 	bl	8007810 <PID_GetKDDivisorPOW2>
 8003000:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003002:	2000      	movs	r0, #0
              break;
 8003004:	e5e8      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
              *regdataU16 = (uint16_t) BADC_GetBemfZcrFlag(&Bemf_ADC_M1);
 8003006:	4818      	ldr	r0, [pc, #96]	; (8003068 <RI_GetRegisterMotor1+0x580>)
 8003008:	f004 f9c2 	bl	8007390 <BADC_GetBemfZcrFlag>
 800300c:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800300e:	2000      	movs	r0, #0
              break;
 8003010:	e5e2      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8003012:	4817      	ldr	r0, [pc, #92]	; (8003070 <RI_GetRegisterMotor1+0x588>)
 8003014:	f004 fbd2 	bl	80077bc <PID_GetKPDivisorPOW2>
 8003018:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800301a:	2000      	movs	r0, #0
              break;
 800301c:	e5dc      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
              *regdataU16 = BADC_GetLastBemfValue(&Bemf_ADC_M1, 1);
 800301e:	4812      	ldr	r0, [pc, #72]	; (8003068 <RI_GetRegisterMotor1+0x580>)
 8003020:	2101      	movs	r1, #1
 8003022:	f004 f9af 	bl	8007384 <BADC_GetLastBemfValue>
 8003026:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003028:	2000      	movs	r0, #0
              break;
 800302a:	e5d5      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <RI_GetRegisterMotor1+0x590>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	6850      	ldr	r0, [r2, #4]
 8003032:	6814      	ldr	r4, [r2, #0]
 8003034:	6891      	ldr	r1, [r2, #8]
 8003036:	68d2      	ldr	r2, [r2, #12]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	6058      	str	r0, [r3, #4]
 800303c:	601c      	str	r4, [r3, #0]
 800303e:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003040:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003042:	2312      	movs	r3, #18
 8003044:	e588      	b.n	8002b58 <RI_GetRegisterMotor1+0x70>
 8003046:	2005      	movs	r0, #5
 8003048:	e5c6      	b.n	8002bd8 <RI_GetRegisterMotor1+0xf0>
 800304a:	bf00      	nop
 800304c:	f3af 8000 	nop.w
 8003050:	189374bc 	.word	0x189374bc
 8003054:	4011df00 	.word	0x4011df00
 8003058:	20000294 	.word	0x20000294
 800305c:	2000029c 	.word	0x2000029c
 8003060:	20000650 	.word	0x20000650
 8003064:	20000144 	.word	0x20000144
 8003068:	20000000 	.word	0x20000000
 800306c:	b910895b 	.word	0xb910895b
 8003070:	20000118 	.word	0x20000118
 8003074:	200000fc 	.word	0x200000fc
 8003078:	20000290 	.word	0x20000290

0800307c <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800307c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003080:	3808      	subs	r0, #8
 8003082:	b2c0      	uxtb	r0, r0
 8003084:	2810      	cmp	r0, #16
 8003086:	bf9a      	itte	ls
 8003088:	4b01      	ldrls	r3, [pc, #4]	; (8003090 <RI_GetIDSize+0x14>)
 800308a:	5c18      	ldrbls	r0, [r3, r0]
 800308c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800308e:	4770      	bx	lr
 8003090:	08008a08 	.word	0x08008a08

08003094 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003094:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003098:	2b10      	cmp	r3, #16
 800309a:	d003      	beq.n	80030a4 <RI_GetPtrReg+0x10>
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <RI_GetPtrReg+0x68>)
          }

          default:
          {
            *dataPtr = &nullData16;
            retVal = MCP_ERROR_UNKNOWN_REG;
 800309e:	2005      	movs	r0, #5
            *dataPtr = &((&Bemf_ADC_M1)->ZcDetected);
 80030a0:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80030a2:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80030a4:	f020 0007 	bic.w	r0, r0, #7
 80030a8:	f641 3350 	movw	r3, #6992	; 0x1b50
 80030ac:	4298      	cmp	r0, r3
 80030ae:	b282      	uxth	r2, r0
 80030b0:	d020      	beq.n	80030f4 <RI_GetPtrReg+0x60>
 80030b2:	d80e      	bhi.n	80030d2 <RI_GetPtrReg+0x3e>
 80030b4:	f641 2390 	movw	r3, #6800	; 0x1a90
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d017      	beq.n	80030ec <RI_GetPtrReg+0x58>
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <RI_GetPtrReg+0x68>)
 80030be:	4810      	ldr	r0, [pc, #64]	; (8003100 <RI_GetPtrReg+0x6c>)
 80030c0:	f641 3c10 	movw	ip, #6928	; 0x1b10
 80030c4:	4562      	cmp	r2, ip
 80030c6:	bf0a      	itet	eq
 80030c8:	4603      	moveq	r3, r0
 80030ca:	2005      	movne	r0, #5
 80030cc:	2000      	moveq	r0, #0
            *dataPtr = &((&Bemf_ADC_M1)->ZcDetected);
 80030ce:	600b      	str	r3, [r1, #0]
}
 80030d0:	4770      	bx	lr
 80030d2:	f641 3390 	movw	r3, #7056	; 0x1b90
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d004      	beq.n	80030e4 <RI_GetPtrReg+0x50>
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <RI_GetPtrReg+0x68>)
 80030dc:	4809      	ldr	r0, [pc, #36]	; (8003104 <RI_GetPtrReg+0x70>)
 80030de:	f641 3cd0 	movw	ip, #7120	; 0x1bd0
 80030e2:	e7ef      	b.n	80030c4 <RI_GetPtrReg+0x30>
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <RI_GetPtrReg+0x74>)
            *dataPtr = &((&Bemf_ADC_M1)->ZcDetected);
 80030e6:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80030e8:	2000      	movs	r0, #0
}
 80030ea:	4770      	bx	lr
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <RI_GetPtrReg+0x78>)
  uint8_t retVal = MCP_CMD_OK;
 80030ee:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 80030f0:	685b      	ldr	r3, [r3, #4]
            break;
 80030f2:	e7d5      	b.n	80030a0 <RI_GetPtrReg+0xc>
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <RI_GetPtrReg+0x7c>)
  uint8_t retVal = MCP_CMD_OK;
 80030f6:	2000      	movs	r0, #0
 80030f8:	e7d2      	b.n	80030a0 <RI_GetPtrReg+0xc>
 80030fa:	bf00      	nop
 80030fc:	2000181c 	.word	0x2000181c
 8003100:	20000067 	.word	0x20000067
 8003104:	20000024 	.word	0x20000024
 8003108:	20000022 	.word	0x20000022
 800310c:	20000650 	.word	0x20000650
 8003110:	20000020 	.word	0x20000020

08003114 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003114:	4980      	ldr	r1, [pc, #512]	; (8003318 <RCM_RegisterRegConv+0x204>)
 8003116:	680b      	ldr	r3, [r1, #0]
{
 8003118:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8094 	beq.w	8003248 <RCM_RegisterRegConv+0x134>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003120:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003124:	791a      	ldrb	r2, [r3, #4]
 8003126:	4594      	cmp	ip, r2
 8003128:	d027      	beq.n	800317a <RCM_RegisterRegConv+0x66>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800312a:	684a      	ldr	r2, [r1, #4]
 800312c:	2a00      	cmp	r2, #0
 800312e:	f000 80a6 	beq.w	800327e <RCM_RegisterRegConv+0x16a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003132:	7914      	ldrb	r4, [r2, #4]
 8003134:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8003136:	f04f 03ff 	mov.w	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800313a:	f000 808e 	beq.w	800325a <RCM_RegisterRegConv+0x146>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800313e:	688c      	ldr	r4, [r1, #8]
 8003140:	2c00      	cmp	r4, #0
 8003142:	f000 80c0 	beq.w	80032c6 <RCM_RegisterRegConv+0x1b2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003146:	7922      	ldrb	r2, [r4, #4]
 8003148:	4562      	cmp	r2, ip
 800314a:	f000 808f 	beq.w	800326c <RCM_RegisterRegConv+0x158>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800314e:	68ca      	ldr	r2, [r1, #12]
 8003150:	2a00      	cmp	r2, #0
 8003152:	f000 80c1 	beq.w	80032d8 <RCM_RegisterRegConv+0x1c4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003156:	7914      	ldrb	r4, [r2, #4]
 8003158:	4564      	cmp	r4, ip
 800315a:	f000 809c 	beq.w	8003296 <RCM_RegisterRegConv+0x182>
    while (i < RCM_MAX_CONV)
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f363 0207 	bfi	r2, r3, #0, #8
 8003166:	f363 220f 	bfi	r2, r3, #8, #8
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 800316a:	2b03      	cmp	r3, #3
 800316c:	4614      	mov	r4, r2
 800316e:	bf88      	it	hi
 8003170:	23ff      	movhi	r3, #255	; 0xff
 8003172:	f240 80ce 	bls.w	8003312 <RCM_RegisterRegConv+0x1fe>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8003176:	7303      	strb	r3, [r0, #12]
}
 8003178:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800317a:	6802      	ldr	r2, [r0, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d1d3      	bne.n	800312a <RCM_RegisterRegConv+0x16>
    uint8_t i = 0;
 8003182:	2300      	movs	r3, #0
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003184:	461c      	mov	r4, r3
      RCM_handle_array [handle] = regConv;
 8003186:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800318a:	4d64      	ldr	r5, [pc, #400]	; (800331c <RCM_RegisterRegConv+0x208>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800318c:	6891      	ldr	r1, [r2, #8]
 800318e:	2600      	movs	r6, #0
 8003190:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
 8003194:	07ce      	lsls	r6, r1, #31
 8003196:	d422      	bmi.n	80031de <RCM_RegisterRegConv+0xca>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003198:	6851      	ldr	r1, [r2, #4]
 800319a:	f021 0104 	bic.w	r1, r1, #4
 800319e:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031a0:	2104      	movs	r1, #4
 80031a2:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80031a4:	6851      	ldr	r1, [r2, #4]
 80031a6:	f021 0120 	bic.w	r1, r1, #32
 80031aa:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80031ac:	2120      	movs	r1, #32
 80031ae:	6011      	str	r1, [r2, #0]
  MODIFY_REG(ADCx->CR,
 80031b0:	6891      	ldr	r1, [r2, #8]
 80031b2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80031b6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80031ba:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80031be:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031c0:	6891      	ldr	r1, [r2, #8]
 80031c2:	2900      	cmp	r1, #0
 80031c4:	dbfc      	blt.n	80031c0 <RCM_RegisterRegConv+0xac>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80031c6:	6811      	ldr	r1, [r2, #0]
 80031c8:	07cd      	lsls	r5, r1, #31
 80031ca:	d408      	bmi.n	80031de <RCM_RegisterRegConv+0xca>
  MODIFY_REG(ADCx->CR,
 80031cc:	4d54      	ldr	r5, [pc, #336]	; (8003320 <RCM_RegisterRegConv+0x20c>)
 80031ce:	6891      	ldr	r1, [r2, #8]
 80031d0:	4029      	ands	r1, r5
 80031d2:	f041 0101 	orr.w	r1, r1, #1
 80031d6:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80031d8:	6811      	ldr	r1, [r2, #0]
 80031da:	07c9      	lsls	r1, r1, #31
 80031dc:	d5f7      	bpl.n	80031ce <RCM_RegisterRegConv+0xba>
      RCM_NoInj_array[handle].enable = false;
 80031de:	4d51      	ldr	r5, [pc, #324]	; (8003324 <RCM_RegisterRegConv+0x210>)
 80031e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80031e4:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80031e6:	eb05 0c01 	add.w	ip, r5, r1
      RCM_NoInj_array[handle].enable = false;
 80031ea:	f04f 0e00 	mov.w	lr, #0
 80031ee:	f805 e001 	strb.w	lr, [r5, r1]
      RCM_NoInj_array[handle].prev = handle;
 80031f2:	f8ac 4004 	strh.w	r4, [ip, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80031f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031f8:	f021 010f 	bic.w	r1, r1, #15
 80031fc:	6311      	str	r1, [r2, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80031fe:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003202:	f1bc 0f09 	cmp.w	ip, #9
 8003206:	d84f      	bhi.n	80032a8 <RCM_RegisterRegConv+0x194>
 8003208:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800320c:	ea4f 618c 	mov.w	r1, ip, lsl #26
 8003210:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003214:	2401      	movs	r4, #1
 8003216:	fa04 f40c 	lsl.w	r4, r4, ip
 800321a:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800321c:	0dcc      	lsrs	r4, r1, #23
 800321e:	f004 0404 	and.w	r4, r4, #4
 8003222:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003226:	6886      	ldr	r6, [r0, #8]
 8003228:	592a      	ldr	r2, [r5, r4]
 800322a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800322e:	f04f 0e07 	mov.w	lr, #7
 8003232:	fa06 fc01 	lsl.w	ip, r6, r1
 8003236:	fa0e f101 	lsl.w	r1, lr, r1
 800323a:	ea22 0101 	bic.w	r1, r2, r1
 800323e:	ea41 010c 	orr.w	r1, r1, ip
 8003242:	5129      	str	r1, [r5, r4]
  regConv->convHandle = handle;
 8003244:	7303      	strb	r3, [r0, #12]
}
 8003246:	bd70      	pop	{r4, r5, r6, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003248:	684a      	ldr	r2, [r1, #4]
 800324a:	2a00      	cmp	r2, #0
 800324c:	d04b      	beq.n	80032e6 <RCM_RegisterRegConv+0x1d2>
 800324e:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003252:	7914      	ldrb	r4, [r2, #4]
 8003254:	4564      	cmp	r4, ip
 8003256:	f47f af72 	bne.w	800313e <RCM_RegisterRegConv+0x2a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800325a:	6814      	ldr	r4, [r2, #0]
 800325c:	6802      	ldr	r2, [r0, #0]
 800325e:	4294      	cmp	r4, r2
 8003260:	f47f af6d 	bne.w	800313e <RCM_RegisterRegConv+0x2a>
      i++;
 8003264:	2301      	movs	r3, #1
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003266:	f240 1401 	movw	r4, #257	; 0x101
 800326a:	e78c      	b.n	8003186 <RCM_RegisterRegConv+0x72>
 800326c:	6824      	ldr	r4, [r4, #0]
 800326e:	6802      	ldr	r2, [r0, #0]
 8003270:	4294      	cmp	r4, r2
 8003272:	f47f af6c 	bne.w	800314e <RCM_RegisterRegConv+0x3a>
      i++;
 8003276:	2302      	movs	r3, #2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003278:	f240 2402 	movw	r4, #514	; 0x202
 800327c:	e783      	b.n	8003186 <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800327e:	688c      	ldr	r4, [r1, #8]
      i++;
 8003280:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003282:	2c00      	cmp	r4, #0
 8003284:	f47f af5f 	bne.w	8003146 <RCM_RegisterRegConv+0x32>
 8003288:	68ca      	ldr	r2, [r1, #12]
 800328a:	2a00      	cmp	r2, #0
 800328c:	d03b      	beq.n	8003306 <RCM_RegisterRegConv+0x1f2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800328e:	7915      	ldrb	r5, [r2, #4]
 8003290:	7904      	ldrb	r4, [r0, #4]
 8003292:	42a5      	cmp	r5, r4
 8003294:	d137      	bne.n	8003306 <RCM_RegisterRegConv+0x1f2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003296:	6814      	ldr	r4, [r2, #0]
 8003298:	6802      	ldr	r2, [r0, #0]
 800329a:	4294      	cmp	r4, r2
 800329c:	f47f af5f 	bne.w	800315e <RCM_RegisterRegConv+0x4a>
      i++;
 80032a0:	2303      	movs	r3, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032a2:	f240 3403 	movw	r4, #771	; 0x303
 80032a6:	e76e      	b.n	8003186 <RCM_RegisterRegConv+0x72>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80032a8:	f06f 011d 	mvn.w	r1, #29
 80032ac:	2403      	movs	r4, #3
 80032ae:	fb14 140c 	smlabb	r4, r4, ip, r1
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f10c 	lsl.w	r1, r1, ip
 80032b8:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 80032bc:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 80032c0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80032c4:	e7aa      	b.n	800321c <RCM_RegisterRegConv+0x108>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d913      	bls.n	80032f2 <RCM_RegisterRegConv+0x1de>
 80032ca:	68cb      	ldr	r3, [r1, #12]
 80032cc:	b113      	cbz	r3, 80032d4 <RCM_RegisterRegConv+0x1c0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032ce:	791a      	ldrb	r2, [r3, #4]
 80032d0:	4562      	cmp	r2, ip
 80032d2:	d010      	beq.n	80032f6 <RCM_RegisterRegConv+0x1e2>
 80032d4:	6802      	ldr	r2, [r0, #0]
 80032d6:	e7ce      	b.n	8003276 <RCM_RegisterRegConv+0x162>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d914      	bls.n	8003306 <RCM_RegisterRegConv+0x1f2>
 80032dc:	6802      	ldr	r2, [r0, #0]
      i++;
 80032de:	2303      	movs	r3, #3
 80032e0:	f240 3403 	movw	r4, #771	; 0x303
 80032e4:	e74f      	b.n	8003186 <RCM_RegisterRegConv+0x72>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032e6:	688c      	ldr	r4, [r1, #8]
 80032e8:	b11c      	cbz	r4, 80032f2 <RCM_RegisterRegConv+0x1de>
 80032ea:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 80032ee:	4613      	mov	r3, r2
 80032f0:	e729      	b.n	8003146 <RCM_RegisterRegConv+0x32>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032f2:	4623      	mov	r3, r4
 80032f4:	e7c8      	b.n	8003288 <RCM_RegisterRegConv+0x174>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6802      	ldr	r2, [r0, #0]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d0d0      	beq.n	80032a0 <RCM_RegisterRegConv+0x18c>
 80032fe:	f240 2402 	movw	r4, #514	; 0x202
      i++;
 8003302:	2302      	movs	r3, #2
 8003304:	e73f      	b.n	8003186 <RCM_RegisterRegConv+0x72>
    while (i < RCM_MAX_CONV)
 8003306:	f04f 0400 	mov.w	r4, #0
 800330a:	f363 0407 	bfi	r4, r3, #0, #8
 800330e:	f363 240f 	bfi	r4, r3, #8, #8
 8003312:	6802      	ldr	r2, [r0, #0]
    if (handle < RCM_MAX_CONV)
 8003314:	e737      	b.n	8003186 <RCM_RegisterRegConv+0x72>
 8003316:	bf00      	nop
 8003318:	20001864 	.word	0x20001864
 800331c:	20001820 	.word	0x20001820
 8003320:	7fffffc0 	.word	0x7fffffc0
 8003324:	20001840 	.word	0x20001840

08003328 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003328:	b510      	push	{r4, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 800332a:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 800332c:	4a5e      	ldr	r2, [pc, #376]	; (80034a8 <RCM_ExecRegularConv+0x180>)
 800332e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003332:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003336:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 800333a:	2900      	cmp	r1, #0
 800333c:	d13c      	bne.n	80033b8 <RCM_ExecRegularConv+0x90>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 800333e:	7810      	ldrb	r0, [r2, #0]
 8003340:	b9a8      	cbnz	r0, 800336e <RCM_ExecRegularConv+0x46>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003342:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8003344:	7990      	ldrb	r0, [r2, #6]
 8003346:	2800      	cmp	r0, #0
 8003348:	d07f      	beq.n	800344a <RCM_ExecRegularConv+0x122>
      {
        if (RCM_NoInj_array[i].next > handle)
 800334a:	7ad0      	ldrb	r0, [r2, #11]
 800334c:	4283      	cmp	r3, r0
 800334e:	f0c0 809b 	bcc.w	8003488 <RCM_ExecRegularConv+0x160>
      if (true == RCM_NoInj_array [i].enable)
 8003352:	7b11      	ldrb	r1, [r2, #12]
 8003354:	2900      	cmp	r1, #0
 8003356:	f000 809a 	beq.w	800348e <RCM_ExecRegularConv+0x166>
        if (RCM_NoInj_array[i].next > handle)
 800335a:	7c50      	ldrb	r0, [r2, #17]
 800335c:	4283      	cmp	r3, r0
 800335e:	f0c0 80a0 	bcc.w	80034a2 <RCM_ExecRegularConv+0x17a>
      if (true == RCM_NoInj_array [i].enable)
 8003362:	7c91      	ldrb	r1, [r2, #18]
 8003364:	2900      	cmp	r1, #0
 8003366:	f040 8096 	bne.w	8003496 <RCM_ExecRegularConv+0x16e>
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 800336a:	2102      	movs	r1, #2
 800336c:	e074      	b.n	8003458 <RCM_ExecRegularConv+0x130>
        if (RCM_NoInj_array[i].next > handle)
 800336e:	7950      	ldrb	r0, [r2, #5]
 8003370:	4298      	cmp	r0, r3
 8003372:	d9e7      	bls.n	8003344 <RCM_ExecRegularConv+0x1c>
      if (true == RCM_NoInj_array [i].enable)
 8003374:	468e      	mov	lr, r1
          RCM_NoInj_array[handle].next = formerNext;
 8003376:	eb0c 0403 	add.w	r4, ip, r3
 800337a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 800337e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8003382:	7121      	strb	r1, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 8003384:	7160      	strb	r0, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003386:	4c49      	ldr	r4, [pc, #292]	; (80034ac <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8003388:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[i].next = handle;
 800338c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003390:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003394:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8003396:	f88e 3005 	strb.w	r3, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 800339a:	7103      	strb	r3, [r0, #4]
    RCM_NoInj_array[handle].enable = true;
 800339c:	eb0c 0003 	add.w	r0, ip, r3
 80033a0:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 80033a8:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033ac:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80033b0:	7849      	ldrb	r1, [r1, #1]
 80033b2:	4571      	cmp	r1, lr
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 80033b4:	bf18      	it	ne
 80033b6:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == Bemf_ADC_M1.ADCRegularLocked)
 80033b8:	493d      	ldr	r1, [pc, #244]	; (80034b0 <RCM_ExecRegularConv+0x188>)
 80033ba:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 80033be:	2900      	cmp	r1, #0
 80033c0:	d133      	bne.n	800342a <RCM_ExecRegularConv+0x102>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80033c2:	493c      	ldr	r1, [pc, #240]	; (80034b4 <RCM_ExecRegularConv+0x18c>)
 80033c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80033c8:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80033ca:	6808      	ldr	r0, [r1, #0]
 80033cc:	2c09      	cmp	r4, #9
 80033ce:	d931      	bls.n	8003434 <RCM_ExecRegularConv+0x10c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80033d0:	f06f 011d 	mvn.w	r1, #29
 80033d4:	f04f 0e03 	mov.w	lr, #3
 80033d8:	fb1e 1e04 	smlabb	lr, lr, r4, r1
 80033dc:	2101      	movs	r1, #1
 80033de:	40a1      	lsls	r1, r4
 80033e0:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
 80033e4:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80033e8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80033ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80033ee:	0d09      	lsrs	r1, r1, #20
 80033f0:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 80033f4:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 80033f8:	4321      	orrs	r1, r4
 80033fa:	6301      	str	r1, [r0, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80033fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80033fe:	6881      	ldr	r1, [r0, #8]
 8003400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003404:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003408:	f041 0104 	orr.w	r1, r1, #4
 800340c:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800340e:	6801      	ldr	r1, [r0, #0]
 8003410:	0749      	lsls	r1, r1, #29
 8003412:	d5fc      	bpl.n	800340e <RCM_ExecRegularConv+0xe6>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003414:	eb0c 0103 	add.w	r1, ip, r3
 8003418:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800341c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800341e:	8048      	strh	r0, [r1, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003420:	4822      	ldr	r0, [pc, #136]	; (80034ac <RCM_ExecRegularConv+0x184>)
 8003422:	794c      	ldrb	r4, [r1, #5]
 8003424:	7004      	strb	r4, [r0, #0]
    RCM_NoInj_array[handle].status = valid;
 8003426:	2002      	movs	r0, #2
 8003428:	7048      	strb	r0, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 800342a:	449c      	add	ip, r3
 800342c:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8003430:	8850      	ldrh	r0, [r2, #2]
 8003432:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003434:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003438:	06a1      	lsls	r1, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800343a:	ea41 510e 	orr.w	r1, r1, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800343e:	f04f 0e01 	mov.w	lr, #1
 8003442:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003446:	4321      	orrs	r1, r4
 8003448:	e7d0      	b.n	80033ec <RCM_ExecRegularConv+0xc4>
      if (true == RCM_NoInj_array [i].enable)
 800344a:	7b10      	ldrb	r0, [r2, #12]
 800344c:	2800      	cmp	r0, #0
 800344e:	d184      	bne.n	800335a <RCM_ExecRegularConv+0x32>
 8003450:	7c90      	ldrb	r0, [r2, #18]
 8003452:	bb00      	cbnz	r0, 8003496 <RCM_ExecRegularConv+0x16e>
       if (LastEnable != RCM_MAX_CONV )
 8003454:	2904      	cmp	r1, #4
 8003456:	d013      	beq.n	8003480 <RCM_ExecRegularConv+0x158>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003458:	eb01 0041 	add.w	r0, r1, r1, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 800345c:	eb0c 0403 	add.w	r4, ip, r3
 8003460:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003464:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003468:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 800346a:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 800346c:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800346e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003472:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003476:	4c0d      	ldr	r4, [pc, #52]	; (80034ac <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003478:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 800347a:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800347c:	7821      	ldrb	r1, [r4, #0]
 800347e:	e78d      	b.n	800339c <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 8003480:	4c0a      	ldr	r4, [pc, #40]	; (80034ac <RCM_ExecRegularConv+0x184>)
 8003482:	4619      	mov	r1, r3
 8003484:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003486:	e789      	b.n	800339c <RCM_ExecRegularConv+0x74>
      i++;
 8003488:	2101      	movs	r1, #1
      if (true == RCM_NoInj_array [i].enable)
 800348a:	468e      	mov	lr, r1
 800348c:	e773      	b.n	8003376 <RCM_ExecRegularConv+0x4e>
 800348e:	7c91      	ldrb	r1, [r2, #18]
 8003490:	b909      	cbnz	r1, 8003496 <RCM_ExecRegularConv+0x16e>
      i++;
 8003492:	2101      	movs	r1, #1
 8003494:	e7e0      	b.n	8003458 <RCM_ExecRegularConv+0x130>
        if (RCM_NoInj_array[i].next > handle)
 8003496:	7dd0      	ldrb	r0, [r2, #23]
 8003498:	4298      	cmp	r0, r3
      i++;
 800349a:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array[i].next > handle)
 800349e:	d9db      	bls.n	8003458 <RCM_ExecRegularConv+0x130>
 80034a0:	e768      	b.n	8003374 <RCM_ExecRegularConv+0x4c>
      i++;
 80034a2:	2102      	movs	r1, #2
 80034a4:	e766      	b.n	8003374 <RCM_ExecRegularConv+0x4c>
 80034a6:	bf00      	nop
 80034a8:	20001840 	.word	0x20001840
 80034ac:	20001860 	.word	0x20001860
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20001864 	.word	0x20001864

080034b8 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <RCM_ExecUserConv+0x54>)
{
 80034ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 80034be:	681c      	ldr	r4, [r3, #0]
 80034c0:	b124      	cbz	r4, 80034cc <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80034c2:	4d13      	ldr	r5, [pc, #76]	; (8003510 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 80034c4:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80034c6:	782b      	ldrb	r3, [r5, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80034cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff ff29 	bl	8003328 <RCM_ExecRegularConv>
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <RCM_ExecUserConv+0x5c>)
 80034d8:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <RCM_ExecUserConv+0x60>)
 80034dc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80034e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80034e4:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	b10b      	cbz	r3, 80034ee <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 80034ea:	2302      	movs	r3, #2
 80034ec:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <RCM_ExecUserConv+0x64>)
 80034f0:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 80034f4:	2f00      	cmp	r7, #0
 80034f6:	d0e9      	beq.n	80034cc <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80034f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80034fc:	4620      	mov	r0, r4
 80034fe:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003500:	2300      	movs	r3, #0
 8003502:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003504:	463b      	mov	r3, r7
}
 8003506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800350a:	4718      	bx	r3
 800350c:	20001858 	.word	0x20001858
 8003510:	2000185c 	.word	0x2000185c
 8003514:	2000185e 	.word	0x2000185e
 8003518:	20001840 	.word	0x20001840
 800351c:	20001820 	.word	0x20001820

08003520 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <RCM_ExecNextConv+0x94>)
 8003522:	4825      	ldr	r0, [pc, #148]	; (80035b8 <RCM_ExecNextConv+0x98>)
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800352a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800352e:	b3a3      	cbz	r3, 800359a <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <RCM_ExecNextConv+0x9c>)
{
 8003532:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800353a:	2404      	movs	r4, #4
 800353c:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800353e:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003542:	f1bc 0f09 	cmp.w	ip, #9
 8003546:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 800354a:	d927      	bls.n	800359c <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800354c:	f06f 031d 	mvn.w	r3, #29
 8003550:	2403      	movs	r4, #3
 8003552:	fb14 340c 	smlabb	r4, r4, ip, r3
 8003556:	2301      	movs	r3, #1
 8003558:	fa03 f30c 	lsl.w	r3, r3, ip
 800355c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003560:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003568:	4496      	add	lr, r2
  MODIFY_REG(*preg,
 800356a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800356c:	0d1b      	lsrs	r3, r3, #20
 800356e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003572:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8003576:	4313      	orrs	r3, r2
 8003578:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800357a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800357c:	688b      	ldr	r3, [r1, #8]
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003582:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 8003586:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800358a:	f04f 0c01 	mov.w	ip, #1
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	608b      	str	r3, [r1, #8]
 8003594:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003598:	bd10      	pop	{r4, pc}
 800359a:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800359c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80035a0:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80035a4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80035a8:	2401      	movs	r4, #1
 80035aa:	fa04 f40c 	lsl.w	r4, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80035ae:	4323      	orrs	r3, r4
 80035b0:	e7da      	b.n	8003568 <RCM_ExecNextConv+0x48>
 80035b2:	bf00      	nop
 80035b4:	20001860 	.word	0x20001860
 80035b8:	20001840 	.word	0x20001840
 80035bc:	20001864 	.word	0x20001864

080035c0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80035c0:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80035c2:	4811      	ldr	r0, [pc, #68]	; (8003608 <RCM_ReadOngoingConv+0x48>)
 80035c4:	4a11      	ldr	r2, [pc, #68]	; (800360c <RCM_ReadOngoingConv+0x4c>)
 80035c6:	7803      	ldrb	r3, [r0, #0]
 80035c8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80035cc:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 80035d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80035d4:	b1ac      	cbz	r4, 8003602 <RCM_ReadOngoingConv+0x42>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80035d6:	4c0e      	ldr	r4, [pc, #56]	; (8003610 <RCM_ReadOngoingConv+0x50>)
 80035d8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80035dc:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	076d      	lsls	r5, r5, #29
 80035e2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80035e6:	d507      	bpl.n	80035f8 <RCM_ReadOngoingConv+0x38>
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 80035e8:	784d      	ldrb	r5, [r1, #1]
 80035ea:	f015 0ffd 	tst.w	r5, #253	; 0xfd
 80035ee:	d003      	beq.n	80035f8 <RCM_ReadOngoingConv+0x38>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80035f0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80035f2:	804c      	strh	r4, [r1, #2]
    else
    {
      /* Reading of ADC Converted Value */
      RCM_NoInj_array[RCM_currentHandle].value
                    = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 80035f4:	2402      	movs	r4, #2
 80035f6:	704c      	strb	r4, [r1, #1]
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80035f8:	449c      	add	ip, r3
 80035fa:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 80035fe:	7953      	ldrb	r3, [r2, #5]
 8003600:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8003602:	bc30      	pop	{r4, r5}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20001860 	.word	0x20001860
 800360c:	20001840 	.word	0x20001840
 8003610:	20001864 	.word	0x20001864

08003614 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_MspInit+0x3c>)
{
 8003616:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
 8003620:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003622:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003624:	f002 0201 	and.w	r2, r2, #1
 8003628:	9200      	str	r2, [sp, #0]
 800362a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800362e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003632:	659a      	str	r2, [r3, #88]	; 0x58
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800363c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003640:	f001 fa90 	bl	8004b64 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003644:	b003      	add	sp, #12
 8003646:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800364a:	f001 bd15 	b.w	8005078 <HAL_PWREx_DisableUCPDDeadBattery>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003654:	b5d0      	push	{r4, r6, r7, lr}
 8003656:	4604      	mov	r4, r0
 8003658:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800365c:	2244      	movs	r2, #68	; 0x44
 800365e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003664:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003668:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366a:	f005 f895 	bl	8008798 <memset>
  if(hadc->Instance==ADC1)
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003674:	d004      	beq.n	8003680 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003676:	4a49      	ldr	r2, [pc, #292]	; (800379c <HAL_ADC_MspInit+0x148>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d046      	beq.n	800370a <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800367c:	b01c      	add	sp, #112	; 0x70
 800367e:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003680:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003688:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800368a:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800368c:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368e:	f002 f8b5 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 8003692:	2800      	cmp	r0, #0
 8003694:	d17b      	bne.n	800378e <HAL_ADC_MspInit+0x13a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003696:	4a42      	ldr	r2, [pc, #264]	; (80037a0 <HAL_ADC_MspInit+0x14c>)
 8003698:	6813      	ldr	r3, [r2, #0]
 800369a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800369c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800369e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036a0:	d109      	bne.n	80036b6 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036a2:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <HAL_ADC_MspInit+0x150>)
 80036a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_ADC_MspInit+0x150>)
 80036b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	64da      	str	r2, [r3, #76]	; 0x4c
 80036c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c2:	f002 0201 	and.w	r2, r2, #1
 80036c6:	9201      	str	r2, [sp, #4]
 80036c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036cc:	f042 0202 	orr.w	r2, r2, #2
 80036d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80036dc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80036de:	2201      	movs	r2, #1
 80036e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80036e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80036e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ec:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f001 fb4d 	bl	8004d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BEMF_W_Pin|M1_TEMPERATURE_Pin;
 80036f2:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80036f6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f8:	482b      	ldr	r0, [pc, #172]	; (80037a8 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BEMF_W_Pin|M1_TEMPERATURE_Pin;
 80036fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	f001 fb43 	bl	8004d8c <HAL_GPIO_Init>
}
 8003706:	b01c      	add	sp, #112	; 0x70
 8003708:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800370a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800370e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003712:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003714:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003716:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003718:	f002 f870 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 800371c:	2800      	cmp	r0, #0
 800371e:	d139      	bne.n	8003794 <HAL_ADC_MspInit+0x140>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_ADC_MspInit+0x14c>)
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003726:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003728:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800372a:	d109      	bne.n	8003740 <HAL_ADC_MspInit+0xec>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_ADC_MspInit+0x150>)
 800372e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003734:	64da      	str	r2, [r3, #76]	; 0x4c
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_ADC_MspInit+0x150>)
 8003742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	64da      	str	r2, [r3, #76]	; 0x4c
 800374a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374c:	f002 0201 	and.w	r2, r2, #1
 8003750:	9204      	str	r2, [sp, #16]
 8003752:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003756:	f042 0204 	orr.w	r2, r2, #4
 800375a:	64da      	str	r2, [r3, #76]	; 0x4c
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin;
 8003762:	2610      	movs	r6, #16
 8003764:	2703      	movs	r7, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003766:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_BEMF_U_GPIO_Port, &GPIO_InitStruct);
 800376a:	a906      	add	r1, sp, #24
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003770:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin;
 8003774:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(M1_BEMF_U_GPIO_Port, &GPIO_InitStruct);
 8003778:	f001 fb08 	bl	8004d8c <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_BEMF_V_GPIO_Port, &GPIO_InitStruct);
 800377c:	480b      	ldr	r0, [pc, #44]	; (80037ac <HAL_ADC_MspInit+0x158>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_BEMF_V_GPIO_Port, &GPIO_InitStruct);
 8003780:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BEMF_V_Pin;
 8003782:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(M1_BEMF_V_GPIO_Port, &GPIO_InitStruct);
 8003786:	f001 fb01 	bl	8004d8c <HAL_GPIO_Init>
}
 800378a:	b01c      	add	sp, #112	; 0x70
 800378c:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800378e:	f7fd ffdb 	bl	8001748 <Error_Handler>
 8003792:	e780      	b.n	8003696 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003794:	f7fd ffd8 	bl	8001748 <Error_Handler>
 8003798:	e7c2      	b.n	8003720 <HAL_ADC_MspInit+0xcc>
 800379a:	bf00      	nop
 800379c:	50000100 	.word	0x50000100
 80037a0:	20001874 	.word	0x20001874
 80037a4:	40021000 	.word	0x40021000
 80037a8:	48000400 	.word	0x48000400
 80037ac:	48000800 	.word	0x48000800

080037b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_TIM_Base_MspInit+0x48>)
 80037b2:	6803      	ldr	r3, [r0, #0]
 80037b4:	4293      	cmp	r3, r2
{
 80037b6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80037b8:	d011      	beq.n	80037de <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d001      	beq.n	80037c4 <HAL_TIM_Base_MspInit+0x14>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80037c0:	b002      	add	sp, #8
 80037c2:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	659a      	str	r2, [r3, #88]	; 0x58
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9b01      	ldr	r3, [sp, #4]
}
 80037da:	b002      	add	sp, #8
 80037dc:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_TIM_Base_MspInit+0x4c>)
 80037e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	9b00      	ldr	r3, [sp, #0]
}
 80037f2:	b002      	add	sp, #8
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003800:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003802:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <HAL_TIM_MspPostInit+0xac>)
 8003804:	6801      	ldr	r1, [r0, #0]
{
 8003806:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800380a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003810:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003814:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003816:	d001      	beq.n	800381c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003818:	b00a      	add	sp, #40	; 0x28
 800381a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003820:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003824:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003828:	4821      	ldr	r0, [pc, #132]	; (80038b0 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382a:	4332      	orrs	r2, r6
 800382c:	64da      	str	r2, [r3, #76]	; 0x4c
 800382e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003830:	4032      	ands	r2, r6
 8003832:	9201      	str	r2, [sp, #4]
 8003834:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003838:	f042 0202 	orr.w	r2, r2, #2
 800383c:	64da      	str	r2, [r3, #76]	; 0x4c
 800383e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003840:	f002 0202 	and.w	r2, r2, #2
 8003844:	9202      	str	r2, [sp, #8]
 8003846:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003852:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800385a:	2402      	movs	r4, #2
 800385c:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800385e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003864:	2302      	movs	r3, #2
 8003866:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800386a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003870:	f001 fa8c 	bl	8004d8c <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003874:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003876:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800387a:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800387c:	480d      	ldr	r0, [pc, #52]	; (80038b4 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800387e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003884:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003888:	f001 fa80 	bl	8004d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 800388c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003890:	2302      	movs	r3, #2
 8003892:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003896:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003898:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 800389e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80038a2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	f001 fa72 	bl	8004d8c <HAL_GPIO_Init>
}
 80038a8:	b00a      	add	sp, #40	; 0x28
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	48000800 	.word	0x48000800
 80038b4:	48000400 	.word	0x48000400

080038b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4604      	mov	r4, r0
 80038bc:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038be:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038c0:	2244      	movs	r2, #68	; 0x44
 80038c2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80038c8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80038cc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038ce:	f004 ff63 	bl	8008798 <memset>
  if(huart->Instance==USART2)
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_UART_MspInit+0xe0>)
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038da:	b018      	add	sp, #96	; 0x60
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038de:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038e0:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038e2:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038e4:	f001 ff8a 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d14b      	bne.n	8003984 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ee:	482c      	ldr	r0, [pc, #176]	; (80039a0 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80038f2:	4e2c      	ldr	r6, [pc, #176]	; (80039a4 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58
 80038fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038fc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003900:	9200      	str	r2, [sp, #0]
 8003902:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003904:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003906:	f042 0202 	orr.w	r2, r2, #2
 800390a:	64da      	str	r2, [r3, #76]	; 0x4c
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003914:	2218      	movs	r2, #24
 8003916:	2302      	movs	r3, #2
 8003918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800391c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003920:	2300      	movs	r3, #0
 8003922:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003926:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003928:	2307      	movs	r3, #7
 800392a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392c:	f001 fa2e 	bl	8004d8c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003930:	491d      	ldr	r1, [pc, #116]	; (80039a8 <HAL_UART_MspInit+0xf0>)
 8003932:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003934:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003936:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800393a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800393c:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800393e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003942:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003946:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800394a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800394c:	f001 f988 	bl	8004c60 <HAL_DMA_Init>
 8003950:	b9f0      	cbnz	r0, 8003990 <HAL_UART_MspInit+0xd8>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003952:	4d16      	ldr	r5, [pc, #88]	; (80039ac <HAL_UART_MspInit+0xf4>)
 8003954:	4916      	ldr	r1, [pc, #88]	; (80039b0 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003956:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003958:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395a:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800395c:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003960:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003962:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003964:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003966:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800396a:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800396e:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003972:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003974:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003976:	f001 f973 	bl	8004c60 <HAL_DMA_Init>
 800397a:	b930      	cbnz	r0, 800398a <HAL_UART_MspInit+0xd2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800397c:	67a5      	str	r5, [r4, #120]	; 0x78
 800397e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003980:	b018      	add	sp, #96	; 0x60
 8003982:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003984:	f7fd fee0 	bl	8001748 <Error_Handler>
 8003988:	e7b0      	b.n	80038ec <HAL_UART_MspInit+0x34>
      Error_Handler();
 800398a:	f7fd fedd 	bl	8001748 <Error_Handler>
 800398e:	e7f5      	b.n	800397c <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8003990:	f7fd feda 	bl	8001748 <Error_Handler>
 8003994:	e7dd      	b.n	8003952 <HAL_UART_MspInit+0x9a>
 8003996:	bf00      	nop
 8003998:	40004400 	.word	0x40004400
 800399c:	40021000 	.word	0x40021000
 80039a0:	48000400 	.word	0x48000400
 80039a4:	20000468 	.word	0x20000468
 80039a8:	40020008 	.word	0x40020008
 80039ac:	200004c8 	.word	0x200004c8
 80039b0:	4002001c 	.word	0x4002001c

080039b4 <ADC1_2_IRQHandler>:
/**
  * @brief  This function handles BEMF sensing interrupt request.
  * @param[in] None
  */
void BEMF_READING_IRQHandler(void)
{
 80039b4:	b508      	push	{r3, lr}
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
 80039b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	0692      	lsls	r2, r2, #26
 80039be:	d502      	bpl.n	80039c6 <ADC1_2_IRQHandler+0x12>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabledIT_JEOC(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->IER, LL_ADC_IT_JEOC) == (LL_ADC_IT_JEOC)) ? 1UL : 0UL);
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	0690      	lsls	r0, r2, #26
 80039c4:	d40f      	bmi.n	80039e6 <ADC1_2_IRQHandler+0x32>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <ADC1_2_IRQHandler+0x40>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	0691      	lsls	r1, r2, #26
 80039cc:	d50a      	bpl.n	80039e4 <ADC1_2_IRQHandler+0x30>
  return ((READ_BIT(ADCx->IER, LL_ADC_IT_JEOC) == (LL_ADC_IT_JEOC)) ? 1UL : 0UL);
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	0692      	lsls	r2, r2, #26
 80039d2:	d507      	bpl.n	80039e4 <ADC1_2_IRQHandler+0x30>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80039d4:	2220      	movs	r2, #32
 80039d6:	601a      	str	r2, [r3, #0]
  }
  if(LL_ADC_IsActiveFlag_JEOC(ADC2) && LL_ADC_IsEnabledIT_JEOC(ADC2))
  {
  /* Clear Flags */
    LL_ADC_ClearFlag_JEOC(ADC2);
    BADC_IsZcDetected(&Bemf_ADC_M1, &PWM_Handle_M1._Super);
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <ADC1_2_IRQHandler+0x44>)
 80039da:	4808      	ldr	r0, [pc, #32]	; (80039fc <ADC1_2_IRQHandler+0x48>)
  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 80039dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BADC_IsZcDetected(&Bemf_ADC_M1, &PWM_Handle_M1._Super);
 80039e0:	f003 ba9c 	b.w	8006f1c <BADC_IsZcDetected>
}
 80039e4:	bd08      	pop	{r3, pc}
 80039e6:	2220      	movs	r2, #32
    BADC_IsZcDetected(&Bemf_ADC_M1, &PWM_Handle_M1._Super);
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <ADC1_2_IRQHandler+0x44>)
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4803      	ldr	r0, [pc, #12]	; (80039fc <ADC1_2_IRQHandler+0x48>)
 80039ee:	f003 fa95 	bl	8006f1c <BADC_IsZcDetected>
 80039f2:	e7e8      	b.n	80039c6 <ADC1_2_IRQHandler+0x12>
 80039f4:	50000100 	.word	0x50000100
 80039f8:	20000144 	.word	0x20000144
 80039fc:	20000000 	.word	0x20000000

08003a00 <TIM2_IRQHandler>:
  */
void PERIOD_COMM_IRQHandler(void)
{
  /* TIM Update event */

  if(LL_TIM_IsActiveFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_UPDATE(Bemf_ADC_M1.pParams_str->LfTim))
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <TIM2_IRQHandler+0x2c>)
{
 8003a02:	b508      	push	{r3, lr}
  if(LL_TIM_IsActiveFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_UPDATE(Bemf_ADC_M1.pParams_str->LfTim))
 8003a04:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a06:	681b      	ldr	r3, [r3, #0]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	07d1      	lsls	r1, r2, #31
 8003a0c:	d50d      	bpl.n	8003a2a <TIM2_IRQHandler+0x2a>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	07d2      	lsls	r2, r2, #31
 8003a12:	d50a      	bpl.n	8003a2a <TIM2_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003a14:	f06f 0101 	mvn.w	r1, #1
 8003a18:	6119      	str	r1, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(Bemf_ADC_M1.pParams_str->LfTim);
    BADC_StepChangeEvent(&Bemf_ADC_M1, 0, &PWM_Handle_M1._Super);
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <TIM2_IRQHandler+0x30>)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f003 fc29 	bl	8007274 <BADC_StepChangeEvent>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)TSK_HighFrequencyTask();
 8003a26:	f7fe b9ed 	b.w	8001e04 <TSK_HighFrequencyTask>
}
 8003a2a:	bd08      	pop	{r3, pc}
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000144 	.word	0x20000144

08003a34 <TIM1_UP_TIM16_IRQHandler>:
 8003a34:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8003a36:	f06f 0201 	mvn.w	r2, #1
 8003a3a:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)TSK_HighFrequencyTask();
 8003a3c:	f7fe b9e2 	b.w	8001e04 <TSK_HighFrequencyTask>
 8003a40:	40012c00 	.word	0x40012c00

08003a44 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003a44:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	0611      	lsls	r1, r2, #24
 8003a4c:	d505      	bpl.n	8003a5a <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003a4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);

    (void)SixPwm_BRK_IRQHandler(&PWM_Handle_M1);
 8003a52:	480a      	ldr	r0, [pc, #40]	; (8003a7c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003a54:	611a      	str	r2, [r3, #16]
 8003a56:	f004 facd 	bl	8007ff4 <SixPwm_BRK_IRQHandler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	05d2      	lsls	r2, r2, #23
 8003a60:	d505      	bpl.n	8003a6e <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003a62:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);

    (void)SixPwm_BRK_IRQHandler(&PWM_Handle_M1);
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	f004 fac3 	bl	8007ff4 <SixPwm_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003a72:	f7fe b981 	b.w	8001d78 <MC_Scheduler>
 8003a76:	bf00      	nop
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	20000144 	.word	0x20000144

08003a80 <DMA1_Channel1_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <DMA1_Channel1_IRQHandler+0x14>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	0792      	lsls	r2, r2, #30
 8003a86:	d400      	bmi.n	8003a8a <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8003a88:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003a8a:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA1_Channel1_IRQHandler+0x18>)
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	f7fd bb80 	b.w	8001194 <ASPEP_HWDataReceivedIT>
 8003a94:	40020000 	.word	0x40020000
 8003a98:	200002f0 	.word	0x200002f0

08003a9c <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <USART2_IRQHandler+0x10c>)
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	d509      	bpl.n	8003aba <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003aa6:	4941      	ldr	r1, [pc, #260]	; (8003bac <USART2_IRQHandler+0x110>)
    /* Disable the DMA channel to prepare the next chunck of data */
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART */
    /* Need to free the buffer, and to check pending transfer */
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003aa8:	4841      	ldr	r0, [pc, #260]	; (8003bb0 <USART2_IRQHandler+0x114>)
 8003aaa:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003aac:	2440      	movs	r4, #64	; 0x40
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	61ca      	str	r2, [r1, #28]
 8003ab4:	621c      	str	r4, [r3, #32]
 8003ab6:	f7fd f9c1 	bl	8000e3c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <USART2_IRQHandler+0x10c>)
 8003abc:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003abe:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003ac0:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003ac2:	689c      	ldr	r4, [r3, #8]
 8003ac4:	07e4      	lsls	r4, r4, #31
 8003ac6:	d526      	bpl.n	8003b16 <USART2_IRQHandler+0x7a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003ac8:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003acc:	f000 0008 	and.w	r0, r0, #8
  feFlag = LL_USART_IsActiveFlag_FE(USARTA);
  neFlag = LL_USART_IsActiveFlag_NE(USARTA);
  errorMask = LL_USART_IsEnabledIT_ERROR(USARTA);

  flags = ((oreFlag | feFlag | neFlag) & errorMask);
  if (0U == flags)
 8003ad0:	4302      	orrs	r2, r0
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003ad2:	f001 0104 	and.w	r1, r1, #4
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	d01d      	beq.n	8003b16 <USART2_IRQHandler+0x7a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error */
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8003ada:	220e      	movs	r2, #14
 8003adc:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ae2:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003af2:	e840 3100 	strex	r1, r3, [r0]
 8003af6:	2900      	cmp	r1, #0
 8003af8:	d1f3      	bne.n	8003ae2 <USART2_IRQHandler+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003afe:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8003b02:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003b06:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003b0e:	e840 3100 	strex	r1, r3, [r0]
 8003b12:	2900      	cmp	r1, #0
 8003b14:	d1f3      	bne.n	8003afe <USART2_IRQHandler+0x62>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <USART2_IRQHandler+0x10c>)
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	06d2      	lsls	r2, r2, #27
 8003b1c:	d541      	bpl.n	8003ba2 <USART2_IRQHandler+0x106>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	06db      	lsls	r3, r3, #27
 8003b22:	d53f      	bpl.n	8003ba4 <USART2_IRQHandler+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b28:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003b30:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003b38:	e840 3100 	strex	r1, r3, [r0]
 8003b3c:	2900      	cmp	r1, #0
 8003b3e:	d1f3      	bne.n	8003b28 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b44:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003b48:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003b54:	e840 3100 	strex	r1, r3, [r0]
 8003b58:	2900      	cmp	r1, #0
 8003b5a:	d1f3      	bne.n	8003b44 <USART2_IRQHandler+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b60:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003b64:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003b70:	e840 3100 	strex	r1, r3, [r0]
 8003b74:	2900      	cmp	r1, #0
 8003b76:	d1f3      	bne.n	8003b60 <USART2_IRQHandler+0xc4>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <USART2_IRQHandler+0x10c>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b80:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 8003b84:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	f502 6081 	add.w	r0, r2, #1032	; 0x408
 8003b90:	e840 3100 	strex	r1, r3, [r0]
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d1f3      	bne.n	8003b80 <USART2_IRQHandler+0xe4>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003b9c:	4804      	ldr	r0, [pc, #16]	; (8003bb0 <USART2_IRQHandler+0x114>)
 8003b9e:	f7fd bb47 	b.w	8001230 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	bd10      	pop	{r4, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	200002f0 	.word	0x200002f0

08003bb4 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003bb4:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003bb6:	f7fe fa3f 	bl	8002038 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8003bba:	e7fe      	b.n	8003bba <HardFault_Handler+0x6>

08003bbc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003bbc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003bbe:	4c0a      	ldr	r4, [pc, #40]	; (8003be8 <SysTick_Handler+0x2c>)
 8003bc0:	7823      	ldrb	r3, [r4, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d006      	beq.n	8003bd4 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003bd0:	f7fe ba26 	b.w	8002020 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003bd4:	f000 f8ea 	bl	8003dac <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003bd8:	f001 f83e 	bl	8004c58 <HAL_SYSTICK_IRQHandler>
 8003bdc:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003bde:	7023      	strb	r3, [r4, #0]
}
 8003be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003be4:	f7fe ba1c 	b.w	8002020 <MC_RunMotorControlTasks>
 8003be8:	20000364 	.word	0x20000364

08003bec <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <EXTI15_10_IRQHandler+0x14>)
 8003bee:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8003bf0:	0552      	lsls	r2, r2, #21
 8003bf2:	d400      	bmi.n	8003bf6 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    (void)UI_HandleStartStopButton_cb ();
  }

}
 8003bf4:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfa:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb ();
 8003bfc:	f7fe ba2c 	b.w	8002058 <UI_HandleStartStopButton_cb>
 8003c00:	40010400 	.word	0x40010400

08003c04 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003c04:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003c06:	2340      	movs	r3, #64	; 0x40
{
 8003c08:	b470      	push	{r4, r5, r6}
 8003c0a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	e842 3100 	strex	r1, r3, [r2]
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	d1f7      	bne.n	8003c0c <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003c1c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	e851 3f00 	ldrex	r3, [r1]
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	e841 3400 	strex	r4, r3, [r1]
 8003c2c:	2c00      	cmp	r4, #0
 8003c2e:	d1f7      	bne.n	8003c20 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003c30:	6901      	ldr	r1, [r0, #16]
 8003c32:	4e17      	ldr	r6, [pc, #92]	; (8003c90 <UASPEP_INIT+0x8c>)
 8003c34:	6883      	ldr	r3, [r0, #8]
 8003c36:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003c38:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003c3a:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003c3c:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8003c40:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003c42:	68c3      	ldr	r3, [r0, #12]
 8003c44:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	6213      	str	r3, [r2, #32]
 8003c4a:	586b      	ldr	r3, [r5, r1]
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c52:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	e851 3f00 	ldrex	r3, [r1]
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	e841 3400 	strex	r4, r3, [r1]
 8003c62:	2c00      	cmp	r4, #0
 8003c64:	d1f7      	bne.n	8003c56 <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003c66:	68c3      	ldr	r3, [r0, #12]
 8003c68:	5cf0      	ldrb	r0, [r6, r3]
 8003c6a:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003c6c:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c74:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003c78:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	e841 3200 	strex	r2, r3, [r1]
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d1f7      	bne.n	8003c7a <UASPEP_INIT+0x76>
}
 8003c8a:	bc70      	pop	{r4, r5, r6}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	08008a1c 	.word	0x08008a1c

08003c94 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003c94:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003c96:	6903      	ldr	r3, [r0, #16]
 8003c98:	4d0b      	ldr	r5, [pc, #44]	; (8003cc8 <UASPEP_SEND_PACKET+0x34>)
 8003c9a:	6884      	ldr	r4, [r0, #8]
 8003c9c:	5ceb      	ldrb	r3, [r5, r3]
 8003c9e:	58e5      	ldr	r5, [r4, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003ca0:	07ed      	lsls	r5, r5, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003ca2:	eb04 0003 	add.w	r0, r4, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003ca6:	d40b      	bmi.n	8003cc0 <UASPEP_SEND_PACKET+0x2c>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003ca8:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003caa:	6841      	ldr	r1, [r0, #4]
 8003cac:	0c09      	lsrs	r1, r1, #16
 8003cae:	0409      	lsls	r1, r1, #16
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	6042      	str	r2, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003cb4:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	4302      	orrs	r2, r0
 8003cba:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return (result);
}
 8003cbc:	bc30      	pop	{r4, r5}
 8003cbe:	4770      	bx	lr
    result = false;
 8003cc0:	2000      	movs	r0, #0
}
 8003cc2:	bc30      	pop	{r4, r5}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	08008a1c 	.word	0x08008a1c

08003ccc <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003ccc:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003cce:	68c3      	ldr	r3, [r0, #12]
 8003cd0:	4d0b      	ldr	r5, [pc, #44]	; (8003d00 <UASPEP_RECEIVE_BUFFER+0x34>)
 8003cd2:	6844      	ldr	r4, [r0, #4]
 8003cd4:	5ce8      	ldrb	r0, [r5, r3]
 8003cd6:	5823      	ldr	r3, [r4, r0]
 8003cd8:	eb04 0c00 	add.w	ip, r4, r0
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003ce2:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003ce6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003cf4:	5823      	ldr	r3, [r4, r0]
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003cfc:	bc30      	pop	{r4, r5}
 8003cfe:	4770      	bx	lr
 8003d00:	08008a1c 	.word	0x08008a1c

08003d04 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003d04:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003d06:	2310      	movs	r3, #16
 8003d08:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d0e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	e842 3100 	strex	r1, r3, [r2]
 8003d16:	2900      	cmp	r1, #0
 8003d18:	d1f7      	bne.n	8003d0a <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003d1a:	4770      	bx	lr

08003d1c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d1c:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <SystemInit+0x10>)
 8003d1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d30:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_InitTick+0x40>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b90b      	cbnz	r3, 8003d3c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d38:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d3c:	490d      	ldr	r1, [pc, #52]	; (8003d74 <HAL_InitTick+0x44>)
 8003d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d42:	4605      	mov	r5, r0
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	6808      	ldr	r0, [r1, #0]
 8003d4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d4e:	f000 ff67 	bl	8004c20 <HAL_SYSTICK_Config>
 8003d52:	4604      	mov	r4, r0
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d1ef      	bne.n	8003d38 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d58:	2d0f      	cmp	r5, #15
 8003d5a:	d8ed      	bhi.n	8003d38 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4629      	mov	r1, r5
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f000 ff10 	bl	8004b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_InitTick+0x48>)
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	601d      	str	r5, [r3, #0]
}
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	2000036c 	.word	0x2000036c
 8003d74:	20000368 	.word	0x20000368
 8003d78:	20000370 	.word	0x20000370

08003d7c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_Init+0x2c>)
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003d84:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d86:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d88:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8a:	f000 feeb 	bl	8004b64 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d8e:	2004      	movs	r0, #4
 8003d90:	f7ff ffce 	bl	8003d30 <HAL_InitTick>
 8003d94:	b110      	cbz	r0, 8003d9c <HAL_Init+0x20>
    status = HAL_ERROR;
 8003d96:	2401      	movs	r4, #1
}
 8003d98:	4620      	mov	r0, r4
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	4604      	mov	r4, r0
    HAL_MspInit();
 8003d9e:	f7ff fc39 	bl	8003614 <HAL_MspInit>
}
 8003da2:	4620      	mov	r0, r4
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	bf00      	nop
 8003da8:	40022000 	.word	0x40022000

08003dac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003dac:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_IncTick+0x10>)
 8003dae:	4904      	ldr	r1, [pc, #16]	; (8003dc0 <HAL_IncTick+0x14>)
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	6809      	ldr	r1, [r1, #0]
 8003db4:	440b      	add	r3, r1
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20001878 	.word	0x20001878
 8003dc0:	2000036c 	.word	0x2000036c

08003dc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003dc4:	4b01      	ldr	r3, [pc, #4]	; (8003dcc <HAL_GetTick+0x8>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20001878 	.word	0x20001878

08003dd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dd0:	b530      	push	{r4, r5, lr}
 8003dd2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	f000 80c9 	beq.w	8003f70 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dde:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003de0:	4604      	mov	r4, r0
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	f000 8092 	beq.w	8003f0c <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003de8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003dea:	6893      	ldr	r3, [r2, #8]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	d505      	bpl.n	8003dfc <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003df0:	6893      	ldr	r3, [r2, #8]
 8003df2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003df6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dfa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dfc:	6893      	ldr	r3, [r2, #8]
 8003dfe:	00dd      	lsls	r5, r3, #3
 8003e00:	d419      	bmi.n	8003e36 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_ADC_Init+0x1f4>)
 8003e04:	4870      	ldr	r0, [pc, #448]	; (8003fc8 <HAL_ADC_Init+0x1f8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003e08:	6891      	ldr	r1, [r2, #8]
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	fba0 0303 	umull	r0, r3, r0, r3
 8003e10:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e22:	6091      	str	r1, [r2, #8]
 8003e24:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e26:	9b01      	ldr	r3, [sp, #4]
 8003e28:	b12b      	cbz	r3, 8003e36 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003e2a:	9b01      	ldr	r3, [sp, #4]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e30:	9b01      	ldr	r3, [sp, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f9      	bne.n	8003e2a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e36:	6893      	ldr	r3, [r2, #8]
 8003e38:	00d8      	lsls	r0, r3, #3
 8003e3a:	d459      	bmi.n	8003ef0 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e44:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e48:	4303      	orrs	r3, r0
 8003e4a:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e4c:	6893      	ldr	r3, [r2, #8]
 8003e4e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e54:	d153      	bne.n	8003efe <HAL_ADC_Init+0x12e>
 8003e56:	06d9      	lsls	r1, r3, #27
 8003e58:	d451      	bmi.n	8003efe <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e66:	6893      	ldr	r3, [r2, #8]
 8003e68:	07db      	lsls	r3, r3, #31
 8003e6a:	d40e      	bmi.n	8003e8a <HAL_ADC_Init+0xba>
 8003e6c:	4b57      	ldr	r3, [pc, #348]	; (8003fcc <HAL_ADC_Init+0x1fc>)
 8003e6e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003e72:	6889      	ldr	r1, [r1, #8]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	07dd      	lsls	r5, r3, #31
 8003e7a:	d406      	bmi.n	8003e8a <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e7c:	4954      	ldr	r1, [pc, #336]	; (8003fd0 <HAL_ADC_Init+0x200>)
 8003e7e:	6865      	ldr	r5, [r4, #4]
 8003e80:	688b      	ldr	r3, [r1, #8]
 8003e82:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003e86:	432b      	orrs	r3, r5
 8003e88:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003e8a:	68e5      	ldr	r5, [r4, #12]
 8003e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e8e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003e92:	432b      	orrs	r3, r5
 8003e94:	68a5      	ldr	r5, [r4, #8]
 8003e96:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e98:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e9a:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003e9c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ea4:	d05f      	beq.n	8003f66 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ea8:	b121      	cbz	r1, 8003eb4 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003eaa:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eac:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003eb0:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eb2:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003eb4:	68d5      	ldr	r5, [r2, #12]
 8003eb6:	4947      	ldr	r1, [pc, #284]	; (8003fd4 <HAL_ADC_Init+0x204>)
 8003eb8:	4029      	ands	r1, r5
 8003eba:	4319      	orrs	r1, r3
 8003ebc:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ebe:	6913      	ldr	r3, [r2, #16]
 8003ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ec2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eca:	6893      	ldr	r3, [r2, #8]
 8003ecc:	0759      	lsls	r1, r3, #29
 8003ece:	d523      	bpl.n	8003f18 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ed0:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ed2:	6963      	ldr	r3, [r4, #20]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d04e      	beq.n	8003f76 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ed8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003eda:	f023 030f 	bic.w	r3, r3, #15
 8003ede:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ee0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003eec:	b003      	add	sp, #12
 8003eee:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef0:	6893      	ldr	r3, [r2, #8]
 8003ef2:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef6:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003efa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003efc:	d0ab      	beq.n	8003e56 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003f00:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f02:	f043 0310 	orr.w	r3, r3, #16
 8003f06:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003f08:	b003      	add	sp, #12
 8003f0a:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003f0c:	f7ff fba2 	bl	8003654 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003f10:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003f12:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003f16:	e767      	b.n	8003de8 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f18:	6893      	ldr	r3, [r2, #8]
 8003f1a:	071b      	lsls	r3, r3, #28
 8003f1c:	d4d9      	bmi.n	8003ed2 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f1e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f20:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f24:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f26:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f2a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f2c:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f30:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f34:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003f36:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f38:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f3a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003f3c:	bb19      	cbnz	r1, 8003f86 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f44:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003f48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003f54:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d021      	beq.n	8003fa0 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f5c:	6913      	ldr	r3, [r2, #16]
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6113      	str	r3, [r2, #16]
 8003f64:	e7b5      	b.n	8003ed2 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f68:	3901      	subs	r1, #1
 8003f6a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003f6e:	e79a      	b.n	8003ea6 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
}
 8003f72:	b003      	add	sp, #12
 8003f74:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f78:	6a23      	ldr	r3, [r4, #32]
 8003f7a:	f021 010f 	bic.w	r1, r1, #15
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6313      	str	r3, [r2, #48]	; 0x30
 8003f84:	e7ac      	b.n	8003ee0 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f8c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003f90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003f9e:	e7d9      	b.n	8003f54 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fa0:	6911      	ldr	r1, [r2, #16]
 8003fa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fa4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003fa6:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003faa:	f021 0104 	bic.w	r1, r1, #4
 8003fae:	432b      	orrs	r3, r5
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6113      	str	r3, [r2, #16]
 8003fc0:	e787      	b.n	8003ed2 <HAL_ADC_Init+0x102>
 8003fc2:	bf00      	nop
 8003fc4:	20000368 	.word	0x20000368
 8003fc8:	053e2d63 	.word	0x053e2d63
 8003fcc:	50000100 	.word	0x50000100
 8003fd0:	50000300 	.word	0x50000300
 8003fd4:	fff04007 	.word	0xfff04007

08003fd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fda:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8003fde:	b083      	sub	sp, #12
 8003fe0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003fe2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003fe4:	f04f 0000 	mov.w	r0, #0
 8003fe8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003fea:	f000 8141 	beq.w	8004270 <HAL_ADC_ConfigChannel+0x298>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fee:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff6:	68a2      	ldr	r2, [r4, #8]
 8003ff8:	0756      	lsls	r6, r2, #29
 8003ffa:	d44c      	bmi.n	8004096 <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ffc:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8003ffe:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004000:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8004004:	f00c 0c0c 	and.w	ip, ip, #12
 8004008:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 800400c:	f000 001f 	and.w	r0, r0, #31
 8004010:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004014:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004018:	261f      	movs	r6, #31
 800401a:	4082      	lsls	r2, r0
 800401c:	fa06 f000 	lsl.w	r0, r6, r0
 8004020:	ea25 0000 	bic.w	r0, r5, r0
 8004024:	4302      	orrs	r2, r0
 8004026:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800402a:	68a2      	ldr	r2, [r4, #8]
 800402c:	0755      	lsls	r5, r2, #29
 800402e:	d543      	bpl.n	80040b8 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004030:	68a2      	ldr	r2, [r4, #8]
 8004032:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004034:	68a2      	ldr	r2, [r4, #8]
 8004036:	f012 0f01 	tst.w	r2, #1
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800403a:	4602      	mov	r2, r0
 800403c:	d10c      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800403e:	4dbf      	ldr	r5, [pc, #764]	; (800433c <HAL_ADC_ConfigChannel+0x364>)
 8004040:	68ce      	ldr	r6, [r1, #12]
 8004042:	42ae      	cmp	r6, r5
 8004044:	f000 80bc 	beq.w	80041c0 <HAL_ADC_ConfigChannel+0x1e8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004048:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800404c:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8004050:	ea21 0100 	bic.w	r1, r1, r0
 8004054:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004058:	49b9      	ldr	r1, [pc, #740]	; (8004340 <HAL_ADC_ConfigChannel+0x368>)
 800405a:	420a      	tst	r2, r1
 800405c:	d02a      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800405e:	49b9      	ldr	r1, [pc, #740]	; (8004344 <HAL_ADC_ConfigChannel+0x36c>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004060:	4db9      	ldr	r5, [pc, #740]	; (8004348 <HAL_ADC_ConfigChannel+0x370>)
 8004062:	6888      	ldr	r0, [r1, #8]
 8004064:	42aa      	cmp	r2, r5
 8004066:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800406a:	d01d      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0xd0>
 800406c:	4db7      	ldr	r5, [pc, #732]	; (800434c <HAL_ADC_ConfigChannel+0x374>)
 800406e:	42aa      	cmp	r2, r5
 8004070:	d01a      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004072:	4db7      	ldr	r5, [pc, #732]	; (8004350 <HAL_ADC_ConfigChannel+0x378>)
 8004074:	42aa      	cmp	r2, r5
 8004076:	f040 812d 	bne.w	80042d4 <HAL_ADC_ConfigChannel+0x2fc>
 800407a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800407e:	d119      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004080:	4ab4      	ldr	r2, [pc, #720]	; (8004354 <HAL_ADC_ConfigChannel+0x37c>)
 8004082:	4294      	cmp	r4, r2
 8004084:	d016      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004086:	688a      	ldr	r2, [r1, #8]
 8004088:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800408c:	4332      	orrs	r2, r6
 800408e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004092:	608a      	str	r2, [r1, #8]
}
 8004094:	e003      	b.n	800409e <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004098:	f042 0220 	orr.w	r2, r2, #32
 800409c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80040a4:	b003      	add	sp, #12
 80040a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040a8:	0202      	lsls	r2, r0, #8
 80040aa:	d403      	bmi.n	80040b4 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ac:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80040b0:	f000 80f1 	beq.w	8004296 <HAL_ADC_ConfigChannel+0x2be>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b4:	2000      	movs	r0, #0
 80040b6:	e7f2      	b.n	800409e <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040b8:	68a2      	ldr	r2, [r4, #8]
 80040ba:	0710      	lsls	r0, r2, #28
 80040bc:	d47e      	bmi.n	80041bc <HAL_ADC_ConfigChannel+0x1e4>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040be:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040c0:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040c2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80040c6:	f000 8119 	beq.w	80042fc <HAL_ADC_ConfigChannel+0x324>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040ca:	0dee      	lsrs	r6, r5, #23
 80040cc:	f104 0c14 	add.w	ip, r4, #20
 80040d0:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80040d4:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80040d8:	f85c 0006 	ldr.w	r0, [ip, r6]
 80040dc:	2707      	movs	r7, #7
 80040de:	40aa      	lsls	r2, r5
 80040e0:	fa07 f505 	lsl.w	r5, r7, r5
 80040e4:	ea20 0005 	bic.w	r0, r0, r5
 80040e8:	4302      	orrs	r2, r0
 80040ea:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040ee:	6962      	ldr	r2, [r4, #20]
 80040f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040f4:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040f6:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040fa:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040fc:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040fe:	d02d      	beq.n	800415c <HAL_ADC_ConfigChannel+0x184>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004100:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004104:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004108:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 800410a:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 800410e:	4f92      	ldr	r7, [pc, #584]	; (8004358 <HAL_ADC_ConfigChannel+0x380>)
 8004110:	4096      	lsls	r6, r2
 8004112:	680a      	ldr	r2, [r1, #0]
 8004114:	ea0c 0707 	and.w	r7, ip, r7
 8004118:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800411c:	433a      	orrs	r2, r7
 800411e:	4332      	orrs	r2, r6
 8004120:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004124:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004128:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800412a:	698e      	ldr	r6, [r1, #24]
 800412c:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8004130:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004134:	4332      	orrs	r2, r6
 8004136:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413a:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800413c:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 800413e:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8004142:	f1a5 0501 	sub.w	r5, r5, #1
 8004146:	fab5 f585 	clz	r5, r5
 800414a:	096d      	lsrs	r5, r5, #5
 800414c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004150:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8004154:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8004158:	6808      	ldr	r0, [r1, #0]
}
 800415a:	e76b      	b.n	8004034 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800415c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800415e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004160:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004162:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004166:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800416a:	2d00      	cmp	r5, #0
 800416c:	f040 80fc 	bne.w	8004368 <HAL_ADC_ConfigChannel+0x390>
 8004170:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004174:	42aa      	cmp	r2, r5
 8004176:	f000 8170 	beq.w	800445a <HAL_ADC_ConfigChannel+0x482>
 800417a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800417c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800417e:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004182:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004186:	f104 0764 	add.w	r7, r4, #100	; 0x64
 800418a:	42ae      	cmp	r6, r5
 800418c:	f000 8153 	beq.w	8004436 <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004190:	6896      	ldr	r6, [r2, #8]
 8004192:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004194:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004198:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800419c:	42ae      	cmp	r6, r5
 800419e:	f000 8138 	beq.w	8004412 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041a2:	68d6      	ldr	r6, [r2, #12]
 80041a4:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041aa:	f3c6 6284 	ubfx	r2, r6, #26, #5
 80041ae:	4295      	cmp	r5, r2
 80041b0:	f47f af40 	bne.w	8004034 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041ba:	603a      	str	r2, [r7, #0]
 80041bc:	6808      	ldr	r0, [r1, #0]
}
 80041be:	e739      	b.n	8004034 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 80041c0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80041c4:	f3c0 0512 	ubfx	r5, r0, #0, #19
 80041c8:	432a      	orrs	r2, r5
 80041ca:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	d051      	beq.n	8004276 <HAL_ADC_ConfigChannel+0x29e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	f000 80f7 	beq.w	80043ca <HAL_ADC_ConfigChannel+0x3f2>
  return __builtin_clz(value);
 80041dc:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	3201      	adds	r2, #1
 80041e2:	f002 021f 	and.w	r2, r2, #31
 80041e6:	2a09      	cmp	r2, #9
 80041e8:	f240 80ef 	bls.w	80043ca <HAL_ADC_ConfigChannel+0x3f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	f000 814e 	beq.w	8004492 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 80041f6:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041fa:	3501      	adds	r5, #1
 80041fc:	06ad      	lsls	r5, r5, #26
 80041fe:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004206:	2a00      	cmp	r2, #0
 8004208:	f000 8148 	beq.w	800449c <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 800420c:	fab2 f282 	clz	r2, r2
 8004210:	3201      	adds	r2, #1
 8004212:	f002 021f 	and.w	r2, r2, #31
 8004216:	2601      	movs	r6, #1
 8004218:	fa06 f202 	lsl.w	r2, r6, r2
 800421c:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004222:	2800      	cmp	r0, #0
 8004224:	f000 8138 	beq.w	8004498 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004228:	fab0 f080 	clz	r0, r0
 800422c:	3001      	adds	r0, #1
 800422e:	f000 001f 	and.w	r0, r0, #31
 8004232:	2203      	movs	r2, #3
 8004234:	f06f 061d 	mvn.w	r6, #29
 8004238:	fb12 6200 	smlabb	r2, r2, r0, r6
 800423c:	0512      	lsls	r2, r2, #20
 800423e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004242:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004244:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8004246:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004248:	f005 0504 	and.w	r5, r5, #4
 800424c:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8004250:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004254:	fa00 fc02 	lsl.w	ip, r0, r2
 8004258:	f04f 0e07 	mov.w	lr, #7
 800425c:	5970      	ldr	r0, [r6, r5]
 800425e:	fa0e f202 	lsl.w	r2, lr, r2
 8004262:	ea20 0202 	bic.w	r2, r0, r2
 8004266:	ea42 020c 	orr.w	r2, r2, ip
 800426a:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800426c:	680a      	ldr	r2, [r1, #0]
}
 800426e:	e6f3      	b.n	8004058 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8004270:	2002      	movs	r0, #2
}
 8004272:	b003      	add	sp, #12
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004276:	0e82      	lsrs	r2, r0, #26
 8004278:	3201      	adds	r2, #1
 800427a:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800427e:	2809      	cmp	r0, #9
 8004280:	d84e      	bhi.n	8004320 <HAL_ADC_ConfigChannel+0x348>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004282:	0695      	lsls	r5, r2, #26
 8004284:	2201      	movs	r2, #1
 8004286:	4082      	lsls	r2, r0
 8004288:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800428c:	4315      	orrs	r5, r2
 800428e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8004292:	0512      	lsls	r2, r2, #20
 8004294:	e7d5      	b.n	8004242 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004296:	492b      	ldr	r1, [pc, #172]	; (8004344 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004298:	4830      	ldr	r0, [pc, #192]	; (800435c <HAL_ADC_ConfigChannel+0x384>)
 800429a:	688a      	ldr	r2, [r1, #8]
 800429c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80042a0:	4332      	orrs	r2, r6
 80042a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042a6:	608a      	str	r2, [r1, #8]
 80042a8:	6802      	ldr	r2, [r0, #0]
 80042aa:	492d      	ldr	r1, [pc, #180]	; (8004360 <HAL_ADC_ConfigChannel+0x388>)
 80042ac:	0992      	lsrs	r2, r2, #6
 80042ae:	fba1 1202 	umull	r1, r2, r1, r2
 80042b2:	0992      	lsrs	r2, r2, #6
 80042b4:	3201      	adds	r2, #1
 80042b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80042be:	9a01      	ldr	r2, [sp, #4]
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	f43f aef7 	beq.w	80040b4 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 80042c6:	9a01      	ldr	r2, [sp, #4]
 80042c8:	3a01      	subs	r2, #1
 80042ca:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80042cc:	9a01      	ldr	r2, [sp, #4]
 80042ce:	2a00      	cmp	r2, #0
 80042d0:	d1f9      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x2ee>
 80042d2:	e6ef      	b.n	80040b4 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042d4:	4d23      	ldr	r5, [pc, #140]	; (8004364 <HAL_ADC_ConfigChannel+0x38c>)
 80042d6:	42aa      	cmp	r2, r5
 80042d8:	f47f aeec 	bne.w	80040b4 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042dc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80042e0:	f47f aee8 	bne.w	80040b4 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_ADC_ConfigChannel+0x37c>)
 80042e6:	4294      	cmp	r4, r2
 80042e8:	f43f aee4 	beq.w	80040b4 <HAL_ADC_ConfigChannel+0xdc>
 80042ec:	688a      	ldr	r2, [r1, #8]
 80042ee:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80042f2:	4332      	orrs	r2, r6
 80042f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80042f8:	608a      	str	r2, [r1, #8]
}
 80042fa:	e6d0      	b.n	800409e <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042fc:	0dea      	lsrs	r2, r5, #23
 80042fe:	f002 0204 	and.w	r2, r2, #4
 8004302:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 8004306:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800430a:	2607      	movs	r6, #7
 800430c:	40ae      	lsls	r6, r5
 800430e:	5885      	ldr	r5, [r0, r2]
 8004310:	ea25 0506 	bic.w	r5, r5, r6
 8004314:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004316:	6962      	ldr	r2, [r4, #20]
 8004318:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800431c:	6162      	str	r2, [r4, #20]
}
 800431e:	e6ea      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x11e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004320:	0695      	lsls	r5, r2, #26
 8004322:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8004326:	3a1e      	subs	r2, #30
 8004328:	2601      	movs	r6, #1
 800432a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800432e:	0512      	lsls	r2, r2, #20
 8004330:	fa06 f000 	lsl.w	r0, r6, r0
 8004334:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004338:	4305      	orrs	r5, r0
 800433a:	e782      	b.n	8004242 <HAL_ADC_ConfigChannel+0x26a>
 800433c:	407f0000 	.word	0x407f0000
 8004340:	80080000 	.word	0x80080000
 8004344:	50000300 	.word	0x50000300
 8004348:	c3210000 	.word	0xc3210000
 800434c:	90c00010 	.word	0x90c00010
 8004350:	c7520000 	.word	0xc7520000
 8004354:	50000100 	.word	0x50000100
 8004358:	03fff000 	.word	0x03fff000
 800435c:	20000368 	.word	0x20000368
 8004360:	053e2d63 	.word	0x053e2d63
 8004364:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800436c:	b11d      	cbz	r5, 8004376 <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 800436e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004372:	42aa      	cmp	r2, r5
 8004374:	d071      	beq.n	800445a <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004378:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800437a:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800437e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004382:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800438a:	b11d      	cbz	r5, 8004394 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800438c:	fab5 f585 	clz	r5, r5
 8004390:	42ae      	cmp	r6, r5
 8004392:	d050      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004394:	6895      	ldr	r5, [r2, #8]
 8004396:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004398:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800439c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80043a4:	b11d      	cbz	r5, 80043ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80043a6:	fab5 f585 	clz	r5, r5
 80043aa:	42ae      	cmp	r6, r5
 80043ac:	d031      	beq.n	8004412 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043ae:	68d5      	ldr	r5, [r2, #12]
 80043b0:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b2:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043b6:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80043be:	2d00      	cmp	r5, #0
 80043c0:	f43f ae38 	beq.w	8004034 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 80043c4:	fab5 f585 	clz	r5, r5
 80043c8:	e6f1      	b.n	80041ae <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	d059      	beq.n	8004486 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 80043d2:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043d6:	3501      	adds	r5, #1
 80043d8:	06ad      	lsls	r5, r5, #26
 80043da:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	d04d      	beq.n	8004482 <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 80043e6:	fab2 f282 	clz	r2, r2
 80043ea:	3201      	adds	r2, #1
 80043ec:	f002 021f 	and.w	r2, r2, #31
 80043f0:	2601      	movs	r6, #1
 80043f2:	fa06 f202 	lsl.w	r2, r6, r2
 80043f6:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d045      	beq.n	800448c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004400:	fab0 f280 	clz	r2, r0
 8004404:	3201      	adds	r2, #1
 8004406:	f002 021f 	and.w	r2, r2, #31
 800440a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800440e:	0512      	lsls	r2, r2, #20
 8004410:	e717      	b.n	8004242 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(*preg,
 8004412:	6838      	ldr	r0, [r7, #0]
 8004414:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004418:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800441a:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800441c:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800441e:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004422:	68d2      	ldr	r2, [r2, #12]
 8004424:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004428:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800442c:	2d00      	cmp	r5, #0
 800442e:	d1c4      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x3e2>
 8004430:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004434:	e6bb      	b.n	80041ae <HAL_ADC_ConfigChannel+0x1d6>
  MODIFY_REG(*preg,
 8004436:	6838      	ldr	r0, [r7, #0]
 8004438:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800443c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800443e:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	6896      	ldr	r6, [r2, #8]
 8004444:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004448:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800444c:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004450:	2d00      	cmp	r5, #0
 8004452:	d1a5      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x3c8>
 8004454:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004458:	e6a0      	b.n	800419c <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(*preg,
 800445a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800445c:	4622      	mov	r2, r4
 800445e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004462:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004466:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004468:	6808      	ldr	r0, [r1, #0]
 800446a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800446c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004470:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004474:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004478:	2d00      	cmp	r5, #0
 800447a:	d184      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x3ae>
 800447c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004480:	e683      	b.n	800418a <HAL_ADC_ConfigChannel+0x1b2>
 8004482:	2202      	movs	r2, #2
 8004484:	e7b7      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x41e>
 8004486:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800448a:	e7a8      	b.n	80043de <HAL_ADC_ConfigChannel+0x406>
 800448c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004490:	e6d7      	b.n	8004242 <HAL_ADC_ConfigChannel+0x26a>
 8004492:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004496:	e6b4      	b.n	8004202 <HAL_ADC_ConfigChannel+0x22a>
 8004498:	4a01      	ldr	r2, [pc, #4]	; (80044a0 <HAL_ADC_ConfigChannel+0x4c8>)
 800449a:	e6d2      	b.n	8004242 <HAL_ADC_ConfigChannel+0x26a>
 800449c:	2202      	movs	r2, #2
 800449e:	e6bd      	b.n	800421c <HAL_ADC_ConfigChannel+0x244>
 80044a0:	fe500000 	.word	0xfe500000

080044a4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044a6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 80044aa:	4602      	mov	r2, r0
 80044ac:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80044ae:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80044b0:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80044b2:	9001      	str	r0, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044b4:	6950      	ldr	r0, [r2, #20]
  __HAL_LOCK(hadc);
 80044b6:	f000 8162 	beq.w	800477e <HAL_ADCEx_InjectedConfigChannel+0x2da>
 80044ba:	2301      	movs	r3, #1
 80044bc:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80044c0:	b1e8      	cbz	r0, 80044fe <HAL_ADCEx_InjectedConfigChannel+0x5a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80044c2:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d01a      	beq.n	80044fe <HAL_ADCEx_InjectedConfigChannel+0x5a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80044c8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80044ca:	2800      	cmp	r0, #0
 80044cc:	f040 8115 	bne.w	80046fa <HAL_ADCEx_InjectedConfigChannel+0x256>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80044d0:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f000 821e 	beq.w	8004914 <HAL_ADCEx_InjectedConfigChannel+0x470>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80044d8:	1e5e      	subs	r6, r3, #1
 80044da:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80044dc:	f000 007c 	and.w	r0, r0, #124	; 0x7c
 80044e0:	4330      	orrs	r0, r6
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80044e2:	ea40 0304 	orr.w	r3, r0, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80044e6:	e9d1 4500 	ldrd	r4, r5, [r1]
 80044ea:	f005 051f 	and.w	r5, r5, #31
 80044ee:	f3c4 6084 	ubfx	r0, r4, #26, #5
 80044f2:	40a8      	lsls	r0, r5
    hadc->InjectionConfig.ChannelCount--;

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80044f4:	4318      	orrs	r0, r3
    hadc->InjectionConfig.ChannelCount--;
 80044f6:	6696      	str	r6, [r2, #104]	; 0x68

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80044f8:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80044fa:	6650      	str	r0, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80044fc:	e005      	b.n	800450a <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80044fe:	684b      	ldr	r3, [r1, #4]
 8004500:	2b09      	cmp	r3, #9
 8004502:	f000 80e6 	beq.w	80046d2 <HAL_ADCEx_InjectedConfigChannel+0x22e>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004506:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004508:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800450a:	6898      	ldr	r0, [r3, #8]
 800450c:	0707      	lsls	r7, r0, #28
 800450e:	d410      	bmi.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004510:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004514:	2800      	cmp	r0, #0
 8004516:	f040 80d3 	bne.w	80046c0 <HAL_ADCEx_InjectedConfigChannel+0x21c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800451a:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800451e:	68dd      	ldr	r5, [r3, #12]
 8004520:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004524:	0500      	lsls	r0, r0, #20
 8004526:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800452a:	ea40 5046 	orr.w	r0, r0, r6, lsl #21
 800452e:	4328      	orrs	r0, r5
 8004530:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004532:	6898      	ldr	r0, [r3, #8]
 8004534:	f010 0004 	ands.w	r0, r0, #4
 8004538:	d056      	beq.n	80045e8 <HAL_ADCEx_InjectedConfigChannel+0x144>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800453a:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800453c:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800453e:	689d      	ldr	r5, [r3, #8]
 8004540:	07ee      	lsls	r6, r5, #31
 8004542:	d40c      	bmi.n	800455e <HAL_ADCEx_InjectedConfigChannel+0xba>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004544:	4da9      	ldr	r5, [pc, #676]	; (80047ec <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004546:	68ce      	ldr	r6, [r1, #12]
 8004548:	42ae      	cmp	r6, r5
 800454a:	f000 80fb 	beq.w	8004744 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    CLEAR_BIT(ADCx->DIFSEL,
 800454e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004552:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8004556:	ea21 0105 	bic.w	r1, r1, r5
 800455a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800455e:	49a4      	ldr	r1, [pc, #656]	; (80047f0 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004560:	420c      	tst	r4, r1
 8004562:	d019      	beq.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004564:	4ea3      	ldr	r6, [pc, #652]	; (80047f4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004566:	4da4      	ldr	r5, [pc, #656]	; (80047f8 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004568:	68b1      	ldr	r1, [r6, #8]
 800456a:	42ac      	cmp	r4, r5
 800456c:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004570:	d017      	beq.n	80045a2 <HAL_ADCEx_InjectedConfigChannel+0xfe>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004572:	4da2      	ldr	r5, [pc, #648]	; (80047fc <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004574:	42ac      	cmp	r4, r5
 8004576:	d014      	beq.n	80045a2 <HAL_ADCEx_InjectedConfigChannel+0xfe>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004578:	4da1      	ldr	r5, [pc, #644]	; (8004800 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 800457a:	42ac      	cmp	r4, r5
 800457c:	f040 8106 	bne.w	800478c <HAL_ADCEx_InjectedConfigChannel+0x2e8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004580:	01cd      	lsls	r5, r1, #7
 8004582:	d409      	bmi.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004584:	499f      	ldr	r1, [pc, #636]	; (8004804 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004586:	428b      	cmp	r3, r1
 8004588:	d006      	beq.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800458a:	68b3      	ldr	r3, [r6, #8]
 800458c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004590:	433b      	orrs	r3, r7
 8004592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004596:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004598:	2300      	movs	r3, #0
 800459a:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800459e:	b003      	add	sp, #12
 80045a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045a2:	0209      	lsls	r1, r1, #8
 80045a4:	d4f8      	bmi.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045aa:	d1f5      	bne.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
 80045ac:	4991      	ldr	r1, [pc, #580]	; (80047f4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80045ae:	4c96      	ldr	r4, [pc, #600]	; (8004808 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 80045b0:	688b      	ldr	r3, [r1, #8]
 80045b2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80045b6:	433b      	orrs	r3, r7
 80045b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045bc:	608b      	str	r3, [r1, #8]
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	4992      	ldr	r1, [pc, #584]	; (800480c <HAL_ADCEx_InjectedConfigChannel+0x368>)
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	fba1 1303 	umull	r1, r3, r1, r3
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	3318      	adds	r3, #24
 80045d2:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0de      	beq.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
          wait_loop_index--;
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	3b01      	subs	r3, #1
 80045de:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f9      	bne.n	80045da <HAL_ADCEx_InjectedConfigChannel+0x136>
 80045e6:	e7d7      	b.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045e8:	689d      	ldr	r5, [r3, #8]
 80045ea:	f015 0508 	ands.w	r5, r5, #8
 80045ee:	d1a6      	bne.n	800453e <HAL_ADCEx_InjectedConfigChannel+0x9a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80045f0:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80045f2:	2800      	cmp	r0, #0
 80045f4:	f040 8097 	bne.w	8004726 <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80045f8:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80045fc:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80045fe:	68d8      	ldr	r0, [r3, #12]
 8004600:	bf0c      	ite	eq
 8004602:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004606:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 800460a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800460e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004612:	2d01      	cmp	r5, #1
 8004614:	f000 80df 	beq.w	80047d6 <HAL_ADCEx_InjectedConfigChannel+0x332>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004618:	691d      	ldr	r5, [r3, #16]
 800461a:	f025 0502 	bic.w	r5, r5, #2
 800461e:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004620:	688d      	ldr	r5, [r1, #8]
 8004622:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004626:	f000 80c4 	beq.w	80047b2 <HAL_ADCEx_InjectedConfigChannel+0x30e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800462a:	0de6      	lsrs	r6, r4, #23
 800462c:	f006 0604 	and.w	r6, r6, #4
 8004630:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004634:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004638:	2707      	movs	r7, #7
 800463a:	40a5      	lsls	r5, r4
 800463c:	40a7      	lsls	r7, r4
 800463e:	f85c 4006 	ldr.w	r4, [ip, r6]
 8004642:	ea24 0407 	bic.w	r4, r4, r7
 8004646:	432c      	orrs	r4, r5
 8004648:	f84c 4006 	str.w	r4, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800464c:	695c      	ldr	r4, [r3, #20]
 800464e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004652:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004654:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
 8004658:	2e04      	cmp	r6, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800465a:	68dc      	ldr	r4, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800465c:	f000 80de 	beq.w	800481c <HAL_ADCEx_InjectedConfigChannel+0x378>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004660:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8004664:	0064      	lsls	r4, r4, #1
 8004666:	fa05 fc04 	lsl.w	ip, r5, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800466a:	f103 0560 	add.w	r5, r3, #96	; 0x60
  MODIFY_REG(*preg,
 800466e:	680c      	ldr	r4, [r1, #0]
 8004670:	f855 e026 	ldr.w	lr, [r5, r6, lsl #2]
 8004674:	4f66      	ldr	r7, [pc, #408]	; (8004810 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004676:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800467a:	ea0e 0707 	and.w	r7, lr, r7
 800467e:	433c      	orrs	r4, r7
 8004680:	ea44 040c 	orr.w	r4, r4, ip
 8004684:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004688:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800468c:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800468e:	698e      	ldr	r6, [r1, #24]
 8004690:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004694:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004698:	4334      	orrs	r4, r6
 800469a:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800469e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80046a0:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 80046a2:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80046a6:	f1a6 0601 	sub.w	r6, r6, #1
 80046aa:	fab6 f686 	clz	r6, r6
 80046ae:	0976      	lsrs	r6, r6, #5
 80046b0:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80046b4:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 80046b8:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80046bc:	680c      	ldr	r4, [r1, #0]
}
 80046be:	e73e      	b.n	800453e <HAL_ADCEx_InjectedConfigChannel+0x9a>
      MODIFY_REG(hadc->Instance->CFGR,
 80046c0:	68d8      	ldr	r0, [r3, #12]
 80046c2:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 80046c6:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80046ca:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 80046ce:	60d8      	str	r0, [r3, #12]
 80046d0:	e72f      	b.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80046d2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046d4:	680c      	ldr	r4, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d054      	beq.n	8004784 <HAL_ADCEx_InjectedConfigChannel+0x2e0>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046da:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80046dc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046e0:	0c65      	lsrs	r5, r4, #17
 80046e2:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80046e6:	4303      	orrs	r3, r0
 80046e8:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	4e49      	ldr	r6, [pc, #292]	; (8004814 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 80046ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80046f0:	4030      	ands	r0, r6
 80046f2:	4328      	orrs	r0, r5
 80046f4:	64d8      	str	r0, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80046f6:	6655      	str	r5, [r2, #100]	; 0x64
 80046f8:	e707      	b.n	800450a <HAL_ADCEx_InjectedConfigChannel+0x66>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80046fa:	680c      	ldr	r4, [r1, #0]
 80046fc:	684b      	ldr	r3, [r1, #4]
 80046fe:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004708:	6e53      	ldr	r3, [r2, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 800470a:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800470c:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 800470e:	6690      	str	r0, [r2, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004710:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004712:	6655      	str	r5, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004714:	2800      	cmp	r0, #0
 8004716:	f47f aef8 	bne.w	800450a <HAL_ADCEx_InjectedConfigChannel+0x66>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800471a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800471c:	4e3d      	ldr	r6, [pc, #244]	; (8004814 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 800471e:	4030      	ands	r0, r6
 8004720:	4328      	orrs	r0, r5
 8004722:	64d8      	str	r0, [r3, #76]	; 0x4c
 8004724:	e6f1      	b.n	800450a <HAL_ADCEx_InjectedConfigChannel+0x66>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004726:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8004728:	2800      	cmp	r0, #0
 800472a:	f43f af65 	beq.w	80045f8 <HAL_ADCEx_InjectedConfigChannel+0x154>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800472e:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004732:	2801      	cmp	r0, #1
 8004734:	f000 8156 	beq.w	80049e4 <HAL_ADCEx_InjectedConfigChannel+0x540>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004738:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800473a:	68dd      	ldr	r5, [r3, #12]
 800473c:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004740:	60dd      	str	r5, [r3, #12]
 8004742:	e764      	b.n	800460e <HAL_ADCEx_InjectedConfigChannel+0x16a>
    SET_BIT(ADCx->DIFSEL,
 8004744:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004748:	f3c4 0612 	ubfx	r6, r4, #0, #19
 800474c:	4335      	orrs	r5, r6
 800474e:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004752:	2e00      	cmp	r6, #0
 8004754:	f040 80a7 	bne.w	80048a6 <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004758:	0ea4      	lsrs	r4, r4, #26
 800475a:	3401      	adds	r4, #1
 800475c:	f004 0c1f 	and.w	ip, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004760:	f1bc 0f09 	cmp.w	ip, #9
 8004764:	f200 80d9 	bhi.w	800491a <HAL_ADCEx_InjectedConfigChannel+0x476>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004768:	06a5      	lsls	r5, r4, #26
 800476a:	2401      	movs	r4, #1
 800476c:	fa04 f40c 	lsl.w	r4, r4, ip
 8004770:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004774:	4325      	orrs	r5, r4
 8004776:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800477a:	0524      	lsls	r4, r4, #20
 800477c:	e0da      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x490>
  __HAL_LOCK(hadc);
 800477e:	2002      	movs	r0, #2
}
 8004780:	b003      	add	sp, #12
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004784:	0c65      	lsrs	r5, r4, #17
 8004786:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800478a:	e7ae      	b.n	80046ea <HAL_ADCEx_InjectedConfigChannel+0x246>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800478c:	4d22      	ldr	r5, [pc, #136]	; (8004818 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 800478e:	42ac      	cmp	r4, r5
 8004790:	f47f af02 	bne.w	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004794:	024c      	lsls	r4, r1, #9
 8004796:	f53f aeff 	bmi.w	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_VREFINT_INSTANCE(hadc))
 800479a:	491a      	ldr	r1, [pc, #104]	; (8004804 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 800479c:	428b      	cmp	r3, r1
 800479e:	f43f aefb 	beq.w	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047a2:	68b3      	ldr	r3, [r6, #8]
 80047a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80047a8:	433b      	orrs	r3, r7
 80047aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ae:	60b3      	str	r3, [r6, #8]
}
 80047b0:	e6f2      	b.n	8004598 <HAL_ADCEx_InjectedConfigChannel+0xf4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80047b2:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80047b4:	f3c4 5604 	ubfx	r6, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80047b8:	f005 0504 	and.w	r5, r5, #4
 80047bc:	f103 0414 	add.w	r4, r3, #20
  MODIFY_REG(*preg,
 80047c0:	2707      	movs	r7, #7
 80047c2:	40b7      	lsls	r7, r6
 80047c4:	5966      	ldr	r6, [r4, r5]
 80047c6:	ea26 0607 	bic.w	r6, r6, r7
 80047ca:	5166      	str	r6, [r4, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047cc:	695c      	ldr	r4, [r3, #20]
 80047ce:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80047d2:	615c      	str	r4, [r3, #20]
}
 80047d4:	e73e      	b.n	8004654 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      MODIFY_REG(hadc->Instance->CFGR2,
 80047d6:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	; 0x34
 80047da:	691e      	ldr	r6, [r3, #16]
 80047dc:	433d      	orrs	r5, r7
 80047de:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 80047e2:	4335      	orrs	r5, r6
 80047e4:	f045 0502 	orr.w	r5, r5, #2
 80047e8:	611d      	str	r5, [r3, #16]
 80047ea:	e719      	b.n	8004620 <HAL_ADCEx_InjectedConfigChannel+0x17c>
 80047ec:	407f0000 	.word	0x407f0000
 80047f0:	80080000 	.word	0x80080000
 80047f4:	50000300 	.word	0x50000300
 80047f8:	c3210000 	.word	0xc3210000
 80047fc:	90c00010 	.word	0x90c00010
 8004800:	c7520000 	.word	0xc7520000
 8004804:	50000100 	.word	0x50000100
 8004808:	20000368 	.word	0x20000368
 800480c:	053e2d63 	.word	0x053e2d63
 8004810:	03fff000 	.word	0x03fff000
 8004814:	04104000 	.word	0x04104000
 8004818:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800481c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800481e:	680c      	ldr	r4, [r1, #0]
 8004820:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004822:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004826:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800482a:	2e00      	cmp	r6, #0
 800482c:	f000 809a 	beq.w	8004964 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004834:	b126      	cbz	r6, 8004840 <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 8004836:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800483a:	42b5      	cmp	r5, r6
 800483c:	f000 80d7 	beq.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x54a>
 8004840:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004842:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004844:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004848:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800484c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004854:	b126      	cbz	r6, 8004860 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004856:	fab6 f686 	clz	r6, r6
 800485a:	42b7      	cmp	r7, r6
 800485c:	f000 80dc 	beq.w	8004a18 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004860:	68ae      	ldr	r6, [r5, #8]
 8004862:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004864:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004868:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004870:	b126      	cbz	r6, 800487c <HAL_ADCEx_InjectedConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004872:	fab6 f686 	clz	r6, r6
 8004876:	42b7      	cmp	r7, r6
 8004878:	f000 80e3 	beq.w	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800487c:	68ee      	ldr	r6, [r5, #12]
 800487e:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004880:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004882:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800488a:	2e00      	cmp	r6, #0
 800488c:	f43f ae57 	beq.w	800453e <HAL_ADCEx_InjectedConfigChannel+0x9a>
  return __builtin_clz(value);
 8004890:	fab6 f686 	clz	r6, r6
 8004894:	42be      	cmp	r6, r7
 8004896:	f47f ae52 	bne.w	800453e <HAL_ADCEx_InjectedConfigChannel+0x9a>
  MODIFY_REG(*preg,
 800489a:	682c      	ldr	r4, [r5, #0]
 800489c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80048a0:	602c      	str	r4, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80048a2:	680c      	ldr	r4, [r1, #0]
}
 80048a4:	e64b      	b.n	800453e <HAL_ADCEx_InjectedConfigChannel+0x9a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	d076      	beq.n	800499c <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 80048ae:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b2:	3501      	adds	r5, #1
 80048b4:	f005 051f 	and.w	r5, r5, #31
 80048b8:	2d09      	cmp	r5, #9
 80048ba:	d96f      	bls.n	800499c <HAL_ADCEx_InjectedConfigChannel+0x4f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	f000 80de 	beq.w	8004a82 <HAL_ADCEx_InjectedConfigChannel+0x5de>
  return __builtin_clz(value);
 80048c6:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80048ca:	3501      	adds	r5, #1
 80048cc:	06ad      	lsls	r5, r5, #26
 80048ce:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	f000 80d1 	beq.w	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x5da>
  return __builtin_clz(value);
 80048dc:	fab6 f686 	clz	r6, r6
 80048e0:	3601      	adds	r6, #1
 80048e2:	f006 061f 	and.w	r6, r6, #31
 80048e6:	2701      	movs	r7, #1
 80048e8:	fa07 f606 	lsl.w	r6, r7, r6
 80048ec:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80048f2:	2c00      	cmp	r4, #0
 80048f4:	f000 80c1 	beq.w	8004a7a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80048f8:	fab4 f484 	clz	r4, r4
 80048fc:	1c66      	adds	r6, r4, #1
 80048fe:	f006 061f 	and.w	r6, r6, #31
 8004902:	2403      	movs	r4, #3
 8004904:	f06f 071d 	mvn.w	r7, #29
 8004908:	fb14 7406 	smlabb	r4, r4, r6, r7
 800490c:	0524      	lsls	r4, r4, #20
 800490e:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004912:	e00f      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x490>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004914:	3b01      	subs	r3, #1
 8004916:	461e      	mov	r6, r3
 8004918:	e5e5      	b.n	80044e6 <HAL_ADCEx_InjectedConfigChannel+0x42>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800491a:	06a5      	lsls	r5, r4, #26
 800491c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004920:	3c1e      	subs	r4, #30
 8004922:	2601      	movs	r6, #1
 8004924:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004928:	0524      	lsls	r4, r4, #20
 800492a:	fa06 f60c 	lsl.w	r6, r6, ip
 800492e:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004932:	4335      	orrs	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004934:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004936:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800493a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800493c:	f00c 0c04 	and.w	ip, ip, #4
 8004940:	f103 0e14 	add.w	lr, r3, #20
  MODIFY_REG(*preg,
 8004944:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004948:	fa05 f604 	lsl.w	r6, r5, r4
 800494c:	2707      	movs	r7, #7
 800494e:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004952:	fa07 f404 	lsl.w	r4, r7, r4
 8004956:	ea25 0404 	bic.w	r4, r5, r4
 800495a:	4334      	orrs	r4, r6
 800495c:	f84e 400c 	str.w	r4, [lr, ip]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004960:	680c      	ldr	r4, [r1, #0]
}
 8004962:	e5fc      	b.n	800455e <HAL_ADCEx_InjectedConfigChannel+0xba>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004964:	f3c4 6684 	ubfx	r6, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004968:	42b5      	cmp	r5, r6
 800496a:	d040      	beq.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x54a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800496c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800496e:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004970:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004974:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004978:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 800497c:	42b7      	cmp	r7, r6
 800497e:	d04b      	beq.n	8004a18 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004980:	68af      	ldr	r7, [r5, #8]
 8004982:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004984:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004988:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800498c:	42b7      	cmp	r7, r6
 800498e:	d058      	beq.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004990:	68ef      	ldr	r7, [r5, #12]
 8004992:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004994:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004996:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800499a:	e77b      	b.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	d064      	beq.n	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80049a4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80049a8:	3501      	adds	r5, #1
 80049aa:	06ad      	lsls	r5, r5, #26
 80049ac:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80049b4:	2e00      	cmp	r6, #0
 80049b6:	d058      	beq.n	8004a6a <HAL_ADCEx_InjectedConfigChannel+0x5c6>
  return __builtin_clz(value);
 80049b8:	fab6 f686 	clz	r6, r6
 80049bc:	3601      	adds	r6, #1
 80049be:	f006 061f 	and.w	r6, r6, #31
 80049c2:	2701      	movs	r7, #1
 80049c4:	fa07 f606 	lsl.w	r6, r7, r6
 80049c8:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80049ce:	2c00      	cmp	r4, #0
 80049d0:	d050      	beq.n	8004a74 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
  return __builtin_clz(value);
 80049d2:	fab4 f484 	clz	r4, r4
 80049d6:	3401      	adds	r4, #1
 80049d8:	f004 041f 	and.w	r4, r4, #31
 80049dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80049e0:	0524      	lsls	r4, r4, #20
 80049e2:	e7a7      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x490>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e4:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
 80049e6:	f045 0520 	orr.w	r5, r5, #32
 80049ea:	65d5      	str	r5, [r2, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80049ec:	e60f      	b.n	800460e <HAL_ADCEx_InjectedConfigChannel+0x16a>
  MODIFY_REG(*preg,
 80049ee:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80049f0:	461d      	mov	r5, r3
 80049f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80049f6:	f845 4f60 	str.w	r4, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049fa:	6e5c      	ldr	r4, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049fc:	680c      	ldr	r4, [r1, #0]
 80049fe:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004a00:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a04:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a08:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a0c:	2e00      	cmp	r6, #0
 8004a0e:	f47f af1f 	bne.w	8004850 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
 8004a12:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004a16:	e7b1      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x4d8>
  MODIFY_REG(*preg,
 8004a18:	f8dc 4000 	ldr.w	r4, [ip]
 8004a1c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004a20:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a24:	68ac      	ldr	r4, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a26:	680c      	ldr	r4, [r1, #0]
 8004a28:	68af      	ldr	r7, [r5, #8]
 8004a2a:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a2e:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a32:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	f47f af18 	bne.w	800486c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8004a3c:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004a40:	e7a4      	b.n	800498c <HAL_ADCEx_InjectedConfigChannel+0x4e8>
  MODIFY_REG(*preg,
 8004a42:	f8dc 4000 	ldr.w	r4, [ip]
 8004a46:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004a4a:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a4e:	68ec      	ldr	r4, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a50:	680c      	ldr	r4, [r1, #0]
 8004a52:	68ef      	ldr	r7, [r5, #12]
 8004a54:	f3c4 0612 	ubfx	r6, r4, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a58:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a5a:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	f47f af11 	bne.w	8004886 <HAL_ADCEx_InjectedConfigChannel+0x3e2>
 8004a64:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004a68:	e714      	b.n	8004894 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
 8004a6a:	2602      	movs	r6, #2
 8004a6c:	e7ac      	b.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x524>
 8004a6e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004a72:	e79d      	b.n	80049b0 <HAL_ADCEx_InjectedConfigChannel+0x50c>
 8004a74:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8004a78:	e75c      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8004a7a:	4c03      	ldr	r4, [pc, #12]	; (8004a88 <HAL_ADCEx_InjectedConfigChannel+0x5e4>)
 8004a7c:	e75a      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8004a7e:	2602      	movs	r6, #2
 8004a80:	e734      	b.n	80048ec <HAL_ADCEx_InjectedConfigChannel+0x448>
 8004a82:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004a86:	e724      	b.n	80048d2 <HAL_ADCEx_InjectedConfigChannel+0x42e>
 8004a88:	fe500000 	.word	0xfe500000

08004a8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a8e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a92:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8004a94:	2a01      	cmp	r2, #1
{
 8004a96:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8004a98:	d047      	beq.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a9a:	6804      	ldr	r4, [r0, #0]
 8004a9c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004a9e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004aa0:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004aa2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004aa6:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004aa8:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004aac:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004aae:	d007      	beq.n	8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ab2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab6:	f041 0120 	orr.w	r1, r1, #32
 8004aba:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004abc:	b01d      	add	sp, #116	; 0x74
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ac0:	4d26      	ldr	r5, [pc, #152]	; (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8004ac2:	68aa      	ldr	r2, [r5, #8]
 8004ac4:	0752      	lsls	r2, r2, #29
 8004ac6:	d50a      	bpl.n	8004ade <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ac8:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004acc:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8004ad0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004ada:	b01d      	add	sp, #116	; 0x74
 8004adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ade:	68a0      	ldr	r0, [r4, #8]
 8004ae0:	f010 0004 	ands.w	r0, r0, #4
 8004ae4:	d1f1      	bne.n	8004aca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ae6:	b31e      	cbz	r6, 8004b30 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ae8:	f8df e074 	ldr.w	lr, [pc, #116]	; 8004b60 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8004aec:	684f      	ldr	r7, [r1, #4]
 8004aee:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004af2:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004afa:	433a      	orrs	r2, r7
 8004afc:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8004b00:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b04:	68a2      	ldr	r2, [r4, #8]
 8004b06:	07d4      	lsls	r4, r2, #31
 8004b08:	d426      	bmi.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8004b0a:	68a8      	ldr	r0, [r5, #8]
 8004b0c:	f010 0001 	ands.w	r0, r0, #1
 8004b10:	d119      	bne.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8004b12:	688a      	ldr	r2, [r1, #8]
 8004b14:	f8de 1008 	ldr.w	r1, [lr, #8]
 8004b18:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8004b1c:	4332      	orrs	r2, r6
 8004b1e:	f021 010f 	bic.w	r1, r1, #15
 8004b22:	430a      	orrs	r2, r1
 8004b24:	f8ce 2008 	str.w	r2, [lr, #8]
 8004b28:	e7d4      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8004b2a:	2002      	movs	r0, #2
}
 8004b2c:	b01d      	add	sp, #116	; 0x74
 8004b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b30:	490b      	ldr	r1, [pc, #44]	; (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8004b32:	688a      	ldr	r2, [r1, #8]
 8004b34:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b38:	608a      	str	r2, [r1, #8]
 8004b3a:	68a2      	ldr	r2, [r4, #8]
 8004b3c:	68a8      	ldr	r0, [r5, #8]
 8004b3e:	4310      	orrs	r0, r2
 8004b40:	f010 0001 	ands.w	r0, r0, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b46:	2000      	movs	r0, #0
 8004b48:	e7c4      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b4a:	688a      	ldr	r2, [r1, #8]
 8004b4c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004b50:	f022 020f 	bic.w	r2, r2, #15
 8004b54:	608a      	str	r2, [r1, #8]
 8004b56:	e7bd      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8004b58:	68aa      	ldr	r2, [r5, #8]
 8004b5a:	e7bb      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8004b5c:	50000100 	.word	0x50000100
 8004b60:	50000300 	.word	0x50000300

08004b64 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004b66:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b68:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b72:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b74:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b76:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004b7e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <HAL_NVIC_SetPriority+0x74>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b92:	f1c3 0e07 	rsb	lr, r3, #7
 8004b96:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b9a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b9e:	bf28      	it	cs
 8004ba0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba4:	f1bc 0f06 	cmp.w	ip, #6
 8004ba8:	d91b      	bls.n	8004be2 <HAL_NVIC_SetPriority+0x5a>
 8004baa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bac:	f04f 3cff 	mov.w	ip, #4294967295
 8004bb0:	fa0c fc03 	lsl.w	ip, ip, r3
 8004bb4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	f04f 3cff 	mov.w	ip, #4294967295
 8004bbc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004bc0:	ea21 010c 	bic.w	r1, r1, ip
 8004bc4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	db0c      	blt.n	8004be8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004bd2:	0109      	lsls	r1, r1, #4
 8004bd4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004bd8:	b2c9      	uxtb	r1, r1
 8004bda:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004be2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be4:	4613      	mov	r3, r2
 8004be6:	e7e7      	b.n	8004bb8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_NVIC_SetPriority+0x78>)
 8004bea:	f000 000f 	and.w	r0, r0, #15
 8004bee:	0109      	lsls	r1, r1, #4
 8004bf0:	4403      	add	r3, r0
 8004bf2:	b2c9      	uxtb	r1, r1
 8004bf4:	7619      	strb	r1, [r3, #24]
 8004bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bfa:	bf00      	nop
 8004bfc:	e000ed00 	.word	0xe000ed00
 8004c00:	e000ecfc 	.word	0xe000ecfc

08004c04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c04:	2800      	cmp	r0, #0
 8004c06:	db07      	blt.n	8004c18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_NVIC_EnableIRQ+0x18>)
 8004c0a:	0941      	lsrs	r1, r0, #5
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f000 001f 	and.w	r0, r0, #31
 8004c12:	4083      	lsls	r3, r0
 8004c14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000e100 	.word	0xe000e100

08004c20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c20:	3801      	subs	r0, #1
 8004c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c26:	d210      	bcs.n	8004c4a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c28:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2e:	4c08      	ldr	r4, [pc, #32]	; (8004c50 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c30:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004c36:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c3a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c3c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c3e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c40:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004c42:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c46:	6119      	str	r1, [r3, #16]
 8004c48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <HAL_SYSTICK_IRQHandler>:
{
 8004c58:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004c5a:	f7ff fffb 	bl	8004c54 <HAL_SYSTICK_Callback>
}
 8004c5e:	bd08      	pop	{r3, pc}

08004c60 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d078      	beq.n	8004d56 <HAL_DMA_Init+0xf6>
{
 8004c64:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_DMA_Init+0xfc>)
 8004c68:	6804      	ldr	r4, [r0, #0]
 8004c6a:	429c      	cmp	r4, r3
 8004c6c:	d95f      	bls.n	8004d2e <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <HAL_DMA_Init+0x100>)
 8004c70:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8004c72:	493d      	ldr	r1, [pc, #244]	; (8004d68 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c74:	4422      	add	r2, r4
 8004c76:	fba3 3202 	umull	r3, r2, r3, r2
 8004c7a:	0912      	lsrs	r2, r2, #4
 8004c7c:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c7e:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c80:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c82:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8004c86:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c88:	4e36      	ldr	r6, [pc, #216]	; (8004d64 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c8a:	4f34      	ldr	r7, [pc, #208]	; (8004d5c <HAL_DMA_Init+0xfc>)
 8004c8c:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c90:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8004c92:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6941      	ldr	r1, [r0, #20]
 8004c98:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	6981      	ldr	r1, [r0, #24]
 8004c9c:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8004c9e:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ca0:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca4:	69c1      	ldr	r1, [r0, #28]
 8004ca6:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ca8:	b2e1      	uxtb	r1, r4
 8004caa:	3908      	subs	r1, #8
 8004cac:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cb0:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cb2:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cb6:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8004cb8:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8004cbc:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cbe:	4e2b      	ldr	r6, [pc, #172]	; (8004d6c <HAL_DMA_Init+0x10c>)
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cc2:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cc6:	42bc      	cmp	r4, r7
 8004cc8:	bf98      	it	ls
 8004cca:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ccc:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cd0:	4c28      	ldr	r4, [pc, #160]	; (8004d74 <HAL_DMA_Init+0x114>)
 8004cd2:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cd4:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cd8:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cda:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cde:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004ce0:	6484      	str	r4, [r0, #72]	; 0x48
 8004ce2:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ce6:	d02b      	beq.n	8004d40 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ce8:	6845      	ldr	r5, [r0, #4]
 8004cea:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cec:	3d01      	subs	r5, #1
 8004cee:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cf0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf4:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cf8:	d828      	bhi.n	8004d4c <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cfc:	4d1f      	ldr	r5, [pc, #124]	; (8004d7c <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cfe:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d00:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d02:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d04:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d06:	f004 041f 	and.w	r4, r4, #31
 8004d0a:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d0e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d10:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d14:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d16:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d18:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1a:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8004d1c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8004d20:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8004d24:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8004d28:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004d2a:	4618      	mov	r0, r3
}
 8004d2c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_DMA_Init+0x124>)
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8004d32:	4915      	ldr	r1, [pc, #84]	; (8004d88 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d34:	4422      	add	r2, r4
 8004d36:	fba3 3202 	umull	r3, r2, r3, r2
 8004d3a:	0912      	lsrs	r2, r2, #4
 8004d3c:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8004d3e:	e79e      	b.n	8004c7e <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d40:	2400      	movs	r4, #0
 8004d42:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d44:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d48:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8004d4c:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d4e:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d52:	65c3      	str	r3, [r0, #92]	; 0x5c
 8004d54:	e7e1      	b.n	8004d1a <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8004d56:	2001      	movs	r0, #1
}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40020407 	.word	0x40020407
 8004d60:	bffdfbf8 	.word	0xbffdfbf8
 8004d64:	cccccccd 	.word	0xcccccccd
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	40020800 	.word	0x40020800
 8004d70:	40020820 	.word	0x40020820
 8004d74:	40020880 	.word	0x40020880
 8004d78:	1000823f 	.word	0x1000823f
 8004d7c:	40020940 	.word	0x40020940
 8004d80:	40020900 	.word	0x40020900
 8004d84:	bffdfff8 	.word	0xbffdfff8
 8004d88:	40020000 	.word	0x40020000

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d90:	680c      	ldr	r4, [r1, #0]
{
 8004d92:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	d07d      	beq.n	8004e94 <HAL_GPIO_Init+0x108>
 8004d98:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d9c:	4e71      	ldr	r6, [pc, #452]	; (8004f64 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8004d9e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da0:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004da4:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da6:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8004daa:	ea17 0a04 	ands.w	sl, r7, r4
 8004dae:	d06b      	beq.n	8004e88 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004db0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8004db4:	f001 0203 	and.w	r2, r1, #3
 8004db8:	1e55      	subs	r5, r2, #1
 8004dba:	2d01      	cmp	r5, #1
 8004dbc:	d96d      	bls.n	8004e9a <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dbe:	2a03      	cmp	r2, #3
 8004dc0:	f040 80b1 	bne.w	8004f26 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dc4:	fa02 f20c 	lsl.w	r2, r2, ip
 8004dc8:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8004dca:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dcc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dce:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dd0:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004dd4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dd6:	d057      	beq.n	8004e88 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd8:	4d63      	ldr	r5, [pc, #396]	; (8004f68 <HAL_GPIO_Init+0x1dc>)
 8004dda:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	662a      	str	r2, [r5, #96]	; 0x60
 8004de2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004de4:	f002 0201 	and.w	r2, r2, #1
 8004de8:	9203      	str	r2, [sp, #12]
 8004dea:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004dec:	f023 0203 	bic.w	r2, r3, #3
 8004df0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004df4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004df8:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfc:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dfe:	00bf      	lsls	r7, r7, #2
 8004e00:	f04f 080f 	mov.w	r8, #15
 8004e04:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e08:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e0c:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e10:	d01a      	beq.n	8004e48 <HAL_GPIO_Init+0xbc>
 8004e12:	4d56      	ldr	r5, [pc, #344]	; (8004f6c <HAL_GPIO_Init+0x1e0>)
 8004e14:	42a8      	cmp	r0, r5
 8004e16:	f000 8092 	beq.w	8004f3e <HAL_GPIO_Init+0x1b2>
 8004e1a:	4d55      	ldr	r5, [pc, #340]	; (8004f70 <HAL_GPIO_Init+0x1e4>)
 8004e1c:	42a8      	cmp	r0, r5
 8004e1e:	f000 8093 	beq.w	8004f48 <HAL_GPIO_Init+0x1bc>
 8004e22:	4d54      	ldr	r5, [pc, #336]	; (8004f74 <HAL_GPIO_Init+0x1e8>)
 8004e24:	42a8      	cmp	r0, r5
 8004e26:	f000 8083 	beq.w	8004f30 <HAL_GPIO_Init+0x1a4>
 8004e2a:	4d53      	ldr	r5, [pc, #332]	; (8004f78 <HAL_GPIO_Init+0x1ec>)
 8004e2c:	42a8      	cmp	r0, r5
 8004e2e:	f000 8092 	beq.w	8004f56 <HAL_GPIO_Init+0x1ca>
 8004e32:	4d52      	ldr	r5, [pc, #328]	; (8004f7c <HAL_GPIO_Init+0x1f0>)
 8004e34:	42a8      	cmp	r0, r5
 8004e36:	bf0c      	ite	eq
 8004e38:	f04f 0805 	moveq.w	r8, #5
 8004e3c:	f04f 0806 	movne.w	r8, #6
 8004e40:	fa08 f707 	lsl.w	r7, r8, r7
 8004e44:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e48:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8004e4c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8004e4e:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e52:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8004e54:	bf54      	ite	pl
 8004e56:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004e58:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8004e5c:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8004e5e:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e60:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8004e62:	bf54      	ite	pl
 8004e64:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004e66:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8004e6a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8004e6c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e6e:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8004e70:	bf54      	ite	pl
 8004e72:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004e74:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8004e78:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e7a:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e7c:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8004e7e:	bf54      	ite	pl
 8004e80:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004e82:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8004e86:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8004e88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e8a:	fa34 f203 	lsrs.w	r2, r4, r3
 8004e8e:	f10c 0c02 	add.w	ip, ip, #2
 8004e92:	d188      	bne.n	8004da6 <HAL_GPIO_Init+0x1a>
  }
}
 8004e94:	b005      	add	sp, #20
 8004e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004e9a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9e:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ea2:	f04f 0803 	mov.w	r8, #3
 8004ea6:	fa08 f80c 	lsl.w	r8, r8, ip
 8004eaa:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eae:	fa05 f50c 	lsl.w	r5, r5, ip
 8004eb2:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8004eb6:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eb8:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8004ebc:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ec0:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ec4:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8004ec8:	409f      	lsls	r7, r3
 8004eca:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8004ece:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004ed0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ed2:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ed6:	f8de 7008 	ldr.w	r7, [lr, #8]
 8004eda:	fa07 f70c 	lsl.w	r7, r7, ip
 8004ede:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004ee4:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee6:	fa02 f20c 	lsl.w	r2, r2, ip
 8004eea:	f47f af6e 	bne.w	8004dca <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8004eee:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004ef2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ef6:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004efa:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8004efe:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f00:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f04:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f08:	fa07 f708 	lsl.w	r7, r7, r8
 8004f0c:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f0e:	270f      	movs	r7, #15
 8004f10:	fa07 f808 	lsl.w	r8, r7, r8
 8004f14:	9f00      	ldr	r7, [sp, #0]
 8004f16:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f1a:	9f01      	ldr	r7, [sp, #4]
 8004f1c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004f20:	f8c9 7020 	str.w	r7, [r9, #32]
 8004f24:	e751      	b.n	8004dca <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f26:	2503      	movs	r5, #3
 8004f28:	fa05 f50c 	lsl.w	r5, r5, ip
 8004f2c:	43ed      	mvns	r5, r5
 8004f2e:	e7cf      	b.n	8004ed0 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f30:	f04f 0803 	mov.w	r8, #3
 8004f34:	fa08 f707 	lsl.w	r7, r8, r7
 8004f38:	ea49 0907 	orr.w	r9, r9, r7
 8004f3c:	e784      	b.n	8004e48 <HAL_GPIO_Init+0xbc>
 8004f3e:	fa0b f707 	lsl.w	r7, fp, r7
 8004f42:	ea49 0907 	orr.w	r9, r9, r7
 8004f46:	e77f      	b.n	8004e48 <HAL_GPIO_Init+0xbc>
 8004f48:	f04f 0802 	mov.w	r8, #2
 8004f4c:	fa08 f707 	lsl.w	r7, r8, r7
 8004f50:	ea49 0907 	orr.w	r9, r9, r7
 8004f54:	e778      	b.n	8004e48 <HAL_GPIO_Init+0xbc>
 8004f56:	f04f 0804 	mov.w	r8, #4
 8004f5a:	fa08 f707 	lsl.w	r7, r8, r7
 8004f5e:	ea49 0907 	orr.w	r9, r9, r7
 8004f62:	e771      	b.n	8004e48 <HAL_GPIO_Init+0xbc>
 8004f64:	40010400 	.word	0x40010400
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	48000400 	.word	0x48000400
 8004f70:	48000800 	.word	0x48000800
 8004f74:	48000c00 	.word	0x48000c00
 8004f78:	48001000 	.word	0x48001000
 8004f7c:	48001400 	.word	0x48001400

08004f80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f80:	b10a      	cbz	r2, 8004f86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f82:	6181      	str	r1, [r0, #24]
 8004f84:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f86:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop

08004f8c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f8c:	4a37      	ldr	r2, [pc, #220]	; (800506c <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f8e:	b960      	cbnz	r0, 8004faa <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f90:	6813      	ldr	r3, [r2, #0]
 8004f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f9a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f9e:	d01d      	beq.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fa8:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004faa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004fae:	d007      	beq.n	8004fc0 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fb0:	6813      	ldr	r3, [r2, #0]
 8004fb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fba:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fbc:	6013      	str	r3, [r2, #0]
}
 8004fbe:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fce:	d02b      	beq.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004fd4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fda:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fe4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fe6:	4822      	ldr	r0, [pc, #136]	; (8005070 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004fe8:	4922      	ldr	r1, [pc, #136]	; (8005074 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	2032      	movs	r0, #50	; 0x32
 8004ff8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ffc:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ffe:	fba1 1303 	umull	r1, r3, r1, r3
 8005002:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005004:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005006:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800500a:	d506      	bpl.n	800501a <HAL_PWREx_ControlVoltageScaling+0x8e>
 800500c:	e000      	b.n	8005010 <HAL_PWREx_ControlVoltageScaling+0x84>
 800500e:	b123      	cbz	r3, 800501a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005010:	6951      	ldr	r1, [r2, #20]
 8005012:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005014:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005018:	d4f9      	bmi.n	800500e <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800501a:	4b14      	ldr	r3, [pc, #80]	; (800506c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8005020:	bf54      	ite	pl
 8005022:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8005024:	2003      	movmi	r0, #3
 8005026:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005030:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005032:	480f      	ldr	r0, [pc, #60]	; (8005070 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005034:	490f      	ldr	r1, [pc, #60]	; (8005074 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005036:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800503a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005040:	6803      	ldr	r3, [r0, #0]
 8005042:	2032      	movs	r0, #50	; 0x32
 8005044:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005048:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800504a:	fba1 1303 	umull	r1, r3, r1, r3
 800504e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005050:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005052:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005056:	d5e0      	bpl.n	800501a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005058:	e001      	b.n	800505e <HAL_PWREx_ControlVoltageScaling+0xd2>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0dd      	beq.n	800501a <HAL_PWREx_ControlVoltageScaling+0x8e>
 800505e:	6951      	ldr	r1, [r2, #20]
 8005060:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005062:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005066:	d5d8      	bpl.n	800501a <HAL_PWREx_ControlVoltageScaling+0x8e>
 8005068:	e7f7      	b.n	800505a <HAL_PWREx_ControlVoltageScaling+0xce>
 800506a:	bf00      	nop
 800506c:	40007000 	.word	0x40007000
 8005070:	20000368 	.word	0x20000368
 8005074:	431bde83 	.word	0x431bde83

08005078 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005078:	4a02      	ldr	r2, [pc, #8]	; (8005084 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800507a:	6893      	ldr	r3, [r2, #8]
 800507c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005080:	6093      	str	r3, [r2, #8]
}
 8005082:	4770      	bx	lr
 8005084:	40007000 	.word	0x40007000

08005088 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005088:	2800      	cmp	r0, #0
 800508a:	f000 81c3 	beq.w	8005414 <HAL_RCC_OscConfig+0x38c>
{
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005092:	6803      	ldr	r3, [r0, #0]
 8005094:	07d9      	lsls	r1, r3, #31
{
 8005096:	b082      	sub	sp, #8
 8005098:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509a:	d52d      	bpl.n	80050f8 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509c:	49a6      	ldr	r1, [pc, #664]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 800509e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a2:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050a6:	2a0c      	cmp	r2, #12
 80050a8:	f000 810a 	beq.w	80052c0 <HAL_RCC_OscConfig+0x238>
 80050ac:	2a08      	cmp	r2, #8
 80050ae:	f000 810c 	beq.w	80052ca <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	f000 8133 	beq.w	8005322 <HAL_RCC_OscConfig+0x29a>
 80050bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050c0:	f000 819b 	beq.w	80053fa <HAL_RCC_OscConfig+0x372>
 80050c4:	4d9c      	ldr	r5, [pc, #624]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 80050c6:	682a      	ldr	r2, [r5, #0]
 80050c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050cc:	602a      	str	r2, [r5, #0]
 80050ce:	682a      	ldr	r2, [r5, #0]
 80050d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050d4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 8128 	bne.w	800532c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fe fe72 	bl	8003dc4 <HAL_GetTick>
 80050e0:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050e2:	e005      	b.n	80050f0 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fe fe6e 	bl	8003dc4 <HAL_GetTick>
 80050e8:	1b80      	subs	r0, r0, r6
 80050ea:	2864      	cmp	r0, #100	; 0x64
 80050ec:	f200 8142 	bhi.w	8005374 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	039f      	lsls	r7, r3, #14
 80050f4:	d4f6      	bmi.n	80050e4 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	079e      	lsls	r6, r3, #30
 80050fa:	d528      	bpl.n	800514e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050fc:	4a8e      	ldr	r2, [pc, #568]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 80050fe:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005100:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005102:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005106:	2b0c      	cmp	r3, #12
 8005108:	f000 80ec 	beq.w	80052e4 <HAL_RCC_OscConfig+0x25c>
 800510c:	2b04      	cmp	r3, #4
 800510e:	f000 80ee 	beq.w	80052ee <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005112:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005114:	4d88      	ldr	r5, [pc, #544]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 811d 	beq.w	8005356 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005122:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fe fe4e 	bl	8003dc4 <HAL_GetTick>
 8005128:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800512a:	e005      	b.n	8005138 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512c:	f7fe fe4a 	bl	8003dc4 <HAL_GetTick>
 8005130:	1b80      	subs	r0, r0, r6
 8005132:	2802      	cmp	r0, #2
 8005134:	f200 811e 	bhi.w	8005374 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	0558      	lsls	r0, r3, #21
 800513c:	d5f6      	bpl.n	800512c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513e:	686b      	ldr	r3, [r5, #4]
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005146:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800514a:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	071a      	lsls	r2, r3, #28
 8005150:	d519      	bpl.n	8005186 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005152:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005154:	4d78      	ldr	r5, [pc, #480]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 809e 	beq.w	8005298 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 800515c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7fe fe2c 	bl	8003dc4 <HAL_GetTick>
 800516c:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800516e:	e005      	b.n	800517c <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005170:	f7fe fe28 	bl	8003dc4 <HAL_GetTick>
 8005174:	1b80      	subs	r0, r0, r6
 8005176:	2802      	cmp	r0, #2
 8005178:	f200 80fc 	bhi.w	8005374 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800517c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005180:	079f      	lsls	r7, r3, #30
 8005182:	d5f5      	bpl.n	8005170 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	0759      	lsls	r1, r3, #29
 8005188:	d541      	bpl.n	800520e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800518a:	4b6b      	ldr	r3, [pc, #428]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 800518c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800518e:	00d2      	lsls	r2, r2, #3
 8005190:	f100 80f4 	bmi.w	800537c <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005196:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800519a:	659a      	str	r2, [r3, #88]	; 0x58
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051a6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a8:	4e64      	ldr	r6, [pc, #400]	; (800533c <HAL_RCC_OscConfig+0x2b4>)
 80051aa:	6833      	ldr	r3, [r6, #0]
 80051ac:	05df      	lsls	r7, r3, #23
 80051ae:	f140 8113 	bpl.w	80053d8 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b2:	68a3      	ldr	r3, [r4, #8]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	f000 80e3 	beq.w	8005380 <HAL_RCC_OscConfig+0x2f8>
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	f000 8169 	beq.w	8005492 <HAL_RCC_OscConfig+0x40a>
 80051c0:	4e5d      	ldr	r6, [pc, #372]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 80051c2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80051ce:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 80d7 	bne.w	800538e <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e0:	f7fe fdf0 	bl	8003dc4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80051e8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051ea:	e005      	b.n	80051f8 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fe fdea 	bl	8003dc4 <HAL_GetTick>
 80051f0:	1bc0      	subs	r0, r0, r7
 80051f2:	4540      	cmp	r0, r8
 80051f4:	f200 80be 	bhi.w	8005374 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80051fc:	079a      	lsls	r2, r3, #30
 80051fe:	d4f5      	bmi.n	80051ec <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005200:	b125      	cbz	r5, 800520c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005202:	4a4d      	ldr	r2, [pc, #308]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 8005204:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	069b      	lsls	r3, r3, #26
 8005210:	d518      	bpl.n	8005244 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005212:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005214:	4d48      	ldr	r5, [pc, #288]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80ca 	beq.w	80053b0 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800521c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fe fdcc 	bl	8003dc4 <HAL_GetTick>
 800522c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800522e:	e005      	b.n	800523c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005230:	f7fe fdc8 	bl	8003dc4 <HAL_GetTick>
 8005234:	1b80      	subs	r0, r0, r6
 8005236:	2802      	cmp	r0, #2
 8005238:	f200 809c 	bhi.w	8005374 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800523c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005240:	079f      	lsls	r7, r3, #30
 8005242:	d5f5      	bpl.n	8005230 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005244:	69e0      	ldr	r0, [r4, #28]
 8005246:	b318      	cbz	r0, 8005290 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005248:	4d3b      	ldr	r5, [pc, #236]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 800524a:	68ab      	ldr	r3, [r5, #8]
 800524c:	f003 030c 	and.w	r3, r3, #12
 8005250:	2b0c      	cmp	r3, #12
 8005252:	f000 812c 	beq.w	80054ae <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005258:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800525a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525e:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005260:	f000 80da 	beq.w	8005418 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005264:	68eb      	ldr	r3, [r5, #12]
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800526c:	68eb      	ldr	r3, [r5, #12]
 800526e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fe fda4 	bl	8003dc4 <HAL_GetTick>
 800527c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527e:	e004      	b.n	800528a <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fe fda0 	bl	8003dc4 <HAL_GetTick>
 8005284:	1b00      	subs	r0, r0, r4
 8005286:	2802      	cmp	r0, #2
 8005288:	d874      	bhi.n	8005374 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	d4f7      	bmi.n	8005280 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005290:	2000      	movs	r0, #0
}
 8005292:	b002      	add	sp, #8
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005298:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80052a4:	f7fe fd8e 	bl	8003dc4 <HAL_GetTick>
 80052a8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052aa:	e004      	b.n	80052b6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ac:	f7fe fd8a 	bl	8003dc4 <HAL_GetTick>
 80052b0:	1b80      	subs	r0, r0, r6
 80052b2:	2802      	cmp	r0, #2
 80052b4:	d85e      	bhi.n	8005374 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80052ba:	0798      	lsls	r0, r3, #30
 80052bc:	d4f6      	bmi.n	80052ac <HAL_RCC_OscConfig+0x224>
 80052be:	e761      	b.n	8005184 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c0:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052c4:	2903      	cmp	r1, #3
 80052c6:	f47f aef4 	bne.w	80050b2 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	0392      	lsls	r2, r2, #14
 80052d0:	f57f af12 	bpl.w	80050f8 <HAL_RCC_OscConfig+0x70>
 80052d4:	6862      	ldr	r2, [r4, #4]
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	f47f af0e 	bne.w	80050f8 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80052dc:	2001      	movs	r0, #1
}
 80052de:	b002      	add	sp, #8
 80052e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e4:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052e8:	2a02      	cmp	r2, #2
 80052ea:	f47f af12 	bne.w	8005112 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	055d      	lsls	r5, r3, #21
 80052f4:	d502      	bpl.n	80052fc <HAL_RCC_OscConfig+0x274>
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ef      	beq.n	80052dc <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 80052fe:	6920      	ldr	r0, [r4, #16]
 8005300:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005302:	490f      	ldr	r1, [pc, #60]	; (8005340 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005304:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005308:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800530c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800530e:	6808      	ldr	r0, [r1, #0]
 8005310:	f7fe fd0e 	bl	8003d30 <HAL_InitTick>
 8005314:	2800      	cmp	r0, #0
 8005316:	d1e1      	bne.n	80052dc <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	071a      	lsls	r2, r3, #28
 800531c:	f57f af33 	bpl.w	8005186 <HAL_RCC_OscConfig+0xfe>
 8005320:	e717      	b.n	8005152 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005322:	4a05      	ldr	r2, [pc, #20]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800532c:	f7fe fd4a 	bl	8003dc4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005330:	4e01      	ldr	r6, [pc, #4]	; (8005338 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005332:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005334:	e00b      	b.n	800534e <HAL_RCC_OscConfig+0x2c6>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	40007000 	.word	0x40007000
 8005340:	20000370 	.word	0x20000370
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005344:	f7fe fd3e 	bl	8003dc4 <HAL_GetTick>
 8005348:	1b40      	subs	r0, r0, r5
 800534a:	2864      	cmp	r0, #100	; 0x64
 800534c:	d812      	bhi.n	8005374 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534e:	6833      	ldr	r3, [r6, #0]
 8005350:	039b      	lsls	r3, r3, #14
 8005352:	d5f7      	bpl.n	8005344 <HAL_RCC_OscConfig+0x2bc>
 8005354:	e6cf      	b.n	80050f6 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800535e:	f7fe fd31 	bl	8003dc4 <HAL_GetTick>
 8005362:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	0559      	lsls	r1, r3, #21
 8005368:	d5d6      	bpl.n	8005318 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536a:	f7fe fd2b 	bl	8003dc4 <HAL_GetTick>
 800536e:	1b80      	subs	r0, r0, r6
 8005370:	2802      	cmp	r0, #2
 8005372:	d9f7      	bls.n	8005364 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005374:	2003      	movs	r0, #3
}
 8005376:	b002      	add	sp, #8
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800537c:	2500      	movs	r5, #0
 800537e:	e713      	b.n	80051a8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005380:	4a65      	ldr	r2, [pc, #404]	; (8005518 <HAL_RCC_OscConfig+0x490>)
 8005382:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800538e:	f7fe fd19 	bl	8003dc4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005392:	4f61      	ldr	r7, [pc, #388]	; (8005518 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005394:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539a:	e004      	b.n	80053a6 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe fd12 	bl	8003dc4 <HAL_GetTick>
 80053a0:	1b80      	subs	r0, r0, r6
 80053a2:	4540      	cmp	r0, r8
 80053a4:	d8e6      	bhi.n	8005374 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053aa:	0799      	lsls	r1, r3, #30
 80053ac:	d5f6      	bpl.n	800539c <HAL_RCC_OscConfig+0x314>
 80053ae:	e727      	b.n	8005200 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80053b0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80053bc:	f7fe fd02 	bl	8003dc4 <HAL_GetTick>
 80053c0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053c2:	e004      	b.n	80053ce <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053c4:	f7fe fcfe 	bl	8003dc4 <HAL_GetTick>
 80053c8:	1b80      	subs	r0, r0, r6
 80053ca:	2802      	cmp	r0, #2
 80053cc:	d8d2      	bhi.n	8005374 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053ce:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80053d2:	0798      	lsls	r0, r3, #30
 80053d4:	d4f6      	bmi.n	80053c4 <HAL_RCC_OscConfig+0x33c>
 80053d6:	e735      	b.n	8005244 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d8:	6833      	ldr	r3, [r6, #0]
 80053da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053de:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80053e0:	f7fe fcf0 	bl	8003dc4 <HAL_GetTick>
 80053e4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e6:	6833      	ldr	r3, [r6, #0]
 80053e8:	05d8      	lsls	r0, r3, #23
 80053ea:	f53f aee2 	bmi.w	80051b2 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fe fce9 	bl	8003dc4 <HAL_GetTick>
 80053f2:	1bc0      	subs	r0, r0, r7
 80053f4:	2802      	cmp	r0, #2
 80053f6:	d9f6      	bls.n	80053e6 <HAL_RCC_OscConfig+0x35e>
 80053f8:	e7bc      	b.n	8005374 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053fe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005410:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005412:	e78b      	b.n	800532c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005414:	2001      	movs	r0, #1
}
 8005416:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005418:	f7fe fcd4 	bl	8003dc4 <HAL_GetTick>
 800541c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800541e:	e004      	b.n	800542a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fe fcd0 	bl	8003dc4 <HAL_GetTick>
 8005424:	1b80      	subs	r0, r0, r6
 8005426:	2802      	cmp	r0, #2
 8005428:	d8a4      	bhi.n	8005374 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	0199      	lsls	r1, r3, #6
 800542e:	d4f7      	bmi.n	8005420 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005430:	68e9      	ldr	r1, [r5, #12]
 8005432:	4b3a      	ldr	r3, [pc, #232]	; (800551c <HAL_RCC_OscConfig+0x494>)
 8005434:	6a22      	ldr	r2, [r4, #32]
 8005436:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005438:	4e37      	ldr	r6, [pc, #220]	; (8005518 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800543a:	400b      	ands	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8005442:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005446:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800544a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800544e:	3801      	subs	r0, #1
 8005450:	0849      	lsrs	r1, r1, #1
 8005452:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005456:	3901      	subs	r1, #1
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800545e:	3a01      	subs	r2, #1
 8005460:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005464:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005466:	682b      	ldr	r3, [r5, #0]
 8005468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800546e:	68eb      	ldr	r3, [r5, #12]
 8005470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005474:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005476:	f7fe fca5 	bl	8003dc4 <HAL_GetTick>
 800547a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547c:	e005      	b.n	800548a <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547e:	f7fe fca1 	bl	8003dc4 <HAL_GetTick>
 8005482:	1b00      	subs	r0, r0, r4
 8005484:	2802      	cmp	r0, #2
 8005486:	f63f af75 	bhi.w	8005374 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548a:	6833      	ldr	r3, [r6, #0]
 800548c:	019a      	lsls	r2, r3, #6
 800548e:	d5f6      	bpl.n	800547e <HAL_RCC_OscConfig+0x3f6>
 8005490:	e6fe      	b.n	8005290 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005492:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_RCC_OscConfig+0x490>)
 8005494:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005498:	f042 0204 	orr.w	r2, r2, #4
 800549c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80054a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ac:	e76f      	b.n	800538e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ae:	2801      	cmp	r0, #1
 80054b0:	f43f aeef 	beq.w	8005292 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80054b4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	6a22      	ldr	r2, [r4, #32]
 80054b8:	f003 0103 	and.w	r1, r3, #3
 80054bc:	4291      	cmp	r1, r2
 80054be:	f47f af0d 	bne.w	80052dc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054c8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ca:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80054ce:	f47f af05 	bne.w	80052dc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80054d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054d8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80054dc:	f47f aefe 	bne.w	80052dc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054e6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80054ea:	f47f aef7 	bne.w	80052dc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054f0:	0852      	lsrs	r2, r2, #1
 80054f2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80054f6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054f8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80054fc:	f47f aeee 	bne.w	80052dc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005500:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005508:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800550a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800550e:	bf14      	ite	ne
 8005510:	2001      	movne	r0, #1
 8005512:	2000      	moveq	r0, #0
 8005514:	e6bd      	b.n	8005292 <HAL_RCC_OscConfig+0x20a>
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	019f800c 	.word	0x019f800c

08005520 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005520:	4b18      	ldr	r3, [pc, #96]	; (8005584 <HAL_RCC_GetSysClockFreq+0x64>)
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	f002 020c 	and.w	r2, r2, #12
 8005528:	2a04      	cmp	r2, #4
 800552a:	d026      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	f002 020c 	and.w	r2, r2, #12
 8005532:	2a08      	cmp	r2, #8
 8005534:	d023      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	f002 020c 	and.w	r2, r2, #12
 800553c:	2a0c      	cmp	r2, #12
 800553e:	d001      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005540:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005542:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005544:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005546:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005548:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800554a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800554e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005550:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005554:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005558:	bf0c      	ite	eq
 800555a:	4b0b      	ldreq	r3, [pc, #44]	; (8005588 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800555c:	4b0b      	ldrne	r3, [pc, #44]	; (800558c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800555e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005560:	fbb3 f3f2 	udiv	r3, r3, r2
 8005564:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCC_GetSysClockFreq+0x64>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005570:	3301      	adds	r3, #1
 8005572:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005574:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005578:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800557a:	4804      	ldr	r0, [pc, #16]	; (800558c <HAL_RCC_GetSysClockFreq+0x6c>)
 800557c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <HAL_RCC_GetSysClockFreq+0x68>)
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	007a1200 	.word	0x007a1200
 800558c:	00f42400 	.word	0x00f42400

08005590 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005590:	2800      	cmp	r0, #0
 8005592:	f000 80ee 	beq.w	8005772 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005596:	4a78      	ldr	r2, [pc, #480]	; (8005778 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800559c:	6813      	ldr	r3, [r2, #0]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	428b      	cmp	r3, r1
 80055a4:	460d      	mov	r5, r1
 80055a6:	4604      	mov	r4, r0
 80055a8:	d20c      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	f023 030f 	bic.w	r3, r3, #15
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	428b      	cmp	r3, r1
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80055be:	2001      	movs	r0, #1
}
 80055c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07df      	lsls	r7, r3, #31
 80055c8:	d569      	bpl.n	800569e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ca:	6867      	ldr	r7, [r4, #4]
 80055cc:	2f03      	cmp	r7, #3
 80055ce:	f000 80a0 	beq.w	8005712 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d4:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d6:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d8:	f000 8097 	beq.w	800570a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055dc:	055b      	lsls	r3, r3, #21
 80055de:	d5ee      	bpl.n	80055be <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055e0:	f7ff ff9e 	bl	8005520 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80055e4:	4b66      	ldr	r3, [pc, #408]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80055e6:	4298      	cmp	r0, r3
 80055e8:	f240 80c0 	bls.w	800576c <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ec:	4a63      	ldr	r2, [pc, #396]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 80055ee:	6893      	ldr	r3, [r2, #8]
 80055f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80055fa:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055fe:	4e5f      	ldr	r6, [pc, #380]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 8005600:	68b3      	ldr	r3, [r6, #8]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	433b      	orrs	r3, r7
 8005608:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800560a:	f7fe fbdb 	bl	8003dc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005612:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005614:	e004      	b.n	8005620 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005616:	f7fe fbd5 	bl	8003dc4 <HAL_GetTick>
 800561a:	1bc0      	subs	r0, r0, r7
 800561c:	4540      	cmp	r0, r8
 800561e:	d871      	bhi.n	8005704 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005620:	68b3      	ldr	r3, [r6, #8]
 8005622:	6862      	ldr	r2, [r4, #4]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800562c:	d1f3      	bne.n	8005616 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	079f      	lsls	r7, r3, #30
 8005632:	d436      	bmi.n	80056a2 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005634:	f1b9 0f00 	cmp.w	r9, #0
 8005638:	d003      	beq.n	8005642 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800563a:	68b3      	ldr	r3, [r6, #8]
 800563c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005640:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005642:	4e4d      	ldr	r6, [pc, #308]	; (8005778 <HAL_RCC_ClockConfig+0x1e8>)
 8005644:	6833      	ldr	r3, [r6, #0]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	42ab      	cmp	r3, r5
 800564c:	d846      	bhi.n	80056dc <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	075a      	lsls	r2, r3, #29
 8005652:	d506      	bpl.n	8005662 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005654:	4949      	ldr	r1, [pc, #292]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 8005656:	68e0      	ldr	r0, [r4, #12]
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800565e:	4302      	orrs	r2, r0
 8005660:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005662:	071b      	lsls	r3, r3, #28
 8005664:	d507      	bpl.n	8005676 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005666:	4a45      	ldr	r2, [pc, #276]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 8005668:	6921      	ldr	r1, [r4, #16]
 800566a:	6893      	ldr	r3, [r2, #8]
 800566c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005670:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005674:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005676:	f7ff ff53 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 800567a:	4a40      	ldr	r2, [pc, #256]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 800567c:	4c41      	ldr	r4, [pc, #260]	; (8005784 <HAL_RCC_ClockConfig+0x1f4>)
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	4941      	ldr	r1, [pc, #260]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005682:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005686:	4603      	mov	r3, r0
 8005688:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800568a:	4840      	ldr	r0, [pc, #256]	; (800578c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800568c:	f002 021f 	and.w	r2, r2, #31
 8005690:	40d3      	lsrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005694:	6800      	ldr	r0, [r0, #0]
}
 8005696:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800569a:	f7fe bb49 	b.w	8003d30 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569e:	079e      	lsls	r6, r3, #30
 80056a0:	d5cf      	bpl.n	8005642 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a2:	0758      	lsls	r0, r3, #29
 80056a4:	d504      	bpl.n	80056b0 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a6:	4935      	ldr	r1, [pc, #212]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 80056a8:	688a      	ldr	r2, [r1, #8]
 80056aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80056ae:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b0:	0719      	lsls	r1, r3, #28
 80056b2:	d506      	bpl.n	80056c2 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056b4:	4a31      	ldr	r2, [pc, #196]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 80056b6:	6893      	ldr	r3, [r2, #8]
 80056b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056c0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c2:	4a2e      	ldr	r2, [pc, #184]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 80056c4:	68a1      	ldr	r1, [r4, #8]
 80056c6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4e2b      	ldr	r6, [pc, #172]	; (8005778 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ce:	430b      	orrs	r3, r1
 80056d0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056d2:	6833      	ldr	r3, [r6, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	42ab      	cmp	r3, r5
 80056da:	d9b8      	bls.n	800564e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	f023 030f 	bic.w	r3, r3, #15
 80056e2:	432b      	orrs	r3, r5
 80056e4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80056e6:	f7fe fb6d 	bl	8003dc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ea:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80056ee:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	42ab      	cmp	r3, r5
 80056f8:	d0a9      	beq.n	800564e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fa:	f7fe fb63 	bl	8003dc4 <HAL_GetTick>
 80056fe:	1bc0      	subs	r0, r0, r7
 8005700:	4540      	cmp	r0, r8
 8005702:	d9f5      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005704:	2003      	movs	r0, #3
}
 8005706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570a:	039a      	lsls	r2, r3, #14
 800570c:	f53f af68 	bmi.w	80055e0 <HAL_RCC_ClockConfig+0x50>
 8005710:	e755      	b.n	80055be <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
 8005714:	6811      	ldr	r1, [r2, #0]
 8005716:	0188      	lsls	r0, r1, #6
 8005718:	f57f af51 	bpl.w	80055be <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800571c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800571e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005720:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8005722:	4e17      	ldr	r6, [pc, #92]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005724:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005728:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800572a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800572e:	bf0c      	ite	eq
 8005730:	4817      	ldreq	r0, [pc, #92]	; (8005790 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005732:	4818      	ldrne	r0, [pc, #96]	; (8005794 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005734:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005736:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800573a:	4810      	ldr	r0, [pc, #64]	; (800577c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800573c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8005740:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005744:	68c1      	ldr	r1, [r0, #12]
 8005746:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800574a:	3101      	adds	r1, #1
 800574c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800574e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8005752:	42b2      	cmp	r2, r6
 8005754:	d90a      	bls.n	800576c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005756:	6882      	ldr	r2, [r0, #8]
 8005758:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800575c:	f43f af46 	beq.w	80055ec <HAL_RCC_ClockConfig+0x5c>
 8005760:	0799      	lsls	r1, r3, #30
 8005762:	d503      	bpl.n	800576c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005764:	68a3      	ldr	r3, [r4, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f43f af40 	beq.w	80055ec <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800576c:	f04f 0900 	mov.w	r9, #0
 8005770:	e745      	b.n	80055fe <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005772:	2001      	movs	r0, #1
}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40022000 	.word	0x40022000
 800577c:	40021000 	.word	0x40021000
 8005780:	04c4b400 	.word	0x04c4b400
 8005784:	08008a24 	.word	0x08008a24
 8005788:	20000368 	.word	0x20000368
 800578c:	20000370 	.word	0x20000370
 8005790:	007a1200 	.word	0x007a1200
 8005794:	00f42400 	.word	0x00f42400

08005798 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000368 	.word	0x20000368

080057a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80057a6:	4a06      	ldr	r2, [pc, #24]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80057a8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80057aa:	4906      	ldr	r1, [pc, #24]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80057b0:	6808      	ldr	r0, [r1, #0]
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	f003 031f 	and.w	r3, r3, #31
}
 80057b8:	40d8      	lsrs	r0, r3
 80057ba:	4770      	bx	lr
 80057bc:	40021000 	.word	0x40021000
 80057c0:	08008a34 	.word	0x08008a34
 80057c4:	20000368 	.word	0x20000368

080057c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80057ca:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80057cc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80057ce:	4906      	ldr	r1, [pc, #24]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057d0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	5cd3      	ldrb	r3, [r2, r3]
 80057d8:	f003 031f 	and.w	r3, r3, #31
}
 80057dc:	40d8      	lsrs	r0, r3
 80057de:	4770      	bx	lr
 80057e0:	40021000 	.word	0x40021000
 80057e4:	08008a34 	.word	0x08008a34
 80057e8:	20000368 	.word	0x20000368

080057ec <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80057ec:	4a02      	ldr	r2, [pc, #8]	; (80057f8 <HAL_RCC_EnableCSS+0xc>)
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	4770      	bx	lr
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005800:	6803      	ldr	r3, [r0, #0]
{
 8005802:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005804:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005808:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800580a:	d056      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580c:	4b9f      	ldr	r3, [pc, #636]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800580e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005810:	00d5      	lsls	r5, r2, #3
 8005812:	f140 810c 	bpl.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005816:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005818:	4d9d      	ldr	r5, [pc, #628]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800581a:	682b      	ldr	r3, [r5, #0]
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005822:	f7fe facf 	bl	8003dc4 <HAL_GetTick>
 8005826:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005828:	e005      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582a:	f7fe facb 	bl	8003dc4 <HAL_GetTick>
 800582e:	1b83      	subs	r3, r0, r6
 8005830:	2b02      	cmp	r3, #2
 8005832:	f200 8107 	bhi.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	05d8      	lsls	r0, r3, #23
 800583a:	d5f6      	bpl.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800583c:	4d93      	ldr	r5, [pc, #588]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800583e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005842:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005846:	d027      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800584a:	429a      	cmp	r2, r3
 800584c:	d025      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800584e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005852:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800585e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005866:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800586a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800586e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005870:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005874:	f140 8108 	bpl.w	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fe faa4 	bl	8003dc4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005880:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005882:	e005      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fe fa9e 	bl	8003dc4 <HAL_GetTick>
 8005888:	1b80      	subs	r0, r0, r6
 800588a:	4540      	cmp	r0, r8
 800588c:	f200 80da 	bhi.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005890:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005894:	079b      	lsls	r3, r3, #30
 8005896:	d5f5      	bpl.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005898:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800589a:	497c      	ldr	r1, [pc, #496]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800589c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058aa:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ac:	b127      	cbz	r7, 80058b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ae:	4a77      	ldr	r2, [pc, #476]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80058b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07de      	lsls	r6, r3, #31
 80058bc:	d508      	bpl.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058be:	4973      	ldr	r1, [pc, #460]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058c0:	6865      	ldr	r5, [r4, #4]
 80058c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058c6:	f022 0203 	bic.w	r2, r2, #3
 80058ca:	432a      	orrs	r2, r5
 80058cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058d0:	079d      	lsls	r5, r3, #30
 80058d2:	d508      	bpl.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058d4:	496d      	ldr	r1, [pc, #436]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058d6:	68a5      	ldr	r5, [r4, #8]
 80058d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058dc:	f022 020c 	bic.w	r2, r2, #12
 80058e0:	432a      	orrs	r2, r5
 80058e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058e6:	0759      	lsls	r1, r3, #29
 80058e8:	d508      	bpl.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ea:	4968      	ldr	r1, [pc, #416]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058ec:	68e5      	ldr	r5, [r4, #12]
 80058ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80058f6:	432a      	orrs	r2, r5
 80058f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058fc:	071a      	lsls	r2, r3, #28
 80058fe:	d508      	bpl.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005900:	4962      	ldr	r1, [pc, #392]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005902:	6925      	ldr	r5, [r4, #16]
 8005904:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005908:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800590c:	432a      	orrs	r2, r5
 800590e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005912:	069f      	lsls	r7, r3, #26
 8005914:	d508      	bpl.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005916:	495d      	ldr	r1, [pc, #372]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005918:	6965      	ldr	r5, [r4, #20]
 800591a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800591e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005922:	432a      	orrs	r2, r5
 8005924:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005928:	065e      	lsls	r6, r3, #25
 800592a:	d508      	bpl.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800592c:	4957      	ldr	r1, [pc, #348]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800592e:	69a5      	ldr	r5, [r4, #24]
 8005930:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005934:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005938:	432a      	orrs	r2, r5
 800593a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800593e:	061d      	lsls	r5, r3, #24
 8005940:	d508      	bpl.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005942:	4952      	ldr	r1, [pc, #328]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005944:	69e5      	ldr	r5, [r4, #28]
 8005946:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800594a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800594e:	432a      	orrs	r2, r5
 8005950:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005954:	05d9      	lsls	r1, r3, #23
 8005956:	d508      	bpl.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005958:	494c      	ldr	r1, [pc, #304]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800595a:	6a25      	ldr	r5, [r4, #32]
 800595c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005960:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005964:	432a      	orrs	r2, r5
 8005966:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800596a:	059a      	lsls	r2, r3, #22
 800596c:	d508      	bpl.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800596e:	4947      	ldr	r1, [pc, #284]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005970:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005972:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005976:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800597a:	432a      	orrs	r2, r5
 800597c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005980:	055f      	lsls	r7, r3, #21
 8005982:	d50b      	bpl.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005984:	4941      	ldr	r1, [pc, #260]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005986:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005988:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800598c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005990:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005992:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800599a:	d055      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800599c:	051e      	lsls	r6, r3, #20
 800599e:	d50b      	bpl.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059a0:	493a      	ldr	r1, [pc, #232]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80059a2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80059a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059a8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80059ac:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059ae:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059b6:	d04c      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059b8:	04dd      	lsls	r5, r3, #19
 80059ba:	d50b      	bpl.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059bc:	4933      	ldr	r1, [pc, #204]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80059be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80059c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059c8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059ca:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059d2:	d043      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059d4:	0499      	lsls	r1, r3, #18
 80059d6:	d50b      	bpl.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d8:	492c      	ldr	r1, [pc, #176]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80059da:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80059dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059e0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80059e4:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059e6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ee:	d03a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059f0:	045a      	lsls	r2, r3, #17
 80059f2:	d50b      	bpl.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059f4:	4925      	ldr	r1, [pc, #148]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80059f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80059f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059fc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005a00:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a02:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a0a:	d031      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	d50b      	bpl.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a10:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a12:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005a18:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005a1c:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a1e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a26:	d028      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8005a28:	b002      	add	sp, #8
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a34:	659a      	str	r2, [r3, #88]	; 0x58
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a40:	2701      	movs	r7, #1
 8005a42:	e6e9      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8005a44:	2003      	movs	r0, #3
 8005a46:	e731      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a48:	68ca      	ldr	r2, [r1, #12]
 8005a4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a4e:	60ca      	str	r2, [r1, #12]
 8005a50:	e7a4      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a52:	68ca      	ldr	r2, [r1, #12]
 8005a54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a58:	60ca      	str	r2, [r1, #12]
 8005a5a:	e7ad      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a5c:	68ca      	ldr	r2, [r1, #12]
 8005a5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a62:	60ca      	str	r2, [r1, #12]
 8005a64:	e7b6      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a66:	68ca      	ldr	r2, [r1, #12]
 8005a68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a6c:	60ca      	str	r2, [r1, #12]
 8005a6e:	e7bf      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a70:	68ca      	ldr	r2, [r1, #12]
 8005a72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a76:	60ca      	str	r2, [r1, #12]
 8005a78:	e7c8      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a7a:	68d3      	ldr	r3, [r2, #12]
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a80:	60d3      	str	r3, [r2, #12]
}
 8005a82:	b002      	add	sp, #8
 8005a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a88:	4613      	mov	r3, r2
 8005a8a:	e706      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	40007000 	.word	0x40007000

08005a94 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a94:	6a03      	ldr	r3, [r0, #32]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9c:	6a03      	ldr	r3, [r0, #32]
{
 8005a9e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005aaa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005aae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ab0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005ab6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab8:	4d13      	ldr	r5, [pc, #76]	; (8005b08 <TIM_OC1_SetConfig+0x74>)
 8005aba:	42a8      	cmp	r0, r5
 8005abc:	d00f      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005abe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ac2:	42a8      	cmp	r0, r5
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005ac6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005aca:	42a8      	cmp	r0, r5
 8005acc:	d007      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005ace:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	d003      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ada:	42a8      	cmp	r0, r5
 8005adc:	d10d      	bne.n	8005afa <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ade:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005ae4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aee:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005afc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005afe:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005b00:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8005b02:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005b04:	6203      	str	r3, [r0, #32]
}
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00

08005b0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b0c:	6a03      	ldr	r3, [r0, #32]
 8005b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b14:	6a03      	ldr	r3, [r0, #32]
{
 8005b16:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005b2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b32:	4d15      	ldr	r5, [pc, #84]	; (8005b88 <TIM_OC3_SetConfig+0x7c>)
 8005b34:	42a8      	cmp	r0, r5
 8005b36:	d010      	beq.n	8005b5a <TIM_OC3_SetConfig+0x4e>
 8005b38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b3c:	42a8      	cmp	r0, r5
 8005b3e:	d00c      	beq.n	8005b5a <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b44:	42a8      	cmp	r0, r5
 8005b46:	d00f      	beq.n	8005b68 <TIM_OC3_SetConfig+0x5c>
 8005b48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b4c:	42a8      	cmp	r0, r5
 8005b4e:	d00b      	beq.n	8005b68 <TIM_OC3_SetConfig+0x5c>
 8005b50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b54:	42a8      	cmp	r0, r5
 8005b56:	d10f      	bne.n	8005b78 <TIM_OC3_SetConfig+0x6c>
 8005b58:	e006      	b.n	8005b68 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b68:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b70:	ea46 0c05 	orr.w	ip, r6, r5
 8005b74:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b78:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005b7a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005b7c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005b7e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005b80:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005b82:	6203      	str	r3, [r0, #32]
}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00

08005b8c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8c:	6a03      	ldr	r3, [r0, #32]
 8005b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b92:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b94:	6a03      	ldr	r3, [r0, #32]
{
 8005b96:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005ba2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005baa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bb4:	4d14      	ldr	r5, [pc, #80]	; (8005c08 <TIM_OC4_SetConfig+0x7c>)
 8005bb6:	42a8      	cmp	r0, r5
 8005bb8:	d010      	beq.n	8005bdc <TIM_OC4_SetConfig+0x50>
 8005bba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bbe:	42a8      	cmp	r0, r5
 8005bc0:	d00c      	beq.n	8005bdc <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bc6:	42a8      	cmp	r0, r5
 8005bc8:	d00f      	beq.n	8005bea <TIM_OC4_SetConfig+0x5e>
 8005bca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bce:	42a8      	cmp	r0, r5
 8005bd0:	d00b      	beq.n	8005bea <TIM_OC4_SetConfig+0x5e>
 8005bd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bd6:	42a8      	cmp	r0, r5
 8005bd8:	d10f      	bne.n	8005bfa <TIM_OC4_SetConfig+0x6e>
 8005bda:	e006      	b.n	8005bea <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bdc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005be2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005bea:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005bee:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005bf2:	ea46 0c05 	orr.w	ip, r6, r5
 8005bf6:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bfa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005bfc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005bfe:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005c00:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8005c02:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005c04:	6203      	str	r3, [r0, #32]
}
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00

08005c0c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f000 8081 	beq.w	8005d14 <HAL_TIM_Base_Init+0x108>
{
 8005c12:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c18:	4604      	mov	r4, r0
 8005c1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d06d      	beq.n	8005cfe <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c22:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	493c      	ldr	r1, [pc, #240]	; (8005d18 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	2302      	movs	r3, #2
 8005c28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005c2e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	d051      	beq.n	8005cd6 <HAL_TIM_Base_Init+0xca>
 8005c32:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005c36:	d021      	beq.n	8005c7c <HAL_TIM_Base_Init+0x70>
 8005c38:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005c3c:	428a      	cmp	r2, r1
 8005c3e:	d01d      	beq.n	8005c7c <HAL_TIM_Base_Init+0x70>
 8005c40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c44:	428a      	cmp	r2, r1
 8005c46:	d019      	beq.n	8005c7c <HAL_TIM_Base_Init+0x70>
 8005c48:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005c4c:	428a      	cmp	r2, r1
 8005c4e:	d042      	beq.n	8005cd6 <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c50:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d057      	beq.n	8005d08 <HAL_TIM_Base_Init+0xfc>
 8005c58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c5c:	428a      	cmp	r2, r1
 8005c5e:	d053      	beq.n	8005d08 <HAL_TIM_Base_Init+0xfc>
 8005c60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c64:	428a      	cmp	r2, r1
 8005c66:	d04f      	beq.n	8005d08 <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c68:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c70:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005c72:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005c74:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c76:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c78:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c7a:	e010      	b.n	8005c9e <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005c7c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c84:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c92:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005c96:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005c98:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c9c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005caa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cc6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005cca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005cd2:	2000      	movs	r0, #0
}
 8005cd4:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005cd6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005cde:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce6:	69a1      	ldr	r1, [r4, #24]
 8005ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cec:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005cee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf0:	68e3      	ldr	r3, [r4, #12]
 8005cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf8:	6963      	ldr	r3, [r4, #20]
 8005cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfc:	e7cf      	b.n	8005c9e <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005d02:	f7fd fd55 	bl	80037b0 <HAL_TIM_Base_MspInit>
 8005d06:	e78c      	b.n	8005c22 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d08:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d10:	4303      	orrs	r3, r0
 8005d12:	e7e9      	b.n	8005ce8 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8005d14:	2001      	movs	r0, #1
}
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <HAL_TIM_PWM_MspInit>:
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f000 8081 	beq.w	8005e28 <HAL_TIM_PWM_Init+0x108>
{
 8005d26:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d06d      	beq.n	8005e12 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d36:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d38:	493c      	ldr	r1, [pc, #240]	; (8005e2c <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005d42:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d44:	d051      	beq.n	8005dea <HAL_TIM_PWM_Init+0xca>
 8005d46:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005d4a:	d021      	beq.n	8005d90 <HAL_TIM_PWM_Init+0x70>
 8005d4c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005d50:	428a      	cmp	r2, r1
 8005d52:	d01d      	beq.n	8005d90 <HAL_TIM_PWM_Init+0x70>
 8005d54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d58:	428a      	cmp	r2, r1
 8005d5a:	d019      	beq.n	8005d90 <HAL_TIM_PWM_Init+0x70>
 8005d5c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005d60:	428a      	cmp	r2, r1
 8005d62:	d042      	beq.n	8005dea <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d64:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005d68:	428a      	cmp	r2, r1
 8005d6a:	d057      	beq.n	8005e1c <HAL_TIM_PWM_Init+0xfc>
 8005d6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d70:	428a      	cmp	r2, r1
 8005d72:	d053      	beq.n	8005e1c <HAL_TIM_PWM_Init+0xfc>
 8005d74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d78:	428a      	cmp	r2, r1
 8005d7a:	d04f      	beq.n	8005e1c <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d7e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d84:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005d86:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005d88:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d8c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d8e:	e010      	b.n	8005db2 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005d90:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d92:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d98:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d9e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005daa:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005dac:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dae:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005db0:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005db2:	2301      	movs	r3, #1
 8005db4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005dbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005dc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005dc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005dde:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005de6:	2000      	movs	r0, #0
}
 8005de8:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005dea:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dec:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005df2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dfa:	69a1      	ldr	r1, [r4, #24]
 8005dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e00:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005e02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e04:	68e3      	ldr	r3, [r4, #12]
 8005e06:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005e0c:	6963      	ldr	r3, [r4, #20]
 8005e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e10:	e7cf      	b.n	8005db2 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8005e12:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005e16:	f7ff ff81 	bl	8005d1c <HAL_TIM_PWM_MspInit>
 8005e1a:	e78c      	b.n	8005d36 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e1e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e24:	4303      	orrs	r3, r0
 8005e26:	e7e9      	b.n	8005dfc <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8005e28:	2001      	movs	r0, #1
}
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00

08005e30 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005e30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	f000 8088 	beq.w	8005f4a <HAL_TIM_ConfigClockSource+0x11a>
 8005e3a:	4602      	mov	r2, r0
{
 8005e3c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005e40:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e42:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005e46:	2001      	movs	r0, #1
 8005e48:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4e:	4b5e      	ldr	r3, [pc, #376]	; (8005fc8 <HAL_TIM_ConfigClockSource+0x198>)
 8005e50:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005e52:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005e54:	680b      	ldr	r3, [r1, #0]
 8005e56:	2b70      	cmp	r3, #112	; 0x70
 8005e58:	f000 80a5 	beq.w	8005fa6 <HAL_TIM_ConfigClockSource+0x176>
 8005e5c:	d827      	bhi.n	8005eae <HAL_TIM_ConfigClockSource+0x7e>
 8005e5e:	2b50      	cmp	r3, #80	; 0x50
 8005e60:	d075      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x11e>
 8005e62:	d93d      	bls.n	8005ee0 <HAL_TIM_ConfigClockSource+0xb0>
 8005e64:	2b60      	cmp	r3, #96	; 0x60
 8005e66:	d11a      	bne.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e68:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e6a:	6848      	ldr	r0, [r1, #4]
 8005e6c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6e:	f023 0310 	bic.w	r3, r3, #16
 8005e72:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e74:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005e76:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e78:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e80:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e84:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e88:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005e8a:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e8c:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e8e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e96:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9c:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005e9e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005ea0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ea2:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ea6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005eaa:	bc30      	pop	{r4, r5}
 8005eac:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb2:	d067      	beq.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
 8005eb4:	d938      	bls.n	8005f28 <HAL_TIM_ConfigClockSource+0xf8>
 8005eb6:	4945      	ldr	r1, [pc, #276]	; (8005fcc <HAL_TIM_ConfigClockSource+0x19c>)
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	d006      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
 8005ebc:	d92d      	bls.n	8005f1a <HAL_TIM_ConfigClockSource+0xea>
 8005ebe:	4944      	ldr	r1, [pc, #272]	; (8005fd0 <HAL_TIM_ConfigClockSource+0x1a0>)
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	d002      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
 8005ec4:	3130      	adds	r1, #48	; 0x30
 8005ec6:	428b      	cmp	r3, r1
 8005ec8:	d1e9      	bne.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8005eca:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ecc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005ed0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed4:	4319      	orrs	r1, r3
 8005ed6:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005edc:	60a1      	str	r1, [r4, #8]
}
 8005ede:	e7de      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d126      	bne.n	8005f32 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee4:	684b      	ldr	r3, [r1, #4]
 8005ee6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005ee8:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eea:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005eee:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef0:	6a23      	ldr	r3, [r4, #32]
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef8:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005efe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005f02:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005f04:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005f06:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f10:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005f16:	60a3      	str	r3, [r4, #8]
}
 8005f18:	e7c1      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005f1a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f1e:	d0d4      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
 8005f20:	3910      	subs	r1, #16
 8005f22:	428b      	cmp	r3, r1
 8005f24:	d0d1      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
 8005f26:	e7ba      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8005f2c:	bf18      	it	ne
 8005f2e:	2001      	movne	r0, #1
 8005f30:	e7b5      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005f32:	d8b4      	bhi.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d0c8      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
 8005f38:	d903      	bls.n	8005f42 <HAL_TIM_ConfigClockSource+0x112>
 8005f3a:	2b30      	cmp	r3, #48	; 0x30
 8005f3c:	d0c5      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e7ad      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
 8005f42:	f033 0110 	bics.w	r1, r3, #16
 8005f46:	d1aa      	bne.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
 8005f48:	e7bf      	b.n	8005eca <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8005f4a:	2002      	movs	r0, #2
}
 8005f4c:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4e:	684b      	ldr	r3, [r1, #4]
 8005f50:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005f52:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f54:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005f58:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5a:	6a23      	ldr	r3, [r4, #32]
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f62:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005f6c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005f6e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005f70:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f7a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005f7e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005f80:	60a3      	str	r3, [r4, #8]
}
 8005f82:	e78c      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f84:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005f88:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f8a:	432b      	orrs	r3, r5
 8005f8c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005f96:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f98:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8005fa0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fa2:	60a3      	str	r3, [r4, #8]
      break;
 8005fa4:	e77b      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005faa:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fac:	432b      	orrs	r3, r5
 8005fae:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005fb8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005fba:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005fbc:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8005fc2:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8005fc4:	60a3      	str	r3, [r4, #8]
      break;
 8005fc6:	e76a      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x6e>
 8005fc8:	ffce0088 	.word	0xffce0088
 8005fcc:	00100030 	.word	0x00100030
 8005fd0:	00100040 	.word	0x00100040

08005fd4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd4:	6a03      	ldr	r3, [r0, #32]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005fdc:	6a03      	ldr	r3, [r0, #32]
{
 8005fde:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005fe0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005fea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ff2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ff8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ffc:	4d14      	ldr	r5, [pc, #80]	; (8006050 <TIM_OC2_SetConfig+0x7c>)
 8005ffe:	42a8      	cmp	r0, r5
 8006000:	d010      	beq.n	8006024 <TIM_OC2_SetConfig+0x50>
 8006002:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006006:	42a8      	cmp	r0, r5
 8006008:	d00c      	beq.n	8006024 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800600e:	42a8      	cmp	r0, r5
 8006010:	d00f      	beq.n	8006032 <TIM_OC2_SetConfig+0x5e>
 8006012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006016:	42a8      	cmp	r0, r5
 8006018:	d00b      	beq.n	8006032 <TIM_OC2_SetConfig+0x5e>
 800601a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800601e:	42a8      	cmp	r0, r5
 8006020:	d10f      	bne.n	8006042 <TIM_OC2_SetConfig+0x6e>
 8006022:	e006      	b.n	8006032 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006024:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800602a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006032:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006036:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800603a:	ea46 0c05 	orr.w	ip, r6, r5
 800603e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006042:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006044:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006046:	6182      	str	r2, [r0, #24]
}
 8006048:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800604a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800604c:	6203      	str	r3, [r0, #32]
}
 800604e:	4770      	bx	lr
 8006050:	40012c00 	.word	0x40012c00

08006054 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	f000 80f7 	beq.w	800624c <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800605e:	2301      	movs	r3, #1
{
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006066:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800606a:	2a14      	cmp	r2, #20
 800606c:	d80c      	bhi.n	8006088 <HAL_TIM_PWM_ConfigChannel+0x34>
 800606e:	e8df f002 	tbb	[pc, r2]
 8006072:	0b55      	.short	0x0b55
 8006074:	0b6a0b0b 	.word	0x0b6a0b0b
 8006078:	0b800b0b 	.word	0x0b800b0b
 800607c:	0b950b0b 	.word	0x0b950b0b
 8006080:	0bab0b0b 	.word	0x0bab0b0b
 8006084:	0b0b      	.short	0x0b0b
 8006086:	11          	.byte	0x11
 8006087:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006088:	2200      	movs	r2, #0
  switch (Channel)
 800608a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800608c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006094:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006096:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006098:	6a13      	ldr	r3, [r2, #32]
 800609a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800609e:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 80060a0:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80060a2:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80060a4:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060a6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80060aa:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ae:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060b2:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060b8:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	4e65      	ldr	r6, [pc, #404]	; (8006254 <HAL_TIM_PWM_ConfigChannel+0x200>)
 80060be:	42b2      	cmp	r2, r6
 80060c0:	d00f      	beq.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 80060c2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80060c6:	42b2      	cmp	r2, r6
 80060c8:	d00b      	beq.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 80060ca:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80060ce:	42b2      	cmp	r2, r6
 80060d0:	d007      	beq.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 80060d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060d6:	42b2      	cmp	r2, r6
 80060d8:	d003      	beq.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 80060da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80060de:	42b2      	cmp	r2, r6
 80060e0:	d104      	bne.n	80060ec <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060e2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060e4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060e8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80060ec:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 80060ee:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 80060f0:	6869      	ldr	r1, [r5, #4]
 80060f2:	64d1      	str	r1, [r2, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 80060f4:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060f8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060fe:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006100:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006102:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006106:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006108:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800610a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800610e:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006110:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006112:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006114:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	f7ff fcb9 	bl	8005a94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006122:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006124:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006126:	f043 0308 	orr.w	r3, r3, #8
 800612a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800612c:	6982      	ldr	r2, [r0, #24]
 800612e:	f022 0204 	bic.w	r2, r2, #4
 8006132:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006134:	6982      	ldr	r2, [r0, #24]
 8006136:	430a      	orrs	r2, r1
 8006138:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800613a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800613c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800613e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006142:	4618      	mov	r0, r3
 8006144:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006146:	6800      	ldr	r0, [r0, #0]
 8006148:	f7ff ff44 	bl	8005fd4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800614c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800614e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006154:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006156:	6982      	ldr	r2, [r0, #24]
 8006158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615c:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800615e:	6982      	ldr	r2, [r0, #24]
 8006160:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006164:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8006166:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006168:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800616a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800616e:	4618      	mov	r0, r3
 8006170:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	f7ff fcca 	bl	8005b0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006178:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800617a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617c:	f043 0308 	orr.w	r3, r3, #8
 8006180:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	69c2      	ldr	r2, [r0, #28]
 8006184:	f022 0204 	bic.w	r2, r2, #4
 8006188:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800618a:	69c2      	ldr	r2, [r0, #28]
 800618c:	430a      	orrs	r2, r1
 800618e:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8006190:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006194:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f7ff fcf5 	bl	8005b8c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a2:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061aa:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ac:	69c2      	ldr	r2, [r0, #28]
 80061ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b2:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b4:	69c2      	ldr	r2, [r0, #28]
 80061b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80061ba:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 80061bc:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80061c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061c8:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80061ca:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061cc:	6a13      	ldr	r3, [r2, #32]
 80061ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d2:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 80061d4:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80061d6:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80061d8:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80061de:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80061e2:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061e4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80061e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	4e19      	ldr	r6, [pc, #100]	; (8006254 <HAL_TIM_PWM_ConfigChannel+0x200>)
 80061f0:	42b2      	cmp	r2, r6
 80061f2:	d00f      	beq.n	8006214 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80061f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80061f8:	42b2      	cmp	r2, r6
 80061fa:	d00b      	beq.n	8006214 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80061fc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006200:	42b2      	cmp	r2, r6
 8006202:	d007      	beq.n	8006214 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8006204:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006208:	42b2      	cmp	r2, r6
 800620a:	d003      	beq.n	8006214 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800620c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006210:	42b2      	cmp	r2, r6
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_ConfigChannel+0x1ca>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006214:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006216:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800621a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800621e:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006220:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006222:	6869      	ldr	r1, [r5, #4]
 8006224:	6491      	str	r1, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006226:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006228:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800622a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800622c:	f043 0308 	orr.w	r3, r3, #8
 8006230:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006232:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006234:	f021 0104 	bic.w	r1, r1, #4
 8006238:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800623c:	4301      	orrs	r1, r0
 800623e:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006240:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006242:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006244:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006248:	4618      	mov	r0, r3
 800624a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800624c:	2302      	movs	r3, #2
}
 800624e:	4618      	mov	r0, r3
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40012c00 	.word	0x40012c00

08006258 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006258:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d03e      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006260:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006262:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006264:	4d1f      	ldr	r5, [pc, #124]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006266:	2302      	movs	r3, #2
 8006268:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800626c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800626e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006270:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006272:	d028      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006274:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006278:	42aa      	cmp	r2, r5
 800627a:	d024      	beq.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800627e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006286:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006288:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800628c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	d00c      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006290:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006292:	429a      	cmp	r2, r3
 8006294:	d009      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629a:	429a      	cmp	r2, r3
 800629c:	d005      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800629e:	42aa      	cmp	r2, r5
 80062a0:	d003      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80062a2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d104      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062aa:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ac:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80062b4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80062b6:	2201      	movs	r2, #1
 80062b8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80062bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80062c0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80062c2:	4618      	mov	r0, r3
}
 80062c4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062c6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062cc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80062da:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062dc:	e7e5      	b.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 80062de:	2002      	movs	r0, #2
}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40000400 	.word	0x40000400

080062ec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d045      	beq.n	8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 80062f4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062f6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fe:	4602      	mov	r2, r0
 8006300:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006302:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006304:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800630a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800630c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006310:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006312:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006318:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800631a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800631c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006320:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006322:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006328:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800632a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800632c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006330:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006336:	4c13      	ldr	r4, [pc, #76]	; (8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006338:	42a0      	cmp	r0, r4
 800633a:	d00b      	beq.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800633c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006340:	42a0      	cmp	r0, r4
 8006342:	d007      	beq.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006344:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006346:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006348:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800634c:	4608      	mov	r0, r1
}
 800634e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006352:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006354:	69cc      	ldr	r4, [r1, #28]
 8006356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800635c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800635e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006362:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006366:	6a0c      	ldr	r4, [r1, #32]
 8006368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800636c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800636e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006370:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006372:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006376:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006378:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800637c:	430b      	orrs	r3, r1
 800637e:	e7e1      	b.n	8006344 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006380:	2002      	movs	r0, #2
}
 8006382:	4770      	bx	lr
 8006384:	40012c00 	.word	0x40012c00

08006388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800638c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638e:	6882      	ldr	r2, [r0, #8]
 8006390:	6900      	ldr	r0, [r0, #16]
 8006392:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006394:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006396:	4302      	orrs	r2, r0
 8006398:	430a      	orrs	r2, r1
 800639a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800639c:	49a5      	ldr	r1, [pc, #660]	; (8006634 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800639e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a0:	4029      	ands	r1, r5
 80063a2:	430a      	orrs	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	68e1      	ldr	r1, [r4, #12]
 80063aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063ae:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063b0:	49a1      	ldr	r1, [pc, #644]	; (8006638 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063b4:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b6:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b8:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063ba:	d06b      	beq.n	8006494 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 80063bc:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063be:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80063c2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80063c6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063c8:	430a      	orrs	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80063d0:	f022 020f 	bic.w	r2, r2, #15
 80063d4:	430a      	orrs	r2, r1
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d8:	4a98      	ldr	r2, [pc, #608]	; (800663c <UART_SetConfig+0x2b4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d012      	beq.n	8006404 <UART_SetConfig+0x7c>
 80063de:	4a98      	ldr	r2, [pc, #608]	; (8006640 <UART_SetConfig+0x2b8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d036      	beq.n	8006452 <UART_SetConfig+0xca>
 80063e4:	4a97      	ldr	r2, [pc, #604]	; (8006644 <UART_SetConfig+0x2bc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f000 80f8 	beq.w	80065dc <UART_SetConfig+0x254>
 80063ec:	4a96      	ldr	r2, [pc, #600]	; (8006648 <UART_SetConfig+0x2c0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f000 80a4 	beq.w	800653c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80063f4:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063f6:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80063f8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80063fc:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006400:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8006402:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006404:	4b91      	ldr	r3, [pc, #580]	; (800664c <UART_SetConfig+0x2c4>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	3b01      	subs	r3, #1
 8006410:	2b02      	cmp	r3, #2
 8006412:	f240 808d 	bls.w	8006530 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006416:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800641a:	f000 80fc 	beq.w	8006616 <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800641e:	f7ff f9d3 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006422:	2800      	cmp	r0, #0
 8006424:	f000 80d8 	beq.w	80065d8 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006428:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	4b88      	ldr	r3, [pc, #544]	; (8006650 <UART_SetConfig+0x2c8>)
 800642e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006432:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006436:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800643e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006442:	f1a3 0210 	sub.w	r2, r3, #16
 8006446:	428a      	cmp	r2, r1
 8006448:	d8d4      	bhi.n	80063f4 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	2000      	movs	r0, #0
 800644e:	60d3      	str	r3, [r2, #12]
 8006450:	e7d1      	b.n	80063f6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006452:	4b7e      	ldr	r3, [pc, #504]	; (800664c <UART_SetConfig+0x2c4>)
 8006454:	4a7f      	ldr	r2, [pc, #508]	; (8006654 <UART_SetConfig+0x2cc>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006460:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006464:	d07c      	beq.n	8006560 <UART_SetConfig+0x1d8>
    switch (clocksource)
 8006466:	2b08      	cmp	r3, #8
 8006468:	d8c4      	bhi.n	80063f4 <UART_SetConfig+0x6c>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0xe8>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006597 	.word	0x08006597
 8006474:	0800641f 	.word	0x0800641f
 8006478:	08006613 	.word	0x08006613
 800647c:	080063f5 	.word	0x080063f5
 8006480:	0800655b 	.word	0x0800655b
 8006484:	080063f5 	.word	0x080063f5
 8006488:	080063f5 	.word	0x080063f5
 800648c:	080063f5 	.word	0x080063f5
 8006490:	08006603 	.word	0x08006603
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006494:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006498:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800649c:	4311      	orrs	r1, r2
 800649e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a4:	4869      	ldr	r0, [pc, #420]	; (800664c <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a6:	f022 020f 	bic.w	r2, r2, #15
 80064aa:	430a      	orrs	r2, r1
 80064ac:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ae:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ba:	f000 80a8 	beq.w	800660e <UART_SetConfig+0x286>
 80064be:	d80b      	bhi.n	80064d8 <UART_SetConfig+0x150>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d038      	beq.n	8006536 <UART_SetConfig+0x1ae>
 80064c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c8:	d194      	bne.n	80063f4 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 80064ca:	f7ff f829 	bl	8005520 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f000 8082 	beq.w	80065d8 <UART_SetConfig+0x250>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064d6:	e004      	b.n	80064e2 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064dc:	d18a      	bne.n	80063f4 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e2:	4b5b      	ldr	r3, [pc, #364]	; (8006650 <UART_SetConfig+0x2c8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80064ea:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ee:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80064f2:	4299      	cmp	r1, r3
 80064f4:	f63f af7e 	bhi.w	80063f4 <UART_SetConfig+0x6c>
 80064f8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80064fc:	f63f af7a 	bhi.w	80063f4 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006500:	2300      	movs	r3, #0
 8006502:	4619      	mov	r1, r3
 8006504:	f7fa f98e 	bl	8000824 <__aeabi_uldivmod>
 8006508:	086a      	lsrs	r2, r5, #1
 800650a:	0203      	lsls	r3, r0, #8
 800650c:	0209      	lsls	r1, r1, #8
 800650e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006512:	1898      	adds	r0, r3, r2
 8006514:	f141 0100 	adc.w	r1, r1, #0
 8006518:	462a      	mov	r2, r5
 800651a:	2300      	movs	r3, #0
 800651c:	f7fa f982 	bl	8000824 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006520:	4a4d      	ldr	r2, [pc, #308]	; (8006658 <UART_SetConfig+0x2d0>)
 8006522:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006526:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006528:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800652a:	f63f af63 	bhi.w	80063f4 <UART_SetConfig+0x6c>
 800652e:	e78c      	b.n	800644a <UART_SetConfig+0xc2>
 8006530:	4a4a      	ldr	r2, [pc, #296]	; (800665c <UART_SetConfig+0x2d4>)
 8006532:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006534:	e794      	b.n	8006460 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006536:	f7ff f935 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
        break;
 800653a:	e7c8      	b.n	80064ce <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653c:	4b43      	ldr	r3, [pc, #268]	; (800664c <UART_SetConfig+0x2c4>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d06d      	beq.n	8006626 <UART_SetConfig+0x29e>
 800654a:	d85d      	bhi.n	8006608 <UART_SetConfig+0x280>
 800654c:	b303      	cbz	r3, 8006590 <UART_SetConfig+0x208>
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	f47f af50 	bne.w	80063f4 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006554:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006558:	d020      	beq.n	800659c <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 800655a:	f7fe ffe1 	bl	8005520 <HAL_RCC_GetSysClockFreq>
        break;
 800655e:	e760      	b.n	8006422 <UART_SetConfig+0x9a>
    switch (clocksource)
 8006560:	2b08      	cmp	r3, #8
 8006562:	f63f af47 	bhi.w	80063f4 <UART_SetConfig+0x6c>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x1e4>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	0800661d 	.word	0x0800661d
 8006570:	08006617 	.word	0x08006617
 8006574:	08006623 	.word	0x08006623
 8006578:	080063f5 	.word	0x080063f5
 800657c:	0800659d 	.word	0x0800659d
 8006580:	080063f5 	.word	0x080063f5
 8006584:	080063f5 	.word	0x080063f5
 8006588:	080063f5 	.word	0x080063f5
 800658c:	080065a5 	.word	0x080065a5
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006590:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006594:	d042      	beq.n	800661c <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7ff f905 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
        break;
 800659a:	e742      	b.n	8006422 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 800659c:	f7fe ffc0 	bl	8005520 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80065a0:	b1d0      	cbz	r0, 80065d8 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065a4:	6862      	ldr	r2, [r4, #4]
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <UART_SetConfig+0x2c8>)
 80065a8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80065ac:	fbb0 f0f1 	udiv	r0, r0, r1
 80065b0:	0853      	lsrs	r3, r2, #1
 80065b2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065be:	f1a3 0210 	sub.w	r2, r3, #16
 80065c2:	428a      	cmp	r2, r1
 80065c4:	f63f af16 	bhi.w	80063f4 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80065cc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ce:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60cb      	str	r3, [r1, #12]
 80065d8:	2000      	movs	r0, #0
 80065da:	e70c      	b.n	80063f6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <UART_SetConfig+0x2c4>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d01d      	beq.n	8006626 <UART_SetConfig+0x29e>
 80065ea:	d804      	bhi.n	80065f6 <UART_SetConfig+0x26e>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0cf      	beq.n	8006590 <UART_SetConfig+0x208>
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d0af      	beq.n	8006554 <UART_SetConfig+0x1cc>
 80065f4:	e6fe      	b.n	80063f4 <UART_SetConfig+0x6c>
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	f47f aefc 	bne.w	80063f4 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006600:	d0d0      	beq.n	80065a4 <UART_SetConfig+0x21c>
    switch (clocksource)
 8006602:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006606:	e710      	b.n	800642a <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006608:	2bc0      	cmp	r3, #192	; 0xc0
 800660a:	d0f7      	beq.n	80065fc <UART_SetConfig+0x274>
 800660c:	e6f2      	b.n	80063f4 <UART_SetConfig+0x6c>
 800660e:	4814      	ldr	r0, [pc, #80]	; (8006660 <UART_SetConfig+0x2d8>)
 8006610:	e767      	b.n	80064e2 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8006612:	4813      	ldr	r0, [pc, #76]	; (8006660 <UART_SetConfig+0x2d8>)
 8006614:	e709      	b.n	800642a <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006616:	f7ff f8d7 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
        break;
 800661a:	e7c1      	b.n	80065a0 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7ff f8c2 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
        break;
 8006620:	e7be      	b.n	80065a0 <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 8006622:	480f      	ldr	r0, [pc, #60]	; (8006660 <UART_SetConfig+0x2d8>)
 8006624:	e7be      	b.n	80065a4 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006626:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800662a:	480d      	ldr	r0, [pc, #52]	; (8006660 <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662c:	f47f aefd 	bne.w	800642a <UART_SetConfig+0xa2>
 8006630:	e7b8      	b.n	80065a4 <UART_SetConfig+0x21c>
 8006632:	bf00      	nop
 8006634:	cfff69f3 	.word	0xcfff69f3
 8006638:	40008000 	.word	0x40008000
 800663c:	40013800 	.word	0x40013800
 8006640:	40004400 	.word	0x40004400
 8006644:	40004800 	.word	0x40004800
 8006648:	40004c00 	.word	0x40004c00
 800664c:	40021000 	.word	0x40021000
 8006650:	08008a50 	.word	0x08008a50
 8006654:	08008a40 	.word	0x08008a40
 8006658:	000ffcff 	.word	0x000ffcff
 800665c:	08008a3c 	.word	0x08008a3c
 8006660:	00f42400 	.word	0x00f42400

08006664 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006664:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006666:	07da      	lsls	r2, r3, #31
{
 8006668:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666a:	d506      	bpl.n	800667a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800666c:	6801      	ldr	r1, [r0, #0]
 800666e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006670:	684a      	ldr	r2, [r1, #4]
 8006672:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006676:	4322      	orrs	r2, r4
 8006678:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800667a:	079c      	lsls	r4, r3, #30
 800667c:	d506      	bpl.n	800668c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800667e:	6801      	ldr	r1, [r0, #0]
 8006680:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006682:	684a      	ldr	r2, [r1, #4]
 8006684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006688:	4322      	orrs	r2, r4
 800668a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800668c:	0759      	lsls	r1, r3, #29
 800668e:	d506      	bpl.n	800669e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006690:	6801      	ldr	r1, [r0, #0]
 8006692:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006694:	684a      	ldr	r2, [r1, #4]
 8006696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800669a:	4322      	orrs	r2, r4
 800669c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800669e:	071a      	lsls	r2, r3, #28
 80066a0:	d506      	bpl.n	80066b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066a2:	6801      	ldr	r1, [r0, #0]
 80066a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80066a6:	684a      	ldr	r2, [r1, #4]
 80066a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ac:	4322      	orrs	r2, r4
 80066ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b0:	06dc      	lsls	r4, r3, #27
 80066b2:	d506      	bpl.n	80066c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b4:	6801      	ldr	r1, [r0, #0]
 80066b6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80066b8:	688a      	ldr	r2, [r1, #8]
 80066ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066be:	4322      	orrs	r2, r4
 80066c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066c2:	0699      	lsls	r1, r3, #26
 80066c4:	d506      	bpl.n	80066d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066c6:	6801      	ldr	r1, [r0, #0]
 80066c8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80066ca:	688a      	ldr	r2, [r1, #8]
 80066cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d0:	4322      	orrs	r2, r4
 80066d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d4:	065a      	lsls	r2, r3, #25
 80066d6:	d509      	bpl.n	80066ec <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d8:	6801      	ldr	r1, [r0, #0]
 80066da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80066dc:	684a      	ldr	r2, [r1, #4]
 80066de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80066e2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ea:	d00b      	beq.n	8006704 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	d506      	bpl.n	80066fe <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f0:	6802      	ldr	r2, [r0, #0]
 80066f2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80066f4:	6853      	ldr	r3, [r2, #4]
 80066f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]
  }
}
 80066fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006702:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006704:	684a      	ldr	r2, [r1, #4]
 8006706:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006708:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800670c:	4322      	orrs	r2, r4
 800670e:	604a      	str	r2, [r1, #4]
 8006710:	e7ec      	b.n	80066ec <UART_AdvFeatureConfig+0x88>
 8006712:	bf00      	nop

08006714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006718:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	6804      	ldr	r4, [r0, #0]
{
 800671e:	4607      	mov	r7, r0
 8006720:	460e      	mov	r6, r1
 8006722:	4615      	mov	r5, r2
 8006724:	4699      	mov	r9, r3
 8006726:	f1b8 3fff 	cmp.w	r8, #4294967295
 800672a:	d10a      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672c:	69e3      	ldr	r3, [r4, #28]
 800672e:	ea36 0303 	bics.w	r3, r6, r3
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	429d      	cmp	r5, r3
 800673a:	d0f7      	beq.n	800672c <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800673c:	2000      	movs	r0, #0
}
 800673e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006742:	69e2      	ldr	r2, [r4, #28]
 8006744:	ea36 0202 	bics.w	r2, r6, r2
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	42ab      	cmp	r3, r5
 8006750:	d1f4      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fd fb37 	bl	8003dc4 <HAL_GetTick>
 8006756:	eba0 0009 	sub.w	r0, r0, r9
 800675a:	4540      	cmp	r0, r8
 800675c:	d833      	bhi.n	80067c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	d030      	beq.n	80067c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006764:	683c      	ldr	r4, [r7, #0]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	0758      	lsls	r0, r3, #29
 800676a:	4622      	mov	r2, r4
 800676c:	d5db      	bpl.n	8006726 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676e:	69e3      	ldr	r3, [r4, #28]
 8006770:	0519      	lsls	r1, r3, #20
 8006772:	d5d8      	bpl.n	8006726 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006778:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800677e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	e844 3100 	strex	r1, r3, [r4]
 8006786:	b139      	cbz	r1, 8006798 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	e852 3f00 	ldrex	r3, [r2]
 800678c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	e842 3100 	strex	r1, r3, [r2]
 8006794:	2900      	cmp	r1, #0
 8006796:	d1f7      	bne.n	8006788 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	f102 0308 	add.w	r3, r2, #8
 800679c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	f102 0008 	add.w	r0, r2, #8
 80067a8:	e840 3100 	strex	r1, r3, [r0]
 80067ac:	2900      	cmp	r1, #0
 80067ae:	d1f3      	bne.n	8006798 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80067b0:	2320      	movs	r3, #32
 80067b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80067b6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80067ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 80067be:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 80067c4:	e7bb      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0x2a>
 80067c6:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	e842 3100 	strex	r1, r3, [r2]
 80067d4:	2900      	cmp	r1, #0
 80067d6:	d1f7      	bne.n	80067c8 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	f102 0308 	add.w	r3, r2, #8
 80067dc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	f102 0008 	add.w	r0, r2, #8
 80067e8:	e840 3100 	strex	r1, r3, [r0]
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d1f3      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80067f0:	2320      	movs	r3, #32
 80067f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80067f6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80067fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80067fe:	2003      	movs	r0, #3
 8006800:	e79d      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0x2a>
 8006802:	bf00      	nop

08006804 <HAL_UART_Init>:
  if (huart == NULL)
 8006804:	2800      	cmp	r0, #0
 8006806:	d066      	beq.n	80068d6 <HAL_UART_Init+0xd2>
{
 8006808:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800680a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800680e:	b082      	sub	sp, #8
 8006810:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006812:	2b00      	cmp	r3, #0
 8006814:	d04c      	beq.n	80068b0 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8006816:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006818:	2324      	movs	r3, #36	; 0x24
 800681a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006824:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006826:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006828:	f7ff fdae 	bl	8006388 <UART_SetConfig>
 800682c:	2801      	cmp	r0, #1
 800682e:	d03c      	beq.n	80068aa <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d135      	bne.n	80068a2 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	6859      	ldr	r1, [r3, #4]
 800683a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800683e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006840:	6899      	ldr	r1, [r3, #8]
 8006842:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8006846:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006848:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800684c:	f041 0101 	orr.w	r1, r1, #1
 8006850:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006852:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006856:	f7fd fab5 	bl	8003dc4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8006860:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006862:	d40e      	bmi.n	8006882 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	075b      	lsls	r3, r3, #29
 8006868:	d427      	bmi.n	80068ba <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800686c:	2220      	movs	r2, #32
 800686e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006872:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006876:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800687a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800687e:	b002      	add	sp, #8
 8006880:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006882:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	462a      	mov	r2, r5
 800688a:	4603      	mov	r3, r0
 800688c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff ff3f 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 8006896:	b9e0      	cbnz	r0, 80068d2 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	075b      	lsls	r3, r3, #29
 800689e:	d40c      	bmi.n	80068ba <HAL_UART_Init+0xb6>
 80068a0:	e7e3      	b.n	800686a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80068a2:	4620      	mov	r0, r4
 80068a4:	f7ff fede 	bl	8006664 <UART_AdvFeatureConfig>
 80068a8:	e7c5      	b.n	8006836 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80068aa:	2001      	movs	r0, #1
}
 80068ac:	b002      	add	sp, #8
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80068b0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80068b4:	f7fd f800 	bl	80038b8 <HAL_UART_MspInit>
 80068b8:	e7ad      	b.n	8006816 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	4633      	mov	r3, r6
 80068c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff ff23 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d0cb      	beq.n	800686a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80068d2:	2003      	movs	r0, #3
 80068d4:	e7d3      	b.n	800687e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop

080068dc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068dc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d017      	beq.n	8006914 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068e4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80068e6:	2324      	movs	r3, #36	; 0x24
{
 80068e8:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80068ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068ee:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068f0:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068f2:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80068f4:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068f8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80068fc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068fe:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006900:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006902:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8006906:	2220      	movs	r2, #32
 8006908:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800690c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8006910:	4618      	mov	r0, r3
}
 8006912:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006914:	2002      	movs	r0, #2
}
 8006916:	4770      	bx	lr

08006918 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006918:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800691c:	2a01      	cmp	r2, #1
 800691e:	d037      	beq.n	8006990 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8006920:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006922:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006924:	2024      	movs	r0, #36	; 0x24
{
 8006926:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006928:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800692c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800692e:	6810      	ldr	r0, [r2, #0]
 8006930:	f020 0001 	bic.w	r0, r0, #1
 8006934:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006936:	6890      	ldr	r0, [r2, #8]
 8006938:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800693c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800693e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006940:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006942:	b310      	cbz	r0, 800698a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006944:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006946:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8006948:	4d12      	ldr	r5, [pc, #72]	; (8006994 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800694a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800694e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006952:	4911      	ldr	r1, [pc, #68]	; (8006998 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8006954:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006958:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800695c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006960:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006964:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006966:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006968:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696c:	fbb1 f1f5 	udiv	r1, r1, r5
 8006970:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006974:	2100      	movs	r1, #0
 8006976:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800697a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800697e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8006982:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006984:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006988:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800698a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800698c:	4608      	mov	r0, r1
 800698e:	e7ef      	b.n	8006970 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006990:	2002      	movs	r0, #2
}
 8006992:	4770      	bx	lr
 8006994:	08008a68 	.word	0x08008a68
 8006998:	08008a70 	.word	0x08008a70

0800699c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800699c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80069a0:	2a01      	cmp	r2, #1
 80069a2:	d037      	beq.n	8006a14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80069a4:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80069a8:	2024      	movs	r0, #36	; 0x24
{
 80069aa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80069ac:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069b0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80069b2:	6810      	ldr	r0, [r2, #0]
 80069b4:	f020 0001 	bic.w	r0, r0, #1
 80069b8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069ba:	6890      	ldr	r0, [r2, #8]
 80069bc:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80069c0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069c2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069c4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069c6:	b310      	cbz	r0, 8006a0e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069c8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069ca:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80069cc:	4d12      	ldr	r5, [pc, #72]	; (8006a18 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069ce:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069d2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069d6:	4911      	ldr	r1, [pc, #68]	; (8006a1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80069d8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069dc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80069e0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80069e4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069e8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069ea:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ec:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069f0:	fbb1 f1f5 	udiv	r1, r1, r5
 80069f4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80069f8:	2100      	movs	r1, #0
 80069fa:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80069fe:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a00:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006a02:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8006a06:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006a08:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006a0c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006a0e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006a10:	4608      	mov	r0, r1
 8006a12:	e7ef      	b.n	80069f4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006a14:	2002      	movs	r0, #2
}
 8006a16:	4770      	bx	lr
 8006a18:	08008a68 	.word	0x08008a68
 8006a1c:	08008a70 	.word	0x08008a70

08006a20 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8006a20:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8006a22:	8840      	ldrh	r0, [r0, #2]
 8006a24:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8006a28:	0c00      	lsrs	r0, r0, #16
 8006a2a:	4770      	bx	lr

08006a2c <BADC_Init>:
/**
  * @brief  Initializes ADC and NVIC for three bemf voltages reading
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Init( Bemf_ADC_Handle_t *pHandle)
{
 8006a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006a30:	6c45      	ldr	r5, [r0, #68]	; 0x44
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006a32:	4e9d      	ldr	r6, [pc, #628]	; (8006ca8 <BADC_Init+0x27c>)
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006a34:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(ADCx->CR,
 8006a36:	4f9d      	ldr	r7, [pc, #628]	; (8006cac <BADC_Init+0x280>)
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006a38:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006a3c:	685c      	ldr	r4, [r3, #4]
 8006a3e:	f024 0404 	bic.w	r4, r4, #4
 8006a42:	605c      	str	r4, [r3, #4]
 8006a44:	6854      	ldr	r4, [r2, #4]
 8006a46:	f024 0404 	bic.w	r4, r4, #4
 8006a4a:	6054      	str	r4, [r2, #4]
 8006a4c:	684c      	ldr	r4, [r1, #4]
 8006a4e:	f024 0404 	bic.w	r4, r4, #4
 8006a52:	604c      	str	r4, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006a54:	2404      	movs	r4, #4
 8006a56:	601c      	str	r4, [r3, #0]
 8006a58:	6014      	str	r4, [r2, #0]
 8006a5a:	600c      	str	r4, [r1, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006a5c:	685c      	ldr	r4, [r3, #4]
 8006a5e:	f024 0420 	bic.w	r4, r4, #32
 8006a62:	605c      	str	r4, [r3, #4]
 8006a64:	6854      	ldr	r4, [r2, #4]
 8006a66:	f024 0420 	bic.w	r4, r4, #32
 8006a6a:	6054      	str	r4, [r2, #4]
 8006a6c:	684c      	ldr	r4, [r1, #4]
 8006a6e:	f024 0420 	bic.w	r4, r4, #32
 8006a72:	604c      	str	r4, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006a74:	2420      	movs	r4, #32
 8006a76:	601c      	str	r4, [r3, #0]
 8006a78:	6014      	str	r4, [r2, #0]
 8006a7a:	600c      	str	r4, [r1, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006a7c:	689c      	ldr	r4, [r3, #8]
 8006a7e:	4034      	ands	r4, r6
 8006a80:	609c      	str	r4, [r3, #8]
 8006a82:	6894      	ldr	r4, [r2, #8]
 8006a84:	4034      	ands	r4, r6
 8006a86:	6094      	str	r4, [r2, #8]
 8006a88:	688c      	ldr	r4, [r1, #8]
 8006a8a:	4034      	ands	r4, r6
 8006a8c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(ADCx->CR,
 8006a8e:	689c      	ldr	r4, [r3, #8]
 8006a90:	403c      	ands	r4, r7
 8006a92:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006a96:	609c      	str	r4, [r3, #8]
 8006a98:	6894      	ldr	r4, [r2, #8]
 8006a9a:	403c      	ands	r4, r7
 8006a9c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006aa0:	6094      	str	r4, [r2, #8]
 8006aa2:	688e      	ldr	r6, [r1, #8]
    LL_ADC_DisableDeepPowerDown(ADCx_w);
    
    LL_ADC_EnableInternalRegulator( ADCx_u );
    LL_ADC_EnableInternalRegulator( ADCx_v );
    LL_ADC_EnableInternalRegulator( ADCx_w );
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006aa4:	4c82      	ldr	r4, [pc, #520]	; (8006cb0 <BADC_Init+0x284>)
 8006aa6:	403e      	ands	r6, r7
 8006aa8:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
 8006aac:	6824      	ldr	r4, [r4, #0]
 8006aae:	608e      	str	r6, [r1, #8]
 8006ab0:	4e80      	ldr	r6, [pc, #512]	; (8006cb4 <BADC_Init+0x288>)
 8006ab2:	09a4      	lsrs	r4, r4, #6
 8006ab4:	fba6 6404 	umull	r6, r4, r6, r4
{
 8006ab8:	b082      	sub	sp, #8
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006aba:	09a4      	lsrs	r4, r4, #6
 8006abc:	0064      	lsls	r4, r4, #1
 8006abe:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006ac0:	9c01      	ldr	r4, [sp, #4]
 8006ac2:	b12c      	cbz	r4, 8006ad0 <BADC_Init+0xa4>
    {
      wait_loop_index--;
 8006ac4:	9c01      	ldr	r4, [sp, #4]
 8006ac6:	3c01      	subs	r4, #1
 8006ac8:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006aca:	9c01      	ldr	r4, [sp, #4]
 8006acc:	2c00      	cmp	r4, #0
 8006ace:	d1f9      	bne.n	8006ac4 <BADC_Init+0x98>
  MODIFY_REG(ADCx->CR,
 8006ad0:	689c      	ldr	r4, [r3, #8]
 8006ad2:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 8006ad6:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006ada:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006ade:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006ae0:	689c      	ldr	r4, [r3, #8]
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	dbfc      	blt.n	8006ae0 <BADC_Init+0xb4>

    LL_ADC_StartCalibration( ADCx_u, LL_ADC_SINGLE_ENDED );
    while ( LL_ADC_IsCalibrationOnGoing( ADCx_u ) )
    {
    }
    if (ADCx_u != ADCx_v)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00a      	beq.n	8006b00 <BADC_Init+0xd4>
  MODIFY_REG(ADCx->CR,
 8006aea:	6894      	ldr	r4, [r2, #8]
 8006aec:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 8006af0:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006af4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006af8:	6094      	str	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006afa:	6894      	ldr	r4, [r2, #8]
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	dbfc      	blt.n	8006afa <BADC_Init+0xce>
      LL_ADC_StartCalibration( ADCx_v, LL_ADC_SINGLE_ENDED );
      while ( LL_ADC_IsCalibrationOnGoing( ADCx_v ) )
      {
      }
    }
    if ((ADCx_w != ADCx_u) && (ADCx_w != ADCx_v))
 8006b00:	428b      	cmp	r3, r1
 8006b02:	d00c      	beq.n	8006b1e <BADC_Init+0xf2>
 8006b04:	428a      	cmp	r2, r1
 8006b06:	d00a      	beq.n	8006b1e <BADC_Init+0xf2>
  MODIFY_REG(ADCx->CR,
 8006b08:	688c      	ldr	r4, [r1, #8]
 8006b0a:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 8006b0e:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006b12:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006b16:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006b18:	688c      	ldr	r4, [r1, #8]
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	dbfc      	blt.n	8006b18 <BADC_Init+0xec>
    /* ADC Enable (must be done after calibration) */
    /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
    * following a calibration phase, could have no effect on ADC
    * within certain AHB/ADC clock ratio.
    */
    LL_ADC_SetChannelSamplingTime (ADCx_u, pHandle->pParams_str->AdcChannel[0], LL_ADC_SAMPLINGTIME_2CYCLES_5 );
 8006b1e:	696c      	ldr	r4, [r5, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b20:	0de7      	lsrs	r7, r4, #23
 8006b22:	f103 0c14 	add.w	ip, r3, #20
 8006b26:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8006b2a:	2607      	movs	r6, #7
 8006b2c:	f85c e007 	ldr.w	lr, [ip, r7]
 8006b30:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8006b34:	fa06 f404 	lsl.w	r4, r6, r4
 8006b38:	ea2e 0404 	bic.w	r4, lr, r4
 8006b3c:	f84c 4007 	str.w	r4, [ip, r7]
    LL_ADC_SetChannelSamplingTime (ADCx_v, pHandle->pParams_str->AdcChannel[1], LL_ADC_SAMPLINGTIME_2CYCLES_5 );
 8006b40:	69ac      	ldr	r4, [r5, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b42:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
 8006b46:	f00c 0c04 	and.w	ip, ip, #4
 8006b4a:	f102 0e14 	add.w	lr, r2, #20
  MODIFY_REG(*preg,
 8006b4e:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8006b52:	f85e 800c 	ldr.w	r8, [lr, ip]
 8006b56:	fa06 f404 	lsl.w	r4, r6, r4
 8006b5a:	ea28 0404 	bic.w	r4, r8, r4
 8006b5e:	f84e 400c 	str.w	r4, [lr, ip]
    LL_ADC_SetChannelSamplingTime (ADCx_w, pHandle->pParams_str->AdcChannel[2], LL_ADC_SAMPLINGTIME_2CYCLES_5 );
 8006b62:	f8d5 c01c 	ldr.w	ip, [r5, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b66:	ea4f 54dc 	mov.w	r4, ip, lsr #23
 8006b6a:	f101 0714 	add.w	r7, r1, #20
 8006b6e:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8006b72:	f3cc 5c04 	ubfx	ip, ip, #20, #5
 8006b76:	fa06 f60c 	lsl.w	r6, r6, ip
 8006b7a:	f857 c004 	ldr.w	ip, [r7, r4]
 8006b7e:	ea2c 0606 	bic.w	r6, ip, r6
 8006b82:	513e      	str	r6, [r7, r4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006b84:	681c      	ldr	r4, [r3, #0]
 8006b86:	07e7      	lsls	r7, r4, #31
 8006b88:	d408      	bmi.n	8006b9c <BADC_Init+0x170>
  MODIFY_REG(ADCx->CR,
 8006b8a:	4e4b      	ldr	r6, [pc, #300]	; (8006cb8 <BADC_Init+0x28c>)
 8006b8c:	689c      	ldr	r4, [r3, #8]
 8006b8e:	4034      	ands	r4, r6
 8006b90:	f044 0401 	orr.w	r4, r4, #1
 8006b94:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006b96:	681c      	ldr	r4, [r3, #0]
 8006b98:	07e4      	lsls	r4, r4, #31
 8006b9a:	d5f7      	bpl.n	8006b8c <BADC_Init+0x160>
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	07de      	lsls	r6, r3, #31
 8006ba0:	d408      	bmi.n	8006bb4 <BADC_Init+0x188>
  MODIFY_REG(ADCx->CR,
 8006ba2:	4c45      	ldr	r4, [pc, #276]	; (8006cb8 <BADC_Init+0x28c>)
 8006ba4:	6893      	ldr	r3, [r2, #8]
 8006ba6:	4023      	ands	r3, r4
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	07de      	lsls	r6, r3, #31
 8006bb2:	d5f7      	bpl.n	8006ba4 <BADC_Init+0x178>
 8006bb4:	680b      	ldr	r3, [r1, #0]
 8006bb6:	07df      	lsls	r7, r3, #31
 8006bb8:	d408      	bmi.n	8006bcc <BADC_Init+0x1a0>
  MODIFY_REG(ADCx->CR,
 8006bba:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <BADC_Init+0x28c>)
 8006bbc:	688b      	ldr	r3, [r1, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006bc6:	680b      	ldr	r3, [r1, #0]
 8006bc8:	07db      	lsls	r3, r3, #31
 8006bca:	d5f7      	bpl.n	8006bbc <BADC_Init+0x190>
      LL_ADC_Enable(  ADCx_w );
    } 

    pHandle->ADCRegularLocked=false;
	
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8006bcc:	7843      	ldrb	r3, [r0, #1]
 8006bce:	8ac2      	ldrh	r2, [r0, #22]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 8006bd0:	8a84      	ldrh	r4, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8006bd2:	fb12 f203 	smulbb	r2, r2, r3
    hMaxReliableElSpeedUnit *= 2U;
 8006bd6:	fb14 f403 	smulbb	r4, r4, r3

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8006bda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    pHandle->ADCRegularLocked=false;
 8006bdc:	2100      	movs	r1, #0
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8006bde:	b292      	uxth	r2, r2
    pHandle->ADCRegularLocked=false;
 8006be0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    hMaxReliableElSpeedUnit *= 2U;
 8006be4:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8006be6:	0c19      	lsrs	r1, r3, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8006be8:	2a03      	cmp	r2, #3
    hMaxReliableElSpeedUnit *= 2U;
 8006bea:	b2a4      	uxth	r4, r4
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8006bec:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    if (0U == hMinReliableElSpeedUnit)
 8006bf0:	d957      	bls.n	8006ca2 <BADC_Init+0x276>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->BemfTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8006bf2:	0892      	lsrs	r2, r2, #2
 8006bf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006bf8:	f242 7610 	movw	r6, #10000	; 0x2710
 8006bfc:	0052      	lsls	r2, r2, #1
 8006bfe:	fbb6 f2f2 	udiv	r2, r6, r2
 8006c02:	b296      	uxth	r6, r2
    }

    /* Align MaxPeriod and MinPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006c04:	fb01 f202 	mul.w	r2, r1, r2
 8006c08:	492c      	ldr	r1, [pc, #176]	; (8006cbc <BADC_Init+0x290>)
    pHandle->MinPeriod = ((MinBemfTime * pHandle->OvfFreq) >> 8) / 1000U * 65536UL;
	
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;

    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
                              * pHandle->_Super.DPPConvFactor;
 8006c0a:	69c7      	ldr	r7, [r0, #28]
 8006c0c:	f8a0 60d0 	strh.w	r6, [r0, #208]	; 0xd0
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006c10:	fba1 1202 	umull	r1, r2, r1, r2
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006c14:	492a      	ldr	r1, [pc, #168]	; (8006cc0 <BADC_Init+0x294>)
 8006c16:	8b46      	ldrh	r6, [r0, #26]
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8006c18:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006c1c:	fba1 1303 	umull	r1, r3, r1, r3
 8006c20:	089b      	lsrs	r3, r3, #2
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006c22:	0992      	lsrs	r2, r2, #6
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006c24:	fbb3 f1f6 	udiv	r1, r3, r6
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006c28:	0412      	lsls	r2, r2, #16
                              * pHandle->_Super.DPPConvFactor;
 8006c2a:	fb07 f101 	mul.w	r1, r7, r1

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8006c2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->MaxPeriod = (pHandle->BemfTimeout * pHandle->OvfFreq) / 1000U * 65536UL;
 8006c32:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8006c36:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8006c3a:	005b      	lsls	r3, r3, #1
    if (0U == hMaxReliableElSpeedUnit)
 8006c3c:	b10c      	cbz	r4, 8006c42 <BADC_Init+0x216>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8006c3e:	fbb3 f3f4 	udiv	r3, r3, r4
 8006c42:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    }
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c46:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8006c4a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c4e:	fb06 f303 	mul.w	r3, r6, r3
 8006c52:	fbb3 f3f1 	udiv	r3, r3, r1
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8006c56:	3b01      	subs	r3, #1

    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
    pHandle->IsOnSensingEnabled = false;
 8006c58:	2100      	movs	r1, #0
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8006c5a:	f8a0 30d4 	strh.w	r3, [r0, #212]	; 0xd4
    pHandle->ElPeriodSum = 0;
    pHandle->ZcEvents = 0;
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
    
    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8006c5e:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    pHandle->IsOnSensingEnabled = false;
 8006c62:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006c66:	f100 042e 	add.w	r4, r0, #46	; 0x2e
    pHandle->ElPeriodSum = 0;
 8006c6a:	6541      	str	r1, [r0, #84]	; 0x54
    pHandle->ZcEvents = 0;
 8006c6c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
 8006c70:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006c74:	6344      	str	r4, [r0, #52]	; 0x34
    pHandle->DemagCounterThreshold  = pHandle->DemagParams.DemagMinimumThreshold;	
 8006c76:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8006c7a:	b153      	cbz	r3, 8006c92 <BADC_Init+0x266>
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b2d9      	uxtb	r1, r3
 8006c80:	f100 0368 	add.w	r3, r0, #104	; 0x68
 8006c84:	306c      	adds	r0, #108	; 0x6c
 8006c86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    {
      pHandle->SpeedBufferDpp[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8006c8a:	f843 2f04 	str.w	r2, [r3, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8006c8e:	4283      	cmp	r3, r0
 8006c90:	d1fb      	bne.n	8006c8a <BADC_Init+0x25e>
    }

    LL_TIM_EnableCounter(pHandle->pParams_str->LfTim);
 8006c92:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006c94:	6813      	ldr	r3, [r2, #0]
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	6013      	str	r3, [r2, #0]
  }
}
 8006c9c:	b002      	add	sp, #8
 8006c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca2:	2296      	movs	r2, #150	; 0x96
      pHandle->BemfTimeout = 150U;
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	e7ad      	b.n	8006c04 <BADC_Init+0x1d8>
 8006ca8:	5fffffc0 	.word	0x5fffffc0
 8006cac:	6fffffc0 	.word	0x6fffffc0
 8006cb0:	20000368 	.word	0x20000368
 8006cb4:	053e2d63 	.word	0x053e2d63
 8006cb8:	7fffffc0 	.word	0x7fffffc0
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	aaaaaaab 	.word	0xaaaaaaab

08006cc4 <BADC_Clear>:
  * @brief  Resets the parameter values of the component
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Clear( Bemf_ADC_Handle_t *pHandle )
{
  pHandle->ZcEvents = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
  pHandle->ElPeriodSum = 0;
 8006cca:	6543      	str	r3, [r0, #84]	; 0x54

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;
 8006ccc:	8243      	strh	r3, [r0, #18]
  pHandle->BufferFilled = 0U;
 8006cce:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  pHandle->CompSpeed = 0;
 8006cd2:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0U;
 8006cd6:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  pHandle->_Super.hElAngle  = 0;
 8006cda:	8083      	strh	r3, [r0, #4]
  
  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 8006cdc:	7003      	strb	r3, [r0, #0]
  pHandle->IsLoopClosed=false;
  pHandle->IsAlgorithmConverged = false;
 8006cde:	f8a0 3065 	strh.w	r3, [r0, #101]	; 0x65
}
 8006ce2:	4770      	bx	lr

08006ce4 <BADC_Start>:
 * @brief  Starts bemf ADC conversion of the phase depending on current step
 * @param  pHandle: handler of the current instance of the Bemf_ADC component
 * @param  step: current step of the six-step sequence
 */
__weak void BADC_Start(Bemf_ADC_Handle_t *pHandle, uint8_t step)
{
 8006ce4:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
  if (true == pHandle->ADCRegularLocked)
 8006ce6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006cea:	6c46      	ldr	r6, [r0, #68]	; 0x44
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006cec:	e9d6 2402 	ldrd	r2, r4, [r6, #8]
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006cf0:	6935      	ldr	r5, [r6, #16]
  if (true == pHandle->ADCRegularLocked)
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d03e      	beq.n	8006d74 <BADC_Start+0x90>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006cf6:	6853      	ldr	r3, [r2, #4]
 8006cf8:	f023 0320 	bic.w	r3, r3, #32
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	f023 0320 	bic.w	r3, r3, #32
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	686b      	ldr	r3, [r5, #4]
 8006d08:	f023 0320 	bic.w	r3, r3, #32
 8006d0c:	606b      	str	r3, [r5, #4]
  else
  {
    pHandle->ADCRegularLocked = true;
  }

  switch (step)
 8006d0e:	2905      	cmp	r1, #5
 8006d10:	d82e      	bhi.n	8006d70 <BADC_Start+0x8c>
 8006d12:	2301      	movs	r3, #1
 8006d14:	fa03 f101 	lsl.w	r1, r3, r1
 8006d18:	f011 0f24 	tst.w	r1, #36	; 0x24
 8006d1c:	d153      	bne.n	8006dc6 <BADC_Start+0xe2>
 8006d1e:	f011 0f12 	tst.w	r1, #18
 8006d22:	d12b      	bne.n	8006d7c <BADC_Start+0x98>
 8006d24:	f011 0f09 	tst.w	r1, #9
 8006d28:	d022      	beq.n	8006d70 <BADC_Start+0x8c>
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @param  Phase: Floating phase for bemf acquisition
  */
void BADC_SelectAdcChannel(Bemf_ADC_Handle_t * pHandle, uint8_t Phase)
{
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006d2a:	69f2      	ldr	r2, [r6, #28]
 8006d2c:	2a09      	cmp	r2, #9
 8006d2e:	fa03 f302 	lsl.w	r3, r3, r2
 8006d32:	d97b      	bls.n	8006e2c <BADC_Start+0x148>
 8006d34:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006d38:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006d3c:	f1a1 021e 	sub.w	r2, r1, #30
 8006d40:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(ADCx->JSQR,
 8006d48:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8006d4a:	0c5b      	lsrs	r3, r3, #17
 8006d4c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8006d50:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8006d54:	4313      	orrs	r3, r2
 8006d56:	64eb      	str	r3, [r5, #76]	; 0x4c
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006d58:	686b      	ldr	r3, [r5, #4]
 8006d5a:	f043 0320 	orr.w	r3, r3, #32
 8006d5e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8006d60:	68ab      	ldr	r3, [r5, #8]
 8006d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d6a:	f043 0308 	orr.w	r3, r3, #8
 8006d6e:	60ab      	str	r3, [r5, #8]
}
 8006d70:	bc70      	pop	{r4, r5, r6}
 8006d72:	4770      	bx	lr
    pHandle->ADCRegularLocked = true;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8006d7a:	e7c8      	b.n	8006d0e <BADC_Start+0x2a>
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006d7c:	69b2      	ldr	r2, [r6, #24]
 8006d7e:	2a09      	cmp	r2, #9
 8006d80:	fa03 f302 	lsl.w	r3, r3, r2
 8006d84:	d94b      	bls.n	8006e1e <BADC_Start+0x13a>
 8006d86:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006d8a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006d8e:	f1a1 021e 	sub.w	r2, r1, #30
 8006d92:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(ADCx->JSQR,
 8006d9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006d9c:	0c5b      	lsrs	r3, r3, #17
 8006d9e:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8006da2:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8006da6:	4313      	orrs	r3, r2
 8006da8:	64e3      	str	r3, [r4, #76]	; 0x4c
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	f043 0320 	orr.w	r3, r3, #32
 8006db0:	6063      	str	r3, [r4, #4]
  MODIFY_REG(ADCx->CR,
 8006db2:	68a3      	ldr	r3, [r4, #8]
 8006db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dbc:	f043 0308 	orr.w	r3, r3, #8
 8006dc0:	60a3      	str	r3, [r4, #8]
}
 8006dc2:	bc70      	pop	{r4, r5, r6}
 8006dc4:	4770      	bx	lr
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006dc6:	6971      	ldr	r1, [r6, #20]
 8006dc8:	2909      	cmp	r1, #9
 8006dca:	fa03 f301 	lsl.w	r3, r3, r1
 8006dce:	d91f      	bls.n	8006e10 <BADC_Start+0x12c>
 8006dd0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8006dd4:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8006dd8:	f1a0 011e 	sub.w	r1, r0, #30
 8006ddc:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8006de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(ADCx->JSQR,
 8006de4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006de6:	0c5b      	lsrs	r3, r3, #17
 8006de8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8006dec:	f421 5178 	bic.w	r1, r1, #15872	; 0x3e00
 8006df0:	430b      	orrs	r3, r1
 8006df2:	64d3      	str	r3, [r2, #76]	; 0x4c
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006df4:	6853      	ldr	r3, [r2, #4]
 8006df6:	f043 0320 	orr.w	r3, r3, #32
 8006dfa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(ADCx->CR,
 8006dfc:	6893      	ldr	r3, [r2, #8]
 8006dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e06:	f043 0308 	orr.w	r3, r3, #8
}
 8006e0a:	bc70      	pop	{r4, r5, r6}
 8006e0c:	6093      	str	r3, [r2, #8]
 8006e0e:	4770      	bx	lr
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[Phase], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[Phase]));
 8006e10:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8006e14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006e18:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8006e1c:	e7e2      	b.n	8006de4 <BADC_Start+0x100>
 8006e1e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006e22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006e26:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006e2a:	e7b6      	b.n	8006d9a <BADC_Start+0xb6>
 8006e2c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006e30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006e34:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006e38:	e786      	b.n	8006d48 <BADC_Start+0x64>
 8006e3a:	bf00      	nop

08006e3c <BADC_Stop>:
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006e3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006e3e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
{
 8006e42:	b430      	push	{r4, r5}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006e44:	684c      	ldr	r4, [r1, #4]
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f024 0420 	bic.w	r4, r4, #32
 8006e4c:	604c      	str	r4, [r1, #4]
 8006e4e:	6854      	ldr	r4, [r2, #4]
 8006e50:	f024 0420 	bic.w	r4, r4, #32
 8006e54:	6054      	str	r4, [r2, #4]
 8006e56:	685c      	ldr	r4, [r3, #4]
 8006e58:	f024 0420 	bic.w	r4, r4, #32
 8006e5c:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006e5e:	2420      	movs	r4, #32
 8006e60:	600c      	str	r4, [r1, #0]
 8006e62:	6014      	str	r4, [r2, #0]
 8006e64:	601c      	str	r4, [r3, #0]
  if (true == pHandle->ADCRegularLocked)
 8006e66:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8006e6a:	b194      	cbz	r4, 8006e92 <BADC_Stop+0x56>
  MODIFY_REG(ADCx->CR,
 8006e6c:	688c      	ldr	r4, [r1, #8]
 8006e6e:	4d0a      	ldr	r5, [pc, #40]	; (8006e98 <BADC_Stop+0x5c>)
 8006e70:	402c      	ands	r4, r5
 8006e72:	f044 0420 	orr.w	r4, r4, #32
 8006e76:	608c      	str	r4, [r1, #8]
 8006e78:	6891      	ldr	r1, [r2, #8]
 8006e7a:	4029      	ands	r1, r5
 8006e7c:	f041 0120 	orr.w	r1, r1, #32
 8006e80:	6091      	str	r1, [r2, #8]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	402a      	ands	r2, r5
    pHandle->ADCRegularLocked=false;    
 8006e86:	2100      	movs	r1, #0
 8006e88:	f042 0220 	orr.w	r2, r2, #32
 8006e8c:	609a      	str	r2, [r3, #8]
 8006e8e:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
}
 8006e92:	bc30      	pop	{r4, r5}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	7fffffc0 	.word	0x7fffffc0

08006e9c <BADC_SpeedMeasureOn>:
  LL_TIM_ClearFlag_UPDATE(pHandle->pParams_str->LfTim);
 8006e9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006e9e:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006ea0:	f06f 0201 	mvn.w	r2, #1
 8006ea4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	f042 0201 	orr.w	r2, r2, #1
 8006eac:	60da      	str	r2, [r3, #12]
}
 8006eae:	4770      	bx	lr

08006eb0 <BADC_SpeedMeasureOff>:
  LL_TIM_DisableIT_UPDATE(pHandle->pParams_str->LfTim);
 8006eb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006eb2:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006eb4:	68d3      	ldr	r3, [r2, #12]
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	60d3      	str	r3, [r2, #12]
}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <BADC_SetSamplingPoint>:
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8006ec0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8006ec4:	2a03      	cmp	r2, #3
{
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4608      	mov	r0, r1
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8006eca:	d00f      	beq.n	8006eec <BADC_SetSamplingPoint+0x2c>
      pHandle->IsOnSensingEnabled=false;
 8006ecc:	2100      	movs	r1, #0
      pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006ece:	f103 022e 	add.w	r2, r3, #46	; 0x2e
      pHandle->IsOnSensingEnabled=false;
 8006ed2:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
      pHandle->pSensing_Params = &(pHandle->Pwm_OFF);
 8006ed6:	635a      	str	r2, [r3, #52]	; 0x34
  if (true == pHandle->pParams_str->gpio_divider_available)  LL_GPIO_ResetOutputPin( pHandle->pParams_str->bemf_divider_port, pHandle->pParams_str->bemf_divider_pin );
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	f893 1020 	ldrb.w	r1, [r3, #32]
 8006ede:	b111      	cbz	r1, 8006ee6 <BADC_SetSamplingPoint+0x26>
 8006ee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8006ee4:	628b      	str	r3, [r1, #40]	; 0x28
  PWMC_SetADCTriggerChannel( pHandlePWMC, pHandle->pSensing_Params->SamplingPoint);
 8006ee6:	8891      	ldrh	r1, [r2, #4]
 8006ee8:	f000 bce2 	b.w	80078b0 <PWMC_SetADCTriggerChannel>
  if ((pHandleSTC->ModeDefault == MCM_SPEED_MODE) && (pHandle->DriveMode == VM))
 8006eec:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8006ef0:	2a00      	cmp	r2, #0
 8006ef2:	d1eb      	bne.n	8006ecc <BADC_SetSamplingPoint+0xc>
    if (!(pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh > pHandle->OnSensingEnThres))
 8006ef4:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8006ef8:	8b89      	ldrh	r1, [r1, #28]
 8006efa:	b122      	cbz	r2, 8006f06 <BADC_SetSamplingPoint+0x46>
    else if ((pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh < pHandle->OnSensingDisThres))
 8006efc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d3e4      	bcc.n	8006ecc <BADC_SetSamplingPoint+0xc>
  PWMC_SetADCTriggerChannel( pHandlePWMC, pHandle->pSensing_Params->SamplingPoint);
 8006f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f04:	e7e8      	b.n	8006ed8 <BADC_SetSamplingPoint+0x18>
    if (!(pHandle->IsOnSensingEnabled) && (pHandlePWMC->CntPh > pHandle->OnSensingEnThres))
 8006f06:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8006f08:	4291      	cmp	r1, r2
 8006f0a:	d9fa      	bls.n	8006f02 <BADC_SetSamplingPoint+0x42>
      pHandle->IsOnSensingEnabled=true;
 8006f0c:	2101      	movs	r1, #1
      pHandle->pSensing_Params = &(pHandle->Pwm_ON);
 8006f0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
      pHandle->IsOnSensingEnabled=true;
 8006f12:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
      pHandle->pSensing_Params = &(pHandle->Pwm_ON);
 8006f16:	635a      	str	r2, [r3, #52]	; 0x34
 8006f18:	e7de      	b.n	8006ed8 <BADC_SetSamplingPoint+0x18>
 8006f1a:	bf00      	nop

08006f1c <BADC_IsZcDetected>:
  pHandle->DemagCounter++;
 8006f1c:	f8b0 20f0 	ldrh.w	r2, [r0, #240]	; 0xf0
{
 8006f20:	b4f0      	push	{r4, r5, r6, r7}
 8006f22:	4603      	mov	r3, r0
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[0];
 8006f24:	6c44      	ldr	r4, [r0, #68]	; 0x44
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8006f26:	f8b0 00f2 	ldrh.w	r0, [r0, #242]	; 0xf2
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[2];
 8006f2a:	6927      	ldr	r7, [r4, #16]
  pHandle->DemagCounter++;
 8006f2c:	3201      	adds	r2, #1
 8006f2e:	b292      	uxth	r2, r2
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8006f30:	4290      	cmp	r0, r2
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 8006f32:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
  pHandle->DemagCounter++;
 8006f36:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  if ( pHandle->DemagCounter > pHandle->DemagCounterThreshold)
 8006f3a:	d202      	bcs.n	8006f42 <BADC_IsZcDetected+0x26>
    if (pHandle->ZcDetected == false)
 8006f3c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
 8006f40:	b110      	cbz	r0, 8006f48 <BADC_IsZcDetected+0x2c>
  bool ZcDetection = false;
 8006f42:	2000      	movs	r0, #0
}
 8006f44:	bcf0      	pop	{r4, r5, r6, r7}
 8006f46:	4770      	bx	lr
      switch(pHandlePWMC->Step)
 8006f48:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 8006f4c:	2a05      	cmp	r2, #5
 8006f4e:	d8f9      	bhi.n	8006f44 <BADC_IsZcDetected+0x28>
 8006f50:	e8df f002 	tbb	[pc, r2]
 8006f54:	707f6152 	.word	0x707f6152
 8006f58:	038f      	.short	0x038f
        AdcValue = ADCx_u->JDR1;
 8006f5a:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
        if(pHandle->Direction == 1)
 8006f5e:	f993 105a 	ldrsb.w	r1, [r3, #90]	; 0x5a
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8006f62:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        AdcValue = ADCx_u->JDR1;
 8006f64:	b280      	uxth	r0, r0
        if(pHandle->Direction == 1)
 8006f66:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[0] = AdcValue;   
 8006f68:	8418      	strh	r0, [r3, #32]
        if(pHandle->Direction == 1)
 8006f6a:	d07b      	beq.n	8007064 <BADC_IsZcDetected+0x148>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8006f6c:	882d      	ldrh	r5, [r5, #0]
 8006f6e:	4285      	cmp	r5, r0
 8006f70:	d9e7      	bls.n	8006f42 <BADC_IsZcDetected+0x26>
 8006f72:	f245 5554 	movw	r5, #21844	; 0x5554
        pHandle->MeasuredElAngle += (S16_60_PHASE_SHIFT/2) - (int16_t)((uint32_t)(pHandle->Zc2CommDelay * S16_60_PHASE_SHIFT)>>9);
 8006f76:	f8b3 6040 	ldrh.w	r6, [r3, #64]	; 0x40
 8006f7a:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 8006f7e:	fb06 f000 	mul.w	r0, r6, r0
 8006f82:	eba5 2050 	sub.w	r0, r5, r0, lsr #9
 8006f86:	f8a3 00bc 	strh.w	r0, [r3, #188]	; 0xbc
        if (pHandle->ZcEvents > pHandle->StartUpConsistThreshold) 
 8006f8a:	f893 5026 	ldrb.w	r5, [r3, #38]	; 0x26
 8006f8e:	f893 0062 	ldrb.w	r0, [r3, #98]	; 0x62
 8006f92:	42a8      	cmp	r0, r5
          pHandle->IsAlgorithmConverged = true;
 8006f94:	bf38      	it	cc
 8006f96:	2001      	movcc	r0, #1
        pHandle->ZcEvents++;
 8006f98:	f105 0501 	add.w	r5, r5, #1
        if (true == pHandle->IsAlgorithmConverged)
 8006f9c:	bf2c      	ite	cs
 8006f9e:	f893 0065 	ldrbcs.w	r0, [r3, #101]	; 0x65
          pHandle->IsAlgorithmConverged = true;
 8006fa2:	f883 0065 	strbcc.w	r0, [r3, #101]	; 0x65
        pHandle->ZcEvents++;
 8006fa6:	f883 5026 	strb.w	r5, [r3, #38]	; 0x26
        switch(pHandlePWMC->Step)
 8006faa:	2a05      	cmp	r2, #5
        pHandle->ZcDetected = true;
 8006fac:	f04f 0501 	mov.w	r5, #1
 8006fb0:	f883 5067 	strb.w	r5, [r3, #103]	; 0x67
        switch(pHandlePWMC->Step)
 8006fb4:	d86f      	bhi.n	8007096 <BADC_IsZcDetected+0x17a>
 8006fb6:	252a      	movs	r5, #42	; 0x2a
 8006fb8:	fa25 f202 	lsr.w	r2, r5, r2
 8006fbc:	07d2      	lsls	r2, r2, #31
 8006fbe:	d56a      	bpl.n	8007096 <BADC_IsZcDetected+0x17a>
            pHandle->ZC_Counter_Up = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8006fc0:	6825      	ldr	r5, [r4, #0]
          if(pHandle->Direction == 1)
 8006fc2:	2901      	cmp	r1, #1
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006fc4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006fc6:	d06a      	beq.n	800709e <BADC_IsZcDetected+0x182>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8006fc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            pHandle->ZC_Counter_Last = pHandle->ZC_Counter_Up;
 8006fcc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        if (true == pHandle->IsAlgorithmConverged)
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d05e      	beq.n	8007092 <BADC_IsZcDetected+0x176>
          uint32_t tempReg = (uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * (pHandle->AvrElSpeedDpp * pHandle->Direction)));		  
 8006fd4:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
 8006fd8:	fb14 f101 	smulbb	r1, r4, r1
 8006fdc:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8006fe0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006fe4:	fb04 1101 	mla	r1, r4, r1, r1
 8006fe8:	fbb3 f3f1 	udiv	r3, r3, r1
          LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,pHandle->ZC_Counter_Last + (((uint32_t)((pHandle->Zc2CommDelay) * tempReg)) >> 9) );
 8006fec:	fb06 f303 	mul.w	r3, r6, r3
 8006ff0:	eb02 2253 	add.w	r2, r2, r3, lsr #9
  WRITE_REG(TIMx->ARR, AutoReload);
 8006ff4:	62ea      	str	r2, [r5, #44]	; 0x2c
}
 8006ff6:	e7a5      	b.n	8006f44 <BADC_IsZcDetected+0x28>
        AdcValue = ADCx_w->JDR1;
 8006ff8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
        if(pHandle->Direction == 1)
 8006ffc:	f993 105a 	ldrsb.w	r1, [r3, #90]	; 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8007000:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        AdcValue = ADCx_w->JDR1;
 8007002:	b280      	uxth	r0, r0
        if(pHandle->Direction == 1)
 8007004:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[2] = AdcValue;
 8007006:	8498      	strh	r0, [r3, #36]	; 0x24
        if(pHandle->Direction == 1)
 8007008:	d01d      	beq.n	8007046 <BADC_IsZcDetected+0x12a>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 800700a:	886d      	ldrh	r5, [r5, #2]
 800700c:	4285      	cmp	r5, r0
 800700e:	d298      	bcs.n	8006f42 <BADC_IsZcDetected+0x26>
 8007010:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8007014:	e7af      	b.n	8006f76 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_v->JDR1;
 8007016:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
        if(pHandle->Direction == 1)
 800701a:	f993 105a 	ldrsb.w	r1, [r3, #90]	; 0x5a
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 800701e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        AdcValue = ADCx_v->JDR1;
 8007020:	b280      	uxth	r0, r0
        if(pHandle->Direction == 1)
 8007022:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[1] = AdcValue;
 8007024:	8458      	strh	r0, [r3, #34]	; 0x22
        if(pHandle->Direction == 1)
 8007026:	d02d      	beq.n	8007084 <BADC_IsZcDetected+0x168>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8007028:	882d      	ldrh	r5, [r5, #0]
 800702a:	4285      	cmp	r5, r0
 800702c:	d989      	bls.n	8006f42 <BADC_IsZcDetected+0x26>
 800702e:	f64a 25ab 	movw	r5, #43691	; 0xaaab
 8007032:	e7a0      	b.n	8006f76 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_w->JDR1;
 8007034:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
        if(pHandle->Direction == 1)
 8007038:	f993 105a 	ldrsb.w	r1, [r3, #90]	; 0x5a
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 800703c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        AdcValue = ADCx_w->JDR1;
 800703e:	b280      	uxth	r0, r0
        if(pHandle->Direction == 1)
 8007040:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[2] = AdcValue;          
 8007042:	8498      	strh	r0, [r3, #36]	; 0x24
        if(pHandle->Direction == 1)
 8007044:	d0e1      	beq.n	800700a <BADC_IsZcDetected+0xee>
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 8007046:	882d      	ldrh	r5, [r5, #0]
 8007048:	4285      	cmp	r5, r0
 800704a:	f67f af7a 	bls.w	8006f42 <BADC_IsZcDetected+0x26>
 800704e:	2500      	movs	r5, #0
 8007050:	e791      	b.n	8006f76 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_u->JDR1;
 8007052:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
        if(pHandle->Direction == 1)
 8007056:	f993 105a 	ldrsb.w	r1, [r3, #90]	; 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 800705a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        AdcValue = ADCx_u->JDR1;
 800705c:	b280      	uxth	r0, r0
        if(pHandle->Direction == 1)
 800705e:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[0] = AdcValue;
 8007060:	8418      	strh	r0, [r3, #32]
        if(pHandle->Direction == 1)
 8007062:	d083      	beq.n	8006f6c <BADC_IsZcDetected+0x50>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8007064:	886d      	ldrh	r5, [r5, #2]
 8007066:	4285      	cmp	r5, r0
 8007068:	f4bf af6b 	bcs.w	8006f42 <BADC_IsZcDetected+0x26>
 800706c:	f24d 5556 	movw	r5, #54614	; 0xd556
 8007070:	e781      	b.n	8006f76 <BADC_IsZcDetected+0x5a>
        AdcValue = ADCx_v->JDR1;
 8007072:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
        if(pHandle->Direction == 1)
 8007076:	f993 105a 	ldrsb.w	r1, [r3, #90]	; 0x5a
          if (AdcValue < pHandle->pSensing_Params->AdcThresholdDown)
 800707a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        AdcValue = ADCx_v->JDR1;
 800707c:	b280      	uxth	r0, r0
        if(pHandle->Direction == 1)
 800707e:	2901      	cmp	r1, #1
        pHandle->BemfLastValues[1] = AdcValue;   
 8007080:	8458      	strh	r0, [r3, #34]	; 0x22
        if(pHandle->Direction == 1)
 8007082:	d0d1      	beq.n	8007028 <BADC_IsZcDetected+0x10c>
          if (AdcValue > pHandle->pSensing_Params->AdcThresholdUp)
 8007084:	886d      	ldrh	r5, [r5, #2]
 8007086:	4285      	cmp	r5, r0
 8007088:	f4bf af5b 	bcs.w	8006f42 <BADC_IsZcDetected+0x26>
 800708c:	f642 25aa 	movw	r5, #10922	; 0x2aaa
 8007090:	e771      	b.n	8006f76 <BADC_IsZcDetected+0x5a>
 8007092:	2001      	movs	r0, #1
 8007094:	e756      	b.n	8006f44 <BADC_IsZcDetected+0x28>
            pHandle->ZC_Counter_Down = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8007096:	6825      	ldr	r5, [r4, #0]
          if(pHandle->Direction == 1)
 8007098:	2901      	cmp	r1, #1
  return (uint32_t)(READ_REG(TIMx->CNT));
 800709a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800709c:	d094      	beq.n	8006fc8 <BADC_IsZcDetected+0xac>
            pHandle->ZC_Counter_Up = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 800709e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            pHandle->ZC_Counter_Last = pHandle->ZC_Counter_Up;
 80070a2:	e793      	b.n	8006fcc <BADC_IsZcDetected+0xb0>

080070a4 <BADC_CalcAvrgMecSpeedUnit>:
{
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80070a6:	f9b0 305c 	ldrsh.w	r3, [r0, #92]	; 0x5c
 80070aa:	81c3      	strh	r3, [r0, #14]
{
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
  if (0 ==  pHandle->AvrElSpeedDpp)
 80070b0:	b1f3      	cbz	r3, 80070f0 <BADC_CalcAvrgMecSpeedUnit+0x4c>
    if (pHandle->AvrElSpeedDpp != MAX_PSEUDO_SPEED)
 80070b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f000 80ab 	beq.w	8007212 <BADC_CalcAvrgMecSpeedUnit+0x16e>
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80070bc:	8881      	ldrh	r1, [r0, #4]
 80070be:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
 80070c2:	1a52      	subs	r2, r2, r1
 80070c4:	b212      	sxth	r2, r2
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80070c6:	f8b0 10d4 	ldrh.w	r1, [r0, #212]	; 0xd4
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80070ca:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80070ce:	fb92 f1f1 	sdiv	r1, r2, r1
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80070d2:	8b42      	ldrh	r2, [r0, #26]
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80070d4:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80070dc:	69c1      	ldr	r1, [r0, #28]
 80070de:	7842      	ldrb	r2, [r0, #1]
                       * (int32_t)SPEED_UNIT )
 80070e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80070e4:	005b      	lsls	r3, r3, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80070e6:	fb01 f202 	mul.w	r2, r1, r2
 80070ea:	fb93 f3f2 	sdiv	r3, r3, r2
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80070ee:	b21b      	sxth	r3, r3
    *pMecSpeedUnit = 0;
 80070f0:	802b      	strh	r3, [r5, #0]
  bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 80070f2:	4629      	mov	r1, r5
 80070f4:	4620      	mov	r0, r4
 80070f6:	f001 fa09 	bl	800850c <SPD_IsMecSpeedReliable>
void BADC_CalcAvrgElSpeedDpp( Bemf_ADC_Handle_t * pHandle )
{
  uint32_t wCaptBuf;
  
  /* used to validate the average speed measurement */
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 80070fa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80070fe:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 8007102:	f9b5 2000 	ldrsh.w	r2, [r5]
 8007106:	81a2      	strh	r2, [r4, #12]
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8007108:	428b      	cmp	r3, r1
 800710a:	d205      	bcs.n	8007118 <BADC_CalcAvrgMecSpeedUnit+0x74>
  {
    pHandle->BufferFilled++;
 800710c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8007110:	3301      	adds	r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  }
  else
  {
    /* Nothing to do */
  }
  if (false == pHandle->IsLoopClosed)
 8007118:	f894 5066 	ldrb.w	r5, [r4, #102]	; 0x66
 800711c:	b98d      	cbnz	r5, 8007142 <BADC_CalcAvrgMecSpeedUnit+0x9e>
  {
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 800711e:	f9b4 605e 	ldrsh.w	r6, [r4, #94]	; 0x5e
 8007122:	2e00      	cmp	r6, #0
 8007124:	d169      	bne.n	80071fa <BADC_CalcAvrgMecSpeedUnit+0x156>
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007126:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 800712a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 800712e:	3201      	adds	r2, #1
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8007130:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  }
  else
  {
    pHandle->Counter_Period =  pHandle->ZC_Counter_Last + pHandle->Last_Zc2Comm_Delay;
  }
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8007134:	fb02 f303 	mul.w	r3, r2, r3

  /* Filtering to fast speed... could be a glitch  ? */
  /* the MAX_PSEUDO_SPEED is temporary in the buffer, and never included in average computation*/
  if (wCaptBuf < pHandle->MinPeriod)
 8007138:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800713c:	4293      	cmp	r3, r2
 800713e:	d210      	bcs.n	8007162 <BADC_CalcAvrgMecSpeedUnit+0xbe>
}
 8007140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->Counter_Period =  pHandle->ZC_Counter_Last + pHandle->Last_Zc2Comm_Delay;
 8007142:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8007146:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800714a:	4413      	add	r3, r2
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 800714c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    pHandle->Counter_Period =  pHandle->ZC_Counter_Last + pHandle->Last_Zc2Comm_Delay;
 8007150:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007154:	3201      	adds	r2, #1
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8007156:	fb02 f303 	mul.w	r3, r2, r3
  if (wCaptBuf < pHandle->MinPeriod)
 800715a:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800715e:	4293      	cmp	r3, r2
 8007160:	d3ee      	bcc.n	8007140 <BADC_CalcAvrgMecSpeedUnit+0x9c>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007162:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8007166:	6d66      	ldr	r6, [r4, #84]	; 0x54
    if (wCaptBuf >= pHandle->MaxPeriod)
 8007168:	f8d4 e0c8 	ldr.w	lr, [r4, #200]	; 0xc8
 800716c:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8007170:	4573      	cmp	r3, lr
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007172:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007176:	eba6 0607 	sub.w	r6, r6, r7
    {
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 800717a:	f994 705a 	ldrsb.w	r7, [r4, #90]	; 0x5a
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800717e:	6566      	str	r6, [r4, #84]	; 0x54
    }
    else
    {
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)wCaptBuf ;
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8007180:	bf38      	it	cc
 8007182:	435f      	mulcc	r7, r3
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
    }
    /* Update pointers to speed buffer */
    pHandle->SpeedFIFOIdx++;
 8007184:	f102 0201 	add.w	r2, r2, #1
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8007188:	bf2c      	ite	cs
 800718a:	fb0e f707 	mulcs.w	r7, lr, r7
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 800718e:	19f6      	addcc	r6, r6, r7
    pHandle->SpeedFIFOIdx++;
 8007190:	b292      	uxth	r2, r2
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 8007192:	bf38      	it	cc
 8007194:	6566      	strcc	r6, [r4, #84]	; 0x54
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
    {
      pHandle->SpeedFIFOIdx = 0U;
 8007196:	428a      	cmp	r2, r1
 8007198:	bf08      	it	eq
 800719a:	2200      	moveq	r2, #0
 800719c:	f8cc 706c 	str.w	r7, [ip, #108]	; 0x6c
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 80071a0:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
    }
    if (((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U)) 
 80071a4:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 80071a8:	4291      	cmp	r1, r2
 80071aa:	d90b      	bls.n	80071c4 <BADC_CalcAvrgMecSpeedUnit+0x120>
 80071ac:	b153      	cbz	r3, 80071c4 <BADC_CalcAvrgMecSpeedUnit+0x120>
        || (false == pHandle->IsLoopClosed))
    {
      uint32_t tempReg = (pHandle->PseudoPeriodConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 80071ae:	f994 105a 	ldrsb.w	r1, [r4, #90]	; 0x5a
 80071b2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80071b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80071ba:	fb01 f202 	mul.w	r2, r1, r2
      pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 80071be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
}
 80071c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        || (false == pHandle->IsLoopClosed))
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	d0f2      	beq.n	80071ae <BADC_CalcAvrgMecSpeedUnit+0x10a>
    else
    {
      /* Average speed allow to smooth the mechanical sensors misalignement */
      int32_t  tElPeriodSum = 0;
      uint8_t i;
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 80071c8:	460a      	mov	r2, r1
 80071ca:	b179      	cbz	r1, 80071ec <BADC_CalcAvrgMecSpeedUnit+0x148>
 80071cc:	1e4a      	subs	r2, r1, #1
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 80071d4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80071d8:	f104 0368 	add.w	r3, r4, #104	; 0x68
      int32_t  tElPeriodSum = 0;
 80071dc:	2200      	movs	r2, #0
      {
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 80071de:	f853 5f04 	ldr.w	r5, [r3, #4]!
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 80071e2:	42b3      	cmp	r3, r6
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 80071e4:	442a      	add	r2, r5
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 80071e6:	d1fa      	bne.n	80071de <BADC_CalcAvrgMecSpeedUnit+0x13a>
      }             
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
                                               (tElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80071e8:	fb92 f2f1 	sdiv	r2, r2, r1
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
 80071ec:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80071f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80071f4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
 80071f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else pHandle->Counter_Period = ( uint32_t )(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 80071fa:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80071fe:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8007202:	fb02 6606 	mla	r6, r2, r6, r6
 8007206:	3201      	adds	r2, #1
 8007208:	fbb3 f3f6 	udiv	r3, r3, r6
 800720c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007210:	e7a1      	b.n	8007156 <BADC_CalcAvrgMecSpeedUnit+0xb2>
      *pMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8007212:	f9b0 30c0 	ldrsh.w	r3, [r0, #192]	; 0xc0
 8007216:	e76b      	b.n	80070f0 <BADC_CalcAvrgMecSpeedUnit+0x4c>

08007218 <BADC_SetDirection>:
  if (MC_NULL == pHandle)
 8007218:	b108      	cbz	r0, 800721e <BADC_SetDirection+0x6>
    pHandle->Direction = direction;
 800721a:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
}
 800721e:	4770      	bx	lr

08007220 <BADC_IsObserverConverged>:
}
 8007220:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop

08007228 <BADC_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 8007228:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800722c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007230:	428a      	cmp	r2, r1
{
 8007232:	4603      	mov	r3, r0
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 8007234:	d016      	beq.n	8007264 <BADC_CalcElAngle+0x3c>
      if (false == pHandle->IsLoopClosed)
 8007236:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
 800723a:	b119      	cbz	r1, 8007244 <BADC_CalcElAngle+0x1c>
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;      
 800723c:	f9b0 00bc 	ldrsh.w	r0, [r0, #188]	; 0xbc
 8007240:	8098      	strh	r0, [r3, #4]
}
 8007242:	4770      	bx	lr
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007244:	8880      	ldrh	r0, [r0, #4]
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007246:	f8b3 c0bc 	ldrh.w	ip, [r3, #188]	; 0xbc
        pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800724a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800724e:	b291      	uxth	r1, r2
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007250:	4408      	add	r0, r1
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007252:	4461      	add	r1, ip
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007254:	f8b3 c0be 	ldrh.w	ip, [r3, #190]	; 0xbe
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007258:	f8a3 10bc 	strh.w	r1, [r3, #188]	; 0xbc
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800725c:	4460      	add	r0, ip
 800725e:	b200      	sxth	r0, r0
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;      
 8007260:	8098      	strh	r0, [r3, #4]
}
 8007262:	4770      	bx	lr
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8007264:	8880      	ldrh	r0, [r0, #4]
 8007266:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800726a:	4410      	add	r0, r2
 800726c:	b200      	sxth	r0, r0
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;      
 800726e:	8098      	strh	r0, [r3, #4]
}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop

08007274 <BADC_StepChangeEvent>:
  * @param  pHandlePWMC: handler of the current instance of the PWMC component
  */
void BADC_StepChangeEvent(Bemf_ADC_Handle_t * pHandle, int16_t hElSpeedDpp, PWMC_Handle_t *pHandlePWMC)
{
  pHandle->DemagCounter = 0;
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 8007274:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007276:	681a      	ldr	r2, [r3, #0]
{
 8007278:	b530      	push	{r4, r5, lr}
  return (uint32_t)(READ_REG(TIMx->ARR));
 800727a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 800727c:	f8d0 50e4 	ldr.w	r5, [r0, #228]	; 0xe4
  if (false == pHandle->IsLoopClosed)
 8007280:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 8007284:	1b5b      	subs	r3, r3, r5
  pHandle->DemagCounter = 0;
 8007286:	f04f 0c00 	mov.w	ip, #0
  pHandle->Last_Zc2Comm_Delay = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) - pHandle->ZC_Counter_Last;
 800728a:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  pHandle->DemagCounter = 0;
 800728e:	f8a0 c0f0 	strh.w	ip, [r0, #240]	; 0xf0
  if (false == pHandle->IsLoopClosed)
 8007292:	b974      	cbnz	r4, 80072b2 <BADC_StepChangeEvent+0x3e>
  {
    if (hElSpeedDpp < 0)
 8007294:	4561      	cmp	r1, ip
    {
      pHandle->VirtualElSpeedDpp = - hElSpeedDpp;
 8007296:	bfb8      	it	lt
 8007298:	4249      	neglt	r1, r1
    }
    else
    {
      pHandle->VirtualElSpeedDpp = hElSpeedDpp;
    }
    pHandle->ZcDetected = false;
 800729a:	f04f 0300 	mov.w	r3, #0
      pHandle->VirtualElSpeedDpp = - hElSpeedDpp;
 800729e:	bfb8      	it	lt
 80072a0:	b209      	sxthlt	r1, r1
    pHandle->ZcDetected = false;
 80072a2:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
    else
    {
      pHandle->ZcDetected = false;
    }
  }
  pHandle->StepUpdate = true;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
 80072ac:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
 80072b0:	bd30      	pop	{r4, r5, pc}
    if(pHandle->Direction == -1)
 80072b2:	f990 e05a 	ldrsb.w	lr, [r0, #90]	; 0x5a
    pHandle->MeasuredElAngle += ElAngleUpdate;
 80072b6:	f8b0 10bc 	ldrh.w	r1, [r0, #188]	; 0xbc
    if(pHandle->Direction == -1)
 80072ba:	f24d 5356 	movw	r3, #54614	; 0xd556
 80072be:	f642 24aa 	movw	r4, #10922	; 0x2aaa
 80072c2:	f1be 3fff 	cmp.w	lr, #4294967295
 80072c6:	bf18      	it	ne
 80072c8:	4623      	movne	r3, r4
    pHandle->MeasuredElAngle += ElAngleUpdate;
 80072ca:	440b      	add	r3, r1
    if ( false == pHandle->ZcDetected)
 80072cc:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    pHandle->MeasuredElAngle += ElAngleUpdate;
 80072d0:	f8a0 30bc 	strh.w	r3, [r0, #188]	; 0xbc
    if ( false == pHandle->ZcDetected)
 80072d4:	b961      	cbnz	r1, 80072f0 <BADC_StepChangeEvent+0x7c>
 80072d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      LL_TIM_SetAutoReload(pHandle->pParams_str->LfTim,LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) * 150 / 100);
 80072d8:	4908      	ldr	r1, [pc, #32]	; (80072fc <BADC_StepChangeEvent+0x88>)
 80072da:	2496      	movs	r4, #150	; 0x96
 80072dc:	fb04 f303 	mul.w	r3, r4, r3
 80072e0:	fba1 1303 	umull	r1, r3, r1, r3
 80072e4:	095b      	lsrs	r3, r3, #5
  WRITE_REG(TIMx->ARR, AutoReload);
 80072e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  pHandle->StepUpdate = true;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
 80072ee:	bd30      	pop	{r4, r5, pc}
  pHandle->StepUpdate = true;
 80072f0:	2301      	movs	r3, #1
      pHandle->ZcDetected = false;
 80072f2:	f880 c067 	strb.w	ip, [r0, #103]	; 0x67
  pHandle->StepUpdate = true;
 80072f6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
 80072fa:	bd30      	pop	{r4, r5, pc}
 80072fc:	51eb851f 	.word	0x51eb851f

08007300 <BADC_CalcRevUpDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRevUpDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8007300:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
 8007304:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
                       * (int32_t)SPEED_UNIT )
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 8007308:	7842      	ldrb	r2, [r0, #1]
 800730a:	69c1      	ldr	r1, [r0, #28]
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800730c:	fb0c f303 	mul.w	r3, ip, r3
                       * (int32_t)SPEED_UNIT )
 8007310:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007314:	005b      	lsls	r3, r3, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );;
 8007316:	fb01 f202 	mul.w	r2, r1, r2
 800731a:	fb93 f3f2 	sdiv	r3, r3, r2
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800731e:	b21b      	sxth	r3, r3
  if (hSpeed == 0)
 8007320:	b923      	cbnz	r3, 800732c <BADC_CalcRevUpDemagTime+0x2c>
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;;
 8007322:	f8b0 30fa 	ldrh.w	r3, [r0, #250]	; 0xfa
  }	  
  else
  {
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);		
  }
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8007326:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
 800732a:	4770      	bx	lr
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;;
 800732c:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);		
 8007330:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
 8007334:	fb92 f3f3 	sdiv	r3, r2, r3
 8007338:	b29b      	uxth	r3, r3
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 800733a:	428b      	cmp	r3, r1
 800733c:	d2f3      	bcs.n	8007326 <BADC_CalcRevUpDemagTime+0x26>
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 800733e:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
  }  
}
 8007342:	4770      	bx	lr

08007344 <BADC_CalcRunDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRunDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = pHandle->_Super.hAvrMecSpeedUnit;
 8007344:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  if (hSpeed < 0) hSpeed = - hSpeed; 
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 8007348:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
  if (hSpeed < 0) hSpeed = - hSpeed; 
 800734c:	2b00      	cmp	r3, #0
 800734e:	bfbc      	itt	lt
 8007350:	425b      	neglt	r3, r3
 8007352:	b21b      	sxthlt	r3, r3
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 8007354:	4293      	cmp	r3, r2
 8007356:	da0c      	bge.n	8007372 <BADC_CalcRunDemagTime+0x2e>
  {   
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8007358:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    pHandle->DemagCounterThreshold = (uint16_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
 800735c:	f8b0 20f8 	ldrh.w	r2, [r0, #248]	; 0xf8
 8007360:	fb92 f3f3 	sdiv	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
    {
      pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8007366:	428b      	cmp	r3, r1
 8007368:	bf38      	it	cc
 800736a:	460b      	movcc	r3, r1
 800736c:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
 8007370:	4770      	bx	lr
    }   
  } 
  else
  {   
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8007372:	f8b0 30fa 	ldrh.w	r3, [r0, #250]	; 0xfa
 8007376:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
  }
}
 800737a:	4770      	bx	lr

0800737c <BADC_SetLoopClosed>:
  *         virtual speed sensor transition is ended.  
  * @param  pHandle: handler of the current instance of the STO component
  */
void BADC_SetLoopClosed(Bemf_ADC_Handle_t *pHandle)
{
  pHandle->IsLoopClosed=true;
 800737c:	2301      	movs	r3, #1
 800737e:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
}
 8007382:	4770      	bx	lr

08007384 <BADC_GetLastBemfValue>:
  * @param  phase: motor phase under investigation
  * @retval uint16_t: Bemf value
  */
uint16_t BADC_GetLastBemfValue(Bemf_ADC_Handle_t *pHandle, uint8_t phase)
{   
  return ((MC_NULL == pHandle) ? 0U : pHandle->BemfLastValues[phase]);
 8007384:	b110      	cbz	r0, 800738c <BADC_GetLastBemfValue+0x8>
 8007386:	3110      	adds	r1, #16
 8007388:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop

08007390 <BADC_GetBemfZcrFlag>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @retval bool: zero crossing detection flag
  */
bool BADC_GetBemfZcrFlag(Bemf_ADC_Handle_t *pHandle)
{   
  return ((MC_NULL == pHandle) ? 0U : pHandle->ZcDetected);
 8007390:	b108      	cbz	r0, 8007396 <BADC_GetBemfZcrFlag+0x6>
 8007392:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
}  
 8007396:	4770      	bx	lr

08007398 <BADC_ClearStepUpdate>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @retval bool: step update request
  */
bool BADC_ClearStepUpdate(Bemf_ADC_Handle_t *pHandle)
{ 
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 8007398:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
{ 
 800739c:	4603      	mov	r3, r0
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 800739e:	b12a      	cbz	r2, 80073ac <BADC_ClearStepUpdate+0x14>
  pHandle->StepUpdate = false;
 80073a0:	2200      	movs	r2, #0
  bool retValue = (((pHandle->IsLoopClosed == true) && (pHandle->StepUpdate == true)) || (pHandle->IsLoopClosed == false));
 80073a2:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
  pHandle->StepUpdate = false;
 80073a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
  return retValue;
}
 80073aa:	4770      	bx	lr
  pHandle->StepUpdate = false;
 80073ac:	2200      	movs	r2, #0
 80073ae:	2001      	movs	r0, #1
 80073b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop

080073b8 <BADC_SetBemfSensorlessParam>:
  */
void BADC_SetBemfSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfAdcConfig, uint16_t *Zc2CommDelay,
                                   Bemf_Demag_Params *bemfAdcDemagConfig)         
{  
  pHandle->Pwm_OFF.AdcThresholdUp = BemfAdcConfig->AdcThresholdUp;
  pHandle->Pwm_OFF.AdcThresholdDown = BemfAdcConfig->AdcThresholdDown;
 80073b8:	f8d1 c000 	ldr.w	ip, [r1]
 80073bc:	f8c0 c02e 	str.w	ip, [r0, #46]	; 0x2e
  pHandle->Pwm_OFF.SamplingPoint = BemfAdcConfig->SamplingPoint;
 80073c0:	8889      	ldrh	r1, [r1, #4]
 80073c2:	8641      	strh	r1, [r0, #50]	; 0x32
  pHandle->Zc2CommDelay = *Zc2CommDelay;
 80073c4:	8811      	ldrh	r1, [r2, #0]
  pHandle->DemagParams.DemagMinimumSpeedUnit = bemfAdcDemagConfig->DemagMinimumSpeedUnit;
 80073c6:	881a      	ldrh	r2, [r3, #0]
  pHandle->DemagParams.DemagMinimumThreshold = bemfAdcDemagConfig->DemagMinimumThreshold;
 80073c8:	88db      	ldrh	r3, [r3, #6]
 80073ca:	f8a0 30fa 	strh.w	r3, [r0, #250]	; 0xfa
  pHandle->Zc2CommDelay = *Zc2CommDelay;
 80073ce:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
  pHandle->DemagParams.DemagMinimumSpeedUnit = bemfAdcDemagConfig->DemagMinimumSpeedUnit;
 80073d2:	f8a0 20f4 	strh.w	r2, [r0, #244]	; 0xf4
}
 80073d6:	4770      	bx	lr

080073d8 <BADC_SetBemfOnTimeSensorlessParam>:
  * @param  OnSensingEnThres: Minimum dudty cycle for on-sensing activation
  * @param  OnSensingDisThres: Minimum duty cycle for on-sensing Deactivationg
  */
void BADC_SetBemfOnTimeSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfOnAdcConfig, uint16_t *OnSensingEnThres,
                                   uint16_t *OnSensingDisThres)
{  
 80073d8:	b410      	push	{r4}
  pHandle->Pwm_ON.AdcThresholdUp = BemfOnAdcConfig->AdcThresholdUp;
  pHandle->Pwm_ON.AdcThresholdDown = BemfOnAdcConfig->AdcThresholdDown;
 80073da:	680c      	ldr	r4, [r1, #0]
 80073dc:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->Pwm_ON.SamplingPoint = BemfOnAdcConfig->SamplingPoint;
 80073de:	8889      	ldrh	r1, [r1, #4]
 80073e0:	8581      	strh	r1, [r0, #44]	; 0x2c
  pHandle->OnSensingEnThres = *OnSensingEnThres;
 80073e2:	8812      	ldrh	r2, [r2, #0]
 80073e4:	8782      	strh	r2, [r0, #60]	; 0x3c
  pHandle->OnSensingDisThres = *OnSensingDisThres;
 80073e6:	881b      	ldrh	r3, [r3, #0]
}
 80073e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->OnSensingDisThres = *OnSensingDisThres;
 80073ec:	87c3      	strh	r3, [r0, #62]	; 0x3e
}
 80073ee:	4770      	bx	lr

080073f0 <BADC_GetBemfSensorlessParam>:
  */
void BADC_GetBemfSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfAdcConfig, uint16_t *Zc2CommDelay,
                                   Bemf_Demag_Params *BemfAdcDemagConfig)         
{  
  BemfAdcConfig->AdcThresholdUp = pHandle->Pwm_OFF.AdcThresholdUp;
  BemfAdcConfig->AdcThresholdDown = pHandle->Pwm_OFF.AdcThresholdDown;
 80073f0:	f8d0 c02e 	ldr.w	ip, [r0, #46]	; 0x2e
 80073f4:	f8c1 c000 	str.w	ip, [r1]
  BemfAdcConfig->SamplingPoint = pHandle->Pwm_OFF.SamplingPoint;
 80073f8:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 80073fc:	f8a1 c004 	strh.w	ip, [r1, #4]
  *Zc2CommDelay = pHandle->Zc2CommDelay;
 8007400:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
 8007404:	8011      	strh	r1, [r2, #0]
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8007406:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
  BemfAdcDemagConfig->DemagMinimumThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 800740a:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	; 0xfa
 800740e:	80da      	strh	r2, [r3, #6]
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8007410:	8019      	strh	r1, [r3, #0]
}
 8007412:	4770      	bx	lr

08007414 <BADC_GetBemfOnTimeSensorlessParam>:
  * @param  OnSensingEnThres: Minimum duty cycle for on-sensing activation
  * @param  OnSensingDisThres: Minimum duty cycle for on-sensing Deactivationg
  */
void BADC_GetBemfOnTimeSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfOnAdcConfig, uint16_t *OnSensingEnThres,
                                   uint16_t *OnSensingDisThres)
{  
 8007414:	b410      	push	{r4}
  BemfOnAdcConfig->AdcThresholdUp = pHandle->Pwm_ON.AdcThresholdUp;
  BemfOnAdcConfig->AdcThresholdDown = pHandle->Pwm_ON.AdcThresholdDown;
 8007416:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007418:	600c      	str	r4, [r1, #0]
  BemfOnAdcConfig->SamplingPoint = pHandle->Pwm_ON.SamplingPoint;
 800741a:	f8b0 c02c 	ldrh.w	ip, [r0, #44]	; 0x2c
 800741e:	f8a1 c004 	strh.w	ip, [r1, #4]
  *OnSensingEnThres = pHandle->OnSensingEnThres;
 8007422:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8007424:	8011      	strh	r1, [r2, #0]
  *OnSensingDisThres = pHandle->OnSensingDisThres;
 8007426:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
}
 8007428:	f85d 4b04 	ldr.w	r4, [sp], #4
  *OnSensingDisThres = pHandle->OnSensingDisThres;
 800742c:	801a      	strh	r2, [r3, #0]
}
 800742e:	4770      	bx	lr

08007430 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007432:	7fc3      	ldrb	r3, [r0, #31]
 8007434:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8007438:	429a      	cmp	r2, r3
{
 800743a:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800743c:	d002      	beq.n	8007444 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 800743e:	3301      	adds	r3, #1
 8007440:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8007444:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 800744a:	b1a5      	cbz	r5, 8007476 <MCPA_dataLog+0x46>
 800744c:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800744e:	8ba2      	ldrh	r2, [r4, #28]
 8007450:	42aa      	cmp	r2, r5
 8007452:	d24e      	bcs.n	80074f2 <MCPA_dataLog+0xc2>
 8007454:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007458:	2bfe      	cmp	r3, #254	; 0xfe
 800745a:	d066      	beq.n	800752a <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800745c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007460:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8007462:	8b22      	ldrh	r2, [r4, #24]
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	3202      	adds	r2, #2
 8007468:	2309      	movs	r3, #9
 800746a:	6845      	ldr	r5, [r0, #4]
 800746c:	b292      	uxth	r2, r2
 800746e:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	8323      	strh	r3, [r4, #24]
}
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8007476:	4601      	mov	r1, r0
 8007478:	2209      	movs	r2, #9
 800747a:	f851 0b14 	ldr.w	r0, [r1], #20
 800747e:	6803      	ldr	r3, [r0, #0]
 8007480:	4798      	blx	r3
 8007482:	b390      	cbz	r0, 80074ea <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007484:	4b4b      	ldr	r3, [pc, #300]	; (80075b4 <MCPA_dataLog+0x184>)
 8007486:	6961      	ldr	r1, [r4, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 800748c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8007490:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8007494:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8007498:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 800749a:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 800749c:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800749e:	d101      	bne.n	80074a4 <MCPA_dataLog+0x74>
 80074a0:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80074a2:	e7d4      	b.n	800744e <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 80074a4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 80074a8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 80074ac:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 80074b0:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 80074b4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 80074b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80074bc:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80074be:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 80074c0:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80074c4:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 80074c6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80074ca:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80074cc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 80074d0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80074d4:	f001 f98c 	bl	80087f0 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 80074d8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80074dc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 80074e0:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80074e4:	441a      	add	r2, r3
 80074e6:	f001 f983 	bl	80087f0 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80074ea:	8b25      	ldrh	r5, [r4, #24]
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	d1ad      	bne.n	800744c <MCPA_dataLog+0x1c>
}
 80074f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80074f2:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80074f6:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80074f8:	b36e      	cbz	r6, 8007556 <MCPA_dataLog+0x126>
 80074fa:	68a2      	ldr	r2, [r4, #8]
 80074fc:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8007500:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8007502:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8007506:	8800      	ldrh	r0, [r0, #0]
 8007508:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800750c:	8b25      	ldrh	r5, [r4, #24]
 800750e:	3502      	adds	r5, #2
 8007510:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007512:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007514:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007516:	d1f4      	bne.n	8007502 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8007518:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800751c:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800751e:	2bfd      	cmp	r3, #253	; 0xfd
 8007520:	4618      	mov	r0, r3
 8007522:	d91d      	bls.n	8007560 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007524:	4295      	cmp	r5, r2
 8007526:	d897      	bhi.n	8007458 <MCPA_dataLog+0x28>
}
 8007528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800752a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800752e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8007532:	4418      	add	r0, r3
 8007534:	4298      	cmp	r0, r3
 8007536:	dd91      	ble.n	800745c <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007538:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800753a:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800753c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007544:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007546:	5cf3      	ldrb	r3, [r6, r3]
 8007548:	442b      	add	r3, r5
 800754a:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800754c:	b2d3      	uxtb	r3, r2
 800754e:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007550:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007552:	dbf3      	blt.n	800753c <MCPA_dataLog+0x10c>
 8007554:	e782      	b.n	800745c <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8007556:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800755a:	28fd      	cmp	r0, #253	; 0xfd
 800755c:	f63f af71 	bhi.w	8007442 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8007560:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007564:	4283      	cmp	r3, r0
 8007566:	d007      	beq.n	8007578 <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8007568:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800756a:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 800756c:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007570:	42aa      	cmp	r2, r5
 8007572:	f4ff af73 	bcc.w	800745c <MCPA_dataLog+0x2c>
}
 8007576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007578:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 800757c:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 800757e:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007580:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8007582:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007586:	dd12      	ble.n	80075ae <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007588:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800758c:	f8d4 c010 	ldr.w	ip, [r4, #16]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007590:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007592:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800759a:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800759e:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80075a0:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80075a2:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80075a4:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80075a6:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80075a8:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80075aa:	dbf2      	blt.n	8007592 <MCPA_dataLog+0x162>
 80075ac:	e7e0      	b.n	8007570 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80075ae:	8b25      	ldrh	r5, [r4, #24]
 80075b0:	e7de      	b.n	8007570 <MCPA_dataLog+0x140>
 80075b2:	bf00      	nop
 80075b4:	2000187c 	.word	0x2000187c

080075b8 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80075b8:	8b03      	ldrh	r3, [r0, #24]
 80075ba:	b19b      	cbz	r3, 80075e4 <MCPA_flushDataLog+0x2c>
{
 80075bc:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80075be:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80075c2:	2afe      	cmp	r2, #254	; 0xfe
 80075c4:	4604      	mov	r4, r0
 80075c6:	d00e      	beq.n	80075e6 <MCPA_flushDataLog+0x2e>
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80075c8:	6941      	ldr	r1, [r0, #20]
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80075ca:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80075ce:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80075d0:	8b22      	ldrh	r2, [r4, #24]
 80075d2:	6820      	ldr	r0, [r4, #0]
 80075d4:	3202      	adds	r2, #2
 80075d6:	2309      	movs	r3, #9
 80075d8:	6845      	ldr	r5, [r0, #4]
 80075da:	b292      	uxth	r2, r2
 80075dc:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80075e6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80075ea:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80075ee:	6941      	ldr	r1, [r0, #20]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80075f0:	4494      	add	ip, r2
 80075f2:	4562      	cmp	r2, ip
 80075f4:	dae9      	bge.n	80075ca <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80075f6:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80075f8:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80075fa:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 80075fe:	6800      	ldr	r0, [r0, #0]
 8007600:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007602:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007604:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007606:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007608:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800760a:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800760c:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800760e:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007610:	dbf3      	blt.n	80075fa <MCPA_flushDataLog+0x42>
 8007612:	e7da      	b.n	80075ca <MCPA_flushDataLog+0x12>

08007614 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8007614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007618:	880f      	ldrh	r7, [r1, #0]
{
 800761a:	4604      	mov	r4, r0

    if (buffSize == 0U)
 800761c:	2f00      	cmp	r7, #0
 800761e:	d044      	beq.n	80076aa <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8007620:	6803      	ldr	r3, [r0, #0]
 8007622:	89db      	ldrh	r3, [r3, #14]
 8007624:	42bb      	cmp	r3, r7
 8007626:	d33d      	bcc.n	80076a4 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8007628:	788b      	ldrb	r3, [r1, #2]
 800762a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800762e:	78ce      	ldrb	r6, [r1, #3]
 8007630:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8007634:	790b      	ldrb	r3, [r1, #4]
 8007636:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 800763a:	794b      	ldrb	r3, [r1, #5]
 800763c:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8007640:	441e      	add	r6, r3
 8007642:	7f83      	ldrb	r3, [r0, #30]
 8007644:	429e      	cmp	r6, r3
 8007646:	dc52      	bgt.n	80076ee <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8007648:	3106      	adds	r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800764a:	2e00      	cmp	r6, #0
 800764c:	d056      	beq.n	80076fc <MCPA_cfgLog+0xe8>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800764e:	2600      	movs	r6, #0
 8007650:	4688      	mov	r8, r1
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007652:	4635      	mov	r5, r6
 8007654:	e011      	b.n	800767a <MCPA_cfgLog+0x66>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 800765a:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800765c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007660:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8007664:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007666:	f105 0c01 	add.w	ip, r5, #1
 800766a:	fa5f f58c 	uxtb.w	r5, ip
 800766e:	4403      	add	r3, r0
          logSize = logSize+pHandle->dataSizeTable[i];
 8007670:	4432      	add	r2, r6
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007672:	429d      	cmp	r5, r3
          pCfgData++;
 8007674:	4641      	mov	r1, r8
          logSize = logSize+pHandle->dataSizeTable[i];
 8007676:	b296      	uxth	r6, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007678:	da11      	bge.n	800769e <MCPA_cfgLog+0x8a>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800767a:	f838 9b02 	ldrh.w	r9, [r8], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 800767e:	6861      	ldr	r1, [r4, #4]
 8007680:	4648      	mov	r0, r9
 8007682:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007686:	f7fb fd05 	bl	8003094 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800768a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800768e:	42ab      	cmp	r3, r5
 8007690:	f04f 0002 	mov.w	r0, #2
 8007694:	d8df      	bhi.n	8007656 <MCPA_cfgLog+0x42>
 8007696:	4648      	mov	r0, r9
 8007698:	f7fb fcf0 	bl	800307c <RI_GetIDSize>
 800769c:	e7db      	b.n	8007656 <MCPA_cfgLog+0x42>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 800769e:	1db3      	adds	r3, r6, #6
 80076a0:	429f      	cmp	r7, r3
 80076a2:	d21a      	bcs.n	80076da <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80076a4:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80076a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80076aa:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80076ac:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0U)
 80076b0:	b153      	cbz	r3, 80076c8 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80076b2:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80076b4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80076b8:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80076ba:	8b22      	ldrh	r2, [r4, #24]
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	3202      	adds	r2, #2
 80076c0:	6845      	ldr	r5, [r0, #4]
 80076c2:	b292      	uxth	r2, r2
 80076c4:	2309      	movs	r3, #9
 80076c6:	47a8      	blx	r5
  pHandle->bufferIndex = 0U;
 80076c8:	2000      	movs	r0, #0
  pHandle->MarkBuff    = 0U;
 80076ca:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex     = 0U;
 80076ce:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 80076d0:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0U;
 80076d4:	8320      	strh	r0, [r4, #24]
}
 80076d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 80076da:	3f02      	subs	r7, #2
 80076dc:	1bbf      	subs	r7, r7, r6
 80076de:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 80076e0:	780b      	ldrb	r3, [r1, #0]
 80076e2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
          if (0U == pHandle->Mark)
 80076e6:	b12b      	cbz	r3, 80076f4 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 80076e8:	2000      	movs	r0, #0
}
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        result = MCP_ERROR_BAD_RAW_FORMAT;
 80076ee:	200a      	movs	r0, #10
}
 80076f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80076f4:	8b23      	ldrh	r3, [r4, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0e6      	beq.n	80076c8 <MCPA_cfgLog+0xb4>
 80076fa:	e7da      	b.n	80076b2 <MCPA_cfgLog+0x9e>
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80076fc:	2306      	movs	r3, #6
 80076fe:	e7cf      	b.n	80076a0 <MCPA_cfgLog+0x8c>

08007700 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8007700:	8843      	ldrh	r3, [r0, #2]
 8007702:	8982      	ldrh	r2, [r0, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d306      	bcc.n	8007716 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8007708:	89c2      	ldrh	r2, [r0, #14]
 800770a:	429a      	cmp	r2, r3
 800770c:	d901      	bls.n	8007712 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 800770e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8007710:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8007712:	8900      	ldrh	r0, [r0, #8]
 8007714:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8007716:	2008      	movs	r0, #8
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop

0800771c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop

08007724 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8007724:	7802      	ldrb	r2, [r0, #0]
{
 8007726:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8007728:	b122      	cbz	r2, 8007734 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800772a:	8882      	ldrh	r2, [r0, #4]
 800772c:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800772e:	2100      	movs	r1, #0
 8007730:	8101      	strh	r1, [r0, #8]
}
 8007732:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8007734:	f7ff fff2 	bl	800771c <NTC_Clear>
}
 8007738:	bd08      	pop	{r3, pc}
 800773a:	bf00      	nop

0800773c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 800773c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800773e:	7803      	ldrb	r3, [r0, #0]
{
 8007740:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8007742:	b983      	cbnz	r3, 8007766 <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8007744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007748:	4299      	cmp	r1, r3
 800774a:	d007      	beq.n	800775c <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800774c:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800774e:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8007750:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8007752:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8007756:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800775a:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800775c:	4620      	mov	r0, r4
 800775e:	f7ff ffcf 	bl	8007700 <NTC_SetFaultState>
 8007762:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8007764:	bd10      	pop	{r4, pc}
 8007766:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8007768:	8120      	strh	r0, [r4, #8]
}
 800776a:	bd10      	pop	{r4, pc}

0800776c <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800776c:	7803      	ldrb	r3, [r0, #0]
 800776e:	b95b      	cbnz	r3, 8007788 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8007770:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8007772:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8007774:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8007778:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 800777a:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 800777c:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8007780:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8007784:	b200      	sxth	r0, r0
 8007786:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8007788:	88c0      	ldrh	r0, [r0, #6]
}
 800778a:	b200      	sxth	r0, r0
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8007790:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8007792:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8007794:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8007796:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8007798:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 800779a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 800779c:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800779e:	4770      	bx	lr

080077a0 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80077a0:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80077a2:	4770      	bx	lr

080077a4 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80077a4:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80077a6:	4770      	bx	lr

080077a8 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80077a8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop

080077b0 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80077b0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop

080077b8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80077b8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80077ba:	4770      	bx	lr

080077bc <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80077bc:	8b80      	ldrh	r0, [r0, #28]
 80077be:	4770      	bx	lr

080077c0 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80077c0:	2301      	movs	r3, #1
 80077c2:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80077c4:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80077c6:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 80077cc:	8b40      	ldrh	r0, [r0, #26]
 80077ce:	4770      	bx	lr

080077d0 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 80077d0:	8bc0      	ldrh	r0, [r0, #30]
 80077d2:	4770      	bx	lr

080077d4 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80077d4:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80077d6:	4770      	bx	lr

080077d8 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 80077d8:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80077da:	4770      	bx	lr

080077dc <PID_SetKIDivisorPOW2>:
{
 80077dc:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80077de:	2301      	movs	r3, #1
{
 80077e0:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80077e2:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80077e4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80077e8:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 80077ea:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 80077ec:	8343      	strh	r3, [r0, #26]
{
 80077ee:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80077f0:	f7ff fff2 	bl	80077d8 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 80077f4:	4902      	ldr	r1, [pc, #8]	; (8007800 <PID_SetKIDivisorPOW2+0x24>)
 80077f6:	4628      	mov	r0, r5
 80077f8:	40a1      	lsls	r1, r4
 80077fa:	f7ff ffeb 	bl	80077d4 <PID_SetLowerIntegralTermLimit>
}
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	ffff8001 	.word	0xffff8001

08007804 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8007804:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007806:	4770      	bx	lr

08007808 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8007808:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop

08007810 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8007810:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8007812:	4770      	bx	lr

08007814 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007814:	2301      	movs	r3, #1
 8007816:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007818:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800781a:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop

08007820 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007820:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8007824:	4603      	mov	r3, r0
 8007826:	b510      	push	{r4, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8007828:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800782c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007830:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007834:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8007838:	b18c      	cbz	r4, 800785e <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800783a:	fb04 f101 	mul.w	r1, r4, r1
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800783e:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 8007840:	eb14 0e01 	adds.w	lr, r4, r1
 8007844:	d421      	bmi.n	800788a <PI_Controller+0x6a>
      {
        if (pHandle->wIntegralTerm < 0)
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 8007846:	420c      	tst	r4, r1
 8007848:	4916      	ldr	r1, [pc, #88]	; (80078a4 <PI_Controller+0x84>)
 800784a:	bf48      	it	mi
 800784c:	468e      	movmi	lr, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800784e:	68d9      	ldr	r1, [r3, #12]
 8007850:	4571      	cmp	r1, lr
 8007852:	db05      	blt.n	8007860 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8007854:	6919      	ldr	r1, [r3, #16]
 8007856:	4571      	cmp	r1, lr
 8007858:	dc02      	bgt.n	8007860 <PI_Controller+0x40>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800785a:	4671      	mov	r1, lr
 800785c:	e000      	b.n	8007860 <PI_Controller+0x40>
 800785e:	4621      	mov	r1, r4
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8007860:	8b9c      	ldrh	r4, [r3, #28]
 8007862:	4122      	asrs	r2, r4
 8007864:	8bdc      	ldrh	r4, [r3, #30]
 8007866:	fa41 f404 	asr.w	r4, r1, r4
 800786a:	4422      	add	r2, r4
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800786c:	4290      	cmp	r0, r2
 800786e:	da03      	bge.n	8007878 <PI_Controller+0x58>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8007870:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8007872:	4411      	add	r1, r2
 8007874:	6099      	str	r1, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8007876:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8007878:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 800787a:	bfc5      	ittet	gt
 800787c:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8007880:	1889      	addgt	r1, r1, r2
    returnValue = (int16_t)wOutput_32;
 8007882:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8007884:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8007886:	6099      	str	r1, [r3, #8]
}
 8007888:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 800788a:	2c00      	cmp	r4, #0
 800788c:	dddf      	ble.n	800784e <PI_Controller+0x2e>
          if (wIntegral_Term > 0)
 800788e:	2900      	cmp	r1, #0
 8007890:	dddd      	ble.n	800784e <PI_Controller+0x2e>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8007892:	68d9      	ldr	r1, [r3, #12]
 8007894:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007898:	42a1      	cmp	r1, r4
 800789a:	d1e1      	bne.n	8007860 <PI_Controller+0x40>
            wIntegral_sum_temp = INT32_MAX;
 800789c:	468e      	mov	lr, r1
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800789e:	4671      	mov	r1, lr
 80078a0:	e7de      	b.n	8007860 <PI_Controller+0x40>
 80078a2:	bf00      	nop
 80078a4:	80000001 	.word	0x80000001

080078a8 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80078a8:	6803      	ldr	r3, [r0, #0]
 80078aa:	4718      	bx	r3

080078ac <PWMC_SwitchOnPWM>:
  * @brief  Switches PWM generation on
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOnPwm( pHandle );
 80078ac:	6843      	ldr	r3, [r0, #4]
 80078ae:	4718      	bx	r3

080078b0 <PWMC_SetADCTriggerChannel>:
  * @param  pHandle Handle on the target instance of the PWMC component
  * @param  SamplingPoint pulse value of the timer channel used for ADC triggering
  */
__weak void PWMC_SetADCTriggerChannel( PWMC_Handle_t * pHandle, uint16_t SamplingPoint )
{
  pHandle->pFctSetADCTriggerChannel( pHandle, SamplingPoint );
 80078b0:	6883      	ldr	r3, [r0, #8]
 80078b2:	4718      	bx	r3

080078b4 <PWMC_SetAlignFlag>:
* @param  flag to be applied in uint8_t, 1: motor is in align stage, 2: motor is not in align stage
* @retval none
*/
void PWMC_SetAlignFlag(PWMC_Handle_t *pHandle, int16_t flag)
{
  pHandle->AlignFlag = flag;
 80078b4:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 80078b6:	4770      	bx	lr

080078b8 <PWMC_ForceFastDemagTime>:
  * @param  uint16_t: period where the fast demagnetization is applied
  * @retval none
  */
void PWMC_ForceFastDemagTime(PWMC_Handle_t * pHandle, uint16_t constFastDemagTime )
{
  pHandle->DemagCounterThreshold = constFastDemagTime;
 80078b8:	85c1      	strh	r1, [r0, #46]	; 0x2e
}
 80078ba:	4770      	bx	lr

080078bc <PWMC_SetFastDemagState>:
  {
    pHandle->ModUpdateReq = ENABLE_FAST_DEMAG;
  }
  else
  {
    pHandle->ModUpdateReq = DISABLE_FAST_DEMAG;
 80078bc:	2901      	cmp	r1, #1
 80078be:	bf18      	it	ne
 80078c0:	2102      	movne	r1, #2
 80078c2:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
  }    
}
 80078c6:	4770      	bx	lr

080078c8 <PWMC_SetQuasiSynchState>:
  {
    pHandle->ModUpdateReq = ENABLE_QUASI_SYNCH;
  }
  else
  {
    pHandle->ModUpdateReq = DISABLE_QUASI_SYNCH;
 80078c8:	2901      	cmp	r1, #1
 80078ca:	bf0c      	ite	eq
 80078cc:	2303      	moveq	r3, #3
 80078ce:	2304      	movne	r3, #4
 80078d0:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
  }    
}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <PWMC_GetFastDemagState>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetFastDemagState(PWMC_Handle_t * pHandle )
{
  return ((MC_NULL == pHandle->pGetFastDemagFlag) ? 0 : pHandle->pGetFastDemagFlag(pHandle));  
 80078d8:	6943      	ldr	r3, [r0, #20]
 80078da:	b103      	cbz	r3, 80078de <PWMC_GetFastDemagState+0x6>
 80078dc:	4718      	bx	r3
}
 80078de:	4618      	mov	r0, r3
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop

080078e4 <PWMC_GetQuasiSynchState>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetQuasiSynchState(PWMC_Handle_t * pHandle )
{
  return ((MC_NULL == pHandle->pGetQuasiSynchFlag) ? 0 : pHandle->pGetQuasiSynchFlag(pHandle));
 80078e4:	6983      	ldr	r3, [r0, #24]
 80078e6:	b103      	cbz	r3, 80078ea <PWMC_GetQuasiSynchState+0x6>
 80078e8:	4718      	bx	r3
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <PWMC_ElAngleToStep>:
 * @retval calculated step
 */
__weak uint8_t  PWMC_ElAngleToStep( PWMC_Handle_t * pHandle )
{
  uint8_t Step;
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 80078f0:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80078f2:	f5a2 53aa 	sub.w	r3, r2, #5440	; 0x1540
 80078f6:	3b15      	subs	r3, #21
 80078f8:	f642 21a9 	movw	r1, #10921	; 0x2aa9
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	428b      	cmp	r3, r1
 8007900:	d909      	bls.n	8007916 <PWMC_ElAngleToStep+0x26>
  else if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_2;
 8007902:	f5a2 537f 	sub.w	r3, r2, #16320	; 0x3fc0
 8007906:	3b3f      	subs	r3, #63	; 0x3f
 8007908:	b29b      	uxth	r3, r3
 800790a:	f642 20aa 	movw	r0, #10922	; 0x2aaa
 800790e:	4283      	cmp	r3, r0
 8007910:	d803      	bhi.n	800791a <PWMC_ElAngleToStep+0x2a>
 8007912:	2001      	movs	r0, #1
 8007914:	4770      	bx	lr
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 8007916:	2000      	movs	r0, #0
 8007918:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 800791a:	f502 43d5 	add.w	r3, r2, #27264	; 0x6a80
 800791e:	332a      	adds	r3, #42	; 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	f24d 5c53 	movw	ip, #54611	; 0xd553
 8007926:	4563      	cmp	r3, ip
 8007928:	d80a      	bhi.n	8007940 <PWMC_ElAngleToStep+0x50>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 800792a:	4283      	cmp	r3, r0
 800792c:	d90a      	bls.n	8007944 <PWMC_ElAngleToStep+0x54>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT / 2))) Step = STEP_5;
 800792e:	f502 527f 	add.w	r2, r2, #16320	; 0x3fc0
 8007932:	323f      	adds	r2, #63	; 0x3f
 8007934:	b292      	uxth	r2, r2
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT / 2))) Step = STEP_6;
 8007936:	428a      	cmp	r2, r1
 8007938:	bf94      	ite	ls
 800793a:	2004      	movls	r0, #4
 800793c:	2005      	movhi	r0, #5
 800793e:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 8007940:	2002      	movs	r0, #2
 8007942:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 8007944:	2003      	movs	r0, #3
  else {}
  return Step;
}
 8007946:	4770      	bx	lr

08007948 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8007948:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800794a:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 800794e:	b1a8      	cbz	r0, 800797c <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8007956:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8007958:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800795a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800795e:	b11a      	cbz	r2, 8007968 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    retVal |= MC_OVER_CURR;
 8007966:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8007968:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800796c:	b12a      	cbz	r2, 800797a <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 800796e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    pHandle->driverProtectionFlag = false;
 8007972:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8007974:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8007976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  {
    /* Nothing to do */
  }

  return (retVal);
}
 800797a:	4770      	bx	lr
 800797c:	2140      	movs	r1, #64	; 0x40
 800797e:	e7ec      	b.n	800795a <PWMC_IsFaultOccurred+0x12>

08007980 <SixPwm_Init>:
  * @brief  It initializes TIMx, DMA1 and NVIC
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void SixPwm_Init( PWMC_SixPwm_Handle_t * pHandle )
{
 8007980:	b410      	push	{r4}
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8007982:	4c1c      	ldr	r4, [pc, #112]	; (80079f4 <SixPwm_Init+0x74>)
    LL_RCC_HSE_EnableCSS();

    /* Peripheral clocks enabling END ----------------------------------------*/

    /* Clear TIMx break flag. */
    LL_TIM_ClearFlag_BRK( pHandle->pParams_str->TIMx );
 8007984:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	680b      	ldr	r3, [r1, #0]
 800798a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800798e:	6022      	str	r2, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007994:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007996:	68da      	ldr	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007998:	f06f 0401 	mvn.w	r4, #1
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800799c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079a0:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80079a2:	611c      	str	r4, [r3, #16]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80079aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80079ae:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 80079b0:	6a1a      	ldr	r2, [r3, #32]
 80079b2:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
    LL_TIM_CC_EnableChannel( pHandle->pParams_str->TIMx, TIMxCCER_MASK_CH123 | TIMxCCER_MASK_CH1N2N3N );

	/* Clear the flags */
    pHandle->_Super.OverVoltageFlag = false;
    pHandle->_Super.OverCurrentFlag = false;
    pHandle->_Super.driverProtectionFlag = false;
 80079b6:	2400      	movs	r4, #0
 80079b8:	f042 0205 	orr.w	r2, r2, #5
 80079bc:	621a      	str	r2, [r3, #32]
    pHandle->FastDemagUpdated = true;
    pHandle->_Super.hElAngle = 0;
 80079be:	6304      	str	r4, [r0, #48]	; 0x30
    pHandle->FastDemagUpdated = true;
 80079c0:	2201      	movs	r2, #1
 80079c2:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80079c6:	681a      	ldr	r2, [r3, #0]
    pHandle->_Super.driverProtectionFlag = false;
 80079c8:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
    } 
    else
    {
      pHandle->NegOCPolarity = LL_TIM_OCPOLARITY_HIGH;
    }
    if (pHandle->pParams_str->OCNPolarity == LL_TIM_OCPOLARITY_HIGH)
 80079d2:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
    if (pHandle->pParams_str->OCPolarity == LL_TIM_OCPOLARITY_HIGH)
 80079d6:	fab3 f383 	clz	r3, r3
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (pHandle->pParams_str->OCNPolarity == LL_TIM_OCPOLARITY_HIGH)
 80079e0:	b922      	cbnz	r2, 80079ec <SixPwm_Init+0x6c>
    {
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_LOW;
 80079e2:	2302      	movs	r3, #2
    else
    {
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_HIGH;
    } 
  }
}
 80079e4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_LOW;
 80079e8:	6403      	str	r3, [r0, #64]	; 0x40
}
 80079ea:	4770      	bx	lr
      pHandle->NegOCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80079ec:	6404      	str	r4, [r0, #64]	; 0x40
}
 80079ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	40021000 	.word	0x40021000

080079f8 <PWMC_SetPhaseVoltage>:
* @param  new duty cycle value.
* @retval none
*/
__weak void PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, uint16_t DutyCycle )
{
  pHandle->CntPh = DutyCycle;
 80079f8:	8381      	strh	r1, [r0, #28]
}
 80079fa:	4770      	bx	lr

080079fc <SixPwm_ApplyNextStep>:
*/
__weak bool SixPwm_ApplyNextStep( PWMC_SixPwm_Handle_t * pHandle )
{
  bool retVal = false;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
  if (pHandle->_Super.Step != pHandle->_Super.NextStep)
 80079fc:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8007a00:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8007a04:	428a      	cmp	r2, r1
 8007a06:	d010      	beq.n	8007a2a <SixPwm_ApplyNextStep+0x2e>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a08:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8007a0a:	6812      	ldr	r2, [r2, #0]
{
 8007a0c:	b410      	push	{r4}
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007a0e:	6954      	ldr	r4, [r2, #20]
 8007a10:	f044 0420 	orr.w	r4, r4, #32
 8007a14:	6154      	str	r4, [r2, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007a16:	6954      	ldr	r4, [r2, #20]
 8007a18:	4603      	mov	r3, r0
  {
    LL_TIM_GenerateEvent_COM( TIMx );
    LL_TIM_GenerateEvent_UPDATE( TIMx );
    pHandle->_Super.Step = pHandle->_Super.NextStep;
    retVal = true;
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	4304      	orrs	r4, r0
 8007a1e:	6154      	str	r4, [r2, #20]
    pHandle->_Super.Step = pHandle->_Super.NextStep;
 8007a20:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
  }
  return retVal;
}
 8007a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a28:	4770      	bx	lr
  bool retVal = false;
 8007a2a:	2000      	movs	r0, #0
}
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <SixPwm_IsFastDemagUpdated>:
* @retval bool FastDemag configuration has been updated
*/
__weak bool SixPwm_IsFastDemagUpdated( PWMC_SixPwm_Handle_t * pHandle )
{
  return (pHandle->FastDemagUpdated);
}
 8007a30:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <SixPwm_ResetOCPolarity>:
* @param  pHandle Pointer on the target component instance.
* @retval none
*/
__weak void SixPwm_ResetOCPolarity( PWMC_SixPwm_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007a3a:	680b      	ldr	r3, [r1, #0]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH1, pHandle->pParams_str->OCPolarity);
 8007a3c:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH1N, pHandle->pParams_str->OCNPolarity);
 8007a40:	68c9      	ldr	r1, [r1, #12]
 8007a42:	f022 0202 	bic.w	r2, r2, #2
 8007a46:	4302      	orrs	r2, r0
 8007a48:	621a      	str	r2, [r3, #32]
 8007a4a:	6a1a      	ldr	r2, [r3, #32]
 8007a4c:	f022 0208 	bic.w	r2, r2, #8
 8007a50:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8007a54:	621a      	str	r2, [r3, #32]
 8007a56:	6a1a      	ldr	r2, [r3, #32]
 8007a58:	f022 0220 	bic.w	r2, r2, #32
 8007a5c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8007a60:	621a      	str	r2, [r3, #32]
 8007a62:	6a1a      	ldr	r2, [r3, #32]
 8007a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a68:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8007a6c:	621a      	str	r2, [r3, #32]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007a78:	621a      	str	r2, [r3, #32]
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a80:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8007a84:	621a      	str	r2, [r3, #32]
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH2, pHandle->pParams_str->OCPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH2N, pHandle->pParams_str->OCNPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH3, pHandle->pParams_str->OCPolarity);
  LL_TIM_OC_SetPolarity( TIMx, LL_TIM_CHANNEL_CH3N, pHandle->pParams_str->OCNPolarity);
}
 8007a86:	4770      	bx	lr

08007a88 <SixPwm_LoadNextStep>:
{
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a8a:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
 8007a8c:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a8e:	681d      	ldr	r5, [r3, #0]
{
 8007a90:	460e      	mov	r6, r1
  pHandle->_Super.NextStep = PWMC_ElAngleToStep(&(pHandle->_Super));
 8007a92:	f7ff ff2d 	bl	80078f0 <PWMC_ElAngleToStep>
  if (pHandle->_Super.Step != pHandle->_Super.NextStep) 
 8007a96:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  pHandle->_Super.NextStep = PWMC_ElAngleToStep(&(pHandle->_Super));
 8007a9a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  if (pHandle->_Super.Step != pHandle->_Super.NextStep) 
 8007a9e:	4283      	cmp	r3, r0
 8007aa0:	d020      	beq.n	8007ae4 <SixPwm_LoadNextStep+0x5c>
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 8007aa2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    pHandle->DemagCounter = 0;	  
 8007aa6:	2700      	movs	r7, #0
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 8007aa8:	2b01      	cmp	r3, #1
    pHandle->DemagCounter = 0;	  
 8007aaa:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    if (pHandle->_Super.ModUpdateReq == ENABLE_FAST_DEMAG) 
 8007aae:	d015      	beq.n	8007adc <SixPwm_LoadNextStep+0x54>
    if (pHandle->_Super.ModUpdateReq == DISABLE_FAST_DEMAG) 
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	f000 80dd 	beq.w	8007c70 <SixPwm_LoadNextStep+0x1e8>
    if (pHandle->_Super.ModUpdateReq == ENABLE_QUASI_SYNCH) 
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d15f      	bne.n	8007b7a <SixPwm_LoadNextStep+0xf2>
      pHandle->QuasiSynchDecay = true;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8007ac0:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
      switch ( pHandle->_Super.NextStep )
 8007ac4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d836      	bhi.n	8007b3a <SixPwm_LoadNextStep+0xb2>
 8007acc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ad0:	00a20092 	.word	0x00a20092
 8007ad4:	00b20074 	.word	0x00b20074
 8007ad8:	008200c0 	.word	0x008200c0
      pHandle->FastDemag = true;
 8007adc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8007ae0:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
    if ( pHandle->QuasiSynchDecay == true)
 8007ae4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1eb      	bne.n	8007ac4 <SixPwm_LoadNextStep+0x3c>
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 8007aec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8007af0:	bb23      	cbnz	r3, 8007b3c <SixPwm_LoadNextStep+0xb4>
    else if ( pHandle->_Super.AlignFlag == 1 )
 8007af2:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	f000 80cb 	beq.w	8007c92 <SixPwm_LoadNextStep+0x20a>
    else if ( pHandle->_Super.AlignFlag == -1 )
 8007afc:	3301      	adds	r3, #1
 8007afe:	d047      	beq.n	8007b90 <SixPwm_LoadNextStep+0x108>
      if (pHandle->DemagCounter >= pHandle->_Super.DemagCounterThreshold )
 8007b00:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 8007b04:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007b06:	429a      	cmp	r2, r3
 8007b08:	f080 80d8 	bcs.w	8007cbc <SixPwm_LoadNextStep+0x234>
      switch ( pHandle->_Super.NextStep )
 8007b0c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	d812      	bhi.n	8007b3a <SixPwm_LoadNextStep+0xb2>
 8007b14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b18:	0117011d 	.word	0x0117011d
 8007b1c:	01030111 	.word	0x01030111
 8007b20:	00e500f3 	.word	0x00e500f3
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007b24:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b26:	2300      	movs	r3, #0
 8007b28:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b2a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b2c:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007b2e:	6a2b      	ldr	r3, [r5, #32]
 8007b30:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007b34:	f043 0305 	orr.w	r3, r3, #5
 8007b38:	622b      	str	r3, [r5, #32]
}
 8007b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 8007b3c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 8007b40:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d2d5      	bcs.n	8007af2 <SixPwm_LoadNextStep+0x6a>
      pHandle->FastDemagUpdated = false;
 8007b46:	2300      	movs	r3, #0
      if (Direction > 0)
 8007b48:	429e      	cmp	r6, r3
      pHandle->FastDemagUpdated = false;
 8007b4a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
      if (Direction > 0)
 8007b4e:	f340 80c0 	ble.w	8007cd2 <SixPwm_LoadNextStep+0x24a>
        CCWFastDemagPulse = 0;
 8007b52:	461e      	mov	r6, r3
        CCWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 8007b54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        CWFastDemagPulse = pHandle->_Super.CntPh;
 8007b56:	8ba0      	ldrh	r0, [r4, #28]
        CWFastDemagPolarity = pHandle->NegOCPolarity;
 8007b58:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
        CWFastDemagNPolarity = pHandle->NegOCNPolarity;
 8007b5c:	6c27      	ldr	r7, [r4, #64]	; 0x40
        CCWFastDemagNPolarity = pHandle->pParams_str->OCNPolarity;
 8007b5e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
      switch ( pHandle->_Super.NextStep )
 8007b62:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007b66:	2b05      	cmp	r3, #5
 8007b68:	d8e7      	bhi.n	8007b3a <SixPwm_LoadNextStep+0xb2>
 8007b6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b6e:	01a4      	.short	0x01a4
 8007b70:	016b0188 	.word	0x016b0188
 8007b74:	0132014f 	.word	0x0132014f
 8007b78:	0115      	.short	0x0115
    if (pHandle->_Super.ModUpdateReq == DISABLE_QUASI_SYNCH) 
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d1b2      	bne.n	8007ae4 <SixPwm_LoadNextStep+0x5c>
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 8007b7e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
      pHandle->QuasiSynchDecay = false;
 8007b82:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8007b86:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
    else if (( pHandle->FastDemag == true ) && ( pHandle->DemagCounter < (pHandle->_Super.DemagCounterThreshold )))
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0b1      	beq.n	8007af2 <SixPwm_LoadNextStep+0x6a>
 8007b8e:	e7d5      	b.n	8007b3c <SixPwm_LoadNextStep+0xb4>
      switch ( pHandle->_Super.NextStep )
 8007b90:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d8ca      	bhi.n	8007b2e <SixPwm_LoadNextStep+0xa6>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <SixPwm_LoadNextStep+0x118>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007d8d 	.word	0x08007d8d
 8007ba4:	08007d81 	.word	0x08007d81
 8007ba8:	08007d75 	.word	0x08007d75
 8007bac:	08007d69 	.word	0x08007d69
 8007bb0:	08007b25 	.word	0x08007b25
 8007bb4:	08007d5d 	.word	0x08007d5d
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007bb8:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bbe:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bc0:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007bc2:	6a2b      	ldr	r3, [r5, #32]
 8007bc4:	f443 63a2 	orr.w	r3, r3, #1296	; 0x510
 8007bc8:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bca:	6a2b      	ldr	r3, [r5, #32]
 8007bcc:	f023 0345 	bic.w	r3, r3, #69	; 0x45
 8007bd0:	622b      	str	r3, [r5, #32]
}
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007bd4:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bda:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bdc:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007bde:	6a2b      	ldr	r3, [r5, #32]
 8007be0:	f443 73a8 	orr.w	r3, r3, #336	; 0x150
 8007be4:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007be6:	6a2b      	ldr	r3, [r5, #32]
 8007be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bec:	f023 0305 	bic.w	r3, r3, #5
 8007bf0:	622b      	str	r3, [r5, #32]
}
 8007bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007bf4:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bf6:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bfc:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007bfe:	6a2b      	ldr	r3, [r5, #32]
 8007c00:	f043 0351 	orr.w	r3, r3, #81	; 0x51
 8007c04:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c06:	6a2b      	ldr	r3, [r5, #32]
 8007c08:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 8007c0c:	f023 0304 	bic.w	r3, r3, #4
 8007c10:	622b      	str	r3, [r5, #32]
}
 8007c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007c14:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c16:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c1c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007c1e:	6a2b      	ldr	r3, [r5, #32]
 8007c20:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c2a:	6a2b      	ldr	r3, [r5, #32]
 8007c2c:	f023 0354 	bic.w	r3, r3, #84	; 0x54
 8007c30:	622b      	str	r3, [r5, #32]
}
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007c34:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c36:	2300      	movs	r3, #0
 8007c38:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c3a:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c3c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007c3e:	6a2b      	ldr	r3, [r5, #32]
 8007c40:	f043 0315 	orr.w	r3, r3, #21
 8007c44:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c46:	6a2b      	ldr	r3, [r5, #32]
 8007c48:	f423 63a8 	bic.w	r3, r3, #1344	; 0x540
 8007c4c:	622b      	str	r3, [r5, #32]
}
 8007c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007c50:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c52:	2300      	movs	r3, #0
 8007c54:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c56:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c58:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007c5a:	6a2b      	ldr	r3, [r5, #32]
 8007c5c:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8007c60:	f043 0301 	orr.w	r3, r3, #1
 8007c64:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c66:	6a2b      	ldr	r3, [r5, #32]
 8007c68:	f423 638a 	bic.w	r3, r3, #1104	; 0x450
 8007c6c:	622b      	str	r3, [r5, #32]
}
 8007c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SixPwm_ResetOCPolarity(pHandle);
 8007c70:	4620      	mov	r0, r4
 8007c72:	f7ff fee1 	bl	8007a38 <SixPwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007c76:	696b      	ldr	r3, [r5, #20]
 8007c78:	f043 0320 	orr.w	r3, r3, #32
 8007c7c:	616b      	str	r3, [r5, #20]
    if ( pHandle->QuasiSynchDecay == true)
 8007c7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
      pHandle->FastDemag = false;
 8007c82:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
      pHandle->_Super.ModUpdateReq = NO_REQUEST;
 8007c86:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
    if ( pHandle->QuasiSynchDecay == true)
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f43f af2e 	beq.w	8007aec <SixPwm_LoadNextStep+0x64>
 8007c90:	e718      	b.n	8007ac4 <SixPwm_LoadNextStep+0x3c>
      switch ( pHandle->_Super.NextStep )
 8007c92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	f63f af49 	bhi.w	8007b2e <SixPwm_LoadNextStep+0xa6>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <SixPwm_LoadNextStep+0x21c>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007d5d 	.word	0x08007d5d
 8007ca8:	08007d8d 	.word	0x08007d8d
 8007cac:	08007d81 	.word	0x08007d81
 8007cb0:	08007d75 	.word	0x08007d75
 8007cb4:	08007d69 	.word	0x08007d69
 8007cb8:	08007b25 	.word	0x08007b25
        pHandle->FastDemagUpdated = true;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
        SixPwm_ResetOCPolarity(pHandle);
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7ff feb8 	bl	8007a38 <SixPwm_ResetOCPolarity>
 8007cc8:	696b      	ldr	r3, [r5, #20]
 8007cca:	f043 0320 	orr.w	r3, r3, #32
 8007cce:	616b      	str	r3, [r5, #20]
}
 8007cd0:	e71c      	b.n	8007b0c <SixPwm_LoadNextStep+0x84>
        CWFastDemagPolarity = pHandle->pParams_str->OCPolarity;
 8007cd2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        CCWFastDemagPulse = pHandle->_Super.CntPh;
 8007cd4:	8ba6      	ldrh	r6, [r4, #28]
        CWFastDemagNPolarity = pHandle->pParams_str->OCNPolarity;
 8007cd6:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
        CWFastDemagPulse = 0;
 8007cda:	4618      	mov	r0, r3
        CCWFastDemagNPolarity = pHandle->NegOCNPolarity;
 8007cdc:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8007ce0:	e73f      	b.n	8007b62 <SixPwm_LoadNextStep+0xda>
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007ce2:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ce8:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007cea:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007cec:	6a2b      	ldr	r3, [r5, #32]
 8007cee:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007cf2:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007cf4:	6a2b      	ldr	r3, [r5, #32]
 8007cf6:	f023 0305 	bic.w	r3, r3, #5
 8007cfa:	622b      	str	r3, [r5, #32]
}
 8007cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007cfe:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d00:	2300      	movs	r3, #0
 8007d02:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d04:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d06:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007d08:	6a2b      	ldr	r3, [r5, #32]
 8007d0a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007d0e:	f043 0305 	orr.w	r3, r3, #5
 8007d12:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d14:	6a2b      	ldr	r3, [r5, #32]
 8007d16:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8007d1a:	622b      	str	r3, [r5, #32]
}
 8007d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d1e:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d20:	2300      	movs	r3, #0
 8007d22:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d24:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d26:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007d28:	6a2b      	ldr	r3, [r5, #32]
 8007d2a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8007d2e:	622b      	str	r3, [r5, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d30:	6a2b      	ldr	r3, [r5, #32]
 8007d32:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 8007d36:	622b      	str	r3, [r5, #32]
}
 8007d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d3a:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d40:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d42:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007d44:	e7d2      	b.n	8007cec <SixPwm_LoadNextStep+0x264>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d46:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d48:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d4e:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(TIMx->CCER, Channels);
 8007d50:	e7da      	b.n	8007d08 <SixPwm_LoadNextStep+0x280>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d52:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d54:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d56:	2300      	movs	r3, #0
 8007d58:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d5a:	e7e4      	b.n	8007d26 <SixPwm_LoadNextStep+0x29e>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d5c:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d5e:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d60:	2200      	movs	r2, #0
 8007d62:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d64:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 8007d66:	e6e2      	b.n	8007b2e <SixPwm_LoadNextStep+0xa6>
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d68:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d6e:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d70:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 8007d72:	e6dc      	b.n	8007b2e <SixPwm_LoadNextStep+0xa6>
          LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d74:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d76:	2300      	movs	r3, #0
 8007d78:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d7a:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d7c:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 8007d7e:	e6d6      	b.n	8007b2e <SixPwm_LoadNextStep+0xa6>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d80:	8ba3      	ldrh	r3, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d82:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d84:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d86:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d88:	63ea      	str	r2, [r5, #60]	; 0x3c
}
 8007d8a:	e6d0      	b.n	8007b2e <SixPwm_LoadNextStep+0xa6>
          LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPh );
 8007d8c:	8ba2      	ldrh	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d8e:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d90:	2300      	movs	r3, #0
 8007d92:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d94:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 8007d96:	e6ca      	b.n	8007b2e <SixPwm_LoadNextStep+0xa6>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d9c:	63ae      	str	r6, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d9e:	63e8      	str	r0, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007da0:	6a2b      	ldr	r3, [r5, #32]
 8007da2:	f023 0320 	bic.w	r3, r3, #32
 8007da6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007daa:	622b      	str	r3, [r5, #32]
 8007dac:	6a2b      	ldr	r3, [r5, #32]
 8007dae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007db6:	622b      	str	r3, [r5, #32]
 8007db8:	6a2b      	ldr	r3, [r5, #32]
 8007dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dbe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007dc2:	622b      	str	r3, [r5, #32]
 8007dc4:	6a2b      	ldr	r3, [r5, #32]
 8007dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dca:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007dce:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007dd0:	e78c      	b.n	8007cec <SixPwm_LoadNextStep+0x264>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007dd2:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007dd4:	6368      	str	r0, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007dd6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007dd8:	63ee      	str	r6, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007dda:	6a2b      	ldr	r3, [r5, #32]
 8007ddc:	f023 0302 	bic.w	r3, r3, #2
 8007de0:	ea43 030c 	orr.w	r3, r3, ip
 8007de4:	622b      	str	r3, [r5, #32]
 8007de6:	6a2b      	ldr	r3, [r5, #32]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dec:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007df0:	622b      	str	r3, [r5, #32]
 8007df2:	6a2b      	ldr	r3, [r5, #32]
 8007df4:	f023 0308 	bic.w	r3, r3, #8
 8007df8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8007dfc:	622b      	str	r3, [r5, #32]
 8007dfe:	6a2b      	ldr	r3, [r5, #32]
 8007e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e04:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8007e08:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007e0a:	e77d      	b.n	8007d08 <SixPwm_LoadNextStep+0x280>
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e0c:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e0e:	636e      	str	r6, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e10:	63a8      	str	r0, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e12:	63eb      	str	r3, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007e14:	6a2b      	ldr	r3, [r5, #32]
 8007e16:	f023 0302 	bic.w	r3, r3, #2
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	622b      	str	r3, [r5, #32]
 8007e1e:	6a2b      	ldr	r3, [r5, #32]
 8007e20:	f023 0320 	bic.w	r3, r3, #32
 8007e24:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007e28:	622b      	str	r3, [r5, #32]
 8007e2a:	6a2b      	ldr	r3, [r5, #32]
 8007e2c:	f023 0308 	bic.w	r3, r3, #8
 8007e30:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8007e34:	622b      	str	r3, [r5, #32]
 8007e36:	6a2b      	ldr	r3, [r5, #32]
 8007e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007e40:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007e42:	e771      	b.n	8007d28 <SixPwm_LoadNextStep+0x2a0>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e44:	2300      	movs	r3, #0
 8007e46:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e48:	63ae      	str	r6, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e4a:	63e8      	str	r0, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007e4c:	6a2b      	ldr	r3, [r5, #32]
 8007e4e:	f023 0320 	bic.w	r3, r3, #32
 8007e52:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8007e56:	622b      	str	r3, [r5, #32]
 8007e58:	6a2b      	ldr	r3, [r5, #32]
 8007e5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e5e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007e62:	622b      	str	r3, [r5, #32]
 8007e64:	6a2b      	ldr	r3, [r5, #32]
 8007e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6a:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8007e6e:	622b      	str	r3, [r5, #32]
 8007e70:	6a2b      	ldr	r3, [r5, #32]
 8007e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e76:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8007e7a:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007e7c:	e736      	b.n	8007cec <SixPwm_LoadNextStep+0x264>
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e7e:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e80:	6368      	str	r0, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e82:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e84:	63ee      	str	r6, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007e86:	6a2b      	ldr	r3, [r5, #32]
 8007e88:	f023 0302 	bic.w	r3, r3, #2
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	622b      	str	r3, [r5, #32]
 8007e90:	6a2b      	ldr	r3, [r5, #32]
 8007e92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007e9a:	622b      	str	r3, [r5, #32]
 8007e9c:	6a2b      	ldr	r3, [r5, #32]
 8007e9e:	f023 0308 	bic.w	r3, r3, #8
 8007ea2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8007ea6:	622b      	str	r3, [r5, #32]
 8007ea8:	6a2b      	ldr	r3, [r5, #32]
 8007eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eae:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007eb2:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007eb4:	e728      	b.n	8007d08 <SixPwm_LoadNextStep+0x280>
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007eb6:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007eb8:	636e      	str	r6, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007eba:	63a8      	str	r0, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ebc:	63eb      	str	r3, [r5, #60]	; 0x3c
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007ebe:	6a2b      	ldr	r3, [r5, #32]
 8007ec0:	f023 0302 	bic.w	r3, r3, #2
 8007ec4:	ea43 030c 	orr.w	r3, r3, ip
 8007ec8:	622b      	str	r3, [r5, #32]
 8007eca:	6a2b      	ldr	r3, [r5, #32]
 8007ecc:	f023 0320 	bic.w	r3, r3, #32
 8007ed0:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8007ed4:	622b      	str	r3, [r5, #32]
 8007ed6:	6a2b      	ldr	r3, [r5, #32]
 8007ed8:	f023 0308 	bic.w	r3, r3, #8
 8007edc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8007ee0:	622b      	str	r3, [r5, #32]
 8007ee2:	6a2b      	ldr	r3, [r5, #32]
 8007ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee8:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8007eec:	622b      	str	r3, [r5, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007eee:	e71b      	b.n	8007d28 <SixPwm_LoadNextStep+0x2a0>

08007ef0 <SixPwm_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void SixPwm_TurnOnLowSides( PWMC_Handle_t * pHdl, uint32_t ticks)
{
 8007ef0:	b510      	push	{r4, lr}
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007ef2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007ef4:	6824      	ldr	r4, [r4, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ef6:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007ef8:	f06f 0301 	mvn.w	r3, #1

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007efc:	2101      	movs	r1, #1
 8007efe:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8007f02:	6123      	str	r3, [r4, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f04:	6362      	str	r2, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f06:	63a2      	str	r2, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f08:	63e2      	str	r2, [r4, #60]	; 0x3c

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  SixPwm_ResetOCPolarity(pHandle);
 8007f0a:	f7ff fd95 	bl	8007a38 <SixPwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007f0e:	6963      	ldr	r3, [r4, #20]
 8007f10:	f043 0320 	orr.w	r3, r3, #32
 8007f14:	6163      	str	r3, [r4, #20]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1c:	6463      	str	r3, [r4, #68]	; 0x44
  LL_TIM_GenerateEvent_COM( TIMx );
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
}
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <SixPwm_SwitchOnPWM>:
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007f20:	6c82      	ldr	r2, [r0, #72]	; 0x48
{
 8007f22:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007f24:	6814      	ldr	r4, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007f26:	68e2      	ldr	r2, [r4, #12]

  pHandle->_Super.TurnOnLowSidesAction = false;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f042 0201 	orr.w	r2, r2, #1
 8007f2e:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  pHandle->DemagCounter = 0;
 8007f32:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8007f36:	60e2      	str	r2, [r4, #12]
  SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
 8007f38:	6862      	ldr	r2, [r4, #4]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	6062      	str	r2, [r4, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
 8007f40:	6862      	ldr	r2, [r4, #4]
 8007f42:	f022 0204 	bic.w	r2, r2, #4
 8007f46:	6062      	str	r2, [r4, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f48:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f4a:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f4c:	63e3      	str	r3, [r4, #60]	; 0x3c
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007f4e:	69a3      	ldr	r3, [r4, #24]
 8007f50:	4a18      	ldr	r2, [pc, #96]	; (8007fb4 <SixPwm_SwitchOnPWM+0x94>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f58:	61a3      	str	r3, [r4, #24]
 8007f5a:	69a3      	ldr	r3, [r4, #24]
 8007f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f60:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8007f64:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8007f68:	61a3      	str	r3, [r4, #24]
 8007f6a:	69e3      	ldr	r3, [r4, #28]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f72:	61e3      	str	r3, [r4, #28]
{
 8007f74:	4605      	mov	r5, r0
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
  LL_TIM_OC_SetMode( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
  SixPwm_ResetOCPolarity( pHandle );
 8007f76:	f7ff fd5f 	bl	8007a38 <SixPwm_ResetOCPolarity>
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007f7a:	6963      	ldr	r3, [r4, #20]
  LL_TIM_GenerateEvent_COM( TIMx );
	/* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
  LL_TIM_EnableAllOutputs(TIMx);
  if (true == pHandle->Oversampling )
 8007f7c:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
 8007f80:	f043 0320 	orr.w	r3, r3, #32
 8007f84:	6163      	str	r3, [r4, #20]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f8c:	6463      	str	r3, [r4, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007f8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f94:	6463      	str	r3, [r4, #68]	; 0x44
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (true == pHandle->Oversampling )
 8007fa0:	b11a      	cbz	r2, 8007faa <SixPwm_SwitchOnPWM+0x8a>
 8007fa2:	f043 0320 	orr.w	r3, r3, #32
 8007fa6:	6063      	str	r3, [r4, #4]
  }
  else
  {
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
  }	  
}
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007fae:	6063      	str	r3, [r4, #4]
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
 8007fb2:	bf00      	nop
 8007fb4:	fffeff8c 	.word	0xfffeff8c

08007fb8 <SixPwm_SetADCTriggerChannel>:
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007fb8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007fba:	681b      	ldr	r3, [r3, #0]

  pHandle->_Super.ADCTriggerCnt = SamplingPoint;
 8007fbc:	8401      	strh	r1, [r0, #32]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007fbe:	6419      	str	r1, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, pHandle->_Super.ADCTriggerCnt);
}
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop

08007fc4 <SixPwm_SwitchOffPWM>:
#endif
  PWMC_SixPwm_Handle_t * pHandle = ( PWMC_SixPwm_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007fc4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007fc6:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007fc8:	6c59      	ldr	r1, [r3, #68]	; 0x44

  pHandle->_Super.TurnOnLowSidesAction = false;
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007fd0:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
 8007fd4:	6459      	str	r1, [r3, #68]	; 0x44
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007fd6:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007fdc:	68d9      	ldr	r1, [r3, #12]
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  pHandle->_Super.CntPh = 0;
 8007fde:	8382      	strh	r2, [r0, #28]
 8007fe0:	f021 0101 	bic.w	r1, r1, #1
 8007fe4:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007ff0:	605a      	str	r2, [r3, #4]
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
  LL_TIM_SetTriggerOutput(pHandle->pParams_str->TIMx, LL_TIM_TRGO_RESET);
  return;
}
 8007ff2:	4770      	bx	lr

08007ff4 <SixPwm_BRK_IRQHandler>:
 * @retval none
 */
__weak void * SixPwm_BRK_IRQHandler( PWMC_SixPwm_Handle_t * pHandle )
{
  pHandle->_Super.OverCurrentFlag = true;
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
 8007ff4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007ff6:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.OverCurrentFlag = true;
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007ffe:	68da      	ldr	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008000:	f06f 0101 	mvn.w	r1, #1
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008004:	400a      	ands	r2, r1
 8008006:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
  return MC_NULL;
}
 8008008:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800800a:	6119      	str	r1, [r3, #16]
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop

08008010 <SixPwm_FastDemagFlag>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif

  return (pHandle->FastDemag);
}
 8008010:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop

08008018 <SixPwm_QuasiSynchFlag>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif

  return (pHandle->QuasiSynchDecay);
}
 8008018:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <SixPwm_UpdatePwmDemagCounter>:
  return (uint32_t)(READ_REG(TIMx->RCR));
 8008020:	4a06      	ldr	r2, [pc, #24]	; (800803c <SixPwm_UpdatePwmDemagCounter+0x1c>)
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void SixPwm_UpdatePwmDemagCounter( PWMC_SixPwm_Handle_t * pHandle )
{
  pHandle->DemagCounter += LL_TIM_GetRepetitionCounter(TIM1) + 1;
 8008022:	f8b0 c044 	ldrh.w	ip, [r0, #68]	; 0x44
 8008026:	6b13      	ldr	r3, [r2, #48]	; 0x30
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008028:	68d1      	ldr	r1, [r2, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	4463      	add	r3, ip
 800802e:	f041 0101 	orr.w	r1, r1, #1
 8008032:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008036:	60d1      	str	r1, [r2, #12]
  LL_TIM_EnableIT_UPDATE(TIM1);
}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40012c00 	.word	0x40012c00

08008040 <SixPwm_DisablePwmDemagCounter>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008040:	4a02      	ldr	r2, [pc, #8]	; (800804c <SixPwm_DisablePwmDemagCounter+0xc>)
 8008042:	68d3      	ldr	r3, [r2, #12]
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	60d3      	str	r3, [r2, #12]
  * @retval none
  */
__weak void SixPwm_DisablePwmDemagCounter( PWMC_SixPwm_Handle_t * pHandle )
{
  LL_TIM_DisableIT_UPDATE(TIM1);
}
 800804a:	4770      	bx	lr
 800804c:	40012c00 	.word	0x40012c00

08008050 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008050:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8008054:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008056:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008058:	4494      	add	ip, r2
 800805a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 800805e:	b430      	push	{r4, r5}
 8008060:	2500      	movs	r5, #0
 8008062:	f36c 050f 	bfi	r5, ip, #0, #16
 8008066:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800806a:	b14b      	cbz	r3, 8008080 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 800806c:	6944      	ldr	r4, [r0, #20]
 800806e:	2300      	movs	r3, #0
 8008070:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008072:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8008074:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008078:	8941      	ldrh	r1, [r0, #10]
 800807a:	b29a      	uxth	r2, r3
 800807c:	4291      	cmp	r1, r2
 800807e:	d8f7      	bhi.n	8008070 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8008080:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8008082:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8008084:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8008086:	bc30      	pop	{r4, r5}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop

0800808c <RVBS_Init>:
{
 800808c:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800808e:	f7ff ffdf 	bl	8008050 <RVBS_Clear>
}
 8008092:	bd08      	pop	{r3, pc}

08008094 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8008094:	8982      	ldrh	r2, [r0, #12]
 8008096:	89c1      	ldrh	r1, [r0, #14]
 8008098:	428a      	cmp	r2, r1
 800809a:	d00e      	beq.n	80080ba <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800809c:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 80080a0:	8a43      	ldrh	r3, [r0, #18]
 80080a2:	4563      	cmp	r3, ip
 80080a4:	d807      	bhi.n	80080b6 <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80080a6:	7c03      	ldrb	r3, [r0, #16]
 80080a8:	b98b      	cbnz	r3, 80080ce <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 80080aa:	4561      	cmp	r1, ip
 80080ac:	d913      	bls.n	80080d6 <RVBS_CheckFaultState+0x42>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 80080ae:	2201      	movs	r2, #1
 80080b0:	7402      	strb	r2, [r0, #16]
          fault = MC_NO_ERROR;
 80080b2:	4618      	mov	r0, r3
 80080b4:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 80080b6:	2004      	movs	r0, #4
 80080b8:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80080ba:	88c3      	ldrh	r3, [r0, #6]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d30a      	bcc.n	80080d6 <RVBS_CheckFaultState+0x42>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80080c0:	8a40      	ldrh	r0, [r0, #18]
 80080c2:	4298      	cmp	r0, r3
 80080c4:	bf94      	ite	ls
 80080c6:	2000      	movls	r0, #0
 80080c8:	2001      	movhi	r0, #1
 80080ca:	0080      	lsls	r0, r0, #2
 80080cc:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80080ce:	4562      	cmp	r2, ip
 80080d0:	d303      	bcc.n	80080da <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 80080d2:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80080d4:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 80080d6:	2002      	movs	r0, #2
 80080d8:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 80080da:	2300      	movs	r3, #0
 80080dc:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 80080de:	2002      	movs	r0, #2
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop

080080e4 <RVBS_CalcAvVbus>:
{
 80080e4:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 80080e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080ea:	4299      	cmp	r1, r3
{
 80080ec:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 80080ee:	d021      	beq.n	8008134 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 80080f0:	6943      	ldr	r3, [r0, #20]
 80080f2:	7e45      	ldrb	r5, [r0, #25]
 80080f4:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80080f8:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 80080fc:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8008100:	d00d      	beq.n	800811e <RVBS_CalcAvVbus+0x3a>
 8008102:	3a01      	subs	r2, #1
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800810a:	3b02      	subs	r3, #2
      wtemp = 0u;
 800810c:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800810e:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008112:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8008114:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008116:	d1fa      	bne.n	800810e <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 8008118:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800811c:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800811e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008122:	4575      	cmp	r5, lr
        pHandle->index++;
 8008124:	bf34      	ite	cc
 8008126:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8008128:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800812a:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800812c:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800812e:	bf34      	ite	cc
 8008130:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8008132:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008134:	4620      	mov	r0, r4
 8008136:	f7ff ffad 	bl	8008094 <RVBS_CheckFaultState>
 800813a:	8120      	strh	r0, [r4, #8]
}
 800813c:	bd38      	pop	{r3, r4, r5, pc}
 800813e:	bf00      	nop

08008140 <RUC_Init>:
  */
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS)
{
  if (MC_NULL == pHandle)
 8008140:	b1b0      	cbz	r0, 8008170 <RUC_Init+0x30>
    pHandle->pVSS = pVSS;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8008142:	6943      	ldr	r3, [r0, #20]
    pHandle->pVSS = pVSS;
 8008144:	e9c0 1214 	strd	r1, r2, [r0, #80]	; 0x50
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008148:	b19b      	cbz	r3, 8008172 <RUC_Init+0x32>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800814a:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800814c:	b1a3      	cbz	r3, 8008178 <RUC_Init+0x38>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800814e:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008150:	b1a3      	cbz	r3, 800817c <RUC_Init+0x3c>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8008152:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008154:	b1a3      	cbz	r3, 8008180 <RUC_Init+0x40>
 8008156:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8008158:	2205      	movs	r2, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800815a:	b15b      	cbz	r3, 8008174 <RUC_Init+0x34>
 800815c:	2304      	movs	r3, #4
 800815e:	2205      	movs	r2, #5
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008164:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008168:	2100      	movs	r1, #0
 800816a:	6159      	str	r1, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 800816c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a

    }
  }
}
 8008170:	4770      	bx	lr
      bPhase++;
 8008172:	2201      	movs	r2, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008174:	1e53      	subs	r3, r2, #1
 8008176:	e7f3      	b.n	8008160 <RUC_Init+0x20>
      bPhase++;
 8008178:	2202      	movs	r2, #2
 800817a:	e7fb      	b.n	8008174 <RUC_Init+0x34>
 800817c:	2203      	movs	r2, #3
 800817e:	e7f9      	b.n	8008174 <RUC_Init+0x34>
 8008180:	2204      	movs	r2, #4
 8008182:	e7f7      	b.n	8008174 <RUC_Init+0x34>

08008184 <RUC_Clear>:
  *         This parameter must be -1 or +1.
  */

__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
  if (MC_NULL == pHandle)
 8008184:	2800      	cmp	r0, #0
 8008186:	d03d      	beq.n	8008204 <RUC_Clear+0x80>
{
 8008188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800818c:	e9d0 7814 	ldrd	r7, r8, [r0, #80]	; 0x50
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8008190:	2600      	movs	r6, #0
 8008192:	4604      	mov	r4, r0
    pHandle->hDirection = hMotorDirection;
 8008194:	80c1      	strh	r1, [r0, #6]
    pHandle->bStageCnt = 0U;
 8008196:	f880 604f 	strb.w	r6, [r0, #79]	; 0x4f

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 800819a:	4640      	mov	r0, r8

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800819c:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 800819e:	f000 f9e3 	bl	8008568 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 80081a2:	2104      	movs	r1, #4
 80081a4:	4638      	mov	r0, r7
 80081a6:	f000 f909 	bl	80083bc <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 80081aa:	8861      	ldrh	r1, [r4, #2]
 80081ac:	fb11 f105 	smulbb	r1, r1, r5
 80081b0:	b209      	sxth	r1, r1
 80081b2:	4640      	mov	r0, r8
 80081b4:	f000 fa8e 	bl	80086d4 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, STC_GetDutyCycleRef(pSTC), 0U);
 80081b8:	4638      	mov	r0, r7
 80081ba:	f000 f8fb 	bl	80083b4 <STC_GetDutyCycleRef>
 80081be:	4632      	mov	r2, r6
 80081c0:	b201      	sxth	r1, r0
 80081c2:	4638      	mov	r0, r7
 80081c4:	f000 f900 	bl	80083c8 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalPulse, (uint32_t)(pPhaseParams->hDurationms));
 80081c8:	89a2      	ldrh	r2, [r4, #12]
 80081ca:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80081ce:	4638      	mov	r0, r7
 80081d0:	f000 f8fa 	bl	80083c8 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms );
 80081d4:	89e1      	ldrh	r1, [r4, #14]
 80081d6:	89a2      	ldrh	r2, [r4, #12]
 80081d8:	fb11 f105 	smulbb	r1, r1, r5
 80081dc:	b209      	sxth	r1, r1
 80081de:	4640      	mov	r0, r8
 80081e0:	f000 fa80 	bl	80086e4 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 80081e4:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80081e6:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 80081e8:	4a07      	ldr	r2, [pc, #28]	; (8008208 <RUC_Clear+0x84>)

    pHandle->hPhaseRemainingTicks++;

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
    pHandle->EnteredZone1 = false;
 80081ea:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80081ee:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80081f8:	6962      	ldr	r2, [r4, #20]
 80081fa:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 80081fc:	3301      	adds	r3, #1
 80081fe:	80a3      	strh	r3, [r4, #4]
  }
}
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	10624dd3 	.word	0x10624dd3

0800820c <RUC_UpdatePulse>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  BusVHandle: pointer to the bus voltage sensor
  */
__weak void RUC_UpdatePulse(RevUpCtrl_Handle_t *pHandle, BusVoltageSensor_Handle_t *BusVHandle)
{
  if (MC_NULL == pHandle)
 800820c:	b150      	cbz	r0, 8008224 <RUC_UpdatePulse+0x18>
{
 800820e:	b510      	push	{r4, lr}
 8008210:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
                                  / VBS_GetAvBusVoltage_V(BusVHandle);
 8008212:	4608      	mov	r0, r1
 8008214:	f7fe fc04 	bl	8006a20 <VBS_GetAvBusVoltage_V>
 8008218:	2378      	movs	r3, #120	; 0x78
 800821a:	fbb3 f0f0 	udiv	r0, r3, r0
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
 800821e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
    pHandle->PulseUpdateFactor = tPulseUpdateFactor;						
  }
}
 8008222:	bd10      	pop	{r4, pc}
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <RUC_Exec>:
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
  bool retVal = true;

  if (MC_NULL == pHandle)
 8008228:	2800      	cmp	r0, #0
 800822a:	d038      	beq.n	800829e <RUC_Exec+0x76>
  {
    retVal = false;
  }
  else
  {
    if (pHandle->hPhaseRemainingTicks > 0U)
 800822c:	8883      	ldrh	r3, [r0, #4]
{
 800822e:	b510      	push	{r4, lr}
 8008230:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8008232:	b12b      	cbz	r3, 8008240 <RUC_Exec+0x18>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 8008234:	3b01      	subs	r3, #1
 8008236:	b29b      	uxth	r3, r3
 8008238:	8083      	strh	r3, [r0, #4]

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 800823a:	b10b      	cbz	r3, 8008240 <RUC_Exec+0x18>
  bool retVal = true;
 800823c:	2001      	movs	r0, #1
        retVal = false;
      }
    }
  }
  return (retVal);
}
 800823e:	bd10      	pop	{r4, pc}
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8008240:	68a3      	ldr	r3, [r4, #8]
 8008242:	b353      	cbz	r3, 800829a <RUC_Exec+0x72>
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10;
 8008244:	8899      	ldrh	r1, [r3, #4]
 8008246:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800824a:	4a16      	ldr	r2, [pc, #88]	; (80082a4 <RUC_Exec+0x7c>)
 800824c:	fb00 f101 	mul.w	r1, r0, r1
 8008250:	fba2 2101 	umull	r2, r1, r2, r1
        (void)STC_ExecRamp(pHandle->pSTC, hPulse,
 8008254:	f341 01cf 	sbfx	r1, r1, #3, #16
 8008258:	881a      	ldrh	r2, [r3, #0]
 800825a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800825c:	f000 f8b4 	bl	80083c8 <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	88e0      	ldrh	r0, [r4, #6]
 8008264:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8008266:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8008268:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800826c:	b209      	sxth	r1, r1
 800826e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008270:	f000 fa38 	bl	80086e4 <VSS_SetMecAcceleration>
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8008274:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008276:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8008278:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800827a:	4a0b      	ldr	r2, [pc, #44]	; (80082a8 <RUC_Exec+0x80>)
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800827c:	6889      	ldr	r1, [r1, #8]
 800827e:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008280:	fb00 f303 	mul.w	r3, r0, r3
 8008284:	fba2 2303 	umull	r2, r3, r2, r3
        pHandle->bStageCnt++;
 8008288:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800828c:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800828e:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8008290:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8008292:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8008294:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
 8008298:	e7d0      	b.n	800823c <RUC_Exec+0x14>
    retVal = false;
 800829a:	2000      	movs	r0, #0
}
 800829c:	bd10      	pop	{r4, pc}
    retVal = false;
 800829e:	2000      	movs	r0, #0
}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	cccccccd 	.word	0xcccccccd
 80082a8:	10624dd3 	.word	0x10624dd3

080082ac <RUC_IsAlignStageNow>:
  */
uint8_t RUC_IsAlignStageNow(RevUpCtrl_Handle_t *pHandle)
{
  uint8_t align_flag = 0;

  if (MC_NULL == pHandle)
 80082ac:	b150      	cbz	r0, 80082c4 <RUC_IsAlignStageNow+0x18>
    hRetVal = pHandle->ParamsData[bPhase].hFinalMecSpeedUnit;
 80082ae:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
 80082b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80082b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  }
  else
  {
    int16_t speed;
    speed = RUC_GetPhaseFinalMecSpeed01Hz(pHandle, pHandle->bStageCnt);
    if (0 == speed)
 80082ba:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
  uint8_t align_flag = 0;
 80082be:	fab0 f080 	clz	r0, r0
 80082c2:	0940      	lsrs	r0, r0, #5
    {
      align_flag = 1;
    }
  }
  return (align_flag);
}
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop

080082c8 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle)
{
  bool retVal = false;

  if (MC_NULL == pHandle)
 80082c8:	b138      	cbz	r0, 80082da <RUC_FirstAccelerationStageReached+0x12>
  {
    /* Nothing to do */
  }
  else
  {
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 80082ca:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
 80082ce:	f890 004b 	ldrb.w	r0, [r0, #75]	; 0x4b
 80082d2:	4283      	cmp	r3, r0
 80082d4:	bf34      	ite	cc
 80082d6:	2000      	movcc	r0, #0
 80082d8:	2001      	movcs	r0, #1
    {
      retVal = true;
    }
  }
  return (retVal);
}
 80082da:	4770      	bx	lr

080082dc <RUC_SetPhase>:
  */
__weak bool RUC_SetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
  bool retValue = true;

  if ((MC_NULL == pHandle) || (MC_NULL == phaseData))
 80082dc:	b180      	cbz	r0, 8008300 <RUC_SetPhase+0x24>
 80082de:	b172      	cbz	r2, 80082fe <RUC_SetPhase+0x22>
  {
    retValue = false;
  }
  else
  {
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80082e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80082e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80082e8:	f8b2 c004 	ldrh.w	ip, [r2, #4]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80082ec:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80082f0:	8813      	ldrh	r3, [r2, #0]
 80082f2:	8183      	strh	r3, [r0, #12]
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80082f4:	f8a0 c010 	strh.w	ip, [r0, #16]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80082f8:	81c1      	strh	r1, [r0, #14]
  bool retValue = true;
 80082fa:	2001      	movs	r0, #1
 80082fc:	4770      	bx	lr
    retValue = false;
 80082fe:	4610      	mov	r0, r2
  }
  return (retValue);
}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop

08008304 <RUC_GetPhase>:
  */
__weak bool RUC_GetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
  bool retValue = true;

  if ((MC_NULL == pHandle) || (MC_NULL == phaseData))
 8008304:	b1a0      	cbz	r0, 8008330 <RUC_GetPhase+0x2c>
 8008306:	b18a      	cbz	r2, 800832c <RUC_GetPhase+0x28>
{
 8008308:	b500      	push	{lr}
  {
    retValue = false;
  }
  else
  {
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 800830a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800830e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  bool retValue = true;
 8008312:	2001      	movs	r0, #1
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8008314:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8008318:	f9b1 c00e 	ldrsh.w	ip, [r1, #14]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800831c:	898b      	ldrh	r3, [r1, #12]
 800831e:	8013      	strh	r3, [r2, #0]
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8008320:	f8a2 e004 	strh.w	lr, [r2, #4]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8008324:	f8a2 c002 	strh.w	ip, [r2, #2]
  }
  return (retValue);
}
 8008328:	f85d fb04 	ldr.w	pc, [sp], #4
    retValue = false;
 800832c:	4610      	mov	r0, r2
 800832e:	4770      	bx	lr
}
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <RUC_GetDirection>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Returns direction of the motor.
  */
__weak int16_t RUC_GetDirection(RevUpCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : (int16_t)pHandle->hDirection);
 8008334:	b108      	cbz	r0, 800833a <RUC_GetDirection+0x6>
 8008336:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
}
 800833a:	4770      	bx	lr

0800833c <STC_Init>:
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  if (MC_NULL == pHandle)
 800833c:	b190      	cbz	r0, 8008364 <STC_Init+0x28>
{
 800833e:	b430      	push	{r4, r5}
  else
  {
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008340:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 8008344:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    pHandle->Mode = pHandle->ModeDefault;
 8008346:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800834a:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800834c:	042d      	lsls	r5, r5, #16
    pHandle->TargetFinal = 0;
 800834e:	2300      	movs	r3, #0
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 8008350:	0424      	lsls	r4, r4, #16
 8008352:	e9c0 5401 	strd	r5, r4, [r0, #4]
    pHandle->PISpeed = pPI;
 8008356:	6101      	str	r1, [r0, #16]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
  }
}
 8008358:	bc30      	pop	{r4, r5}
    pHandle->SPD = SPD_Handle;
 800835a:	6142      	str	r2, [r0, #20]
    pHandle->TargetFinal = 0;
 800835c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800835e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008360:	6183      	str	r3, [r0, #24]
}
 8008362:	4770      	bx	lr
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop

08008368 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  if (MC_NULL == pHandle)
 8008368:	b100      	cbz	r0, 800836c <STC_SetSpeedSensor+0x4>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SPD = SPD_Handle;
 800836a:	6141      	str	r1, [r0, #20]
  }
}
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 8008370:	b100      	cbz	r0, 8008374 <STC_GetSpeedSensor+0x4>
 8008372:	6940      	ldr	r0, [r0, #20]
}
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop

08008378 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if (MC_NULL == pHandle)
 8008378:	b140      	cbz	r0, 800838c <STC_Clear+0x14>
{
 800837a:	b510      	push	{r4, lr}
  {
    /* Nothing to do */
  }
  else
  {
    if (MCM_SPEED_MODE == pHandle->Mode)
 800837c:	7803      	ldrb	r3, [r0, #0]
 800837e:	2b03      	cmp	r3, #3
 8008380:	4604      	mov	r4, r0
 8008382:	d004      	beq.n	800838e <STC_Clear+0x16>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 8008384:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	60a3      	str	r3, [r4, #8]
  }
}
 800838a:	bd10      	pop	{r4, pc}
 800838c:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800838e:	6900      	ldr	r0, [r0, #16]
 8008390:	2100      	movs	r1, #0
 8008392:	f7ff fa11 	bl	80077b8 <PID_SetIntegralTerm>
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 8008396:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	60a3      	str	r3, [r4, #8]
}
 800839c:	bd10      	pop	{r4, pc}
 800839e:	bf00      	nop

080083a0 <STC_GetMecSpeedRefUnit>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 80083a0:	b130      	cbz	r0, 80083b0 <STC_GetMecSpeedRefUnit+0x10>
 80083a2:	6840      	ldr	r0, [r0, #4]
 80083a4:	2800      	cmp	r0, #0
 80083a6:	bfbc      	itt	lt
 80083a8:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80083ac:	30ff      	addlt	r0, #255	; 0xff
 80083ae:	1400      	asrs	r0, r0, #16
#endif
}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop

080083b4 <STC_GetDutyCycleRef>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 80083b4:	b100      	cbz	r0, 80083b8 <STC_GetDutyCycleRef+0x4>
 80083b6:	8940      	ldrh	r0, [r0, #10]
#endif
}
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop

080083bc <STC_SetControlMode>:
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, MC_ControlMode_t bMode )
{
  if (MC_NULL == pHandle)
 80083bc:	b110      	cbz	r0, 80083c4 <STC_SetControlMode+0x8>
    /* Nothing to do */
  }
  else
  {
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80083be:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80083c0:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80083c2:	60c3      	str	r3, [r0, #12]
  }
}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <STC_ExecRamp>:
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
  bool allowedRange = true;

  if (MC_NULL == pHandle)
 80083c8:	b358      	cbz	r0, 8008422 <STC_ExecRamp+0x5a>
{
 80083ca:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80083cc:	7803      	ldrb	r3, [r0, #0]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	460e      	mov	r6, r1
 80083d2:	4615      	mov	r5, r2
 80083d4:	4604      	mov	r4, r0
 80083d6:	d026      	beq.n	8008426 <STC_ExecRamp+0x5e>
    {
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 80083d8:	6840      	ldr	r0, [r0, #4]
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80083da:	8be3      	ldrh	r3, [r4, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 80083dc:	2800      	cmp	r0, #0
 80083de:	bfbc      	itt	lt
 80083e0:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80083e4:	30ff      	addlt	r0, #255	; 0xff
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80083e6:	4299      	cmp	r1, r3
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 80083e8:	ea4f 4020 	mov.w	r0, r0, asr #16
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80083ec:	dd01      	ble.n	80083f2 <STC_ExecRamp+0x2a>
    allowedRange = false;
 80083ee:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
      }
    }
  }
  return (allowedRange);
}
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80083f2:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80083f6:	428b      	cmp	r3, r1
 80083f8:	dcf9      	bgt.n	80083ee <STC_ExecRamp+0x26>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80083fa:	8c23      	ldrh	r3, [r4, #32]
 80083fc:	4299      	cmp	r1, r3
 80083fe:	da03      	bge.n	8008408 <STC_ExecRamp+0x40>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8008400:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008404:	428b      	cmp	r3, r1
 8008406:	dbf2      	blt.n	80083ee <STC_ExecRamp+0x26>
      if (0U == hDurationms)
 8008408:	b9a5      	cbnz	r5, 8008434 <STC_ExecRamp+0x6c>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800840a:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800840c:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800840e:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8008410:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008414:	bf0c      	ite	eq
 8008416:	6066      	streq	r6, [r4, #4]
          pHandle->DutyCycleRef = ((int32_t)hTargetFinal) * 65536;
 8008418:	60a6      	strne	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800841a:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800841c:	61a3      	str	r3, [r4, #24]
 800841e:	2001      	movs	r0, #1
}
 8008420:	bd70      	pop	{r4, r5, r6, pc}
    allowedRange = false;
 8008422:	2000      	movs	r0, #0
}
 8008424:	4770      	bx	lr
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 8008426:	f7ff ffc5 	bl	80083b4 <STC_GetDutyCycleRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 800842a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800842c:	429e      	cmp	r6, r3
 800842e:	dcde      	bgt.n	80083ee <STC_ExecRamp+0x26>
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 8008430:	b200      	sxth	r0, r0
 8008432:	e7e9      	b.n	8008408 <STC_ExecRamp+0x40>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008434:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8008436:	4a08      	ldr	r2, [pc, #32]	; (8008458 <STC_ExecRamp+0x90>)
        pHandle->TargetFinal = hTargetFinal;
 8008438:	8066      	strh	r6, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800843a:	fb05 f303 	mul.w	r3, r5, r3
        wAux /= 1000U;
 800843e:	fba2 2303 	umull	r2, r3, r2, r3
 8008442:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8008444:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008446:	1a30      	subs	r0, r6, r0
 8008448:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 800844a:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800844c:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8008450:	61a0      	str	r0, [r4, #24]
 8008452:	2001      	movs	r0, #1
}
 8008454:	bd70      	pop	{r4, r5, r6, pc}
 8008456:	bf00      	nop
 8008458:	10624dd3 	.word	0x10624dd3

0800845c <STC_StopRamp>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 800845c:	b110      	cbz	r0, 8008464 <STC_StopRamp+0x8>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->RampRemainingStep = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008462:	6183      	str	r3, [r0, #24]
  }
}
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop

08008468 <STC_CalcSpeedReference>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t motor dutycycle reference. This value represents actually the
  *         dutycycle expressed in digit.
  */
__weak uint16_t STC_CalcSpeedReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008468:	b570      	push	{r4, r5, r6, lr}
  uint16_t hDutyCycleReference;

  if (MC_NULL == pHandle)
 800846a:	4604      	mov	r4, r0
 800846c:	b198      	cbz	r0, 8008496 <STC_CalcSpeedReference+0x2e>
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800846e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8008470:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008472:	2a04      	cmp	r2, #4
      wCurrentReference = pHandle->DutyCycleRef;
 8008474:	bf0c      	ite	eq
 8008476:	6886      	ldreq	r6, [r0, #8]
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8008478:	6846      	ldrne	r6, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800847a:	2b01      	cmp	r3, #1
 800847c:	d90c      	bls.n	8008498 <STC_CalcSpeedReference+0x30>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800847e:	6981      	ldr	r1, [r0, #24]
 8008480:	440e      	add	r6, r1

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8008482:	3b01      	subs	r3, #1
      /* Compute speed error */
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8008484:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 8008486:	60c3      	str	r3, [r0, #12]
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8008488:	4630      	mov	r0, r6
 800848a:	db09      	blt.n	80084a0 <STC_CalcSpeedReference+0x38>
 800848c:	1405      	asrs	r5, r0, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 800848e:	2a03      	cmp	r2, #3
 8008490:	d010      	beq.n	80084b4 <STC_CalcSpeedReference+0x4c>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
    }
    else
    {
      pHandle->DutyCycleRef = wCurrentReference;
 8008492:	60a6      	str	r6, [r4, #8]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hDutyCycleReference = (int16_t)(wCurrentReference >> 16);
#else
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 8008494:	b2a8      	uxth	r0, r5
#endif
    }
  }
  return (hDutyCycleReference);
}
 8008496:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8008498:	d006      	beq.n	80084a8 <STC_CalcSpeedReference+0x40>
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 800849a:	2e00      	cmp	r6, #0
 800849c:	4630      	mov	r0, r6
 800849e:	daf5      	bge.n	800848c <STC_CalcSpeedReference+0x24>
 80084a0:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 80084a4:	30ff      	adds	r0, #255	; 0xff
 80084a6:	e7f1      	b.n	800848c <STC_CalcSpeedReference+0x24>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80084a8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80084ac:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80084ae:	042e      	lsls	r6, r5, #16
      pHandle->RampRemainingStep = 0U;
 80084b0:	60c3      	str	r3, [r0, #12]
 80084b2:	e7ec      	b.n	800848e <STC_CalcSpeedReference+0x26>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80084b4:	6960      	ldr	r0, [r4, #20]
 80084b6:	f000 f821 	bl	80084fc <SPD_GetAvrgMecSpeedUnit>
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 80084ba:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80084be:	bfd4      	ite	le
 80084c0:	1b40      	suble	r0, r0, r5
      else hError = hTargetSpeed - hMeasuredSpeed;
 80084c2:	1a28      	subgt	r0, r5, r0
 80084c4:	b201      	sxth	r1, r0
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80084c6:	6920      	ldr	r0, [r4, #16]
 80084c8:	f7ff f9aa 	bl	8007820 <PI_Controller>
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
 80084cc:	0403      	lsls	r3, r0, #16
 80084ce:	e9c4 6301 	strd	r6, r3, [r4, #4]
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80084d2:	b280      	uxth	r0, r0
}
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
 80084d6:	bf00      	nop

080084d8 <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. 
  *         Expressed in the unit defined by #SPEED_UNIT
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
 80084d8:	b108      	cbz	r0, 80084de <STC_GetMecSpeedRefUnitDefault+0x6>
 80084da:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
}
 80084de:	4770      	bx	lr

080084e0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 80084e0:	b138      	cbz	r0, 80084f2 <STC_ForceSpeedReferenceToCurrentSpeed+0x12>
{
 80084e2:	b510      	push	{r4, lr}
 80084e4:	4604      	mov	r4, r0
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80084e6:	6940      	ldr	r0, [r0, #20]
 80084e8:	f000 f808 	bl	80084fc <SPD_GetAvrgMecSpeedUnit>
 80084ec:	0400      	lsls	r0, r0, #16
 80084ee:	6060      	str	r0, [r4, #4]
  }
}
 80084f0:	bd10      	pop	{r4, pc}
 80084f2:	4770      	bx	lr

080084f4 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 80084f4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop

080084fc <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 80084fc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 8008504:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800850c:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008510:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8008514:	b410      	push	{r4}
    if (*pMecSpeedUnit < 0)
 8008516:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8008518:	bfb8      	it	lt
 800851a:	425b      	neglt	r3, r3
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800851c:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800851e:	459c      	cmp	ip, r3
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008520:	78c1      	ldrb	r1, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008522:	7802      	ldrb	r2, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008524:	8a84      	ldrh	r4, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008526:	d819      	bhi.n	800855c <SPD_IsMecSpeedReliable+0x50>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008528:	429c      	cmp	r4, r3
 800852a:	bf2c      	ite	cs
 800852c:	2400      	movcs	r4, #0
 800852e:	2401      	movcc	r4, #1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8008530:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008534:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8008538:	2b00      	cmp	r3, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800853a:	bfb8      	it	lt
 800853c:	425b      	neglt	r3, r3
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 800853e:	b29b      	uxth	r3, r3
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008540:	459c      	cmp	ip, r3
 8008542:	d300      	bcc.n	8008546 <SPD_IsMecSpeedReliable+0x3a>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8008544:	b164      	cbz	r4, 8008560 <SPD_IsMecSpeedReliable+0x54>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008546:	4291      	cmp	r1, r2
 8008548:	d901      	bls.n	800854e <SPD_IsMecSpeedReliable+0x42>
      {
        bSpeedErrorNumber++;
 800854a:	3201      	adds	r2, #1
 800854c:	b2d2      	uxtb	r2, r2
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800854e:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008550:	1a50      	subs	r0, r2, r1
 8008552:	bf18      	it	ne
 8008554:	2001      	movne	r0, #1
 8008556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800855a:	4770      	bx	lr
      SpeedError = true;
 800855c:	2401      	movs	r4, #1
 800855e:	e7e7      	b.n	8008530 <SPD_IsMecSpeedReliable+0x24>
        bSpeedErrorNumber = 0u;
 8008560:	4291      	cmp	r1, r2
 8008562:	bf88      	it	hi
 8008564:	2200      	movhi	r2, #0
 8008566:	e7f2      	b.n	800854e <SPD_IsMecSpeedReliable+0x42>

08008568 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8008568:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800856a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800856c:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800856e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8008572:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008574:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8008576:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8008578:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 800857a:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800857c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 800857e:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <VSS_Init>:
{
 8008584:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8008586:	f7ff ffef 	bl	8008568 <VSS_Clear>
}
 800858a:	bd08      	pop	{r3, pc}

0800858c <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800858c:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 8008590:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8008592:	b11a      	cbz	r2, 800859c <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8008594:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8008598:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800859a:	4770      	bx	lr
{
 800859c:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800859e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80085a2:	8e00      	ldrh	r0, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80085a4:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 80085a6:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80085aa:	785a      	ldrb	r2, [r3, #1]
 80085ac:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80085b0:	4460      	add	r0, ip
 80085b2:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80085b6:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80085b8:	b200      	sxth	r0, r0
 80085ba:	8618      	strh	r0, [r3, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80085bc:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 80085be:	b1fc      	cbz	r4, 8008600 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 80085c0:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 80085c4:	b1f2      	cbz	r2, 8008604 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 80085c6:	3a01      	subs	r2, #1
 80085c8:	b212      	sxth	r2, r2
 80085ca:	85da      	strh	r2, [r3, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80085cc:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80085d0:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80085d2:	db26      	blt.n	8008622 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80085d4:	eba1 0e0e 	sub.w	lr, r1, lr
 80085d8:	fa0f fe8e 	sxth.w	lr, lr
 80085dc:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80085de:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 80085e2:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 80085e6:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80085ea:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 80085ee:	fb12 f205 	smulbb	r2, r2, r5
 80085f2:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 80085f4:	db0e      	blt.n	8008614 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 80085f6:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 80085f8:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 80085fa:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 80085fe:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8008600:	8098      	strh	r0, [r3, #4]
}
 8008602:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8008604:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8008608:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800860a:	2401      	movs	r4, #1
 800860c:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8008610:	8098      	strh	r0, [r3, #4]
}
 8008612:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8008614:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 8008618:	2c00      	cmp	r4, #0
 800861a:	d0f1      	beq.n	8008600 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800861c:	440a      	add	r2, r1
 800861e:	b210      	sxth	r0, r2
 8008620:	e7ee      	b.n	8008600 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8008622:	ebae 0e01 	sub.w	lr, lr, r1
 8008626:	fa0f fe8e 	sxth.w	lr, lr
 800862a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800862e:	e7d6      	b.n	80085de <VSS_CalcElAngle+0x52>

08008630 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8008630:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008632:	2b01      	cmp	r3, #1
 8008634:	d923      	bls.n	800867e <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8008636:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008638:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800863a:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800863c:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800863e:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8008640:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008644:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008646:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008648:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800864c:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800864e:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008656:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800865a:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800865c:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8008660:	b21b      	sxth	r3, r3
 8008662:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8008664:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008666:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 8008668:	1e53      	subs	r3, r2, #1
 800866a:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800866c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008670:	b983      	cbnz	r3, 8008694 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008672:	78c2      	ldrb	r2, [r0, #3]
 8008674:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8008676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800867a:	4618      	mov	r0, r3
 800867c:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800867e:	d00d      	beq.n	800869c <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008680:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008684:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8008686:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800868a:	bb03      	cbnz	r3, 80086ce <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800868c:	78c2      	ldrb	r2, [r0, #3]
 800868e:	7002      	strb	r2, [r0, #0]
}
 8008690:	4618      	mov	r0, r3
 8008692:	4770      	bx	lr
 8008694:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8008698:	f7ff bf38 	b.w	800850c <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800869c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 80086a0:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80086a4:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80086a6:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80086a8:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80086ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80086b0:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80086b2:	fb02 f20c 	mul.w	r2, r2, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80086b6:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80086ba:	7843      	ldrb	r3, [r0, #1]
 80086bc:	fb13 f302 	smulbb	r3, r3, r2
 80086c0:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 80086c2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 80086c6:	2200      	movs	r2, #0
 80086c8:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0de      	beq.n	800868c <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80086ce:	f7ff bf1d 	b.w	800850c <SPD_IsMecSpeedReliable>
 80086d2:	bf00      	nop

080086d4 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80086d4:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 80086d6:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80086d8:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 80086dc:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80086de:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop

080086e4 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80086e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80086e8:	b99b      	cbnz	r3, 8008712 <VSS_SetMecAcceleration+0x2e>
{
 80086ea:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 80086ec:	b992      	cbnz	r2, 8008714 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80086ee:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80086f0:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80086f2:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80086f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80086f8:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80086fc:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 80086fe:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008702:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8008706:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008708:	fb1c f303 	smulbb	r3, ip, r3
 800870c:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800870e:	8541      	strh	r1, [r0, #42]	; 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008710:	bd10      	pop	{r4, pc}
 8008712:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8008714:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008716:	4c16      	ldr	r4, [pc, #88]	; (8008770 <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008718:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	fba4 4303 	umull	r4, r3, r4, r3
 8008724:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8008728:	3301      	adds	r3, #1
 800872a:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800872c:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800872e:	b923      	cbnz	r3, 800873a <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008730:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008734:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008736:	6243      	str	r3, [r0, #36]	; 0x24
}
 8008738:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800873a:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800873c:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800873e:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008740:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008744:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008748:	69c2      	ldr	r2, [r0, #28]
 800874a:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800874e:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008752:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008756:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800875a:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800875c:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8008760:	fb04 f303 	mul.w	r3, r4, r3
 8008764:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008766:	ea4f 430c 	mov.w	r3, ip, lsl #16
 800876a:	6243      	str	r3, [r0, #36]	; 0x24
    }
 800876c:	e7e4      	b.n	8008738 <VSS_SetMecAcceleration+0x54>
 800876e:	bf00      	nop
 8008770:	10624dd3 	.word	0x10624dd3

08008774 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8008774:	b151      	cbz	r1, 800878c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8008776:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 800877a:	2201      	movs	r2, #1
 800877c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 8008780:	b923      	cbnz	r3, 800878c <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8008782:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8008786:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8008788:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800878a:	4770      	bx	lr
  bool bAux = true;
 800878c:	2001      	movs	r0, #1
 800878e:	4770      	bx	lr

08008790 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8008790:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop

08008798 <memset>:
 8008798:	4402      	add	r2, r0
 800879a:	4603      	mov	r3, r0
 800879c:	4293      	cmp	r3, r2
 800879e:	d100      	bne.n	80087a2 <memset+0xa>
 80087a0:	4770      	bx	lr
 80087a2:	f803 1b01 	strb.w	r1, [r3], #1
 80087a6:	e7f9      	b.n	800879c <memset+0x4>

080087a8 <__libc_init_array>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	4d0d      	ldr	r5, [pc, #52]	; (80087e0 <__libc_init_array+0x38>)
 80087ac:	4c0d      	ldr	r4, [pc, #52]	; (80087e4 <__libc_init_array+0x3c>)
 80087ae:	1b64      	subs	r4, r4, r5
 80087b0:	10a4      	asrs	r4, r4, #2
 80087b2:	2600      	movs	r6, #0
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	d109      	bne.n	80087cc <__libc_init_array+0x24>
 80087b8:	4d0b      	ldr	r5, [pc, #44]	; (80087e8 <__libc_init_array+0x40>)
 80087ba:	4c0c      	ldr	r4, [pc, #48]	; (80087ec <__libc_init_array+0x44>)
 80087bc:	f000 f826 	bl	800880c <_init>
 80087c0:	1b64      	subs	r4, r4, r5
 80087c2:	10a4      	asrs	r4, r4, #2
 80087c4:	2600      	movs	r6, #0
 80087c6:	42a6      	cmp	r6, r4
 80087c8:	d105      	bne.n	80087d6 <__libc_init_array+0x2e>
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d0:	4798      	blx	r3
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7ee      	b.n	80087b4 <__libc_init_array+0xc>
 80087d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087da:	4798      	blx	r3
 80087dc:	3601      	adds	r6, #1
 80087de:	e7f2      	b.n	80087c6 <__libc_init_array+0x1e>
 80087e0:	08008a80 	.word	0x08008a80
 80087e4:	08008a80 	.word	0x08008a80
 80087e8:	08008a80 	.word	0x08008a80
 80087ec:	08008a84 	.word	0x08008a84

080087f0 <memcpy>:
 80087f0:	440a      	add	r2, r1
 80087f2:	4291      	cmp	r1, r2
 80087f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087f8:	d100      	bne.n	80087fc <memcpy+0xc>
 80087fa:	4770      	bx	lr
 80087fc:	b510      	push	{r4, lr}
 80087fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008806:	4291      	cmp	r1, r2
 8008808:	d1f9      	bne.n	80087fe <memcpy+0xe>
 800880a:	bd10      	pop	{r4, pc}

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
