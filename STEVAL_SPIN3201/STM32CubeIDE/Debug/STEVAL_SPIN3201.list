
STEVAL_SPIN3201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000666c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800754c  0800754c  00020478  2**0
                  CONTENTS
  4 .ARM          00000000  0800754c  0800754c  00020478  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800754c  0800754c  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  20000000  08007554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000478  080079cc  00020478  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  20000854  080079cc  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 13 .debug_line   00035ba8  00000000  00000000  000204e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000077  00000000  00000000  0005608b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000338e3  00000000  00000000  00056102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006d48  00000000  00000000  000899e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017c8  00000000  00000000  00090730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084caf  00000000  00000000  00091ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002322  00000000  00000000  00116ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00014d2c  00000000  00000000  00118ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019933  00000000  00000000  0012dbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004158  00000000  00000000  00147528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000478 	.word	0x20000478
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006714 	.word	0x08006714

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000047c 	.word	0x2000047c
 8000104:	08006714 	.word	0x08006714

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_lmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4699      	mov	r9, r3
 80003fa:	0c03      	lsrs	r3, r0, #16
 80003fc:	469c      	mov	ip, r3
 80003fe:	0413      	lsls	r3, r2, #16
 8000400:	4647      	mov	r7, r8
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	001d      	movs	r5, r3
 8000406:	000e      	movs	r6, r1
 8000408:	4661      	mov	r1, ip
 800040a:	0404      	lsls	r4, r0, #16
 800040c:	0c24      	lsrs	r4, r4, #16
 800040e:	b580      	push	{r7, lr}
 8000410:	0007      	movs	r7, r0
 8000412:	0c10      	lsrs	r0, r2, #16
 8000414:	434b      	muls	r3, r1
 8000416:	4365      	muls	r5, r4
 8000418:	4341      	muls	r1, r0
 800041a:	4360      	muls	r0, r4
 800041c:	0c2c      	lsrs	r4, r5, #16
 800041e:	18c0      	adds	r0, r0, r3
 8000420:	1820      	adds	r0, r4, r0
 8000422:	468c      	mov	ip, r1
 8000424:	4283      	cmp	r3, r0
 8000426:	d903      	bls.n	8000430 <__aeabi_lmul+0x3c>
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	025b      	lsls	r3, r3, #9
 800042c:	4698      	mov	r8, r3
 800042e:	44c4      	add	ip, r8
 8000430:	4649      	mov	r1, r9
 8000432:	4379      	muls	r1, r7
 8000434:	4356      	muls	r6, r2
 8000436:	0c03      	lsrs	r3, r0, #16
 8000438:	042d      	lsls	r5, r5, #16
 800043a:	0c2d      	lsrs	r5, r5, #16
 800043c:	1989      	adds	r1, r1, r6
 800043e:	4463      	add	r3, ip
 8000440:	0400      	lsls	r0, r0, #16
 8000442:	1940      	adds	r0, r0, r5
 8000444:	18c9      	adds	r1, r1, r3
 8000446:	bcc0      	pop	{r6, r7}
 8000448:	46b9      	mov	r9, r7
 800044a:	46b0      	mov	r8, r6
 800044c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fmul>:
 8000450:	0243      	lsls	r3, r0, #9
 8000452:	0a5b      	lsrs	r3, r3, #9
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	4699      	mov	r9, r3
 800045c:	46d6      	mov	lr, sl
 800045e:	0fc3      	lsrs	r3, r0, #31
 8000460:	0045      	lsls	r5, r0, #1
 8000462:	4698      	mov	r8, r3
 8000464:	b5c0      	push	{r6, r7, lr}
 8000466:	464b      	mov	r3, r9
 8000468:	1c0f      	adds	r7, r1, #0
 800046a:	0e2d      	lsrs	r5, r5, #24
 800046c:	d100      	bne.n	8000470 <__aeabi_fmul+0x20>
 800046e:	e0cb      	b.n	8000608 <__aeabi_fmul+0x1b8>
 8000470:	2dff      	cmp	r5, #255	; 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fmul+0x26>
 8000474:	e0cf      	b.n	8000616 <__aeabi_fmul+0x1c6>
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	04d2      	lsls	r2, r2, #19
 800047c:	431a      	orrs	r2, r3
 800047e:	2300      	movs	r3, #0
 8000480:	4691      	mov	r9, r2
 8000482:	2600      	movs	r6, #0
 8000484:	469a      	mov	sl, r3
 8000486:	3d7f      	subs	r5, #127	; 0x7f
 8000488:	027c      	lsls	r4, r7, #9
 800048a:	007b      	lsls	r3, r7, #1
 800048c:	0a64      	lsrs	r4, r4, #9
 800048e:	0e1b      	lsrs	r3, r3, #24
 8000490:	0fff      	lsrs	r7, r7, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_fmul+0x48>
 8000496:	e0a9      	b.n	80005ec <__aeabi_fmul+0x19c>
 8000498:	2bff      	cmp	r3, #255	; 0xff
 800049a:	d011      	beq.n	80004c0 <__aeabi_fmul+0x70>
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	00e4      	lsls	r4, r4, #3
 80004a0:	04d2      	lsls	r2, r2, #19
 80004a2:	4314      	orrs	r4, r2
 80004a4:	4642      	mov	r2, r8
 80004a6:	3b7f      	subs	r3, #127	; 0x7f
 80004a8:	195b      	adds	r3, r3, r5
 80004aa:	407a      	eors	r2, r7
 80004ac:	2000      	movs	r0, #0
 80004ae:	b2d2      	uxtb	r2, r2
 80004b0:	1c5d      	adds	r5, r3, #1
 80004b2:	2e0a      	cmp	r6, #10
 80004b4:	dd13      	ble.n	80004de <__aeabi_fmul+0x8e>
 80004b6:	003a      	movs	r2, r7
 80004b8:	2e0b      	cmp	r6, #11
 80004ba:	d047      	beq.n	800054c <__aeabi_fmul+0xfc>
 80004bc:	4647      	mov	r7, r8
 80004be:	e03f      	b.n	8000540 <__aeabi_fmul+0xf0>
 80004c0:	002b      	movs	r3, r5
 80004c2:	33ff      	adds	r3, #255	; 0xff
 80004c4:	2c00      	cmp	r4, #0
 80004c6:	d11e      	bne.n	8000506 <__aeabi_fmul+0xb6>
 80004c8:	2202      	movs	r2, #2
 80004ca:	4316      	orrs	r6, r2
 80004cc:	4642      	mov	r2, r8
 80004ce:	3501      	adds	r5, #1
 80004d0:	407a      	eors	r2, r7
 80004d2:	b2d2      	uxtb	r2, r2
 80004d4:	35ff      	adds	r5, #255	; 0xff
 80004d6:	2e0a      	cmp	r6, #10
 80004d8:	dd00      	ble.n	80004dc <__aeabi_fmul+0x8c>
 80004da:	e0e4      	b.n	80006a6 <__aeabi_fmul+0x256>
 80004dc:	2002      	movs	r0, #2
 80004de:	2e02      	cmp	r6, #2
 80004e0:	dc1c      	bgt.n	800051c <__aeabi_fmul+0xcc>
 80004e2:	3e01      	subs	r6, #1
 80004e4:	2e01      	cmp	r6, #1
 80004e6:	d842      	bhi.n	800056e <__aeabi_fmul+0x11e>
 80004e8:	2802      	cmp	r0, #2
 80004ea:	d03d      	beq.n	8000568 <__aeabi_fmul+0x118>
 80004ec:	2801      	cmp	r0, #1
 80004ee:	d166      	bne.n	80005be <__aeabi_fmul+0x16e>
 80004f0:	2000      	movs	r0, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	05c0      	lsls	r0, r0, #23
 80004f6:	4308      	orrs	r0, r1
 80004f8:	07d2      	lsls	r2, r2, #31
 80004fa:	4310      	orrs	r0, r2
 80004fc:	bce0      	pop	{r5, r6, r7}
 80004fe:	46ba      	mov	sl, r7
 8000500:	46b1      	mov	r9, r6
 8000502:	46a8      	mov	r8, r5
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000506:	2203      	movs	r2, #3
 8000508:	4316      	orrs	r6, r2
 800050a:	4642      	mov	r2, r8
 800050c:	3501      	adds	r5, #1
 800050e:	407a      	eors	r2, r7
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	35ff      	adds	r5, #255	; 0xff
 8000514:	2e0a      	cmp	r6, #10
 8000516:	dd00      	ble.n	800051a <__aeabi_fmul+0xca>
 8000518:	e0e4      	b.n	80006e4 <__aeabi_fmul+0x294>
 800051a:	2003      	movs	r0, #3
 800051c:	2101      	movs	r1, #1
 800051e:	40b1      	lsls	r1, r6
 8000520:	26a6      	movs	r6, #166	; 0xa6
 8000522:	00f6      	lsls	r6, r6, #3
 8000524:	4231      	tst	r1, r6
 8000526:	d10a      	bne.n	800053e <__aeabi_fmul+0xee>
 8000528:	2690      	movs	r6, #144	; 0x90
 800052a:	00b6      	lsls	r6, r6, #2
 800052c:	4231      	tst	r1, r6
 800052e:	d116      	bne.n	800055e <__aeabi_fmul+0x10e>
 8000530:	3eb9      	subs	r6, #185	; 0xb9
 8000532:	3eff      	subs	r6, #255	; 0xff
 8000534:	420e      	tst	r6, r1
 8000536:	d01a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000538:	46a1      	mov	r9, r4
 800053a:	4682      	mov	sl, r0
 800053c:	e000      	b.n	8000540 <__aeabi_fmul+0xf0>
 800053e:	0017      	movs	r7, r2
 8000540:	4653      	mov	r3, sl
 8000542:	003a      	movs	r2, r7
 8000544:	2b02      	cmp	r3, #2
 8000546:	d00f      	beq.n	8000568 <__aeabi_fmul+0x118>
 8000548:	464c      	mov	r4, r9
 800054a:	4650      	mov	r0, sl
 800054c:	2803      	cmp	r0, #3
 800054e:	d1cd      	bne.n	80004ec <__aeabi_fmul+0x9c>
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	03c9      	lsls	r1, r1, #15
 8000554:	4321      	orrs	r1, r4
 8000556:	0249      	lsls	r1, r1, #9
 8000558:	20ff      	movs	r0, #255	; 0xff
 800055a:	0a49      	lsrs	r1, r1, #9
 800055c:	e7ca      	b.n	80004f4 <__aeabi_fmul+0xa4>
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	2200      	movs	r2, #0
 8000562:	20ff      	movs	r0, #255	; 0xff
 8000564:	03c9      	lsls	r1, r1, #15
 8000566:	e7c5      	b.n	80004f4 <__aeabi_fmul+0xa4>
 8000568:	20ff      	movs	r0, #255	; 0xff
 800056a:	2100      	movs	r1, #0
 800056c:	e7c2      	b.n	80004f4 <__aeabi_fmul+0xa4>
 800056e:	0c20      	lsrs	r0, r4, #16
 8000570:	4649      	mov	r1, r9
 8000572:	0424      	lsls	r4, r4, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	0027      	movs	r7, r4
 8000578:	0c0e      	lsrs	r6, r1, #16
 800057a:	0409      	lsls	r1, r1, #16
 800057c:	0c09      	lsrs	r1, r1, #16
 800057e:	4374      	muls	r4, r6
 8000580:	434f      	muls	r7, r1
 8000582:	4346      	muls	r6, r0
 8000584:	4348      	muls	r0, r1
 8000586:	0c39      	lsrs	r1, r7, #16
 8000588:	1900      	adds	r0, r0, r4
 800058a:	1809      	adds	r1, r1, r0
 800058c:	428c      	cmp	r4, r1
 800058e:	d903      	bls.n	8000598 <__aeabi_fmul+0x148>
 8000590:	2080      	movs	r0, #128	; 0x80
 8000592:	0240      	lsls	r0, r0, #9
 8000594:	4684      	mov	ip, r0
 8000596:	4466      	add	r6, ip
 8000598:	043f      	lsls	r7, r7, #16
 800059a:	0408      	lsls	r0, r1, #16
 800059c:	0c3f      	lsrs	r7, r7, #16
 800059e:	19c0      	adds	r0, r0, r7
 80005a0:	0184      	lsls	r4, r0, #6
 80005a2:	1e67      	subs	r7, r4, #1
 80005a4:	41bc      	sbcs	r4, r7
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	0e80      	lsrs	r0, r0, #26
 80005aa:	1989      	adds	r1, r1, r6
 80005ac:	4304      	orrs	r4, r0
 80005ae:	0189      	lsls	r1, r1, #6
 80005b0:	430c      	orrs	r4, r1
 80005b2:	0109      	lsls	r1, r1, #4
 80005b4:	d571      	bpl.n	800069a <__aeabi_fmul+0x24a>
 80005b6:	2301      	movs	r3, #1
 80005b8:	0861      	lsrs	r1, r4, #1
 80005ba:	401c      	ands	r4, r3
 80005bc:	430c      	orrs	r4, r1
 80005be:	002b      	movs	r3, r5
 80005c0:	337f      	adds	r3, #127	; 0x7f
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dd51      	ble.n	800066a <__aeabi_fmul+0x21a>
 80005c6:	0761      	lsls	r1, r4, #29
 80005c8:	d004      	beq.n	80005d4 <__aeabi_fmul+0x184>
 80005ca:	210f      	movs	r1, #15
 80005cc:	4021      	ands	r1, r4
 80005ce:	2904      	cmp	r1, #4
 80005d0:	d000      	beq.n	80005d4 <__aeabi_fmul+0x184>
 80005d2:	3404      	adds	r4, #4
 80005d4:	0121      	lsls	r1, r4, #4
 80005d6:	d503      	bpl.n	80005e0 <__aeabi_fmul+0x190>
 80005d8:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <__aeabi_fmul+0x298>)
 80005da:	401c      	ands	r4, r3
 80005dc:	002b      	movs	r3, r5
 80005de:	3380      	adds	r3, #128	; 0x80
 80005e0:	2bfe      	cmp	r3, #254	; 0xfe
 80005e2:	dcc1      	bgt.n	8000568 <__aeabi_fmul+0x118>
 80005e4:	01a1      	lsls	r1, r4, #6
 80005e6:	0a49      	lsrs	r1, r1, #9
 80005e8:	b2d8      	uxtb	r0, r3
 80005ea:	e783      	b.n	80004f4 <__aeabi_fmul+0xa4>
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d12c      	bne.n	800064a <__aeabi_fmul+0x1fa>
 80005f0:	2301      	movs	r3, #1
 80005f2:	4642      	mov	r2, r8
 80005f4:	431e      	orrs	r6, r3
 80005f6:	002b      	movs	r3, r5
 80005f8:	407a      	eors	r2, r7
 80005fa:	2001      	movs	r0, #1
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	1c5d      	adds	r5, r3, #1
 8000600:	2e0a      	cmp	r6, #10
 8000602:	dd00      	ble.n	8000606 <__aeabi_fmul+0x1b6>
 8000604:	e757      	b.n	80004b6 <__aeabi_fmul+0x66>
 8000606:	e76a      	b.n	80004de <__aeabi_fmul+0x8e>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <__aeabi_fmul+0x1de>
 800060c:	2301      	movs	r3, #1
 800060e:	2604      	movs	r6, #4
 8000610:	2500      	movs	r5, #0
 8000612:	469a      	mov	sl, r3
 8000614:	e738      	b.n	8000488 <__aeabi_fmul+0x38>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d104      	bne.n	8000624 <__aeabi_fmul+0x1d4>
 800061a:	2302      	movs	r3, #2
 800061c:	2608      	movs	r6, #8
 800061e:	25ff      	movs	r5, #255	; 0xff
 8000620:	469a      	mov	sl, r3
 8000622:	e731      	b.n	8000488 <__aeabi_fmul+0x38>
 8000624:	2303      	movs	r3, #3
 8000626:	260c      	movs	r6, #12
 8000628:	25ff      	movs	r5, #255	; 0xff
 800062a:	469a      	mov	sl, r3
 800062c:	e72c      	b.n	8000488 <__aeabi_fmul+0x38>
 800062e:	4648      	mov	r0, r9
 8000630:	f000 f8f6 	bl	8000820 <__clzsi2>
 8000634:	464a      	mov	r2, r9
 8000636:	1f43      	subs	r3, r0, #5
 8000638:	2576      	movs	r5, #118	; 0x76
 800063a:	409a      	lsls	r2, r3
 800063c:	2300      	movs	r3, #0
 800063e:	426d      	negs	r5, r5
 8000640:	4691      	mov	r9, r2
 8000642:	2600      	movs	r6, #0
 8000644:	469a      	mov	sl, r3
 8000646:	1a2d      	subs	r5, r5, r0
 8000648:	e71e      	b.n	8000488 <__aeabi_fmul+0x38>
 800064a:	0020      	movs	r0, r4
 800064c:	f000 f8e8 	bl	8000820 <__clzsi2>
 8000650:	4642      	mov	r2, r8
 8000652:	1f43      	subs	r3, r0, #5
 8000654:	409c      	lsls	r4, r3
 8000656:	1a2b      	subs	r3, r5, r0
 8000658:	3b76      	subs	r3, #118	; 0x76
 800065a:	407a      	eors	r2, r7
 800065c:	2000      	movs	r0, #0
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	1c5d      	adds	r5, r3, #1
 8000662:	2e0a      	cmp	r6, #10
 8000664:	dd00      	ble.n	8000668 <__aeabi_fmul+0x218>
 8000666:	e726      	b.n	80004b6 <__aeabi_fmul+0x66>
 8000668:	e739      	b.n	80004de <__aeabi_fmul+0x8e>
 800066a:	2101      	movs	r1, #1
 800066c:	1acb      	subs	r3, r1, r3
 800066e:	2b1b      	cmp	r3, #27
 8000670:	dd00      	ble.n	8000674 <__aeabi_fmul+0x224>
 8000672:	e73d      	b.n	80004f0 <__aeabi_fmul+0xa0>
 8000674:	359e      	adds	r5, #158	; 0x9e
 8000676:	0021      	movs	r1, r4
 8000678:	40ac      	lsls	r4, r5
 800067a:	40d9      	lsrs	r1, r3
 800067c:	1e63      	subs	r3, r4, #1
 800067e:	419c      	sbcs	r4, r3
 8000680:	4321      	orrs	r1, r4
 8000682:	074b      	lsls	r3, r1, #29
 8000684:	d004      	beq.n	8000690 <__aeabi_fmul+0x240>
 8000686:	230f      	movs	r3, #15
 8000688:	400b      	ands	r3, r1
 800068a:	2b04      	cmp	r3, #4
 800068c:	d000      	beq.n	8000690 <__aeabi_fmul+0x240>
 800068e:	3104      	adds	r1, #4
 8000690:	014b      	lsls	r3, r1, #5
 8000692:	d504      	bpl.n	800069e <__aeabi_fmul+0x24e>
 8000694:	2001      	movs	r0, #1
 8000696:	2100      	movs	r1, #0
 8000698:	e72c      	b.n	80004f4 <__aeabi_fmul+0xa4>
 800069a:	001d      	movs	r5, r3
 800069c:	e78f      	b.n	80005be <__aeabi_fmul+0x16e>
 800069e:	0189      	lsls	r1, r1, #6
 80006a0:	2000      	movs	r0, #0
 80006a2:	0a49      	lsrs	r1, r1, #9
 80006a4:	e726      	b.n	80004f4 <__aeabi_fmul+0xa4>
 80006a6:	2302      	movs	r3, #2
 80006a8:	2e0f      	cmp	r6, #15
 80006aa:	d10c      	bne.n	80006c6 <__aeabi_fmul+0x276>
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	464b      	mov	r3, r9
 80006b0:	03c9      	lsls	r1, r1, #15
 80006b2:	420b      	tst	r3, r1
 80006b4:	d00d      	beq.n	80006d2 <__aeabi_fmul+0x282>
 80006b6:	420c      	tst	r4, r1
 80006b8:	d10b      	bne.n	80006d2 <__aeabi_fmul+0x282>
 80006ba:	4321      	orrs	r1, r4
 80006bc:	0249      	lsls	r1, r1, #9
 80006be:	003a      	movs	r2, r7
 80006c0:	20ff      	movs	r0, #255	; 0xff
 80006c2:	0a49      	lsrs	r1, r1, #9
 80006c4:	e716      	b.n	80004f4 <__aeabi_fmul+0xa4>
 80006c6:	2e0b      	cmp	r6, #11
 80006c8:	d000      	beq.n	80006cc <__aeabi_fmul+0x27c>
 80006ca:	e6f7      	b.n	80004bc <__aeabi_fmul+0x6c>
 80006cc:	46a1      	mov	r9, r4
 80006ce:	469a      	mov	sl, r3
 80006d0:	e736      	b.n	8000540 <__aeabi_fmul+0xf0>
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	464b      	mov	r3, r9
 80006d6:	03c9      	lsls	r1, r1, #15
 80006d8:	4319      	orrs	r1, r3
 80006da:	0249      	lsls	r1, r1, #9
 80006dc:	4642      	mov	r2, r8
 80006de:	20ff      	movs	r0, #255	; 0xff
 80006e0:	0a49      	lsrs	r1, r1, #9
 80006e2:	e707      	b.n	80004f4 <__aeabi_fmul+0xa4>
 80006e4:	2303      	movs	r3, #3
 80006e6:	e7df      	b.n	80006a8 <__aeabi_fmul+0x258>
 80006e8:	f7ffffff 	.word	0xf7ffffff

080006ec <__aeabi_i2f>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d013      	beq.n	800071a <__aeabi_i2f+0x2e>
 80006f2:	17c3      	asrs	r3, r0, #31
 80006f4:	18c5      	adds	r5, r0, r3
 80006f6:	405d      	eors	r5, r3
 80006f8:	0fc4      	lsrs	r4, r0, #31
 80006fa:	0028      	movs	r0, r5
 80006fc:	f000 f890 	bl	8000820 <__clzsi2>
 8000700:	239e      	movs	r3, #158	; 0x9e
 8000702:	0001      	movs	r1, r0
 8000704:	1a1b      	subs	r3, r3, r0
 8000706:	2b96      	cmp	r3, #150	; 0x96
 8000708:	dc0f      	bgt.n	800072a <__aeabi_i2f+0x3e>
 800070a:	2808      	cmp	r0, #8
 800070c:	d031      	beq.n	8000772 <__aeabi_i2f+0x86>
 800070e:	3908      	subs	r1, #8
 8000710:	408d      	lsls	r5, r1
 8000712:	026d      	lsls	r5, r5, #9
 8000714:	0a6d      	lsrs	r5, r5, #9
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	e002      	b.n	8000720 <__aeabi_i2f+0x34>
 800071a:	2400      	movs	r4, #0
 800071c:	2000      	movs	r0, #0
 800071e:	2500      	movs	r5, #0
 8000720:	05c0      	lsls	r0, r0, #23
 8000722:	4328      	orrs	r0, r5
 8000724:	07e4      	lsls	r4, r4, #31
 8000726:	4320      	orrs	r0, r4
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	2b99      	cmp	r3, #153	; 0x99
 800072c:	dd0c      	ble.n	8000748 <__aeabi_i2f+0x5c>
 800072e:	2205      	movs	r2, #5
 8000730:	1a12      	subs	r2, r2, r0
 8000732:	0028      	movs	r0, r5
 8000734:	40d0      	lsrs	r0, r2
 8000736:	0002      	movs	r2, r0
 8000738:	0008      	movs	r0, r1
 800073a:	301b      	adds	r0, #27
 800073c:	4085      	lsls	r5, r0
 800073e:	0028      	movs	r0, r5
 8000740:	1e45      	subs	r5, r0, #1
 8000742:	41a8      	sbcs	r0, r5
 8000744:	4302      	orrs	r2, r0
 8000746:	0015      	movs	r5, r2
 8000748:	2905      	cmp	r1, #5
 800074a:	dc16      	bgt.n	800077a <__aeabi_i2f+0x8e>
 800074c:	002a      	movs	r2, r5
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <__aeabi_i2f+0xa0>)
 8000750:	4002      	ands	r2, r0
 8000752:	076e      	lsls	r6, r5, #29
 8000754:	d009      	beq.n	800076a <__aeabi_i2f+0x7e>
 8000756:	260f      	movs	r6, #15
 8000758:	4035      	ands	r5, r6
 800075a:	2d04      	cmp	r5, #4
 800075c:	d005      	beq.n	800076a <__aeabi_i2f+0x7e>
 800075e:	3204      	adds	r2, #4
 8000760:	0155      	lsls	r5, r2, #5
 8000762:	d502      	bpl.n	800076a <__aeabi_i2f+0x7e>
 8000764:	239f      	movs	r3, #159	; 0x9f
 8000766:	4002      	ands	r2, r0
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	0192      	lsls	r2, r2, #6
 800076c:	0a55      	lsrs	r5, r2, #9
 800076e:	b2d8      	uxtb	r0, r3
 8000770:	e7d6      	b.n	8000720 <__aeabi_i2f+0x34>
 8000772:	026d      	lsls	r5, r5, #9
 8000774:	2096      	movs	r0, #150	; 0x96
 8000776:	0a6d      	lsrs	r5, r5, #9
 8000778:	e7d2      	b.n	8000720 <__aeabi_i2f+0x34>
 800077a:	1f4a      	subs	r2, r1, #5
 800077c:	4095      	lsls	r5, r2
 800077e:	002a      	movs	r2, r5
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <__aeabi_i2f+0xa0>)
 8000782:	4002      	ands	r2, r0
 8000784:	076e      	lsls	r6, r5, #29
 8000786:	d0f0      	beq.n	800076a <__aeabi_i2f+0x7e>
 8000788:	e7e5      	b.n	8000756 <__aeabi_i2f+0x6a>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	fbffffff 	.word	0xfbffffff

08000790 <__aeabi_ui2f>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	1e04      	subs	r4, r0, #0
 8000794:	d00e      	beq.n	80007b4 <__aeabi_ui2f+0x24>
 8000796:	f000 f843 	bl	8000820 <__clzsi2>
 800079a:	239e      	movs	r3, #158	; 0x9e
 800079c:	0001      	movs	r1, r0
 800079e:	1a1b      	subs	r3, r3, r0
 80007a0:	2b96      	cmp	r3, #150	; 0x96
 80007a2:	dc0c      	bgt.n	80007be <__aeabi_ui2f+0x2e>
 80007a4:	2808      	cmp	r0, #8
 80007a6:	d02c      	beq.n	8000802 <__aeabi_ui2f+0x72>
 80007a8:	3908      	subs	r1, #8
 80007aa:	408c      	lsls	r4, r1
 80007ac:	0264      	lsls	r4, r4, #9
 80007ae:	0a64      	lsrs	r4, r4, #9
 80007b0:	b2d8      	uxtb	r0, r3
 80007b2:	e001      	b.n	80007b8 <__aeabi_ui2f+0x28>
 80007b4:	2000      	movs	r0, #0
 80007b6:	2400      	movs	r4, #0
 80007b8:	05c0      	lsls	r0, r0, #23
 80007ba:	4320      	orrs	r0, r4
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	2b99      	cmp	r3, #153	; 0x99
 80007c0:	dd0a      	ble.n	80007d8 <__aeabi_ui2f+0x48>
 80007c2:	0002      	movs	r2, r0
 80007c4:	0020      	movs	r0, r4
 80007c6:	321b      	adds	r2, #27
 80007c8:	4090      	lsls	r0, r2
 80007ca:	0002      	movs	r2, r0
 80007cc:	1e50      	subs	r0, r2, #1
 80007ce:	4182      	sbcs	r2, r0
 80007d0:	2005      	movs	r0, #5
 80007d2:	1a40      	subs	r0, r0, r1
 80007d4:	40c4      	lsrs	r4, r0
 80007d6:	4314      	orrs	r4, r2
 80007d8:	2905      	cmp	r1, #5
 80007da:	dc16      	bgt.n	800080a <__aeabi_ui2f+0x7a>
 80007dc:	0022      	movs	r2, r4
 80007de:	480f      	ldr	r0, [pc, #60]	; (800081c <__aeabi_ui2f+0x8c>)
 80007e0:	4002      	ands	r2, r0
 80007e2:	0765      	lsls	r5, r4, #29
 80007e4:	d009      	beq.n	80007fa <__aeabi_ui2f+0x6a>
 80007e6:	250f      	movs	r5, #15
 80007e8:	402c      	ands	r4, r5
 80007ea:	2c04      	cmp	r4, #4
 80007ec:	d005      	beq.n	80007fa <__aeabi_ui2f+0x6a>
 80007ee:	3204      	adds	r2, #4
 80007f0:	0154      	lsls	r4, r2, #5
 80007f2:	d502      	bpl.n	80007fa <__aeabi_ui2f+0x6a>
 80007f4:	239f      	movs	r3, #159	; 0x9f
 80007f6:	4002      	ands	r2, r0
 80007f8:	1a5b      	subs	r3, r3, r1
 80007fa:	0192      	lsls	r2, r2, #6
 80007fc:	0a54      	lsrs	r4, r2, #9
 80007fe:	b2d8      	uxtb	r0, r3
 8000800:	e7da      	b.n	80007b8 <__aeabi_ui2f+0x28>
 8000802:	0264      	lsls	r4, r4, #9
 8000804:	2096      	movs	r0, #150	; 0x96
 8000806:	0a64      	lsrs	r4, r4, #9
 8000808:	e7d6      	b.n	80007b8 <__aeabi_ui2f+0x28>
 800080a:	1f4a      	subs	r2, r1, #5
 800080c:	4094      	lsls	r4, r2
 800080e:	0022      	movs	r2, r4
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <__aeabi_ui2f+0x8c>)
 8000812:	4002      	ands	r2, r0
 8000814:	0765      	lsls	r5, r4, #29
 8000816:	d0f0      	beq.n	80007fa <__aeabi_ui2f+0x6a>
 8000818:	e7e5      	b.n	80007e6 <__aeabi_ui2f+0x56>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	fbffffff 	.word	0xfbffffff

08000820 <__clzsi2>:
 8000820:	211c      	movs	r1, #28
 8000822:	2301      	movs	r3, #1
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	4298      	cmp	r0, r3
 8000828:	d301      	bcc.n	800082e <__clzsi2+0xe>
 800082a:	0c00      	lsrs	r0, r0, #16
 800082c:	3910      	subs	r1, #16
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	4298      	cmp	r0, r3
 8000832:	d301      	bcc.n	8000838 <__clzsi2+0x18>
 8000834:	0a00      	lsrs	r0, r0, #8
 8000836:	3908      	subs	r1, #8
 8000838:	091b      	lsrs	r3, r3, #4
 800083a:	4298      	cmp	r0, r3
 800083c:	d301      	bcc.n	8000842 <__clzsi2+0x22>
 800083e:	0900      	lsrs	r0, r0, #4
 8000840:	3904      	subs	r1, #4
 8000842:	a202      	add	r2, pc, #8	; (adr r2, 800084c <__clzsi2+0x2c>)
 8000844:	5c10      	ldrb	r0, [r2, r0]
 8000846:	1840      	adds	r0, r0, r1
 8000848:	4770      	bx	lr
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	02020304 	.word	0x02020304
 8000850:	01010101 	.word	0x01010101
	...

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f002 ffc6 	bl	80037f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	; (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088a:	f005 ff15 	bl	80066b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f000 fba7 	bl	8000fe0 <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 80008a0:	08007554 	.word	0x08007554
  ldr r2, =_sbss
 80008a4:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 80008a8:	20000854 	.word	0x20000854

080008ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_IRQHandler>
	...

080008b0 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80008b0:	b510      	push	{r4, lr}
 80008b2:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 80008b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008b6:	6940      	ldr	r0, [r0, #20]
 80008b8:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80008ba:	2200      	movs	r2, #0
 80008bc:	234c      	movs	r3, #76	; 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008be:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 80008c0:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80008c2:	3b04      	subs	r3, #4
 80008c4:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008c6:	6960      	ldr	r0, [r4, #20]
 80008c8:	2204      	movs	r2, #4
 80008ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008cc:	311c      	adds	r1, #28
 80008ce:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)

080008d4 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80008d4:	b570      	push	{r4, r5, r6, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80008d6:	780a      	ldrb	r2, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 80008d8:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80008da:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->version) << 4U)
 80008dc:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008de:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80008e0:	784a      	ldrb	r2, [r1, #1]
{
 80008e2:	0004      	movs	r4, r0
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80008e4:	0212      	lsls	r2, r2, #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008e6:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80008e8:	788a      	ldrb	r2, [r1, #2]
  header &= 0x0fffffffU;
 80008ea:	2005      	movs	r0, #5
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80008ec:	0392      	lsls	r2, r2, #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008ee:	4313      	orrs	r3, r2
 80008f0:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008f2:	21ff      	movs	r1, #255	; 0xff
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80008f4:	0552      	lsls	r2, r2, #21
 80008f6:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008f8:	4d16      	ldr	r5, [pc, #88]	; (8000954 <ASPEP_sendBeacon+0x80>)
 80008fa:	4019      	ands	r1, r3
 80008fc:	4301      	orrs	r1, r0
  header &= 0x0fffffffU;
 80008fe:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000900:	5c69      	ldrb	r1, [r5, r1]
 8000902:	0b16      	lsrs	r6, r2, #12
 8000904:	4071      	eors	r1, r6
 8000906:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000908:	5c69      	ldrb	r1, [r5, r1]
 800090a:	0d16      	lsrs	r6, r2, #20
 800090c:	4071      	eors	r1, r6
 800090e:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000910:	5c69      	ldrb	r1, [r5, r1]
 8000912:	0f12      	lsrs	r2, r2, #28
 8000914:	404a      	eors	r2, r1
 8000916:	4910      	ldr	r1, [pc, #64]	; (8000958 <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 8000918:	5c8a      	ldrb	r2, [r1, r2]
 800091a:	0712      	lsls	r2, r2, #28
 800091c:	4313      	orrs	r3, r2
 800091e:	4303      	orrs	r3, r0
 8000920:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000922:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000924:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 800092a:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 800092c:	2324      	movs	r3, #36	; 0x24
 800092e:	5ce2      	ldrb	r2, [r4, r3]
 8000930:	2a00      	cmp	r2, #0
 8000932:	d101      	bne.n	8000938 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000934:	3202      	adds	r2, #2
 8000936:	54e2      	strb	r2, [r4, r3]
}
 8000938:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800093a:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 800093c:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800093e:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000940:	3324      	adds	r3, #36	; 0x24
 8000942:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000944:	6321      	str	r1, [r4, #48]	; 0x30
 8000946:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000948:	6960      	ldr	r0, [r4, #20]
 800094a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800094c:	3201      	adds	r2, #1
 800094e:	4798      	blx	r3
 8000950:	e7f2      	b.n	8000938 <ASPEP_sendBeacon+0x64>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	0800673c 	.word	0x0800673c
 8000958:	0800672c 	.word	0x0800672c

0800095c <ASPEP_sendPing>:
{
 800095c:	000b      	movs	r3, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800095e:	2148      	movs	r1, #72	; 0x48
{
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	0004      	movs	r4, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000964:	5c41      	ldrb	r1, [r0, r1]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000966:	2001      	movs	r0, #1
 8000968:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 800096a:	0119      	lsls	r1, r3, #4
                   | (uint32_t)((uint32_t)cBit << 5U)
 800096c:	015b      	lsls	r3, r3, #5
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800096e:	4319      	orrs	r1, r3
 8000970:	0313      	lsls	r3, r2, #12
 8000972:	430b      	orrs	r3, r1
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000974:	0182      	lsls	r2, r0, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000976:	4313      	orrs	r3, r2
    uint8_t ipID = pHandle->liid & 0xFU;
 8000978:	224b      	movs	r2, #75	; 0x4b
 800097a:	5ca1      	ldrb	r1, [r4, r2]
                   | (uint32_t)((uint32_t)ipID << 8U)
 800097c:	3a3c      	subs	r2, #60	; 0x3c
                   | (uint32_t)((uint32_t)Nbit << 7U)
 800097e:	01c0      	lsls	r0, r0, #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000980:	400a      	ands	r2, r1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000982:	4303      	orrs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000984:	0212      	lsls	r2, r2, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000986:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000988:	22ff      	movs	r2, #255	; 0xff
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800098a:	2506      	movs	r5, #6
 800098c:	0018      	movs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800098e:	4916      	ldr	r1, [pc, #88]	; (80009e8 <ASPEP_sendPing+0x8c>)
 8000990:	401a      	ands	r2, r3
 8000992:	432a      	orrs	r2, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000994:	5c8a      	ldrb	r2, [r1, r2]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000996:	4328      	orrs	r0, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000998:	0a1d      	lsrs	r5, r3, #8
 800099a:	406a      	eors	r2, r5
 800099c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800099e:	5c8a      	ldrb	r2, [r1, r2]
 80009a0:	0c1d      	lsrs	r5, r3, #16
 80009a2:	406a      	eors	r2, r5
 80009a4:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80009a6:	5c8a      	ldrb	r2, [r1, r2]
 80009a8:	0e1b      	lsrs	r3, r3, #24
 80009aa:	4053      	eors	r3, r2
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	071b      	lsls	r3, r3, #28
 80009b2:	4303      	orrs	r3, r0
 80009b4:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80009b6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80009b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 80009be:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80009c0:	2324      	movs	r3, #36	; 0x24
 80009c2:	5ce2      	ldrb	r2, [r4, r3]
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d101      	bne.n	80009cc <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 80009c8:	3202      	adds	r2, #2
 80009ca:	54e2      	strb	r2, [r4, r3]
}
 80009cc:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009ce:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 80009d0:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009d2:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 80009d4:	3324      	adds	r3, #36	; 0x24
 80009d6:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009d8:	6321      	str	r1, [r4, #48]	; 0x30
 80009da:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009dc:	6960      	ldr	r0, [r4, #20]
 80009de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009e0:	3201      	adds	r2, #1
 80009e2:	4798      	blx	r3
 80009e4:	e7f2      	b.n	80009cc <ASPEP_sendPing+0x70>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	0800673c 	.word	0x0800673c
 80009ec:	0800672c 	.word	0x0800672c

080009f0 <ASPEP_getBuffer>:
{
 80009f0:	0003      	movs	r3, r0
 80009f2:	b510      	push	{r4, lr}
     result = false; /* Async packets are not supported */
 80009f4:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 80009f6:	2a0a      	cmp	r2, #10
 80009f8:	d000      	beq.n	80009fc <ASPEP_getBuffer+0xc>
}
 80009fa:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80009fc:	3224      	adds	r2, #36	; 0x24
 80009fe:	5c9c      	ldrb	r4, [r3, r2]
 8000a00:	2c01      	cmp	r4, #1
 8000a02:	d8fa      	bhi.n	80009fa <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000a04:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a06:	3004      	adds	r0, #4
 8000a08:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000a0a:	2101      	movs	r1, #1
  bool result = true;
 8000a0c:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 8000a0e:	5499      	strb	r1, [r3, r2]
 8000a10:	e7f3      	b.n	80009fa <ASPEP_getBuffer+0xa>
 8000a12:	46c0      	nop			; (mov r8, r8)

08000a14 <ASPEP_sendPacket>:
{
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000a18:	204c      	movs	r0, #76	; 0x4c
{
 8000a1a:	46c6      	mov	lr, r8
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000a1c:	5c25      	ldrb	r5, [r4, r0]
{
 8000a1e:	b500      	push	{lr}
      result = ASPEP_NOT_CONNECTED;
 8000a20:	384a      	subs	r0, #74	; 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000a22:	2d02      	cmp	r5, #2
 8000a24:	d002      	beq.n	8000a2c <ASPEP_sendPacket+0x18>
}
 8000a26:	bc80      	pop	{r7}
 8000a28:	46b8      	mov	r8, r7
 8000a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000a2c:	0110      	lsls	r0, r2, #4
 8000a2e:	4318      	orrs	r0, r3
      *header = tmpHeader;
 8000a30:	1f0e      	subs	r6, r1, #4
 8000a32:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000a34:	2054      	movs	r0, #84	; 0x54
 8000a36:	5c20      	ldrb	r0, [r4, r0]
 8000a38:	2801      	cmp	r0, #1
 8000a3a:	d106      	bne.n	8000a4a <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000a3c:	30c9      	adds	r0, #201	; 0xc9
 8000a3e:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000a40:	1889      	adds	r1, r1, r2
 8000a42:	3034      	adds	r0, #52	; 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000a44:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000a46:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000a48:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000a4a:	2b0a      	cmp	r3, #10
 8000a4c:	d105      	bne.n	8000a5a <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 8000a4e:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 8000a50:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d0e7      	beq.n	8000a26 <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000a56:	2100      	movs	r1, #0
 8000a58:	7421      	strb	r1, [r4, #16]
  uint32_t header = *headerPtr;
 8000a5a:	6837      	ldr	r7, [r6, #0]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a5c:	3204      	adds	r2, #4
  header &= 0x0fffffffU;
 8000a5e:	0138      	lsls	r0, r7, #4
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a60:	b292      	uxth	r2, r2
 8000a62:	4694      	mov	ip, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a64:	21ff      	movs	r1, #255	; 0xff
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a66:	0b02      	lsrs	r2, r0, #12
 8000a68:	4690      	mov	r8, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a6a:	4d24      	ldr	r5, [pc, #144]	; (8000afc <ASPEP_sendPacket+0xe8>)
 8000a6c:	4039      	ands	r1, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a6e:	002a      	movs	r2, r5
 8000a70:	5c69      	ldrb	r1, [r5, r1]
 8000a72:	4645      	mov	r5, r8
 8000a74:	4069      	eors	r1, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a76:	0d05      	lsrs	r5, r0, #20
 8000a78:	46a8      	mov	r8, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a7a:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a7c:	5c55      	ldrb	r5, [r2, r1]
 8000a7e:	4641      	mov	r1, r8
 8000a80:	404d      	eors	r5, r1
 8000a82:	b2ed      	uxtb	r5, r5
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000a84:	5d51      	ldrb	r1, [r2, r5]
 8000a86:	0f00      	lsrs	r0, r0, #28
 8000a88:	4041      	eors	r1, r0
 8000a8a:	481d      	ldr	r0, [pc, #116]	; (8000b00 <ASPEP_sendPacket+0xec>)
  *headerPtr |= (uint32_t)crc << 28;
 8000a8c:	5c40      	ldrb	r0, [r0, r1]
 8000a8e:	0700      	lsls	r0, r0, #28
 8000a90:	4338      	orrs	r0, r7
 8000a92:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000a96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	d017      	beq.n	8000acc <ASPEP_sendPacket+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a9c:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 8000a9e:	2b0a      	cmp	r3, #10
 8000aa0:	d009      	beq.n	8000ab6 <ASPEP_sendPacket+0xa2>
  uint8_t result = ASPEP_OK;
 8000aa2:	2000      	movs	r0, #0
      else if(ASPEP_CTRL == dataType)
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1be      	bne.n	8000a26 <ASPEP_sendPacket+0x12>
        if (pHandle->ctrlBuffer.state != available)
 8000aa8:	3324      	adds	r3, #36	; 0x24
 8000aaa:	5ce0      	ldrb	r0, [r4, r3]
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d123      	bne.n	8000af8 <ASPEP_sendPacket+0xe4>
          pHandle->ctrlBuffer.state = pending;
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	54e2      	strb	r2, [r4, r3]
 8000ab4:	e7b7      	b.n	8000a26 <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 8000ab6:	3324      	adds	r3, #36	; 0x24
 8000ab8:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 8000aba:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 8000abc:	2901      	cmp	r1, #1
 8000abe:	d1b2      	bne.n	8000a26 <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 8000ac0:	3101      	adds	r1, #1
 8000ac2:	54e1      	strb	r1, [r4, r3]
          pHandle->syncBuffer.length = bufferLength;
 8000ac4:	4663      	mov	r3, ip
  uint8_t result = ASPEP_OK;
 8000ac6:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 8000ac8:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8000aca:	e7ac      	b.n	8000a26 <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 8000acc:	2b0a      	cmp	r3, #10
 8000ace:	d00d      	beq.n	8000aec <ASPEP_sendPacket+0xd8>
        pHandle->ctrlBuffer.state = readLock;
 8000ad0:	2324      	movs	r3, #36	; 0x24
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000ad6:	0023      	movs	r3, r4
 8000ad8:	3320      	adds	r3, #32
 8000ada:	6323      	str	r3, [r4, #48]	; 0x30
 8000adc:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000ade:	4662      	mov	r2, ip
 8000ae0:	0031      	movs	r1, r6
 8000ae2:	6960      	ldr	r0, [r4, #20]
 8000ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae6:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e79c      	b.n	8000a26 <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 8000aec:	3324      	adds	r3, #36	; 0x24
 8000aee:	3103      	adds	r1, #3
 8000af0:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000af2:	0023      	movs	r3, r4
 8000af4:	3328      	adds	r3, #40	; 0x28
 8000af6:	e7f0      	b.n	8000ada <ASPEP_sendPacket+0xc6>
          result = ASPEP_BUFFER_ERROR;
 8000af8:	2003      	movs	r0, #3
 8000afa:	e794      	b.n	8000a26 <ASPEP_sendPacket+0x12>
 8000afc:	0800673c 	.word	0x0800673c
 8000b00:	0800672c 	.word	0x0800672c

08000b04 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000b04:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000b06:	2524      	movs	r5, #36	; 0x24
 8000b08:	5d43      	ldrb	r3, [r0, r5]
{
 8000b0a:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d012      	beq.n	8000b36 <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000b10:	2100      	movs	r1, #0
 8000b12:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b14:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000b16:	222e      	movs	r2, #46	; 0x2e
 8000b18:	5c82      	ldrb	r2, [r0, r2]
 8000b1a:	2a02      	cmp	r2, #2
 8000b1c:	d011      	beq.n	8000b42 <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d11b      	bne.n	8000b5a <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000b22:	0001      	movs	r1, r0
 8000b24:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000b28:	6301      	str	r1, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	6940      	ldr	r0, [r0, #20]
 8000b2e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000b30:	2303      	movs	r3, #3
 8000b32:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 8000b36:	2300      	movs	r3, #0
 8000b38:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 8000b3a:	332e      	adds	r3, #46	; 0x2e
 8000b3c:	5cc3      	ldrb	r3, [r0, r3]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d10b      	bne.n	8000b5a <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000b42:	0023      	movs	r3, r4
 8000b44:	3328      	adds	r3, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000b46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000b48:	6323      	str	r3, [r4, #48]	; 0x30
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000b4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b4e:	6960      	ldr	r0, [r4, #20]
 8000b50:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000b52:	232e      	movs	r3, #46	; 0x2e
 8000b54:	2203      	movs	r2, #3
 8000b56:	54e2      	strb	r2, [r4, r3]
 8000b58:	e7ec      	b.n	8000b34 <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000b5e:	e7e9      	b.n	8000b34 <ASPEP_HWDataTransmittedIT+0x30>

08000b60 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	46de      	mov	lr, fp
 8000b64:	4657      	mov	r7, sl
 8000b66:	464e      	mov	r6, r9
 8000b68:	4645      	mov	r5, r8
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
 8000b6a:	2200      	movs	r2, #0
{
 8000b6c:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000b6e:	69c3      	ldr	r3, [r0, #28]
    *packetLength = 0;
 8000b70:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000b72:	3249      	adds	r2, #73	; 0x49
{
 8000b74:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000b76:	5c80      	ldrb	r0, [r0, r2]
{
 8000b78:	b085      	sub	sp, #20
    if (pHandle->NewPacketAvailable)
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d018      	beq.n	8000bb0 <ASPEP_RXframeProcess+0x50>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b7e:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000b80:	264c      	movs	r6, #76	; 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b82:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 8000b84:	5da2      	ldrb	r2, [r4, r6]
 8000b86:	2a01      	cmp	r2, #1
 8000b88:	d05e      	beq.n	8000c48 <ASPEP_RXframeProcess+0xe8>
 8000b8a:	2a02      	cmp	r2, #2
 8000b8c:	d047      	beq.n	8000c1e <ASPEP_RXframeProcess+0xbe>
 8000b8e:	2500      	movs	r5, #0
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d038      	beq.n	8000c06 <ASPEP_RXframeProcess+0xa6>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b94:	0021      	movs	r1, r4
 8000b96:	2204      	movs	r2, #4
 8000b98:	6960      	ldr	r0, [r4, #20]
 8000b9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b9c:	311c      	adds	r1, #28
 8000b9e:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000ba0:	0028      	movs	r0, r5
 8000ba2:	b005      	add	sp, #20
 8000ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ba6:	46bb      	mov	fp, r7
 8000ba8:	46b2      	mov	sl, r6
 8000baa:	46a9      	mov	r9, r5
 8000bac:	46a0      	mov	r8, r4
 8000bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000bb0:	234a      	movs	r3, #74	; 0x4a
 8000bb2:	5ce3      	ldrb	r3, [r4, r3]
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000bb4:	2500      	movs	r5, #0
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f2      	beq.n	8000ba0 <ASPEP_RXframeProcess+0x40>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bba:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	021a      	lsls	r2, r3, #8
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bc4:	0a1a      	lsrs	r2, r3, #8
 8000bc6:	49b6      	ldr	r1, [pc, #728]	; (8000ea0 <ASPEP_RXframeProcess+0x340>)
 8000bc8:	406a      	eors	r2, r5
 8000bca:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bcc:	5c8a      	ldrb	r2, [r1, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000bce:	4318      	orrs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bd0:	0c1b      	lsrs	r3, r3, #16
 8000bd2:	4053      	eors	r3, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000bd4:	5ccb      	ldrb	r3, [r1, r3]
 8000bd6:	4ab3      	ldr	r2, [pc, #716]	; (8000ea4 <ASPEP_RXframeProcess+0x344>)
  *headerPtr |= (uint32_t)crc << 28;
 8000bd8:	5cd3      	ldrb	r3, [r2, r3]
 8000bda:	071b      	lsls	r3, r3, #28
 8000bdc:	4303      	orrs	r3, r0
 8000bde:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000be2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d03e      	beq.n	8000c66 <ASPEP_RXframeProcess+0x106>
  __ASM volatile ("cpsie i" : : : "memory");
 8000be8:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000bea:	2324      	movs	r3, #36	; 0x24
 8000bec:	5ce2      	ldrb	r2, [r4, r3]
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d101      	bne.n	8000bf6 <ASPEP_RXframeProcess+0x96>
          pHandle->ctrlBuffer.state = pending;
 8000bf2:	3202      	adds	r2, #2
 8000bf4:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 8000bf6:	234a      	movs	r3, #74	; 0x4a
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000bfc:	6960      	ldr	r0, [r4, #20]
 8000bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c00:	4798      	blx	r3
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000c02:	2500      	movs	r5, #0
 8000c04:	e7cc      	b.n	8000ba0 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8000c06:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000c08:	2a05      	cmp	r2, #5
 8000c0a:	d038      	beq.n	8000c7e <ASPEP_RXframeProcess+0x11e>
          else if (PING == pHandle->rxPacketType)
 8000c0c:	2a06      	cmp	r2, #6
 8000c0e:	d1c1      	bne.n	8000b94 <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000c10:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000c12:	2100      	movs	r1, #0
 8000c14:	0020      	movs	r0, r4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	f7ff fea0 	bl	800095c <ASPEP_sendPing>
 8000c1c:	e7ba      	b.n	8000b94 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000c1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000c20:	2a05      	cmp	r2, #5
 8000c22:	d100      	bne.n	8000c26 <ASPEP_RXframeProcess+0xc6>
 8000c24:	e0ac      	b.n	8000d80 <ASPEP_RXframeProcess+0x220>
          else if (PING == pHandle->rxPacketType)
 8000c26:	2a06      	cmp	r2, #6
 8000c28:	d100      	bne.n	8000c2c <ASPEP_RXframeProcess+0xcc>
 8000c2a:	e0f1      	b.n	8000e10 <ASPEP_RXframeProcess+0x2b0>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000c2c:	2500      	movs	r5, #0
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000c2e:	2a09      	cmp	r2, #9
 8000c30:	d1b0      	bne.n	8000b94 <ASPEP_RXframeProcess+0x34>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000c32:	323f      	adds	r2, #63	; 0x3f
 8000c34:	5ca3      	ldrb	r3, [r4, r2]
 8000c36:	3301      	adds	r3, #1
 8000c38:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000c3e:	3343      	adds	r3, #67	; 0x43
 8000c40:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 8000c42:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLength;
 8000c44:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 8000c46:	e7a5      	b.n	8000b94 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000c48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000c4a:	2a05      	cmp	r2, #5
 8000c4c:	d05c      	beq.n	8000d08 <ASPEP_RXframeProcess+0x1a8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000c4e:	2500      	movs	r5, #0
          else if (PING == pHandle->rxPacketType)
 8000c50:	2a06      	cmp	r2, #6
 8000c52:	d19f      	bne.n	8000b94 <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000c54:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	2101      	movs	r1, #1
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f7ff fe7e 	bl	800095c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000c60:	2302      	movs	r3, #2
 8000c62:	55a3      	strb	r3, [r4, r6]
 8000c64:	e796      	b.n	8000b94 <ASPEP_RXframeProcess+0x34>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c66:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000c68:	2203      	movs	r2, #3
 8000c6a:	3324      	adds	r3, #36	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c6c:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c6e:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c70:	6321      	str	r1, [r4, #48]	; 0x30
 8000c72:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c74:	6960      	ldr	r0, [r4, #20]
 8000c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c78:	3201      	adds	r2, #1
 8000c7a:	4798      	blx	r3
 8000c7c:	e7bb      	b.n	8000bf6 <ASPEP_RXframeProcess+0x96>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c7e:	213f      	movs	r1, #63	; 0x3f
 8000c80:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c82:	357f      	adds	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c84:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c86:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c88:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c8a:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c8c:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c8e:	2254      	movs	r2, #84	; 0x54
 8000c90:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c92:	468c      	mov	ip, r1
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c94:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c96:	2255      	movs	r2, #85	; 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c98:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c9a:	5ca1      	ldrb	r1, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c9c:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c9e:	1c0a      	adds	r2, r1, #0
 8000ca0:	4561      	cmp	r1, ip
 8000ca2:	d900      	bls.n	8000ca6 <ASPEP_RXframeProcess+0x146>
 8000ca4:	4662      	mov	r2, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ca6:	2156      	movs	r1, #86	; 0x56
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cac:	5c62      	ldrb	r2, [r4, r1]
 8000cae:	1c01      	adds	r1, r0, #0
 8000cb0:	4691      	mov	r9, r2
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d900      	bls.n	8000cb8 <ASPEP_RXframeProcess+0x158>
 8000cb6:	1c11      	adds	r1, r2, #0
 8000cb8:	b2ca      	uxtb	r2, r1
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000cba:	2157      	movs	r1, #87	; 0x57
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cbc:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000cbe:	5c62      	ldrb	r2, [r4, r1]
 8000cc0:	1c29      	adds	r1, r5, #0
 8000cc2:	4692      	mov	sl, r2
 8000cc4:	4295      	cmp	r5, r2
 8000cc6:	d900      	bls.n	8000cca <ASPEP_RXframeProcess+0x16a>
 8000cc8:	1c11      	adds	r1, r2, #0
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	9203      	str	r2, [sp, #12]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cce:	1c31      	adds	r1, r6, #0
 8000cd0:	4546      	cmp	r6, r8
 8000cd2:	d900      	bls.n	8000cd6 <ASPEP_RXframeProcess+0x176>
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	9a01      	ldr	r2, [sp, #4]
 8000cd8:	0217      	lsls	r7, r2, #8
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	4693      	mov	fp, r2
 8000cde:	9a02      	ldr	r2, [sp, #8]
 8000ce0:	0411      	lsls	r1, r2, #16
 8000ce2:	465a      	mov	r2, fp
 8000ce4:	433a      	orrs	r2, r7
 8000ce6:	4693      	mov	fp, r2
 8000ce8:	9a03      	ldr	r2, [sp, #12]
 8000cea:	0617      	lsls	r7, r2, #24
 8000cec:	465a      	mov	r2, fp
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4339      	orrs	r1, r7
 8000cf2:	6561      	str	r1, [r4, #84]	; 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000cf4:	4546      	cmp	r6, r8
 8000cf6:	d800      	bhi.n	8000cfa <ASPEP_RXframeProcess+0x19a>
 8000cf8:	e091      	b.n	8000e1e <ASPEP_RXframeProcess+0x2be>
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	0020      	movs	r0, r4
 8000cfe:	3154      	adds	r1, #84	; 0x54
 8000d00:	f7ff fde8 	bl	80008d4 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000d04:	2500      	movs	r5, #0
 8000d06:	e745      	b.n	8000b94 <ASPEP_RXframeProcess+0x34>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d08:	213f      	movs	r1, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d0a:	257f      	movs	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d0c:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d0e:	7f26      	ldrb	r6, [r4, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d10:	4011      	ands	r1, r2
 8000d12:	468c      	mov	ip, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d14:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d16:	0b99      	lsrs	r1, r3, #14
 8000d18:	4029      	ands	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d1a:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d1c:	2254      	movs	r2, #84	; 0x54
 8000d1e:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d20:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d22:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d24:	2255      	movs	r2, #85	; 0x55
 8000d26:	5ca2      	ldrb	r2, [r4, r2]
 8000d28:	1c17      	adds	r7, r2, #0
 8000d2a:	4562      	cmp	r2, ip
 8000d2c:	d900      	bls.n	8000d30 <ASPEP_RXframeProcess+0x1d0>
 8000d2e:	4667      	mov	r7, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d30:	2256      	movs	r2, #86	; 0x56
 8000d32:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d34:	b2ff      	uxtb	r7, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d36:	4691      	mov	r9, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d38:	2257      	movs	r2, #87	; 0x57
 8000d3a:	5ca2      	ldrb	r2, [r4, r2]
 8000d3c:	4692      	mov	sl, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d3e:	1c32      	adds	r2, r6, #0
 8000d40:	4546      	cmp	r6, r8
 8000d42:	d900      	bls.n	8000d46 <ASPEP_RXframeProcess+0x1e6>
 8000d44:	4642      	mov	r2, r8
 8000d46:	0238      	lsls	r0, r7, #8
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d4c:	1c08      	adds	r0, r1, #0
 8000d4e:	4549      	cmp	r1, r9
 8000d50:	d900      	bls.n	8000d54 <ASPEP_RXframeProcess+0x1f4>
 8000d52:	4648      	mov	r0, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d54:	b2c0      	uxtb	r0, r0
 8000d56:	0400      	lsls	r0, r0, #16
 8000d58:	9001      	str	r0, [sp, #4]
 8000d5a:	4853      	ldr	r0, [pc, #332]	; (8000ea8 <ASPEP_RXframeProcess+0x348>)
 8000d5c:	4002      	ands	r2, r0
 8000d5e:	9801      	ldr	r0, [sp, #4]
 8000d60:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d62:	1c28      	adds	r0, r5, #0
 8000d64:	4555      	cmp	r5, sl
 8000d66:	d900      	bls.n	8000d6a <ASPEP_RXframeProcess+0x20a>
 8000d68:	4650      	mov	r0, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d6a:	0212      	lsls	r2, r2, #8
 8000d6c:	0600      	lsls	r0, r0, #24
 8000d6e:	0a12      	lsrs	r2, r2, #8
 8000d70:	4302      	orrs	r2, r0
 8000d72:	6562      	str	r2, [r4, #84]	; 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000d74:	4546      	cmp	r6, r8
 8000d76:	d974      	bls.n	8000e62 <ASPEP_RXframeProcess+0x302>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d78:	234c      	movs	r3, #76	; 0x4c
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	54e2      	strb	r2, [r4, r3]
 8000d7e:	e7bc      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d80:	213f      	movs	r1, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d82:	257f      	movs	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d84:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d86:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d88:	4011      	ands	r1, r2
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d8a:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d8c:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d8e:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d90:	2254      	movs	r2, #84	; 0x54
 8000d92:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d94:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d96:	4694      	mov	ip, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d98:	2255      	movs	r2, #85	; 0x55
 8000d9a:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d9c:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d9e:	1c17      	adds	r7, r2, #0
 8000da0:	428a      	cmp	r2, r1
 8000da2:	d900      	bls.n	8000da6 <ASPEP_RXframeProcess+0x246>
 8000da4:	1c0f      	adds	r7, r1, #0
 8000da6:	b2fa      	uxtb	r2, r7
 8000da8:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000daa:	2256      	movs	r2, #86	; 0x56
 8000dac:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dae:	46b3      	mov	fp, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000db0:	4690      	mov	r8, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000db2:	2257      	movs	r2, #87	; 0x57
 8000db4:	5ca2      	ldrb	r2, [r4, r2]
 8000db6:	4691      	mov	r9, r2
 8000db8:	2254      	movs	r2, #84	; 0x54
 8000dba:	4692      	mov	sl, r2
 8000dbc:	44a2      	add	sl, r4
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dbe:	4566      	cmp	r6, ip
 8000dc0:	d900      	bls.n	8000dc4 <ASPEP_RXframeProcess+0x264>
 8000dc2:	46e3      	mov	fp, ip
 8000dc4:	465f      	mov	r7, fp
 8000dc6:	9a01      	ldr	r2, [sp, #4]
 8000dc8:	b2ff      	uxtb	r7, r7
 8000dca:	0212      	lsls	r2, r2, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000dcc:	4683      	mov	fp, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dce:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000dd0:	4540      	cmp	r0, r8
 8000dd2:	d900      	bls.n	8000dd6 <ASPEP_RXframeProcess+0x276>
 8000dd4:	46c3      	mov	fp, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dd6:	465f      	mov	r7, fp
 8000dd8:	b2ff      	uxtb	r7, r7
 8000dda:	043f      	lsls	r7, r7, #16
 8000ddc:	46bb      	mov	fp, r7
 8000dde:	4f32      	ldr	r7, [pc, #200]	; (8000ea8 <ASPEP_RXframeProcess+0x348>)
 8000de0:	403a      	ands	r2, r7
 8000de2:	465f      	mov	r7, fp
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000de4:	46ab      	mov	fp, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000de6:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000de8:	454d      	cmp	r5, r9
 8000dea:	d900      	bls.n	8000dee <ASPEP_RXframeProcess+0x28e>
 8000dec:	46cb      	mov	fp, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000dee:	465f      	mov	r7, fp
 8000df0:	0212      	lsls	r2, r2, #8
 8000df2:	063f      	lsls	r7, r7, #24
 8000df4:	0a12      	lsrs	r2, r2, #8
 8000df6:	433a      	orrs	r2, r7
 8000df8:	6562      	str	r2, [r4, #84]	; 0x54
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000dfa:	2200      	movs	r2, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000dfc:	4566      	cmp	r6, ip
 8000dfe:	d93e      	bls.n	8000e7e <ASPEP_RXframeProcess+0x31e>
 8000e00:	234c      	movs	r3, #76	; 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000e02:	4651      	mov	r1, sl
 8000e04:	0020      	movs	r0, r4
 8000e06:	54e2      	strb	r2, [r4, r3]
 8000e08:	f7ff fd64 	bl	80008d4 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000e0c:	2500      	movs	r5, #0
 8000e0e:	e6c1      	b.n	8000b94 <ASPEP_RXframeProcess+0x34>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000e10:	2101      	movs	r1, #1
 8000e12:	0020      	movs	r0, r4
 8000e14:	7f62      	ldrb	r2, [r4, #29]
 8000e16:	f7ff fda1 	bl	800095c <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	e6ba      	b.n	8000b94 <ASPEP_RXframeProcess+0x34>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000e1e:	9a01      	ldr	r2, [sp, #4]
 8000e20:	4594      	cmp	ip, r2
 8000e22:	d900      	bls.n	8000e26 <ASPEP_RXframeProcess+0x2c6>
 8000e24:	e769      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000e26:	4548      	cmp	r0, r9
 8000e28:	d900      	bls.n	8000e2c <ASPEP_RXframeProcess+0x2cc>
 8000e2a:	e766      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000e2c:	4555      	cmp	r5, sl
 8000e2e:	d900      	bls.n	8000e32 <ASPEP_RXframeProcess+0x2d2>
 8000e30:	e763      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e32:	2158      	movs	r1, #88	; 0x58
 8000e34:	5c61      	ldrb	r1, [r4, r1]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000e36:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e38:	0f5b      	lsrs	r3, r3, #29
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	d000      	beq.n	8000e40 <ASPEP_RXframeProcess+0x2e0>
 8000e3e:	e75c      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e40:	9b02      	ldr	r3, [sp, #8]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e42:	3201      	adds	r2, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	015b      	lsls	r3, r3, #5
 8000e4a:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	019b      	lsls	r3, r3, #6
 8000e50:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000e52:	b2d3      	uxtb	r3, r2
 8000e54:	2246      	movs	r2, #70	; 0x46
 8000e56:	015b      	lsls	r3, r3, #5
 8000e58:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000e5a:	234c      	movs	r3, #76	; 0x4c
 8000e5c:	3a45      	subs	r2, #69	; 0x45
 8000e5e:	54e2      	strb	r2, [r4, r3]
 8000e60:	e74b      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000e62:	45bc      	cmp	ip, r7
 8000e64:	d888      	bhi.n	8000d78 <ASPEP_RXframeProcess+0x218>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000e66:	4549      	cmp	r1, r9
 8000e68:	d886      	bhi.n	8000d78 <ASPEP_RXframeProcess+0x218>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000e6a:	4555      	cmp	r5, sl
 8000e6c:	d884      	bhi.n	8000d78 <ASPEP_RXframeProcess+0x218>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e6e:	2258      	movs	r2, #88	; 0x58
 8000e70:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000e72:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e74:	0f5b      	lsrs	r3, r3, #29
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d000      	beq.n	8000e7c <ASPEP_RXframeProcess+0x31c>
 8000e7a:	e77d      	b.n	8000d78 <ASPEP_RXframeProcess+0x218>
 8000e7c:	e73d      	b.n	8000cfa <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000e7e:	9e01      	ldr	r6, [sp, #4]
 8000e80:	42b1      	cmp	r1, r6
 8000e82:	d8bd      	bhi.n	8000e00 <ASPEP_RXframeProcess+0x2a0>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000e84:	4540      	cmp	r0, r8
 8000e86:	d8bb      	bhi.n	8000e00 <ASPEP_RXframeProcess+0x2a0>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000e88:	454d      	cmp	r5, r9
 8000e8a:	d8b9      	bhi.n	8000e00 <ASPEP_RXframeProcess+0x2a0>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e8c:	3258      	adds	r2, #88	; 0x58
 8000e8e:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000e90:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e92:	0f5b      	lsrs	r3, r3, #29
 8000e94:	1ad2      	subs	r2, r2, r3
 8000e96:	4253      	negs	r3, r2
 8000e98:	415a      	adcs	r2, r3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	e7b0      	b.n	8000e00 <ASPEP_RXframeProcess+0x2a0>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	0800673c 	.word	0x0800673c
 8000ea4:	0800672c 	.word	0x0800672c
 8000ea8:	ff00ffff 	.word	0xff00ffff

08000eac <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000eac:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000eae:	254d      	movs	r5, #77	; 0x4d
 8000eb0:	5d43      	ldrb	r3, [r0, r5]
{
 8000eb2:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <ASPEP_HWDataReceivedIT+0x1a>
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d103      	bne.n	8000ec4 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	5542      	strb	r2, [r0, r5]
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000ec0:	3249      	adds	r2, #73	; 0x49
 8000ec2:	5483      	strb	r3, [r0, r2]
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <ASPEP_HWDataReceivedIT+0x98>)
 8000ec8:	7f01      	ldrb	r1, [r0, #28]
 8000eca:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ecc:	5c59      	ldrb	r1, [r3, r1]
 8000ece:	0a10      	lsrs	r0, r2, #8
 8000ed0:	4041      	eors	r1, r0
 8000ed2:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ed4:	5c59      	ldrb	r1, [r3, r1]
 8000ed6:	0c10      	lsrs	r0, r2, #16
 8000ed8:	4041      	eors	r1, r0
 8000eda:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000edc:	5c59      	ldrb	r1, [r3, r1]
 8000ede:	0e12      	lsrs	r2, r2, #24
 8000ee0:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000ee2:	5c9b      	ldrb	r3, [r3, r2]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10b      	bne.n	8000f00 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000ee8:	7f22      	ldrb	r2, [r4, #28]
 8000eea:	330f      	adds	r3, #15
 8000eec:	4013      	ands	r3, r2
 8000eee:	6523      	str	r3, [r4, #80]	; 0x50
          switch (pHandle->rxPacketType)
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	d809      	bhi.n	8000f08 <ASPEP_HWDataReceivedIT+0x5c>
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d81d      	bhi.n	8000f34 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000ef8:	234a      	movs	r3, #74	; 0x4a
 8000efa:	2201      	movs	r2, #1
 8000efc:	54e2      	strb	r2, [r4, r3]
              break;
 8000efe:	e7e1      	b.n	8000ec4 <ASPEP_HWDataReceivedIT+0x18>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000f00:	234a      	movs	r3, #74	; 0x4a
 8000f02:	2204      	movs	r2, #4
 8000f04:	54e2      	strb	r2, [r4, r3]
 8000f06:	e7dd      	b.n	8000ec4 <ASPEP_HWDataReceivedIT+0x18>
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d1f5      	bne.n	8000ef8 <ASPEP_HWDataReceivedIT+0x4c>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000f0c:	8ba2      	ldrh	r2, [r4, #28]
 8000f0e:	333b      	adds	r3, #59	; 0x3b
 8000f10:	0912      	lsrs	r2, r2, #4
 8000f12:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000f14:	d00e      	beq.n	8000f34 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000f16:	2346      	movs	r3, #70	; 0x46
 8000f18:	5ae3      	ldrh	r3, [r4, r3]
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d30e      	bcc.n	8000f3c <ASPEP_HWDataReceivedIT+0x90>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000f1e:	2354      	movs	r3, #84	; 0x54
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000f20:	5ce3      	ldrb	r3, [r4, r3]
 8000f22:	69a1      	ldr	r1, [r4, #24]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	18d2      	adds	r2, r2, r3
 8000f28:	6960      	ldr	r0, [r4, #20]
 8000f2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f2c:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	5563      	strb	r3, [r4, r5]
 8000f32:	e7c7      	b.n	8000ec4 <ASPEP_HWDataReceivedIT+0x18>
              pHandle->NewPacketAvailable = true;
 8000f34:	2349      	movs	r3, #73	; 0x49
 8000f36:	2201      	movs	r2, #1
 8000f38:	54e2      	strb	r2, [r4, r3]
              break;
 8000f3a:	e7c3      	b.n	8000ec4 <ASPEP_HWDataReceivedIT+0x18>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000f3c:	234a      	movs	r3, #74	; 0x4a
 8000f3e:	2202      	movs	r2, #2
 8000f40:	54e2      	strb	r2, [r4, r3]
 8000f42:	e7bf      	b.n	8000ec4 <ASPEP_HWDataReceivedIT+0x18>
 8000f44:	0800673c 	.word	0x0800673c

08000f48 <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000f48:	224d      	movs	r2, #77	; 0x4d
 8000f4a:	2100      	movs	r1, #0
{
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000f50:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000f52:	0001      	movs	r1, r0
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	6940      	ldr	r0, [r0, #20]
 8000f58:	311c      	adds	r1, #28
 8000f5a:	3a49      	subs	r2, #73	; 0x49
 8000f5c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b530      	push	{r4, r5, lr}
 8000f62:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f64:	2224      	movs	r2, #36	; 0x24
 8000f66:	2100      	movs	r1, #0
 8000f68:	a809      	add	r0, sp, #36	; 0x24
 8000f6a:	f005 fb9d 	bl	80066a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6e:	2210      	movs	r2, #16
 8000f70:	2100      	movs	r1, #0
 8000f72:	4668      	mov	r0, sp
 8000f74:	f005 fb98 	bl	80066a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	2210      	movs	r2, #16
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	a804      	add	r0, sp, #16
 8000f7e:	f005 fb93 	bl	80066a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f82:	2312      	movs	r3, #18
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f86:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f8a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f8c:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f90:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f92:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f98:	9212      	str	r2, [sp, #72]	; 0x48
 8000f9a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f9e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f002 ff53 	bl	8003e4c <HAL_RCC_OscConfig>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000faa:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fbc:	f003 f9a0 	bl	8004300 <HAL_RCC_ClockConfig>
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x68>
 8000fc4:	b672      	cpsid	i
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <SystemClock_Config+0x66>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fc8:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fcc:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	f003 fa87 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x7a>
 8000fd6:	b672      	cpsid	i
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <SystemClock_Config+0x78>
}
 8000fda:	b015      	add	sp, #84	; 0x54
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)

08000fe0 <main>:
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	46ce      	mov	lr, r9
 8000fe4:	4647      	mov	r7, r8
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b097      	sub	sp, #92	; 0x5c
	MC_StartMotor1();
 8000fea:	f000 f985 	bl	80012f8 <MC_StartMotor1>
	HAL_Delay(100000);
 8000fee:	48b7      	ldr	r0, [pc, #732]	; (80012cc <main+0x2ec>)
 8000ff0:	f002 fc48 	bl	8003884 <HAL_Delay>
  HAL_Init();
 8000ff4:	f002 fc24 	bl	8003840 <HAL_Init>
  SystemClock_Config();
 8000ff8:	f7ff ffb2 	bl	8000f60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	2214      	movs	r2, #20
 8000ffe:	2100      	movs	r1, #0
 8001000:	a80e      	add	r0, sp, #56	; 0x38
 8001002:	f005 fb51 	bl	80066a8 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	4cb1      	ldr	r4, [pc, #708]	; (80012d0 <main+0x2f0>)
 800100a:	03d2      	lsls	r2, r2, #15
 800100c:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800100e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001010:	4313      	orrs	r3, r2
 8001012:	6163      	str	r3, [r4, #20]
 8001014:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8001016:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001018:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	6963      	ldr	r3, [r4, #20]
 8001022:	0292      	lsls	r2, r2, #10
 8001024:	4313      	orrs	r3, r2
 8001026:	6163      	str	r3, [r4, #20]
 8001028:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800102a:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	9303      	str	r3, [sp, #12]
 8001032:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	6963      	ldr	r3, [r4, #20]
 8001036:	02d2      	lsls	r2, r2, #11
 8001038:	4313      	orrs	r3, r2
 800103a:	6163      	str	r3, [r4, #20]
 800103c:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800103e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4013      	ands	r3, r2
 8001042:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 8001046:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800104a:	f002 fef9 	bl	8003e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 800104e:	2090      	movs	r0, #144	; 0x90
 8001050:	017f      	lsls	r7, r7, #5
 8001052:	2200      	movs	r2, #0
 8001054:	0039      	movs	r1, r7
 8001056:	05c0      	lsls	r0, r0, #23
 8001058:	f002 fef2 	bl	8003e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY2_GPIO_Port, OCTH_STBY2_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	489c      	ldr	r0, [pc, #624]	; (80012d4 <main+0x2f4>)
 8001062:	f002 feed 	bl	8003e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY1_GPIO_Port, OCTH_STBY1_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	489a      	ldr	r0, [pc, #616]	; (80012d4 <main+0x2f4>)
 800106c:	f002 fee8 	bl	8003e40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001070:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001072:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001074:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001076:	4897      	ldr	r0, [pc, #604]	; (80012d4 <main+0x2f4>)
 8001078:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800107c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001080:	f002 fde0 	bl	8003c44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8001084:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8001088:	015b      	lsls	r3, r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 800108c:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	a90e      	add	r1, sp, #56	; 0x38
 8001092:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001094:	4698      	mov	r8, r3
 8001096:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f002 fdd2 	bl	8003c44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 80010a0:	23c0      	movs	r3, #192	; 0xc0
 80010a2:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010a4:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a6:	488b      	ldr	r0, [pc, #556]	; (80012d4 <main+0x2f4>)
 80010a8:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010aa:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b0:	f002 fdc8 	bl	8003c44 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b4:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b8:	432b      	orrs	r3, r5
 80010ba:	6163      	str	r3, [r4, #20]
 80010bc:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c0:	402b      	ands	r3, r5
 80010c2:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c4:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c8:	f005 faee 	bl	80066a8 <memset>
  hadc.Instance = ADC1;
 80010cc:	4c82      	ldr	r4, [pc, #520]	; (80012d8 <main+0x2f8>)
 80010ce:	4b83      	ldr	r3, [pc, #524]	; (80012dc <main+0x2fc>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010d0:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80010d2:	6023      	str	r3, [r4, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80010d4:	2320      	movs	r3, #32
 80010d6:	4698      	mov	r8, r3
 80010d8:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	3b1c      	subs	r3, #28
 80010dc:	4699      	mov	r9, r3
 80010de:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80010e6:	2324      	movs	r3, #36	; 0x24
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010e8:	61a6      	str	r6, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ea:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	60a6      	str	r6, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010ee:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80010f0:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80010f2:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f4:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010f6:	f002 fbd7 	bl	80038a8 <HAL_ADC_Init>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d001      	beq.n	8001102 <main+0x122>
 80010fe:	b672      	cpsid	i
  while (1)
 8001100:	e7fe      	b.n	8001100 <main+0x120>
  sConfig.Channel = ADC_CHANNEL_3;
 8001102:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001104:	0020      	movs	r0, r4
 8001106:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_3;
 8001108:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800110a:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800110c:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800110e:	f002 fc73 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001112:	2800      	cmp	r0, #0
 8001114:	d001      	beq.n	800111a <main+0x13a>
 8001116:	b672      	cpsid	i
  while (1)
 8001118:	e7fe      	b.n	8001118 <main+0x138>
  sConfig.Channel = ADC_CHANNEL_4;
 800111a:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800111c:	0020      	movs	r0, r4
 800111e:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8001120:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001122:	f002 fc69 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001126:	2800      	cmp	r0, #0
 8001128:	d001      	beq.n	800112e <main+0x14e>
 800112a:	b672      	cpsid	i
  while (1)
 800112c:	e7fe      	b.n	800112c <main+0x14c>
  sConfig.Channel = ADC_CHANNEL_5;
 800112e:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001130:	0020      	movs	r0, r4
 8001132:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 8001134:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001136:	f002 fc5f 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800113a:	2800      	cmp	r0, #0
 800113c:	d001      	beq.n	8001142 <main+0x162>
 800113e:	b672      	cpsid	i
  while (1)
 8001140:	e7fe      	b.n	8001140 <main+0x160>
  sConfig.Channel = ADC_CHANNEL_9;
 8001142:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001144:	0020      	movs	r0, r4
 8001146:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8001148:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800114a:	f002 fc55 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800114e:	1e06      	subs	r6, r0, #0
 8001150:	d001      	beq.n	8001156 <main+0x176>
 8001152:	b672      	cpsid	i
  while (1)
 8001154:	e7fe      	b.n	8001154 <main+0x174>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	0001      	movs	r1, r0
 8001158:	2208      	movs	r2, #8
 800115a:	a805      	add	r0, sp, #20
 800115c:	f005 faa4 	bl	80066a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001160:	221c      	movs	r2, #28
 8001162:	0031      	movs	r1, r6
 8001164:	a807      	add	r0, sp, #28
 8001166:	f005 fa9f 	bl	80066a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116a:	2220      	movs	r2, #32
 800116c:	0031      	movs	r1, r6
 800116e:	a80e      	add	r0, sp, #56	; 0x38
 8001170:	f005 fa9a 	bl	80066a8 <memset>
  htim1.Instance = TIM1;
 8001174:	4c5a      	ldr	r4, [pc, #360]	; (80012e0 <main+0x300>)
 8001176:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <main+0x304>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001178:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 800117a:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800117c:	4643      	mov	r3, r8
 800117e:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001180:	23c8      	movs	r3, #200	; 0xc8
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	005b      	lsls	r3, r3, #1
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800118a:	6066      	str	r6, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800118c:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800118e:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001192:	f003 fa43 	bl	800461c <HAL_TIM_PWM_Init>
 8001196:	2800      	cmp	r0, #0
 8001198:	d001      	beq.n	800119e <main+0x1be>
 800119a:	b672      	cpsid	i
  while (1)
 800119c:	e7fe      	b.n	800119c <main+0x1bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800119e:	2370      	movs	r3, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a2:	a905      	add	r1, sp, #20
 80011a4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80011a6:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a8:	f003 fbd0 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	1e02      	subs	r2, r0, #0
 80011ae:	d001      	beq.n	80011b4 <main+0x1d4>
 80011b0:	b672      	cpsid	i
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b4:	2360      	movs	r3, #96	; 0x60
 80011b6:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80011b8:	3331      	adds	r3, #49	; 0x31
 80011ba:	33ff      	adds	r3, #255	; 0xff
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011bc:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011be:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c0:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c2:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c4:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	a907      	add	r1, sp, #28
 80011c8:	0020      	movs	r0, r4
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80011ca:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	f003 fa9e 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d001      	beq.n	80011d8 <main+0x1f8>
 80011d4:	b672      	cpsid	i
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <main+0x1f6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d8:	2204      	movs	r2, #4
 80011da:	0020      	movs	r0, r4
 80011dc:	a907      	add	r1, sp, #28
 80011de:	f003 fa95 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d001      	beq.n	80011ea <main+0x20a>
 80011e6:	b672      	cpsid	i
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <main+0x208>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ea:	2208      	movs	r2, #8
 80011ec:	0020      	movs	r0, r4
 80011ee:	a907      	add	r1, sp, #28
 80011f0:	f003 fa8c 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d001      	beq.n	80011fc <main+0x21c>
 80011f8:	b672      	cpsid	i
  while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0x21a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011fc:	2370      	movs	r3, #112	; 0x70
 80011fe:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <main+0x308>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001202:	220c      	movs	r2, #12
 8001204:	0020      	movs	r0, r4
 8001206:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001208:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800120a:	f003 fa7f 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 800120e:	2800      	cmp	r0, #0
 8001210:	d001      	beq.n	8001216 <main+0x236>
 8001212:	b672      	cpsid	i
  while (1)
 8001214:	e7fe      	b.n	8001214 <main+0x234>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001222:	2310      	movs	r3, #16
 8001224:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122c:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122e:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001230:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001232:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001234:	a90e      	add	r1, sp, #56	; 0x38
 8001236:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001238:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123a:	f003 fbb5 	bl	80049a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800123e:	1e05      	subs	r5, r0, #0
 8001240:	d001      	beq.n	8001246 <main+0x266>
 8001242:	b672      	cpsid	i
  while (1)
 8001244:	e7fe      	b.n	8001244 <main+0x264>
  HAL_TIM_MspPostInit(&htim1);
 8001246:	0020      	movs	r0, r4
 8001248:	f002 f8d6 	bl	80033f8 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800124c:	4827      	ldr	r0, [pc, #156]	; (80012ec <main+0x30c>)
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <main+0x310>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001250:	6085      	str	r5, [r0, #8]
  huart1.Instance = USART1;
 8001252:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1843200;
 8001254:	23e1      	movs	r3, #225	; 0xe1
 8001256:	035b      	lsls	r3, r3, #13
 8001258:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800125a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001266:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001268:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126a:	f003 fd85 	bl	8004d78 <HAL_UART_Init>
 800126e:	1e04      	subs	r4, r0, #0
 8001270:	d001      	beq.n	8001276 <main+0x296>
 8001272:	b672      	cpsid	i
  while (1)
 8001274:	e7fe      	b.n	8001274 <main+0x294>
  MX_MotorControl_Init();
 8001276:	f001 f865 	bl	8002344 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800127a:	0022      	movs	r2, r4
 800127c:	2103      	movs	r1, #3
 800127e:	201b      	movs	r0, #27
 8001280:	f002 fc4e 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001284:	201b      	movs	r0, #27
 8001286:	f002 fc7d 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800128a:	0022      	movs	r2, r4
 800128c:	2101      	movs	r1, #1
 800128e:	2009      	movs	r0, #9
 8001290:	f002 fc46 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001294:	2009      	movs	r0, #9
 8001296:	f002 fc75 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800129a:	0022      	movs	r2, r4
 800129c:	2103      	movs	r1, #3
 800129e:	200a      	movs	r0, #10
 80012a0:	f002 fc3e 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f002 fc6d 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80012aa:	0022      	movs	r2, r4
 80012ac:	0021      	movs	r1, r4
 80012ae:	200d      	movs	r0, #13
 80012b0:	f002 fc36 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80012b4:	200d      	movs	r0, #13
 80012b6:	f002 fc65 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80012ba:	2005      	movs	r0, #5
 80012bc:	0022      	movs	r2, r4
 80012be:	2103      	movs	r1, #3
 80012c0:	f002 fc2e 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80012c4:	2005      	movs	r0, #5
 80012c6:	f002 fc5d 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  while (1)
 80012ca:	e7fe      	b.n	80012ca <main+0x2ea>
 80012cc:	000186a0 	.word	0x000186a0
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48001400 	.word	0x48001400
 80012d8:	20000494 	.word	0x20000494
 80012dc:	40012400 	.word	0x40012400
 80012e0:	200005a0 	.word	0x200005a0
 80012e4:	40012c00 	.word	0x40012c00
 80012e8:	0000031f 	.word	0x0000031f
 80012ec:	200005e8 	.word	0x200005e8
 80012f0:	40013800 	.word	0x40013800

080012f4 <Error_Handler>:
 80012f4:	b672      	cpsid	i
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <Error_Handler+0x2>

080012f8 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 80012f8:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 80012fa:	4b02      	ldr	r3, [pc, #8]	; (8001304 <MC_StartMotor1+0xc>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f000 f885 	bl	800140c <MCI_StartMotor>
}
 8001302:	bd10      	pop	{r4, pc}
 8001304:	200007f8 	.word	0x200007f8

08001308 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8001308:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 800130a:	4b02      	ldr	r3, [pc, #8]	; (8001314 <MC_StopMotor1+0xc>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f000 f8af 	bl	8001470 <MCI_StopMotor>
}
 8001312:	bd10      	pop	{r4, pc}
 8001314:	200007f8 	.word	0x200007f8

08001318 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 8001318:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 800131a:	4b02      	ldr	r3, [pc, #8]	; (8001324 <MC_GetSTMStateMotor1+0xc>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f000 f86f 	bl	8001400 <MCI_GetSTMState>
}
 8001322:	bd10      	pop	{r4, pc}
 8001324:	200007f8 	.word	0x200007f8

08001328 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001328:	2002      	movs	r0, #2
 800132a:	4770      	bx	lr

0800132c <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 800132c:	4770      	bx	lr
 800132e:	46c0      	nop			; (mov r8, r8)

08001330 <MC_APP_PostMediumFrequencyHook_M1>:
 8001330:	4770      	bx	lr
 8001332:	46c0      	nop			; (mov r8, r8)

08001334 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 8001334:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001336:	2300      	movs	r3, #0
    pHandle->pFOCVars = pFOCVars;
 8001338:	6042      	str	r2, [r0, #4]
    pHandle->hFinalSpeed = 0;
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800133a:	2200      	movs	r2, #0
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800133c:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 800133e:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 8001340:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 8001342:	61c3      	str	r3, [r0, #28]
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001344:	6203      	str	r3, [r0, #32]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001346:	3324      	adds	r3, #36	; 0x24
    pHandle->pSTC = pSTC;
 8001348:	6001      	str	r1, [r0, #0]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800134a:	54c2      	strb	r2, [r0, r3]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800134c:	4770      	bx	lr
 800134e:	46c0      	nop			; (mov r8, r8)

08001350 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001350:	2301      	movs	r3, #1
 8001352:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 8001356:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001358:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800135a:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800135c:	4770      	bx	lr
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	00000301 	.word	0x00000301

08001364 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001364:	2302      	movs	r3, #2
 8001366:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 800136a:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800136c:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800136e:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001370:	4770      	bx	lr
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	00000401 	.word	0x00000401

08001378 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001378:	8c03      	ldrh	r3, [r0, #32]
 800137a:	430b      	orrs	r3, r1
 800137c:	4393      	bics	r3, r2
 800137e:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001380:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001382:	4319      	orrs	r1, r3
 8001384:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001386:	4770      	bx	lr

08001388 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001388:	2324      	movs	r3, #36	; 0x24
{
 800138a:	b510      	push	{r4, lr}
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800138c:	5cc2      	ldrb	r2, [r0, r3]
{
 800138e:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001390:	2a01      	cmp	r2, #1
 8001392:	d000      	beq.n	8001396 <MCI_ExecBufferedCommands+0xe>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001394:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 8001396:	7b01      	ldrb	r1, [r0, #12]
 8001398:	2902      	cmp	r1, #2
 800139a:	d007      	beq.n	80013ac <MCI_ExecBufferedCommands+0x24>
 800139c:	2903      	cmp	r1, #3
 800139e:	d026      	beq.n	80013ee <MCI_ExecBufferedCommands+0x66>
 80013a0:	2901      	cmp	r1, #1
 80013a2:	d016      	beq.n	80013d2 <MCI_ExecBufferedCommands+0x4a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80013a4:	2324      	movs	r3, #36	; 0x24
 80013a6:	2203      	movs	r2, #3
 80013a8:	54e2      	strb	r2, [r4, r3]
}
 80013aa:	e7f3      	b.n	8001394 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013ac:	2100      	movs	r1, #0
 80013ae:	6842      	ldr	r2, [r0, #4]
 80013b0:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80013b2:	6800      	ldr	r0, [r0, #0]
 80013b4:	3104      	adds	r1, #4
 80013b6:	f004 fcc5 	bl	8005d44 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80013ba:	8ba2      	ldrh	r2, [r4, #28]
 80013bc:	2310      	movs	r3, #16
 80013be:	5ee1      	ldrsh	r1, [r4, r3]
 80013c0:	6820      	ldr	r0, [r4, #0]
 80013c2:	f004 fcc3 	bl	8005d4c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d0ec      	beq.n	80013a4 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80013ca:	2324      	movs	r3, #36	; 0x24
 80013cc:	2202      	movs	r2, #2
 80013ce:	54e2      	strb	r2, [r4, r3]
 80013d0:	e7e0      	b.n	8001394 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013d2:	2100      	movs	r1, #0
 80013d4:	6842      	ldr	r2, [r0, #4]
 80013d6:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80013d8:	6800      	ldr	r0, [r0, #0]
 80013da:	3103      	adds	r1, #3
 80013dc:	f004 fcb2 	bl	8005d44 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80013e0:	8ba2      	ldrh	r2, [r4, #28]
 80013e2:	230e      	movs	r3, #14
 80013e4:	5ee1      	ldrsh	r1, [r4, r3]
 80013e6:	6820      	ldr	r0, [r4, #0]
 80013e8:	f004 fcb0 	bl	8005d4c <STC_ExecRamp>
          break;
 80013ec:	e7eb      	b.n	80013c6 <MCI_ExecBufferedCommands+0x3e>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013ee:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013f0:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013f2:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013f4:	54c2      	strb	r2, [r0, r3]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013f6:	2204      	movs	r2, #4
 80013f8:	3010      	adds	r0, #16
 80013fa:	f005 f981 	bl	8006700 <memcpy>
      if (commandHasBeenExecuted)
 80013fe:	e7e4      	b.n	80013ca <MCI_ExecBufferedCommands+0x42>

08001400 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 8001400:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 8001402:	4770      	bx	lr

08001404 <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 8001404:	8c40      	ldrh	r0, [r0, #34]	; 0x22
#endif
}
 8001406:	4770      	bx	lr

08001408 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 8001408:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 800140a:	4770      	bx	lr

0800140c <MCI_StartMotor>:
{
 800140c:	b510      	push	{r4, lr}
 800140e:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001410:	f7ff fff6 	bl	8001400 <MCI_GetSTMState>
 8001414:	2800      	cmp	r0, #0
 8001416:	d001      	beq.n	800141c <MCI_StartMotor+0x10>
  bool retVal = false;
 8001418:	2000      	movs	r0, #0
}
 800141a:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800141c:	0020      	movs	r0, r4
 800141e:	f7ff fff1 	bl	8001404 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001422:	2800      	cmp	r0, #0
 8001424:	d1f8      	bne.n	8001418 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001426:	0020      	movs	r0, r4
 8001428:	f7ff ffee 	bl	8001408 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800142c:	2800      	cmp	r0, #0
 800142e:	d1f3      	bne.n	8001418 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 8001430:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001432:	2224      	movs	r2, #36	; 0x24
      pHandle->DirectCommand = MCI_START;
 8001434:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 8001436:	3001      	adds	r0, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001438:	54a3      	strb	r3, [r4, r2]
      retVal = true;
 800143a:	e7ee      	b.n	800141a <MCI_StartMotor+0xe>

0800143c <MCI_StartWithPolarizationMotor>:
{
 800143c:	b510      	push	{r4, lr}
 800143e:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001440:	f7ff ffde 	bl	8001400 <MCI_GetSTMState>
 8001444:	2800      	cmp	r0, #0
 8001446:	d001      	beq.n	800144c <MCI_StartWithPolarizationMotor+0x10>
  bool retVal = true;
 8001448:	2001      	movs	r0, #1
}
 800144a:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800144c:	0020      	movs	r0, r4
 800144e:	f7ff ffd9 	bl	8001404 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001452:	2800      	cmp	r0, #0
 8001454:	d1f8      	bne.n	8001448 <MCI_StartWithPolarizationMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001456:	0020      	movs	r0, r4
 8001458:	f7ff ffd6 	bl	8001408 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800145c:	2800      	cmp	r0, #0
 800145e:	d1f3      	bne.n	8001448 <MCI_StartWithPolarizationMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 8001460:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001462:	2224      	movs	r2, #36	; 0x24
      pHandle->DirectCommand = MCI_START;
 8001464:	77a3      	strb	r3, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001466:	54a3      	strb	r3, [r4, r2]
      pHandle->pPWM->offsetCalibStatus = false;
 8001468:	68a2      	ldr	r2, [r4, #8]
 800146a:	3380      	adds	r3, #128	; 0x80
 800146c:	54d0      	strb	r0, [r2, r3]
      retVal = false;
 800146e:	e7ec      	b.n	800144a <MCI_StartWithPolarizationMotor+0xe>

08001470 <MCI_StopMotor>:
{
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 8001474:	f7ff ffc4 	bl	8001400 <MCI_GetSTMState>
      status = false;
 8001478:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 800147a:	2800      	cmp	r0, #0
 800147c:	d004      	beq.n	8001488 <MCI_StopMotor+0x18>
 800147e:	0003      	movs	r3, r0
 8001480:	3b0c      	subs	r3, #12
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	4193      	sbcs	r3, r2
 8001486:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001488:	0020      	movs	r0, r4
 800148a:	f7ff ffbb 	bl	8001404 <MCI_GetOccurredFaults>
 800148e:	2800      	cmp	r0, #0
 8001490:	d002      	beq.n	8001498 <MCI_StopMotor+0x28>
  bool retVal = false;
 8001492:	2500      	movs	r5, #0
}
 8001494:	0028      	movs	r0, r5
 8001496:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001498:	0020      	movs	r0, r4
 800149a:	f7ff ffb5 	bl	8001408 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800149e:	2800      	cmp	r0, #0
 80014a0:	d1f7      	bne.n	8001492 <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	d0f5      	beq.n	8001492 <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 80014a6:	2305      	movs	r3, #5
 80014a8:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80014aa:	e7f3      	b.n	8001494 <MCI_StopMotor+0x24>

080014ac <MCI_FaultAcknowledged>:
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	0004      	movs	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014b0:	f7ff ffa6 	bl	8001400 <MCI_GetSTMState>
 80014b4:	280b      	cmp	r0, #11
 80014b6:	d001      	beq.n	80014bc <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 80014b8:	2000      	movs	r0, #0
}
 80014ba:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014bc:	0020      	movs	r0, r4
 80014be:	f7ff ffa3 	bl	8001408 <MCI_GetCurrentFaults>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1f8      	bne.n	80014b8 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80014c6:	2302      	movs	r3, #2
      pHandle->PastFaults = MC_NO_FAULTS;
 80014c8:	8460      	strh	r0, [r4, #34]	; 0x22
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80014ca:	77a3      	strb	r3, [r4, #30]
      reVal = true;
 80014cc:	3001      	adds	r0, #1
 80014ce:	e7f4      	b.n	80014ba <MCI_FaultAcknowledged+0xe>

080014d0 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80014d0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80014d2:	8c00      	ldrh	r0, [r0, #32]
 80014d4:	0400      	lsls	r0, r0, #16
 80014d6:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80014d8:	4770      	bx	lr
 80014da:	46c0      	nop			; (mov r8, r8)

080014dc <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 80014dc:	2325      	movs	r3, #37	; 0x25
 80014de:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 80014e0:	4770      	bx	lr
 80014e2:	46c0      	nop			; (mov r8, r8)

080014e4 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80014e4:	7b02      	ldrb	r2, [r0, #12]
{
 80014e6:	0003      	movs	r3, r0
    switch (pHandle->lastCommand)
 80014e8:	2a02      	cmp	r2, #2
 80014ea:	d005      	beq.n	80014f8 <MCI_GetImposedMotorDirection+0x14>
 80014ec:	2a03      	cmp	r2, #3
 80014ee:	d012      	beq.n	8001516 <MCI_GetImposedMotorDirection+0x32>
 80014f0:	2001      	movs	r0, #1
 80014f2:	2a01      	cmp	r2, #1
 80014f4:	d007      	beq.n	8001506 <MCI_GetImposedMotorDirection+0x22>
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 80014f6:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 80014f8:	2010      	movs	r0, #16
 80014fa:	5e18      	ldrsh	r0, [r3, r0]
          retVal = -1;
 80014fc:	43c0      	mvns	r0, r0
 80014fe:	17c0      	asrs	r0, r0, #31
 8001500:	4010      	ands	r0, r2
 8001502:	3801      	subs	r0, #1
 8001504:	e7f7      	b.n	80014f6 <MCI_GetImposedMotorDirection+0x12>
        if (pHandle->hFinalSpeed < 0)
 8001506:	200e      	movs	r0, #14
 8001508:	5e18      	ldrsh	r0, [r3, r0]
          retVal = -1;
 800150a:	43c0      	mvns	r0, r0
 800150c:	2302      	movs	r3, #2
 800150e:	17c0      	asrs	r0, r0, #31
 8001510:	4018      	ands	r0, r3
 8001512:	3801      	subs	r0, #1
 8001514:	e7ef      	b.n	80014f6 <MCI_GetImposedMotorDirection+0x12>
        if (pHandle->Iqdref.q < 0)
 8001516:	2012      	movs	r0, #18
 8001518:	5e18      	ldrsh	r0, [r3, r0]
 800151a:	e7f6      	b.n	800150a <MCI_GetImposedMotorDirection+0x26>

0800151c <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 800151c:	230e      	movs	r3, #14
 800151e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8001520:	4770      	bx	lr
 8001522:	46c0      	nop			; (mov r8, r8)

08001524 <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 8001524:	8b80      	ldrh	r0, [r0, #28]
#endif
}
 8001526:	4770      	bx	lr

08001528 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 8001528:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 800152a:	6800      	ldr	r0, [r0, #0]
 800152c:	f004 fc50 	bl	8005dd0 <STC_StopRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001530:	bd10      	pop	{r4, pc}
 8001532:	46c0      	nop			; (mov r8, r8)

08001534 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001534:	b510      	push	{r4, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001536:	6800      	ldr	r0, [r0, #0]
 8001538:	f004 fbf0 	bl	8005d1c <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800153c:	f004 fb96 	bl	8005c6c <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001540:	bd10      	pop	{r4, pc}
 8001542:	46c0      	nop			; (mov r8, r8)

08001544 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 8001544:	b510      	push	{r4, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001546:	6800      	ldr	r0, [r0, #0]
 8001548:	f004 fbf4 	bl	8005d34 <STC_GetMecSpeedRefUnit>
#endif
}
 800154c:	bd10      	pop	{r4, pc}
 800154e:	46c0      	nop			; (mov r8, r8)

08001550 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8001550:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001552:	6841      	ldr	r1, [r0, #4]
{
 8001554:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Vqd);
 8001556:	2204      	movs	r2, #4
 8001558:	3116      	adds	r1, #22
 800155a:	a801      	add	r0, sp, #4
 800155c:	f005 f8d0 	bl	8006700 <memcpy>
 8001560:	466b      	mov	r3, sp
 8001562:	466a      	mov	r2, sp
 8001564:	88db      	ldrh	r3, [r3, #6]
 8001566:	8890      	ldrh	r0, [r2, #4]
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	4318      	orrs	r0, r3
#endif
}
 800156c:	b003      	add	sp, #12
 800156e:	bd00      	pop	{pc}

08001570 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8001570:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001572:	6841      	ldr	r1, [r0, #4]
{
 8001574:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Valphabeta);
 8001576:	2204      	movs	r2, #4
 8001578:	311a      	adds	r1, #26
 800157a:	a801      	add	r0, sp, #4
 800157c:	f005 f8c0 	bl	8006700 <memcpy>
 8001580:	466b      	mov	r3, sp
 8001582:	466a      	mov	r2, sp
 8001584:	88db      	ldrh	r3, [r3, #6]
 8001586:	8890      	ldrh	r0, [r2, #4]
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	4318      	orrs	r0, r3
#endif
}
 800158c:	b003      	add	sp, #12
 800158e:	bd00      	pop	{pc}

08001590 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001590:	6843      	ldr	r3, [r0, #4]
 8001592:	201e      	movs	r0, #30
 8001594:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 8001596:	4770      	bx	lr

08001598 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001598:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800159a:	c811      	ldmia	r0, {r0, r4}
 800159c:	f004 fc4a 	bl	8005e34 <STC_GetDefaultIqdref>
 80015a0:	8220      	strh	r0, [r4, #16]
 80015a2:	0c00      	lsrs	r0, r0, #16
 80015a4:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80015a6:	bd10      	pop	{r4, pc}

080015a8 <MCM_Clarke>:
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80015a8:	2180      	movs	r1, #128	; 0x80
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MCM_Clarke+0x48>)
 80015ac:	b202      	sxth	r2, r0
 80015ae:	1400      	asrs	r0, r0, #16
 80015b0:	4358      	muls	r0, r3
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80015b2:	4353      	muls	r3, r2
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80015b4:	425b      	negs	r3, r3
 80015b6:	1a1b      	subs	r3, r3, r0
 80015b8:	1a1b      	subs	r3, r3, r0
{
 80015ba:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80015bc:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 80015be:	0209      	lsls	r1, r1, #8
 80015c0:	428b      	cmp	r3, r1
 80015c2:	da04      	bge.n	80015ce <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80015c4:	490b      	ldr	r1, [pc, #44]	; (80015f4 <MCM_Clarke+0x4c>)
 80015c6:	428b      	cmp	r3, r1
 80015c8:	da08      	bge.n	80015dc <MCM_Clarke+0x34>
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MCM_Clarke+0x50>)
 80015cc:	e000      	b.n	80015d0 <MCM_Clarke+0x28>
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MCM_Clarke+0x54>)
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80015d0:	0410      	lsls	r0, r2, #16
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	0c00      	lsrs	r0, r0, #16
 80015d6:	4318      	orrs	r0, r3
}
 80015d8:	b004      	add	sp, #16
 80015da:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MCM_Clarke+0x50>)
 80015de:	1c19      	adds	r1, r3, #0
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4283      	cmp	r3, r0
 80015e4:	db01      	blt.n	80015ea <MCM_Clarke+0x42>
 80015e6:	b20b      	sxth	r3, r1
 80015e8:	e7f2      	b.n	80015d0 <MCM_Clarke+0x28>
 80015ea:	1c01      	adds	r1, r0, #0
 80015ec:	b20b      	sxth	r3, r1
 80015ee:	e7ef      	b.n	80015d0 <MCM_Clarke+0x28>
 80015f0:	000049e6 	.word	0x000049e6
 80015f4:	ffff8000 	.word	0xffff8000
 80015f8:	ffff8001 	.word	0xffff8001
 80015fc:	00007fff 	.word	0x00007fff

08001600 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	469c      	mov	ip, r3
 8001606:	4460      	add	r0, ip
  uhindex = (uint16_t)shindex;
 8001608:	b283      	uxth	r3, r0
{
 800160a:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 800160c:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 800160e:	24c0      	movs	r4, #192	; 0xc0
 8001610:	0018      	movs	r0, r3
 8001612:	2580      	movs	r5, #128	; 0x80
 8001614:	00a4      	lsls	r4, r4, #2
{
 8001616:	2100      	movs	r1, #0
 8001618:	2200      	movs	r2, #0
 800161a:	b083      	sub	sp, #12
 800161c:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 800161e:	00ad      	lsls	r5, r5, #2
 8001620:	42a8      	cmp	r0, r5
 8001622:	d023      	beq.n	800166c <MCM_Trig_Functions+0x6c>
 8001624:	d815      	bhi.n	8001652 <MCM_Trig_Functions+0x52>
 8001626:	2800      	cmp	r0, #0
 8001628:	d029      	beq.n	800167e <MCM_Trig_Functions+0x7e>
 800162a:	2480      	movs	r4, #128	; 0x80
 800162c:	0064      	lsls	r4, r4, #1
 800162e:	42a0      	cmp	r0, r4
 8001630:	d109      	bne.n	8001646 <MCM_Trig_Functions+0x46>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001632:	b2db      	uxtb	r3, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	4918      	ldr	r1, [pc, #96]	; (8001698 <MCM_Trig_Functions+0x98>)
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	0052      	lsls	r2, r2, #1
 800163c:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800163e:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001640:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001642:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001644:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001646:	0408      	lsls	r0, r1, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	0c00      	lsrs	r0, r0, #16
 800164c:	4310      	orrs	r0, r2
}
 800164e:	b003      	add	sp, #12
 8001650:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001652:	42a0      	cmp	r0, r4
 8001654:	d1f7      	bne.n	8001646 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001656:	b2db      	uxtb	r3, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	490f      	ldr	r1, [pc, #60]	; (8001698 <MCM_Trig_Functions+0x98>)
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001660:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001662:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001664:	5a59      	ldrh	r1, [r3, r1]
 8001666:	4249      	negs	r1, r1
 8001668:	b209      	sxth	r1, r1
      break;
 800166a:	e7ec      	b.n	8001646 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800166c:	b2db      	uxtb	r3, r3
 800166e:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001670:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001672:	4909      	ldr	r1, [pc, #36]	; (8001698 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001674:	b2db      	uxtb	r3, r3
 8001676:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001678:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800167a:	5e59      	ldrsh	r1, [r3, r1]
      break;
 800167c:	e7e3      	b.n	8001646 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800167e:	b2db      	uxtb	r3, r3
 8001680:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001682:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001684:	4904      	ldr	r1, [pc, #16]	; (8001698 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001686:	b2db      	uxtb	r3, r3
 8001688:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800168a:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800168c:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800168e:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001690:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001692:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001694:	b209      	sxth	r1, r1
      break;
 8001696:	e7d6      	b.n	8001646 <MCM_Trig_Functions+0x46>
 8001698:	08006868 	.word	0x08006868

0800169c <MCM_Park>:
{
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	9001      	str	r0, [sp, #4]
 80016a2:	b205      	sxth	r5, r0
 80016a4:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80016a6:	0008      	movs	r0, r1
 80016a8:	f7ff ffaa 	bl	8001600 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80016ac:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 80016ae:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80016b0:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 80016b2:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80016b4:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 80016b6:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016b8:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 80016ba:	2080      	movs	r0, #128	; 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016bc:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 80016be:	0200      	lsls	r0, r0, #8
 80016c0:	4282      	cmp	r2, r0
 80016c2:	da12      	bge.n	80016ea <MCM_Park+0x4e>
  else if (wqd_tmp < (-32768))
 80016c4:	481a      	ldr	r0, [pc, #104]	; (8001730 <MCM_Park+0x94>)
 80016c6:	4282      	cmp	r2, r0
 80016c8:	da24      	bge.n	8001714 <MCM_Park+0x78>
  if (wqd_tmp > INT16_MAX)
 80016ca:	2280      	movs	r2, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 80016cc:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80016ce:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016d0:	185b      	adds	r3, r3, r1
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <MCM_Park+0x98>)
 80016d4:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 80016d6:	0212      	lsls	r2, r2, #8
 80016d8:	4293      	cmp	r3, r2
 80016da:	db0f      	blt.n	80016fc <MCM_Park+0x60>
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MCM_Park+0x9c>)
  return (Output);
 80016de:	0400      	lsls	r0, r0, #16
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	0c00      	lsrs	r0, r0, #16
 80016e4:	4318      	orrs	r0, r3
}
 80016e6:	b004      	add	sp, #16
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
 80016ea:	4813      	ldr	r0, [pc, #76]	; (8001738 <MCM_Park+0x9c>)
  if (wqd_tmp > INT16_MAX)
 80016ec:	2280      	movs	r2, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 80016ee:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80016f0:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016f2:	185b      	adds	r3, r3, r1
 80016f4:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 80016f6:	0212      	lsls	r2, r2, #8
 80016f8:	4293      	cmp	r3, r2
 80016fa:	daef      	bge.n	80016dc <MCM_Park+0x40>
  else if (wqd_tmp < (-32768))
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <MCM_Park+0x94>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	da01      	bge.n	8001706 <MCM_Park+0x6a>
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MCM_Park+0x98>)
 8001704:	e7eb      	b.n	80016de <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001706:	490b      	ldr	r1, [pc, #44]	; (8001734 <MCM_Park+0x98>)
 8001708:	1c1a      	adds	r2, r3, #0
 800170a:	b21b      	sxth	r3, r3
 800170c:	428b      	cmp	r3, r1
 800170e:	db0b      	blt.n	8001728 <MCM_Park+0x8c>
 8001710:	b213      	sxth	r3, r2
 8001712:	e7e4      	b.n	80016de <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001714:	4e07      	ldr	r6, [pc, #28]	; (8001734 <MCM_Park+0x98>)
 8001716:	1c10      	adds	r0, r2, #0
 8001718:	b212      	sxth	r2, r2
 800171a:	42b2      	cmp	r2, r6
 800171c:	db01      	blt.n	8001722 <MCM_Park+0x86>
 800171e:	b200      	sxth	r0, r0
 8001720:	e7e4      	b.n	80016ec <MCM_Park+0x50>
 8001722:	1c30      	adds	r0, r6, #0
 8001724:	b200      	sxth	r0, r0
 8001726:	e7e1      	b.n	80016ec <MCM_Park+0x50>
 8001728:	1c0a      	adds	r2, r1, #0
 800172a:	b213      	sxth	r3, r2
 800172c:	e7d7      	b.n	80016de <MCM_Park+0x42>
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	ffff8000 	.word	0xffff8000
 8001734:	ffff8001 	.word	0xffff8001
 8001738:	00007fff 	.word	0x00007fff

0800173c <MCM_Rev_Park>:
{
 800173c:	b530      	push	{r4, r5, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	b205      	sxth	r5, r0
 8001742:	9001      	str	r0, [sp, #4]
 8001744:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001746:	0008      	movs	r0, r1
 8001748:	f7ff ff5a 	bl	8001600 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 800174c:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800174e:	1403      	asrs	r3, r0, #16
 8001750:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001752:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001754:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001756:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001758:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 800175a:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800175c:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800175e:	1ae4      	subs	r4, r4, r3
 8001760:	13e4      	asrs	r4, r4, #15
  return (Output);
 8001762:	0040      	lsls	r0, r0, #1
 8001764:	0424      	lsls	r4, r4, #16
 8001766:	0c00      	lsrs	r0, r0, #16
 8001768:	4320      	orrs	r0, r4
}
 800176a:	b005      	add	sp, #20
 800176c:	bd30      	pop	{r4, r5, pc}
 800176e:	46c0      	nop			; (mov r8, r8)

08001770 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001770:	2126      	movs	r1, #38	; 0x26
 8001772:	2200      	movs	r2, #0
 8001774:	4341      	muls	r1, r0
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <FOC_Clear+0x50>)
{
 8001778:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 800177a:	52ca      	strh	r2, [r1, r3]
 800177c:	185b      	adds	r3, r3, r1
 800177e:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001780:	809a      	strh	r2, [r3, #4]
 8001782:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001784:	819a      	strh	r2, [r3, #12]
 8001786:	81da      	strh	r2, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 8001788:	821a      	strh	r2, [r3, #16]
 800178a:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800178c:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800178e:	82da      	strh	r2, [r3, #22]
 8001790:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001792:	835a      	strh	r2, [r3, #26]
 8001794:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001796:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <FOC_Clear+0x54>)
 800179a:	0084      	lsls	r4, r0, #2
 800179c:	58e0      	ldr	r0, [r4, r3]
 800179e:	2100      	movs	r1, #0
 80017a0:	f003 fc20 	bl	8004fe4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <FOC_Clear+0x58>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	58e0      	ldr	r0, [r4, r3]
 80017aa:	f003 fc1b 	bl	8004fe4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <FOC_Clear+0x5c>)
 80017b0:	58e0      	ldr	r0, [r4, r3]
 80017b2:	f004 fab5 	bl	8005d20 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <FOC_Clear+0x60>)
 80017b8:	58e0      	ldr	r0, [r4, r3]
 80017ba:	f000 ff1b 	bl	80025f4 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80017be:	bd10      	pop	{r4, pc}
 80017c0:	200006ac 	.word	0x200006ac
 80017c4:	200003c8 	.word	0x200003c8
 80017c8:	200003c4 	.word	0x200003c4
 80017cc:	200003cc 	.word	0x200003cc
 80017d0:	200006e0 	.word	0x200006e0

080017d4 <MCboot>:
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	46ce      	mov	lr, r9
 80017d8:	4647      	mov	r7, r8
 80017da:	b580      	push	{r7, lr}
 80017dc:	0004      	movs	r4, r0
 80017de:	b085      	sub	sp, #20
  if (MC_NULL == pMCIList)
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d068      	beq.n	80018b6 <MCboot+0xe2>
    bMCBootCompleted = (uint8_t )0;
 80017e4:	2300      	movs	r3, #0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017e6:	4d36      	ldr	r5, [pc, #216]	; (80018c0 <MCboot+0xec>)
 80017e8:	4836      	ldr	r0, [pc, #216]	; (80018c4 <MCboot+0xf0>)
    bMCBootCompleted = (uint8_t )0;
 80017ea:	4a37      	ldr	r2, [pc, #220]	; (80018c8 <MCboot+0xf4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017ec:	6028      	str	r0, [r5, #0]
    bMCBootCompleted = (uint8_t )0;
 80017ee:	4690      	mov	r8, r2
 80017f0:	7013      	strb	r3, [r2, #0]
    R3_1_Init(&PWM_Handle_M1);
 80017f2:	f003 fcdf 	bl	80051b4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 80017f6:	4835      	ldr	r0, [pc, #212]	; (80018cc <MCboot+0xf8>)
 80017f8:	f7ff f85a 	bl	80008b0 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80017fc:	4f34      	ldr	r7, [pc, #208]	; (80018d0 <MCboot+0xfc>)
 80017fe:	0038      	movs	r0, r7
 8001800:	f003 fbdc 	bl	8004fbc <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001804:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <MCboot+0x100>)
 8001806:	4699      	mov	r9, r3
 8001808:	0018      	movs	r0, r3
 800180a:	f004 fd5b 	bl	80062c4 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800180e:	4e32      	ldr	r6, [pc, #200]	; (80018d8 <MCboot+0x104>)
 8001810:	464a      	mov	r2, r9
 8001812:	0039      	movs	r1, r7
 8001814:	6830      	ldr	r0, [r6, #0]
 8001816:	f004 fa6d 	bl	8005cf4 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 800181a:	4f30      	ldr	r7, [pc, #192]	; (80018dc <MCboot+0x108>)
 800181c:	0038      	movs	r0, r7
 800181e:	f004 fe35 	bl	800648c <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001822:	682a      	ldr	r2, [r5, #0]
 8001824:	6831      	ldr	r1, [r6, #0]
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <MCboot+0x10c>)
 8001828:	482e      	ldr	r0, [pc, #184]	; (80018e4 <MCboot+0x110>)
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	003a      	movs	r2, r7
 800182e:	f004 f95f 	bl	8005af0 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001832:	482d      	ldr	r0, [pc, #180]	; (80018e8 <MCboot+0x114>)
 8001834:	f003 fbc2 	bl	8004fbc <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001838:	482c      	ldr	r0, [pc, #176]	; (80018ec <MCboot+0x118>)
 800183a:	f003 fbbf 	bl	8004fbc <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800183e:	482c      	ldr	r0, [pc, #176]	; (80018f0 <MCboot+0x11c>)
 8001840:	f001 fb16 	bl	8002e70 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001844:	4f2b      	ldr	r7, [pc, #172]	; (80018f4 <MCboot+0x120>)
 8001846:	0038      	movs	r0, r7
 8001848:	f004 f86c 	bl	8005924 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MCboot+0x124>)
    NTC_Init(&TempSensor_M1);
 800184e:	482b      	ldr	r0, [pc, #172]	; (80018fc <MCboot+0x128>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60df      	str	r7, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001854:	4f2a      	ldr	r7, [pc, #168]	; (8001900 <MCboot+0x12c>)
 8001856:	609f      	str	r7, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001858:	f003 fb94 	bl	8004f84 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <MCboot+0x130>)
 800185e:	482a      	ldr	r0, [pc, #168]	; (8001908 <MCboot+0x134>)
 8001860:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001862:	f004 f8bd 	bl	80059e0 <REMNG_Init>
    FOC_Clear(M1);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff ff82 	bl	8001770 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800186c:	2301      	movs	r3, #1
 800186e:	4699      	mov	r9, r3
 8001870:	464a      	mov	r2, r9
 8001872:	3323      	adds	r3, #35	; 0x23
 8001874:	54fa      	strb	r2, [r7, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001876:	6830      	ldr	r0, [r6, #0]
 8001878:	f004 fadc 	bl	8005e34 <STC_GetDefaultIqdref>
 800187c:	6138      	str	r0, [r7, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800187e:	6830      	ldr	r0, [r6, #0]
 8001880:	f004 fad8 	bl	8005e34 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	4d21      	ldr	r5, [pc, #132]	; (800190c <MCboot+0x138>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001888:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800188a:	003a      	movs	r2, r7
 800188c:	6831      	ldr	r1, [r6, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800188e:	82b8      	strh	r0, [r7, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001890:	0028      	movs	r0, r5
 8001892:	f7ff fd4f 	bl	8001334 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MCboot+0x13c>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8001898:	6830      	ldr	r0, [r6, #0]
   Mci[M1].pScale = &scaleParams_M1;
 800189a:	61ab      	str	r3, [r5, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 800189c:	f004 fac6 	bl	8005e2c <STC_GetMecSpeedRefUnitDefault>
 80018a0:	2200      	movs	r2, #0
 80018a2:	0001      	movs	r1, r0
 80018a4:	0028      	movs	r0, r5
 80018a6:	f7ff fd53 	bl	8001350 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 80018aa:	6025      	str	r5, [r4, #0]
    MC_APP_BootHook();
 80018ac:	f7ff fd3e 	bl	800132c <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 80018b0:	4643      	mov	r3, r8
 80018b2:	464a      	mov	r2, r9
 80018b4:	701a      	strb	r2, [r3, #0]
}
 80018b6:	b005      	add	sp, #20
 80018b8:	bcc0      	pop	{r6, r7}
 80018ba:	46b9      	mov	r9, r7
 80018bc:	46b0      	mov	r8, r6
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c0:	200006e0 	.word	0x200006e0
 80018c4:	200000b4 	.word	0x200000b4
 80018c8:	200006d2 	.word	0x200006d2
 80018cc:	2000040c 	.word	0x2000040c
 80018d0:	20000078 	.word	0x20000078
 80018d4:	20000200 	.word	0x20000200
 80018d8:	200003cc 	.word	0x200003cc
 80018dc:	20000388 	.word	0x20000388
 80018e0:	200001ec 	.word	0x200001ec
 80018e4:	20000174 	.word	0x20000174
 80018e8:	2000004c 	.word	0x2000004c
 80018ec:	20000020 	.word	0x20000020
 80018f0:	20000378 	.word	0x20000378
 80018f4:	20000000 	.word	0x20000000
 80018f8:	200003c0 	.word	0x200003c0
 80018fc:	2000035c 	.word	0x2000035c
 8001900:	200006ac 	.word	0x200006ac
 8001904:	200006dc 	.word	0x200006dc
 8001908:	2000015c 	.word	0x2000015c
 800190c:	20000670 	.word	0x20000670
 8001910:	200003d8 	.word	0x200003d8

08001914 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001914:	4770      	bx	lr
 8001916:	46c0      	nop			; (mov r8, r8)

08001918 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001918:	2326      	movs	r3, #38	; 0x26
 800191a:	4343      	muls	r3, r0
{
 800191c:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800191e:	4c08      	ldr	r4, [pc, #32]	; (8001940 <FOC_CalcCurrRef+0x28>)
 8001920:	18e4      	adds	r4, r4, r3
 8001922:	0023      	movs	r3, r4
 8001924:	3324      	adds	r3, #36	; 0x24
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800192c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <FOC_CalcCurrRef+0x2c>)
 8001930:	0080      	lsls	r0, r0, #2
 8001932:	58c0      	ldr	r0, [r0, r3]
 8001934:	f004 fa50 	bl	8005dd8 <STC_CalcTorqueReference>
 8001938:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800193a:	8220      	strh	r0, [r4, #16]
}
 800193c:	e7f6      	b.n	800192c <FOC_CalcCurrRef+0x14>
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	200006ac 	.word	0x200006ac
 8001944:	200003cc 	.word	0x200003cc

08001948 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <TSK_SetChargeBootCapDelayM1+0x8>)
 800194a:	8018      	strh	r0, [r3, #0]
}
 800194c:	4770      	bx	lr
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	200006d4 	.word	0x200006d4

08001954 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8001956:	8818      	ldrh	r0, [r3, #0]
 8001958:	4243      	negs	r3, r0
 800195a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 800195c:	b2c0      	uxtb	r0, r0
}
 800195e:	4770      	bx	lr
 8001960:	200006d4 	.word	0x200006d4

08001964 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001966:	8018      	strh	r0, [r3, #0]
}
 8001968:	4770      	bx	lr
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	200006d8 	.word	0x200006d8

08001970 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8001972:	8818      	ldrh	r0, [r3, #0]
 8001974:	4243      	negs	r3, r0
 8001976:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001978:	b2c0      	uxtb	r0, r0
}
 800197a:	4770      	bx	lr
 800197c:	200006d8 	.word	0x200006d8

08001980 <TSK_MediumFrequencyTaskM1>:
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	466a      	mov	r2, sp
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001988:	4faa      	ldr	r7, [pc, #680]	; (8001c34 <TSK_MediumFrequencyTaskM1+0x2b4>)
 800198a:	4669      	mov	r1, sp
 800198c:	0038      	movs	r0, r7
  int16_t wAux = 0;
 800198e:	8013      	strh	r3, [r2, #0]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001990:	f004 fb78 	bl	8006084 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001994:	4ea8      	ldr	r6, [pc, #672]	; (8001c38 <TSK_MediumFrequencyTaskM1+0x2b8>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001996:	0005      	movs	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001998:	6830      	ldr	r0, [r6, #0]
 800199a:	f003 fb6d 	bl	8005078 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800199e:	4ca7      	ldr	r4, [pc, #668]	; (8001c3c <TSK_MediumFrequencyTaskM1+0x2bc>)
 80019a0:	0020      	movs	r0, r4
 80019a2:	f7ff fd31 	bl	8001408 <MCI_GetCurrentFaults>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d003      	beq.n	80019b2 <TSK_MediumFrequencyTaskM1+0x32>
    Mci[M1].State = FAULT_NOW;
 80019aa:	230a      	movs	r3, #10
 80019ac:	77e3      	strb	r3, [r4, #31]
}
 80019ae:	b003      	add	sp, #12
 80019b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80019b2:	0020      	movs	r0, r4
 80019b4:	f7ff fd26 	bl	8001404 <MCI_GetOccurredFaults>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d106      	bne.n	80019ca <TSK_MediumFrequencyTaskM1+0x4a>
      switch (Mci[M1].State)
 80019bc:	7fe3      	ldrb	r3, [r4, #31]
 80019be:	2b13      	cmp	r3, #19
 80019c0:	d8f5      	bhi.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
 80019c2:	4a9f      	ldr	r2, [pc, #636]	; (8001c40 <TSK_MediumFrequencyTaskM1+0x2c0>)
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	58d3      	ldr	r3, [r2, r3]
 80019c8:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 80019ca:	230b      	movs	r3, #11
 80019cc:	77e3      	strb	r3, [r4, #31]
 80019ce:	e7ee      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019d0:	7fa3      	ldrb	r3, [r4, #30]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d100      	bne.n	80019d8 <TSK_MediumFrequencyTaskM1+0x58>
 80019d6:	e0d3      	b.n	8001b80 <TSK_MediumFrequencyTaskM1+0x200>
            if (! RUC_Exec(&RevUpControlM1))
 80019d8:	489a      	ldr	r0, [pc, #616]	; (8001c44 <TSK_MediumFrequencyTaskM1+0x2c4>)
 80019da:	f004 f901 	bl	8005be0 <RUC_Exec>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d000      	beq.n	80019e4 <TSK_MediumFrequencyTaskM1+0x64>
 80019e2:	e0e8      	b.n	8001bb6 <TSK_MediumFrequencyTaskM1+0x236>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2110      	movs	r1, #16
 80019e8:	0020      	movs	r0, r4
 80019ea:	f7ff fcc5 	bl	8001378 <MCI_FaultProcessing>
 80019ee:	e7de      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019f0:	7fa3      	ldrb	r3, [r4, #30]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d100      	bne.n	80019f8 <TSK_MediumFrequencyTaskM1+0x78>
 80019f6:	e0c3      	b.n	8001b80 <TSK_MediumFrequencyTaskM1+0x200>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80019f8:	4d93      	ldr	r5, [pc, #588]	; (8001c48 <TSK_MediumFrequencyTaskM1+0x2c8>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	6828      	ldr	r0, [r5, #0]
 80019fe:	f000 fe01 	bl	8002604 <PWMC_CurrentReadingCalibr>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d0d3      	beq.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001a06:	7fa3      	ldrb	r3, [r4, #30]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d100      	bne.n	8001a0e <TSK_MediumFrequencyTaskM1+0x8e>
 8001a0c:	e109      	b.n	8001c22 <TSK_MediumFrequencyTaskM1+0x2a2>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001a0e:	6828      	ldr	r0, [r5, #0]
 8001a10:	2100      	movs	r1, #0
 8001a12:	f003 fd7b 	bl	800550c <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001a16:	2014      	movs	r0, #20
 8001a18:	f7ff ff96 	bl	8001948 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	77e3      	strb	r3, [r4, #31]
 8001a20:	e7c5      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a22:	7fa3      	ldrb	r3, [r4, #30]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d100      	bne.n	8001a2a <TSK_MediumFrequencyTaskM1+0xaa>
 8001a28:	e0aa      	b.n	8001b80 <TSK_MediumFrequencyTaskM1+0x200>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001a2a:	f7ff ff93 	bl	8001954 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	d0bd      	beq.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001a32:	4d85      	ldr	r5, [pc, #532]	; (8001c48 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001a34:	6828      	ldr	r0, [r5, #0]
 8001a36:	f003 fe0d 	bl	8005654 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001a3a:	2224      	movs	r2, #36	; 0x24
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001a40:	5499      	strb	r1, [r3, r2]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001a44:	4983      	ldr	r1, [pc, #524]	; (8001c54 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f004 f966 	bl	8005d18 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001a4c:	0038      	movs	r0, r7
 8001a4e:	f004 fc0f 	bl	8006270 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fe8c 	bl	8001770 <FOC_Clear>
                Mci[M1].State = START;
 8001a58:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001a5a:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001a5c:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001a5e:	f000 fdcd 	bl	80025fc <PWMC_SwitchOnPWM>
 8001a62:	e7a4      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001a64:	f7ff ff84 	bl	8001970 <TSK_StopPermanencyTimeHasElapsedM1>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d0a0      	beq.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001a6c:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001a6e:	4d79      	ldr	r5, [pc, #484]	; (8001c54 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	0029      	movs	r1, r5
 8001a74:	f004 f950 	bl	8005d18 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001a78:	0028      	movs	r0, r5
 8001a7a:	f004 fcf9 	bl	8006470 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	83e3      	strh	r3, [r4, #30]
 8001a82:	e794      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a84:	7fa3      	ldrb	r3, [r4, #30]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d07a      	beq.n	8001b80 <TSK_MediumFrequencyTaskM1+0x200>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f7ff fc7c 	bl	8001388 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff ff41 	bl	8001918 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d000      	beq.n	8001a9c <TSK_MediumFrequencyTaskM1+0x11c>
 8001a9a:	e788      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	0020      	movs	r0, r4
 8001aa2:	f7ff fc69 	bl	8001378 <MCI_FaultProcessing>
 8001aa6:	e782      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001aa8:	7fa3      	ldrb	r3, [r4, #30]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d068      	beq.n	8001b80 <TSK_MediumFrequencyTaskM1+0x200>
            if(! RUC_Exec(&RevUpControlM1))
 8001aae:	4d65      	ldr	r5, [pc, #404]	; (8001c44 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001ab0:	0028      	movs	r0, r5
 8001ab2:	f004 f895 	bl	8005be0 <RUC_Exec>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d173      	bne.n	8001ba2 <TSK_MediumFrequencyTaskM1+0x222>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2110      	movs	r1, #16
 8001abe:	0020      	movs	r0, r4
 8001ac0:	f7ff fc5a 	bl	8001378 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001ac4:	466b      	mov	r3, sp
 8001ac6:	4e63      	ldr	r6, [pc, #396]	; (8001c54 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001ac8:	1c99      	adds	r1, r3, #2
 8001aca:	0030      	movs	r0, r6
 8001acc:	f004 fd3a 	bl	8006544 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001ad0:	0028      	movs	r0, r5
 8001ad2:	f004 f8b9 	bl	8005c48 <RUC_FirstAccelerationStageReached>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d100      	bne.n	8001adc <TSK_MediumFrequencyTaskM1+0x15c>
 8001ada:	e768      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001adc:	466b      	mov	r3, sp
 8001ade:	0038      	movs	r0, r7
 8001ae0:	1c99      	adds	r1, r3, #2
 8001ae2:	f004 fc29 	bl	8006338 <STO_PLL_IsObserverConverged>
 8001ae6:	0005      	movs	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001ae8:	0020      	movs	r0, r4
 8001aea:	f7ff fcfb 	bl	80014e4 <MCI_GetImposedMotorDirection>
 8001aee:	b241      	sxtb	r1, r0
 8001af0:	0038      	movs	r0, r7
 8001af2:	f004 fcb9 	bl	8006468 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001af6:	0029      	movs	r1, r5
 8001af8:	0030      	movs	r0, r6
 8001afa:	f004 fdc1 	bl	8006680 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001afe:	2d00      	cmp	r5, #0
 8001b00:	d100      	bne.n	8001b04 <TSK_MediumFrequencyTaskM1+0x184>
 8001b02:	e754      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001b04:	0038      	movs	r0, r7
 8001b06:	f004 f8ad 	bl	8005c64 <SPD_GetElAngle>
 8001b0a:	4d50      	ldr	r5, [pc, #320]	; (8001c4c <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	6868      	ldr	r0, [r5, #4]
 8001b10:	f7ff fdc4 	bl	800169c <MCM_Park>
              REMNG_Init(pREMNG[M1]);
 8001b14:	4e50      	ldr	r6, [pc, #320]	; (8001c58 <TSK_MediumFrequencyTaskM1+0x2d8>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001b16:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001b18:	6830      	ldr	r0, [r6, #0]
 8001b1a:	f003 ff61 	bl	80059e0 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001b1e:	2310      	movs	r3, #16
 8001b20:	5ee9      	ldrsh	r1, [r5, r3]
 8001b22:	2200      	movs	r2, #0
 8001b24:	6830      	ldr	r0, [r6, #0]
 8001b26:	f003 ff9d 	bl	8005a64 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001b2a:	ab01      	add	r3, sp, #4
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5e59      	ldrsh	r1, [r3, r1]
 8001b30:	2219      	movs	r2, #25
 8001b32:	6830      	ldr	r0, [r6, #0]
 8001b34:	f003 ff96 	bl	8005a64 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001b38:	2313      	movs	r3, #19
 8001b3a:	77e3      	strb	r3, [r4, #31]
 8001b3c:	e737      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001b3e:	2302      	movs	r3, #2
 8001b40:	7fa5      	ldrb	r5, [r4, #30]
 8001b42:	439d      	bics	r5, r3
 8001b44:	2d01      	cmp	r5, #1
 8001b46:	d000      	beq.n	8001b4a <TSK_MediumFrequencyTaskM1+0x1ca>
 8001b48:	e731      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f7ff fcca 	bl	80014e4 <MCI_GetImposedMotorDirection>
 8001b50:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001b52:	0001      	movs	r1, r0
 8001b54:	0018      	movs	r0, r3
 8001b56:	f004 f805 	bl	8005b64 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001b5a:	2381      	movs	r3, #129	; 0x81
 8001b5c:	4e3a      	ldr	r6, [pc, #232]	; (8001c48 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001b5e:	6830      	ldr	r0, [r6, #0]
 8001b60:	5cc3      	ldrb	r3, [r0, r3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d156      	bne.n	8001c14 <TSK_MediumFrequencyTaskM1+0x294>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001b66:	2100      	movs	r1, #0
 8001b68:	f000 fd4c 	bl	8002604 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001b6c:	2311      	movs	r3, #17
 8001b6e:	77e3      	strb	r3, [r4, #31]
 8001b70:	e71d      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001b72:	7fa3      	ldrb	r3, [r4, #30]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d000      	beq.n	8001b7a <TSK_MediumFrequencyTaskM1+0x1fa>
 8001b78:	e719      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	83e3      	strh	r3, [r4, #30]
 8001b7e:	e716      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	f003 fd66 	bl	8005654 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fdf1 	bl	8001770 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001b8e:	6830      	ldr	r0, [r6, #0]
 8001b90:	f003 fa90 	bl	80050b4 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001b94:	20c8      	movs	r0, #200	; 0xc8
 8001b96:	0080      	lsls	r0, r0, #2
 8001b98:	f7ff fee4 	bl	8001964 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	77e3      	strb	r3, [r4, #31]
}
 8001ba0:	e705      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	f004 f917 	bl	8005dd8 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001bac:	2114      	movs	r1, #20
 8001bae:	5e5a      	ldrsh	r2, [r3, r1]
              FOCVars[M1].Iqdref = IqdRef;
 8001bb0:	8218      	strh	r0, [r3, #16]
 8001bb2:	825a      	strh	r2, [r3, #18]
 8001bb4:	e786      	b.n	8001ac4 <TSK_MediumFrequencyTaskM1+0x144>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001bb6:	4d27      	ldr	r5, [pc, #156]	; (8001c54 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001bb8:	a901      	add	r1, sp, #4
 8001bba:	0028      	movs	r0, r5
 8001bbc:	f004 fcc2 	bl	8006544 <VSS_CalcAvrgMecSpeedUnit>
 8001bc0:	0006      	movs	r6, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001bc2:	0028      	movs	r0, r5
 8001bc4:	f004 fd6c 	bl	80066a0 <VSS_TransitionEnded>
              if (true ==  LoopClosed)
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	d102      	bne.n	8001bd2 <TSK_MediumFrequencyTaskM1+0x252>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d100      	bne.n	8001bd2 <TSK_MediumFrequencyTaskM1+0x252>
 8001bd0:	e6ed      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001bd4:	4e21      	ldr	r6, [pc, #132]	; (8001c5c <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001bd6:	2510      	movs	r5, #16
 8001bd8:	5f5d      	ldrsh	r5, [r3, r5]
 8001bda:	0030      	movs	r0, r6
 8001bdc:	f003 fa04 	bl	8004fe8 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001be0:	0029      	movs	r1, r5
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001be2:	b200      	sxth	r0, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001be4:	4341      	muls	r1, r0
 8001be6:	0030      	movs	r0, r6
 8001be8:	f003 f9fc 	bl	8004fe4 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001bec:	4d18      	ldr	r5, [pc, #96]	; (8001c50 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001bee:	0039      	movs	r1, r7
 8001bf0:	6828      	ldr	r0, [r5, #0]
 8001bf2:	f004 f891 	bl	8005d18 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fe8c 	bl	8001914 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fe8b 	bl	8001918 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001c02:	6828      	ldr	r0, [r5, #0]
 8001c04:	f004 f91e 	bl	8005e44 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f7ff fbbd 	bl	8001388 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001c0e:	2306      	movs	r3, #6
 8001c10:	77e3      	strb	r3, [r4, #31]
 8001c12:	e6cc      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001c14:	2360      	movs	r3, #96	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001c16:	2101      	movs	r1, #1
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001c18:	52c5      	strh	r5, [r0, r3]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001c1a:	f000 fcf3 	bl	8002604 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001c1e:	6830      	ldr	r0, [r6, #0]
 8001c20:	e6f6      	b.n	8001a10 <TSK_MediumFrequencyTaskM1+0x90>
                FOC_Clear(M1);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff fda4 	bl	8001770 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001c28:	6830      	ldr	r0, [r6, #0]
 8001c2a:	f003 fa43 	bl	80050b4 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	83e3      	strh	r3, [r4, #30]
 8001c32:	e6bc      	b.n	80019ae <TSK_MediumFrequencyTaskM1+0x2e>
 8001c34:	20000200 	.word	0x20000200
 8001c38:	200003c0 	.word	0x200003c0
 8001c3c:	20000670 	.word	0x20000670
 8001c40:	08006ac8 	.word	0x08006ac8
 8001c44:	20000174 	.word	0x20000174
 8001c48:	200006e0 	.word	0x200006e0
 8001c4c:	200006ac 	.word	0x200006ac
 8001c50:	200003cc 	.word	0x200003cc
 8001c54:	20000388 	.word	0x20000388
 8001c58:	200006dc 	.word	0x200006dc
 8001c5c:	20000078 	.word	0x20000078

08001c60 <MC_Scheduler>:
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MC_Scheduler+0x80>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d000      	beq.n	8001c6c <MC_Scheduler+0xc>
}
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 8001c6c:	4c1d      	ldr	r4, [pc, #116]	; (8001ce4 <MC_Scheduler+0x84>)
 8001c6e:	8823      	ldrh	r3, [r4, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MC_Scheduler+0x88>)
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d003      	beq.n	8001c8a <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	3a01      	subs	r2, #1
 8001c86:	b292      	uxth	r2, r2
 8001c88:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MC_Scheduler+0x8c>)
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	d0eb      	beq.n	8001c6a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	3a01      	subs	r2, #1
 8001c96:	b292      	uxth	r2, r2
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	e7e6      	b.n	8001c6a <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 8001c9c:	f7ff fe70 	bl	8001980 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001ca0:	f7ff fb46 	bl	8001330 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001ca4:	4d12      	ldr	r5, [pc, #72]	; (8001cf0 <MC_Scheduler+0x90>)
 8001ca6:	0029      	movs	r1, r5
 8001ca8:	6828      	ldr	r0, [r5, #0]
 8001caa:	310c      	adds	r1, #12
 8001cac:	6883      	ldr	r3, [r0, #8]
 8001cae:	4798      	blx	r3
 8001cb0:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d007      	beq.n	8001cc6 <MC_Scheduler+0x66>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001cb6:	0029      	movs	r1, r5
 8001cb8:	6828      	ldr	r0, [r5, #0]
 8001cba:	220a      	movs	r2, #10
 8001cbc:	6803      	ldr	r3, [r0, #0]
 8001cbe:	3108      	adds	r1, #8
 8001cc0:	4798      	blx	r3
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d101      	bne.n	8001cca <MC_Scheduler+0x6a>
{
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e7d6      	b.n	8001c78 <MC_Scheduler+0x18>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001cca:	0028      	movs	r0, r5
 8001ccc:	f000 fa8e 	bl	80021ec <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001cd0:	6828      	ldr	r0, [r5, #0]
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	89ea      	ldrh	r2, [r5, #14]
 8001cd6:	68a9      	ldr	r1, [r5, #8]
 8001cd8:	6845      	ldr	r5, [r0, #4]
 8001cda:	47a8      	blx	r5
{
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e7cb      	b.n	8001c78 <MC_Scheduler+0x18>
 8001ce0:	200006d2 	.word	0x200006d2
 8001ce4:	200006d6 	.word	0x200006d6
 8001ce8:	200006d4 	.word	0x200006d4
 8001cec:	200006d8 	.word	0x200006d8
 8001cf0:	200003e8 	.word	0x200003e8

08001cf4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	46d6      	mov	lr, sl
 8001cf8:	464f      	mov	r7, r9
 8001cfa:	4646      	mov	r6, r8

  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001cfc:	4c57      	ldr	r4, [pc, #348]	; (8001e5c <TSK_HighFrequencyTask+0x168>)
{
 8001cfe:	b5c0      	push	{r6, r7, lr}
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001d00:	0021      	movs	r1, r4
{
 8001d02:	b088      	sub	sp, #32
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001d04:	2204      	movs	r2, #4
 8001d06:	311a      	adds	r1, #26
 8001d08:	a805      	add	r0, sp, #20
 8001d0a:	f004 fcf9 	bl	8006700 <memcpy>
  if (SWITCH_OVER == Mci[M1].State)
 8001d0e:	4f54      	ldr	r7, [pc, #336]	; (8001e60 <TSK_HighFrequencyTask+0x16c>)
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	2b13      	cmp	r3, #19
 8001d14:	d100      	bne.n	8001d18 <TSK_HighFrequencyTask+0x24>
 8001d16:	e094      	b.n	8001e42 <TSK_HighFrequencyTask+0x14e>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001d18:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <TSK_HighFrequencyTask+0x170>)
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	f003 fffe 	bl	8005d1c <STC_GetSpeedSensor>
 8001d20:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001d22:	f003 ff9f 	bl	8005c64 <SPD_GetElAngle>
 8001d26:	0005      	movs	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001d28:	0030      	movs	r0, r6
 8001d2a:	f003 ffa3 	bl	8005c74 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <TSK_HighFrequencyTask+0x174>)
 8001d30:	a902      	add	r1, sp, #8
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	4698      	mov	r8, r3
 8001d36:	f000 fb1f 	bl	8002378 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001d3a:	f001 fa47 	bl	80031cc <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001d3e:	9802      	ldr	r0, [sp, #8]
 8001d40:	f7ff fc32 	bl	80015a8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001d44:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001d46:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001d48:	f7ff fca8 	bl	800169c <MCM_Park>
 8001d4c:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001d4e:	2310      	movs	r3, #16
 8001d50:	5ee1      	ldrsh	r1, [r4, r3]
 8001d52:	b203      	sxth	r3, r0
 8001d54:	1ac9      	subs	r1, r1, r3
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <TSK_HighFrequencyTask+0x178>)
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	f003 f94d 	bl	8004ff8 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001d5e:	2312      	movs	r3, #18
 8001d60:	5ee1      	ldrsh	r1, [r4, r3]
 8001d62:	466b      	mov	r3, sp
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001d64:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001d66:	2202      	movs	r2, #2
 8001d68:	5e9b      	ldrsh	r3, [r3, r2]
 8001d6a:	1ac9      	subs	r1, r1, r3
 8001d6c:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <TSK_HighFrequencyTask+0x17c>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	f003 f942 	bl	8004ff8 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001d74:	464a      	mov	r2, r9
 8001d76:	ab01      	add	r3, sp, #4
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	8058      	strh	r0, [r3, #2]
 8001d7c:	9901      	ldr	r1, [sp, #4]
 8001d7e:	483d      	ldr	r0, [pc, #244]	; (8001e74 <TSK_HighFrequencyTask+0x180>)
 8001d80:	f003 f8be 	bl	8004f00 <Circle_Limitation>
 8001d84:	b203      	sxth	r3, r0
 8001d86:	469a      	mov	sl, r3
 8001d88:	9001      	str	r0, [sp, #4]
 8001d8a:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001d8c:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001d8e:	4699      	mov	r9, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001d90:	f003 ff70 	bl	8005c74 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001d94:	0029      	movs	r1, r5
 8001d96:	9801      	ldr	r0, [sp, #4]
 8001d98:	f7ff fcd0 	bl	800173c <MCM_Rev_Park>
 8001d9c:	9004      	str	r0, [sp, #16]
  RCM_ReadOngoingConv();
 8001d9e:	f001 fa4d 	bl	800323c <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001da2:	4643      	mov	r3, r8
 8001da4:	9904      	ldr	r1, [sp, #16]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f000 faea 	bl	8002380 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
 8001dac:	4653      	mov	r3, sl
 8001dae:	82e3      	strh	r3, [r4, #22]
 8001db0:	464b      	mov	r3, r9
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001db2:	0006      	movs	r6, r0
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001db4:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001db6:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001db8:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001dba:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 8001dbc:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001dbe:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001dc0:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001dc2:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001dc4:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001dc6:	a904      	add	r1, sp, #16
  FOCVars[M1].Iqd = Iqd;
 8001dc8:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001dca:	f004 fc99 	bl	8006700 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001dce:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001dd0:	2e01      	cmp	r6, #1
 8001dd2:	d030      	beq.n	8001e36 <TSK_HighFrequencyTask+0x142>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001dd4:	4828      	ldr	r0, [pc, #160]	; (8001e78 <TSK_HighFrequencyTask+0x184>)
 8001dd6:	f003 ff37 	bl	8005c48 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001dda:	6863      	ldr	r3, [r4, #4]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001ddc:	0005      	movs	r5, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001dde:	4827      	ldr	r0, [pc, #156]	; (8001e7c <TSK_HighFrequencyTask+0x188>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001de0:	9306      	str	r3, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001de2:	f003 f885 	bl	8004ef0 <VBS_GetAvBusVoltage_d>
 8001de6:	466b      	mov	r3, sp
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001de8:	4c25      	ldr	r4, [pc, #148]	; (8001e80 <TSK_HighFrequencyTask+0x18c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001dea:	8398      	strh	r0, [r3, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001dec:	a905      	add	r1, sp, #20
 8001dee:	0020      	movs	r0, r4
 8001df0:	f004 f830 	bl	8005e54 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8001df4:	0020      	movs	r0, r4
 8001df6:	f004 fa03 	bl	8006200 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	d00b      	beq.n	8001e16 <TSK_HighFrequencyTask+0x122>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d00e      	beq.n	8001e22 <TSK_HighFrequencyTask+0x12e>
 8001e04:	2b13      	cmp	r3, #19
 8001e06:	d00c      	beq.n	8001e22 <TSK_HighFrequencyTask+0x12e>
}
 8001e08:	2000      	movs	r0, #0
 8001e0a:	b008      	add	sp, #32
 8001e0c:	bce0      	pop	{r5, r6, r7}
 8001e0e:	46ba      	mov	sl, r7
 8001e10:	46b1      	mov	r9, r6
 8001e12:	46a8      	mov	r8, r5
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001e16:	0020      	movs	r0, r4
 8001e18:	f004 fb08 	bl	800642c <STO_ResetPLL>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d1f0      	bne.n	8001e04 <TSK_HighFrequencyTask+0x110>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001e22:	0020      	movs	r0, r4
 8001e24:	f003 ff1e 	bl	8005c64 <SPD_GetElAngle>
 8001e28:	466b      	mov	r3, sp
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001e2a:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001e2c:	8218      	strh	r0, [r3, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001e2e:	4815      	ldr	r0, [pc, #84]	; (8001e84 <TSK_HighFrequencyTask+0x190>)
 8001e30:	f004 fb30 	bl	8006494 <VSS_CalcElAngle>
 8001e34:	e7e8      	b.n	8001e08 <TSK_HighFrequencyTask+0x114>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2101      	movs	r1, #1
 8001e3a:	0038      	movs	r0, r7
 8001e3c:	f7ff fa9c 	bl	8001378 <MCI_FaultProcessing>
 8001e40:	e7e2      	b.n	8001e08 <TSK_HighFrequencyTask+0x114>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001e42:	4d11      	ldr	r5, [pc, #68]	; (8001e88 <TSK_HighFrequencyTask+0x194>)
 8001e44:	6828      	ldr	r0, [r5, #0]
 8001e46:	f003 fdf1 	bl	8005a2c <REMNG_RampCompleted>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d000      	beq.n	8001e50 <TSK_HighFrequencyTask+0x15c>
 8001e4e:	e763      	b.n	8001d18 <TSK_HighFrequencyTask+0x24>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001e50:	6828      	ldr	r0, [r5, #0]
 8001e52:	f003 fdcd 	bl	80059f0 <REMNG_Calc>
 8001e56:	8220      	strh	r0, [r4, #16]
 8001e58:	e75e      	b.n	8001d18 <TSK_HighFrequencyTask+0x24>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	200006ac 	.word	0x200006ac
 8001e60:	20000670 	.word	0x20000670
 8001e64:	200003cc 	.word	0x200003cc
 8001e68:	200006e0 	.word	0x200006e0
 8001e6c:	200003c8 	.word	0x200003c8
 8001e70:	200003c4 	.word	0x200003c4
 8001e74:	2000001c 	.word	0x2000001c
 8001e78:	20000174 	.word	0x20000174
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000200 	.word	0x20000200
 8001e84:	20000388 	.word	0x20000388
 8001e88:	200006dc 	.word	0x200006dc

08001e8c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	46c6      	mov	lr, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <TSK_SafetyTask_PWMOFF+0x70>)
 8001e92:	0087      	lsls	r7, r0, #2
{
 8001e94:	0005      	movs	r5, r0
 8001e96:	b500      	push	{lr}
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001e98:	59d8      	ldr	r0, [r3, r7]
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	f000 fbea 	bl	8002674 <PWMC_IsFaultOccurred>
 8001ea0:	0006      	movs	r6, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001ea2:	2d00      	cmp	r5, #0
 8001ea4:	d011      	beq.n	8001eca <TSK_SafetyTask_PWMOFF+0x3e>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001ea6:	43f2      	mvns	r2, r6
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <TSK_SafetyTask_PWMOFF+0x74>)
 8001eaa:	197c      	adds	r4, r7, r5
 8001eac:	00e4      	lsls	r4, r4, #3
 8001eae:	18e4      	adds	r4, r4, r3
 8001eb0:	0020      	movs	r0, r4
 8001eb2:	0031      	movs	r1, r6
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f7ff fa5f 	bl	8001378 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001eba:	0020      	movs	r0, r4
 8001ebc:	f7ff fb08 	bl	80014d0 <MCI_GetFaultState>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d10f      	bne.n	8001ee4 <TSK_SafetyTask_PWMOFF+0x58>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	46b8      	mov	r8, r7
 8001ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001eca:	480e      	ldr	r0, [pc, #56]	; (8001f04 <TSK_SafetyTask_PWMOFF+0x78>)
 8001ecc:	f001 f888 	bl	8002fe0 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <TSK_SafetyTask_PWMOFF+0x7c>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001ed2:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f003 fd4f 	bl	8005978 <RVBS_CalcAvVbus>
 8001eda:	2308      	movs	r3, #8
 8001edc:	4398      	bics	r0, r3
 8001ede:	4306      	orrs	r6, r0
 8001ee0:	b2b6      	uxth	r6, r6
 8001ee2:	e7e0      	b.n	8001ea6 <TSK_SafetyTask_PWMOFF+0x1a>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	59d8      	ldr	r0, [r3, r7]
 8001ee8:	f000 fb84 	bl	80025f4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001eec:	0028      	movs	r0, r5
 8001eee:	f7ff fc3f 	bl	8001770 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <TSK_SafetyTask_PWMOFF+0x80>)
 8001ef4:	59d8      	ldr	r0, [r3, r7]
 8001ef6:	f003 f8dd 	bl	80050b4 <PQD_Clear>
}
 8001efa:	e7e3      	b.n	8001ec4 <TSK_SafetyTask_PWMOFF+0x38>
 8001efc:	200006e0 	.word	0x200006e0
 8001f00:	20000670 	.word	0x20000670
 8001f04:	20000378 	.word	0x20000378
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	200003c0 	.word	0x200003c0

08001f10 <TSK_SafetyTask>:
{
 8001f10:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <TSK_SafetyTask+0x18>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d000      	beq.n	8001f1c <TSK_SafetyTask+0xc>
}
 8001f1a:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff ffb5 	bl	8001e8c <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 8001f22:	f001 f921 	bl	8003168 <RCM_ExecUserConv>
}
 8001f26:	e7f8      	b.n	8001f1a <TSK_SafetyTask+0xa>
 8001f28:	200006d2 	.word	0x200006d2

08001f2c <MC_RunMotorControlTasks>:
{
 8001f2c:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <MC_RunMotorControlTasks+0x18>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <MC_RunMotorControlTasks+0xc>
}
 8001f36:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001f38:	f7ff fe92 	bl	8001c60 <MC_Scheduler>
    TSK_SafetyTask();
 8001f3c:	f7ff ffe8 	bl	8001f10 <TSK_SafetyTask>
}
 8001f40:	e7f9      	b.n	8001f36 <MC_RunMotorControlTasks+0xa>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	200006d2 	.word	0x200006d2

08001f48 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001f48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <TSK_HardwareFaultTask+0x18>)
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	f003 fb81 	bl	8005654 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <TSK_HardwareFaultTask+0x1c>)
 8001f58:	f7ff fa0e 	bl	8001378 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	200006e0 	.word	0x200006e0
 8001f64:	20000670 	.word	0x20000670

08001f68 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001f68:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001f6a:	f7ff f9d5 	bl	8001318 <MC_GetSTMStateMotor1>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d102      	bne.n	8001f78 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 8001f72:	f7ff f9c1 	bl	80012f8 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001f76:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8001f78:	f7ff f9c6 	bl	8001308 <MC_StopMotor1>
}
 8001f7c:	e7fb      	b.n	8001f76 <UI_HandleStartStopButton_cb+0xe>
 8001f7e:	46c0      	nop			; (mov r8, r8)

08001f80 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f80:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f82:	2108      	movs	r1, #8
 8001f84:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f86:	4a33      	ldr	r2, [pc, #204]	; (8002054 <mc_lock_pins+0xd4>)
 8001f88:	05db      	lsls	r3, r3, #23
 8001f8a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f8c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f8e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f90:	69da      	ldr	r2, [r3, #28]

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 8001f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <mc_lock_pins+0xd8>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f9a:	3118      	adds	r1, #24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f9c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f9e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fa0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fa2:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fa4:	3910      	subs	r1, #16
  temp = READ_REG(GPIOx->LCKR);
 8001fa6:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 8001fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001faa:	4a2c      	ldr	r2, [pc, #176]	; (800205c <mc_lock_pins+0xdc>)
 8001fac:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fae:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fb0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fb2:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fb4:	492a      	ldr	r1, [pc, #168]	; (8002060 <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 8001fb6:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 8001fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fba:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <mc_lock_pins+0xe4>)
 8001fbc:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fbe:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fc0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fc2:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fc4:	30fe      	adds	r0, #254	; 0xfe
  temp = READ_REG(GPIOx->LCKR);
 8001fc6:	9108      	str	r1, [sp, #32]
  (void) temp;
 8001fc8:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <mc_lock_pins+0xe8>)
 8001fcc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fce:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fd0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fd2:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fd4:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 8001fd6:	9107      	str	r1, [sp, #28]
  (void) temp;
 8001fd8:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fda:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fdc:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fde:	0249      	lsls	r1, r1, #9
 8001fe0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fe2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fe4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fe6:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fe8:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001fea:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001fec:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fee:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ff0:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ff2:	0249      	lsls	r1, r1, #9
 8001ff4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ff6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ff8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ffa:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ffc:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001ffe:	9105      	str	r1, [sp, #20]
  (void) temp;
 8002000:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002002:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002004:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002006:	0249      	lsls	r1, r1, #9
 8002008:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800200a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800200c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800200e:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002010:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002012:	9104      	str	r1, [sp, #16]
  (void) temp;
 8002014:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002016:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002018:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800201a:	0249      	lsls	r1, r1, #9
 800201c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800201e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002020:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002022:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002024:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002026:	9303      	str	r3, [sp, #12]
  (void) temp;
 8002028:	9b03      	ldr	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800202a:	23c0      	movs	r3, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 800202c:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002032:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002034:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002036:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002038:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 800203a:	9302      	str	r3, [sp, #8]
  (void) temp;
 800203c:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800203e:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002040:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002046:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002048:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800204a:	69d3      	ldr	r3, [r2, #28]
 800204c:	9301      	str	r3, [sp, #4]
  (void) temp;
 800204e:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002050:	b00c      	add	sp, #48	; 0x30
 8002052:	4770      	bx	lr
 8002054:	00010008 	.word	0x00010008
 8002058:	00010020 	.word	0x00010020
 800205c:	00010010 	.word	0x00010010
 8002060:	00010002 	.word	0x00010002
 8002064:	48000400 	.word	0x48000400
 8002068:	00010100 	.word	0x00010100

0800206c <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	4657      	mov	r7, sl
 8002070:	4645      	mov	r5, r8
 8002072:	464e      	mov	r6, r9
 8002074:	46de      	mov	lr, fp
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002076:	0002      	movs	r2, r0
{
 8002078:	4680      	mov	r8, r0
 800207a:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * rxData = pHandle->rxBuffer;
 800207c:	6843      	ldr	r3, [r0, #4]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800207e:	4833      	ldr	r0, [pc, #204]	; (800214c <RI_SetRegCommandParser+0xe0>)
{
 8002080:	b089      	sub	sp, #36	; 0x24
    int16_t rxLength = pHandle->rxLength;
 8002082:	240c      	movs	r4, #12
 8002084:	5f14      	ldrsh	r4, [r2, r4]
    uint16_t size = 0U;
 8002086:	aa02      	add	r2, sp, #8
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002088:	9006      	str	r0, [sp, #24]
 800208a:	4831      	ldr	r0, [pc, #196]	; (8002150 <RI_SetRegCommandParser+0xe4>)
    uint16_t size = 0U;
 800208c:	4694      	mov	ip, r2
 800208e:	260e      	movs	r6, #14
 8002090:	2200      	movs	r2, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002092:	9007      	str	r0, [sp, #28]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002094:	4640      	mov	r0, r8
    uint16_t size = 0U;
 8002096:	4466      	add	r6, ip
 8002098:	8032      	strh	r2, [r6, #0]
    pHandle->txLength = 0;
 800209a:	81c2      	strh	r2, [r0, #14]
    uint8_t * txData = pHandle->txBuffer;
 800209c:	6882      	ldr	r2, [r0, #8]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800209e:	af06      	add	r7, sp, #24
    uint8_t * txData = pHandle->txBuffer;
 80020a0:	4692      	mov	sl, r2
  uint8_t retVal = MCP_CMD_OK;
 80020a2:	2200      	movs	r2, #0
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 80020a4:	4451      	add	r1, sl
  uint8_t retVal = MCP_CMD_OK;
 80020a6:	9203      	str	r2, [sp, #12]
          if (txSyncFreeSpace !=0 )
 80020a8:	b28a      	uxth	r2, r1
    uint8_t number_of_item =0;
 80020aa:	2500      	movs	r5, #0
          if (txSyncFreeSpace !=0 )
 80020ac:	9202      	str	r2, [sp, #8]
    while (rxLength > 0)
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	dd32      	ble.n	8002118 <RI_SetRegCommandParser+0xac>
      if (motorID > NBR_OF_MOTORS)
 80020b2:	2106      	movs	r1, #6
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80020b4:	781a      	ldrb	r2, [r3, #0]
      regID = *dataElementID & REG_MASK;
 80020b6:	8818      	ldrh	r0, [r3, #0]
      if (motorID > NBR_OF_MOTORS)
 80020b8:	4211      	tst	r1, r2
 80020ba:	d131      	bne.n	8002120 <RI_SetRegCommandParser+0xb4>
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80020bc:	1ea1      	subs	r1, r4, #2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80020be:	3302      	adds	r3, #2
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80020c0:	468c      	mov	ip, r1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80020c2:	4699      	mov	r9, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80020c4:	b28c      	uxth	r4, r1
      regID = *dataElementID & REG_MASK;
 80020c6:	2307      	movs	r3, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80020c8:	2138      	movs	r1, #56	; 0x38
 80020ca:	4398      	bics	r0, r3
 80020cc:	4011      	ands	r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	4662      	mov	r2, ip
 80020d2:	b212      	sxth	r2, r2
 80020d4:	9200      	str	r2, [sp, #0]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	58fb      	ldr	r3, [r7, r3]
 80020da:	464a      	mov	r2, r9
 80020dc:	469b      	mov	fp, r3
 80020de:	0033      	movs	r3, r6
 80020e0:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 80020e2:	8833      	ldrh	r3, [r6, #0]
      number_of_item ++;
 80020e4:	3501      	adds	r5, #1
        rxLength = (int16_t) (rxLength - size);
 80020e6:	1ae4      	subs	r4, r4, r3
      number_of_item ++;
 80020e8:	b2ed      	uxtb	r5, r5
        rxLength = (int16_t) (rxLength - size);
 80020ea:	b224      	sxth	r4, r4
        if ((1U == number_of_item) && (0 == rxLength))
 80020ec:	2d01      	cmp	r5, #1
 80020ee:	d021      	beq.n	8002134 <RI_SetRegCommandParser+0xc8>
          if (txSyncFreeSpace !=0 )
 80020f0:	4652      	mov	r2, sl
 80020f2:	9902      	ldr	r1, [sp, #8]
 80020f4:	b292      	uxth	r2, r2
 80020f6:	428a      	cmp	r2, r1
 80020f8:	d01a      	beq.n	8002130 <RI_SetRegCommandParser+0xc4>
          {
            *txData = accessResult;
 80020fa:	4652      	mov	r2, sl
 80020fc:	7010      	strb	r0, [r2, #0]
            txData = txData+1;
            pHandle->txLength++;
 80020fe:	4642      	mov	r2, r8
 8002100:	4641      	mov	r1, r8
 8002102:	89d2      	ldrh	r2, [r2, #14]
 8002104:	3201      	adds	r2, #1
 8002106:	81ca      	strh	r2, [r1, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002108:	2800      	cmp	r0, #0
 800210a:	d107      	bne.n	800211c <RI_SetRegCommandParser+0xb0>
            txData = txData+1;
 800210c:	2201      	movs	r2, #1
 800210e:	4694      	mov	ip, r2
        rxData = rxData+size;
 8002110:	444b      	add	r3, r9
            txData = txData+1;
 8002112:	44e2      	add	sl, ip
    while (rxLength > 0)
 8002114:	2c00      	cmp	r4, #0
 8002116:	dccc      	bgt.n	80020b2 <RI_SetRegCommandParser+0x46>
 8002118:	9803      	ldr	r0, [sp, #12]
 800211a:	e00d      	b.n	8002138 <RI_SetRegCommandParser+0xcc>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800211c:	2807      	cmp	r0, #7
 800211e:	d110      	bne.n	8002142 <RI_SetRegCommandParser+0xd6>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002120:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002122:	b009      	add	sp, #36	; 0x24
 8002124:	bcf0      	pop	{r4, r5, r6, r7}
 8002126:	46bb      	mov	fp, r7
 8002128:	46b2      	mov	sl, r6
 800212a:	46a9      	mov	r9, r5
 800212c:	46a0      	mov	r8, r4
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002130:	2008      	movs	r0, #8
 8002132:	e7f6      	b.n	8002122 <RI_SetRegCommandParser+0xb6>
        if ((1U == number_of_item) && (0 == rxLength))
 8002134:	2c00      	cmp	r4, #0
 8002136:	d1db      	bne.n	80020f0 <RI_SetRegCommandParser+0x84>
    if (MCP_CMD_OK == retVal)
 8002138:	2800      	cmp	r0, #0
 800213a:	d1f2      	bne.n	8002122 <RI_SetRegCommandParser+0xb6>
      pHandle->txLength = 0;
 800213c:	4643      	mov	r3, r8
 800213e:	81d8      	strh	r0, [r3, #14]
 8002140:	e7ef      	b.n	8002122 <RI_SetRegCommandParser+0xb6>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002142:	280a      	cmp	r0, #10
 8002144:	d0ec      	beq.n	8002120 <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002146:	2201      	movs	r2, #1
 8002148:	9203      	str	r2, [sp, #12]
 800214a:	e7df      	b.n	800210c <RI_SetRegCommandParser+0xa0>
 800214c:	080026b5 	.word	0x080026b5
 8002150:	08002761 	.word	0x08002761

08002154 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	464e      	mov	r6, r9
 8002158:	4657      	mov	r7, sl
 800215a:	4645      	mov	r5, r8
 800215c:	46de      	mov	lr, fp
 800215e:	b5e0      	push	{r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002160:	6883      	ldr	r3, [r0, #8]
{
 8002162:	b087      	sub	sp, #28
    uint16_t size = 0U;
 8002164:	2200      	movs	r2, #0
    uint8_t * txData = pHandle->txBuffer;
 8002166:	4699      	mov	r9, r3
    uint16_t size = 0U;
 8002168:	466b      	mov	r3, sp
    uint16_t rxLength = pHandle->rxLength;
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 800216a:	b20d      	sxth	r5, r1

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800216c:	491d      	ldr	r1, [pc, #116]	; (80021e4 <RI_GetRegCommandParser+0x90>)
    uint16_t size = 0U;
 800216e:	81da      	strh	r2, [r3, #14]
    uint16_t rxLength = pHandle->rxLength;
 8002170:	8983      	ldrh	r3, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002172:	9104      	str	r1, [sp, #16]
 8002174:	491c      	ldr	r1, [pc, #112]	; (80021e8 <RI_GetRegCommandParser+0x94>)
 8002176:	ae04      	add	r6, sp, #16
{
 8002178:	0007      	movs	r7, r0
    uint8_t * rxData = pHandle->rxBuffer;
 800217a:	6844      	ldr	r4, [r0, #4]
    pHandle->txLength = 0;
 800217c:	81c2      	strh	r2, [r0, #14]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800217e:	6071      	str	r1, [r6, #4]
    while (rxLength > 0U)
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01f      	beq.n	80021c4 <RI_GetRegCommandParser+0x70>
 8002184:	18e3      	adds	r3, r4, r3
      regID = *dataElementID & REG_MASK;
      typeID = (uint8_t)*dataElementID & TYPE_MASK;

      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));

      if (motorID > NBR_OF_MOTORS)
 8002186:	3206      	adds	r2, #6
    while (rxLength > 0U)
 8002188:	b29b      	uxth	r3, r3
      if (motorID > NBR_OF_MOTORS)
 800218a:	4690      	mov	r8, r2
    while (rxLength > 0U)
 800218c:	469a      	mov	sl, r3
      if (motorID > NBR_OF_MOTORS)
 800218e:	4643      	mov	r3, r8
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002190:	7822      	ldrb	r2, [r4, #0]
      regID = *dataElementID & REG_MASK;
 8002192:	8820      	ldrh	r0, [r4, #0]
      if (motorID > NBR_OF_MOTORS)
 8002194:	4213      	tst	r3, r2
 8002196:	d115      	bne.n	80021c4 <RI_GetRegCommandParser+0x70>
      regID = *dataElementID & REG_MASK;
 8002198:	2307      	movs	r3, #7
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800219a:	4398      	bics	r0, r3
 800219c:	4013      	ands	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	9500      	str	r5, [sp, #0]
 80021a2:	58f3      	ldr	r3, [r6, r3]
 80021a4:	2138      	movs	r1, #56	; 0x38
 80021a6:	469b      	mov	fp, r3
 80021a8:	230e      	movs	r3, #14
 80021aa:	4011      	ands	r1, r2
 80021ac:	446b      	add	r3, sp
 80021ae:	464a      	mov	r2, r9
 80021b0:	47d8      	blx	fp
        if (retVal == MCP_CMD_OK )
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d008      	beq.n	80021c8 <RI_GetRegCommandParser+0x74>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80021b6:	b007      	add	sp, #28
 80021b8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ba:	46bb      	mov	fp, r7
 80021bc:	46b2      	mov	sl, r6
 80021be:	46a9      	mov	r9, r5
 80021c0:	46a0      	mov	r8, r4
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t retVal = MCP_CMD_NOK;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e7f6      	b.n	80021b6 <RI_GetRegCommandParser+0x62>
          txData = txData+size;
 80021c8:	466b      	mov	r3, sp
          pHandle->txLength += size;
 80021ca:	89fa      	ldrh	r2, [r7, #14]
          txData = txData+size;
 80021cc:	89db      	ldrh	r3, [r3, #14]
    while (rxLength > 0U)
 80021ce:	3402      	adds	r4, #2
          pHandle->txLength += size;
 80021d0:	189a      	adds	r2, r3, r2
          freeSpaceS16 = freeSpaceS16-size;
 80021d2:	1aed      	subs	r5, r5, r3
          txData = txData+size;
 80021d4:	4499      	add	r9, r3
    while (rxLength > 0U)
 80021d6:	b2a3      	uxth	r3, r4
          pHandle->txLength += size;
 80021d8:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80021da:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 80021dc:	459a      	cmp	sl, r3
 80021de:	d1d6      	bne.n	800218e <RI_GetRegCommandParser+0x3a>
 80021e0:	e7e9      	b.n	80021b6 <RI_GetRegCommandParser+0x62>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	08002a19 	.word	0x08002a19
 80021e8:	08002ac5 	.word	0x08002ac5

080021ec <MCP_ReceivedPacket>:
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80021ec:	6841      	ldr	r1, [r0, #4]
{
 80021ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80021f0:	880a      	ldrh	r2, [r1, #0]
{
 80021f2:	0004      	movs	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80021f4:	0013      	movs	r3, r2
 80021f6:	2007      	movs	r0, #7

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80021f8:	2680      	movs	r6, #128	; 0x80
 80021fa:	25ff      	movs	r5, #255	; 0xff
 80021fc:	0017      	movs	r7, r2
{
 80021fe:	b083      	sub	sp, #12
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002200:	4383      	bics	r3, r0
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002202:	0076      	lsls	r6, r6, #1
 8002204:	43af      	bics	r7, r5
 8002206:	42b7      	cmp	r7, r6
 8002208:	d02f      	beq.n	800226a <MCP_ReceivedPacket+0x7e>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800220a:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 800220c:	4010      	ands	r0, r2
 800220e:	0082      	lsls	r2, r0, #2
 8002210:	1812      	adds	r2, r2, r0

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002212:	89a0      	ldrh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002214:	4d48      	ldr	r5, [pc, #288]	; (8002338 <MCP_ReceivedPacket+0x14c>)
 8002216:	00d2      	lsls	r2, r2, #3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002218:	3802      	subs	r0, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 800221a:	1955      	adds	r5, r2, r5
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800221c:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800221e:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002220:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002222:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002224:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002226:	8992      	ldrh	r2, [r2, #12]
 8002228:	3a01      	subs	r2, #1
 800222a:	b297      	uxth	r7, r2
 800222c:	46bc      	mov	ip, r7

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 800222e:	2700      	movs	r7, #0
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002230:	b212      	sxth	r2, r2
    pHandle->txLength = 0U;
 8002232:	81e7      	strh	r7, [r4, #14]

    switch (command)
 8002234:	2b38      	cmp	r3, #56	; 0x38
 8002236:	d80c      	bhi.n	8002252 <MCP_ReceivedPacket+0x66>
 8002238:	4a40      	ldr	r2, [pc, #256]	; (800233c <MCP_ReceivedPacket+0x150>)
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	58d3      	ldr	r3, [r2, r3]
 800223e:	469f      	mov	pc, r3
 8002240:	2300      	movs	r3, #0
 8002242:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002244:	68a2      	ldr	r2, [r4, #8]
 8002246:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002248:	89e3      	ldrh	r3, [r4, #14]
 800224a:	3301      	adds	r3, #1
 800224c:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800224e:	b003      	add	sp, #12
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8002252:	2b68      	cmp	r3, #104	; 0x68
 8002254:	d05d      	beq.n	8002312 <MCP_ReceivedPacket+0x126>
 8002256:	42b3      	cmp	r3, r6
 8002258:	d06b      	beq.n	8002332 <MCP_ReceivedPacket+0x146>
 800225a:	2b48      	cmp	r3, #72	; 0x48
 800225c:	d1f0      	bne.n	8002240 <MCP_ReceivedPacket+0x54>
        MCI_Clear_Iqdref(pMCI);
 800225e:	0028      	movs	r0, r5
 8002260:	f7ff f99a 	bl	8001598 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8002264:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002266:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002268:	e7ec      	b.n	8002244 <MCP_ReceivedPacket+0x58>
    pHandle->txLength = 0U;
 800226a:	2500      	movs	r5, #0
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800226c:	89a0      	ldrh	r0, [r4, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800226e:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002270:	3802      	subs	r0, #2
 8002272:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002274:	3102      	adds	r1, #2
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002276:	b2db      	uxtb	r3, r3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002278:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800227a:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800227c:	8992      	ldrh	r2, [r2, #12]
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 800227e:	08de      	lsrs	r6, r3, #3
    pHandle->txLength = 0U;
 8002280:	81e5      	strh	r5, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d937      	bls.n	80022f6 <MCP_ReceivedPacket+0x10a>
        MCPResponse = MCP_CMD_OK;
 8002286:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002288:	200d      	movs	r0, #13
 800228a:	e7db      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        if (IDLE == MCI_GetSTMState(pMCI))
 800228c:	0028      	movs	r0, r5
 800228e:	f7ff f8b7 	bl	8001400 <MCI_GetSTMState>
 8002292:	2800      	cmp	r0, #0
 8002294:	d045      	beq.n	8002322 <MCP_ReceivedPacket+0x136>
          (void)MCI_StopMotor(pMCI);
 8002296:	0028      	movs	r0, r5
 8002298:	f7ff f8ea 	bl	8001470 <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 800229c:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800229e:	89e3      	ldrh	r3, [r4, #14]
 80022a0:	e7d0      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        if (RUN == MCI_GetSTMState(pMCI))
 80022a2:	0028      	movs	r0, r5
 80022a4:	f7ff f8ac 	bl	8001400 <MCI_GetSTMState>
 80022a8:	2806      	cmp	r0, #6
 80022aa:	d1f7      	bne.n	800229c <MCP_ReceivedPacket+0xb0>
          MCI_StopRamp(pMCI);
 80022ac:	0028      	movs	r0, r5
 80022ae:	f7ff f93b 	bl	8001528 <MCI_StopRamp>
        MCPResponse = MCP_CMD_OK;
 80022b2:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80022b4:	89e3      	ldrh	r3, [r4, #14]
 80022b6:	e7c5      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        (void)MCI_FaultAcknowledged(pMCI);
 80022b8:	0028      	movs	r0, r5
 80022ba:	f7ff f8f7 	bl	80014ac <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 80022be:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80022c0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80022c2:	e7bf      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        pHandle->txLength = 4U;
 80022c4:	2304      	movs	r3, #4
        *pHandle->txBuffer = MCP_VERSION;
 80022c6:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80022c8:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80022ca:	68a3      	ldr	r3, [r4, #8]
        MCPResponse = MCP_CMD_OK;
 80022cc:	2000      	movs	r0, #0
        *pHandle->txBuffer = MCP_VERSION;
 80022ce:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80022d0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80022d2:	e7b7      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80022d4:	4661      	mov	r1, ip
 80022d6:	0020      	movs	r0, r4
 80022d8:	f7ff fec8 	bl	800206c <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80022dc:	89e3      	ldrh	r3, [r4, #14]
        break;
 80022de:	e7b1      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80022e0:	4661      	mov	r1, ip
 80022e2:	0020      	movs	r0, r4
 80022e4:	f7ff ff36 	bl	8002154 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80022e8:	89e3      	ldrh	r3, [r4, #14]
        break;
 80022ea:	e7ab      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 80022ec:	0028      	movs	r0, r5
 80022ee:	f7ff f8a5 	bl	800143c <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80022f2:	89e3      	ldrh	r3, [r4, #14]
 80022f4:	e7a6      	b.n	8002244 <MCP_ReceivedPacket+0x58>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80022f6:	3a01      	subs	r2, #1
 80022f8:	b212      	sxth	r2, r2
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MCP_ReceivedPacket+0x154>)
 80022fc:	00b6      	lsls	r6, r6, #2
 80022fe:	58f5      	ldr	r5, [r6, r3]
 8002300:	2d00      	cmp	r5, #0
 8002302:	d0c0      	beq.n	8002286 <MCP_ReceivedPacket+0x9a>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002304:	68a3      	ldr	r3, [r4, #8]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	0023      	movs	r3, r4
 800230a:	330e      	adds	r3, #14
 800230c:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800230e:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002310:	e798      	b.n	8002244 <MCP_ReceivedPacket+0x58>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8002312:	68a3      	ldr	r3, [r4, #8]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	0023      	movs	r3, r4
 8002318:	330e      	adds	r3, #14
 800231a:	f7ff f805 	bl	8001328 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800231e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002320:	e790      	b.n	8002244 <MCP_ReceivedPacket+0x58>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002322:	0028      	movs	r0, r5
 8002324:	f7ff f88a 	bl	800143c <MCI_StartWithPolarizationMotor>
 8002328:	2301      	movs	r3, #1
 800232a:	4058      	eors	r0, r3
 800232c:	b2c0      	uxtb	r0, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800232e:	89e3      	ldrh	r3, [r4, #14]
 8002330:	e788      	b.n	8002244 <MCP_ReceivedPacket+0x58>
    switch (command)
 8002332:	2600      	movs	r6, #0
 8002334:	e7e1      	b.n	80022fa <MCP_ReceivedPacket+0x10e>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000670 	.word	0x20000670
 800233c:	08006b18 	.word	0x08006b18
 8002340:	200007f0 	.word	0x200007f0

08002344 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002344:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002346:	f002 f8b5 	bl	80044b4 <HAL_RCC_GetHCLKFreq>
 800234a:	21fa      	movs	r1, #250	; 0xfa
 800234c:	00c9      	lsls	r1, r1, #3
 800234e:	f7fd fedb 	bl	8000108 <__udivsi3>
 8002352:	f001 fc23 	bl	8003b9c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002356:	2001      	movs	r0, #1
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <MX_MotorControl_Init+0x2c>)
 800235a:	2200      	movs	r2, #0
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	4240      	negs	r0, r0
 8002360:	f001 fbde 	bl	8003b20 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_MotorControl_Init+0x30>)
 8002366:	f7ff fa35 	bl	80017d4 <MCboot>
  mc_lock_pins();
 800236a:	f7ff fe09 	bl	8001f80 <mc_lock_pins>
}
 800236e:	bd10      	pop	{r4, pc}
 8002370:	20000474 	.word	0x20000474
 8002374:	200007f8 	.word	0x200007f8

08002378 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8002378:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800237a:	6803      	ldr	r3, [r0, #0]
 800237c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 800237e:	bd10      	pop	{r4, pc}

08002380 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b083      	sub	sp, #12
 8002384:	9101      	str	r1, [sp, #4]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002386:	b20a      	sxth	r2, r1
{
 8002388:	000b      	movs	r3, r1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800238a:	214e      	movs	r1, #78	; 0x4e
 800238c:	5a41      	ldrh	r1, [r0, r1]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800238e:	141b      	asrs	r3, r3, #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002390:	4351      	muls	r1, r2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002392:	2272      	movs	r2, #114	; 0x72
 8002394:	5a85      	ldrh	r5, [r0, r2]
 8002396:	436b      	muls	r3, r5
 8002398:	005b      	lsls	r3, r3, #1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800239a:	1acf      	subs	r7, r1, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800239c:	425e      	negs	r6, r3
    wY = (wUBeta + wUAlpha) / 2;
 800239e:	0ffc      	lsrs	r4, r7, #31
 80023a0:	19e4      	adds	r4, r4, r7
    wZ = (wUBeta - wUAlpha) / 2;
 80023a2:	1a71      	subs	r1, r6, r1
    wY = (wUBeta + wUAlpha) / 2;
 80023a4:	1063      	asrs	r3, r4, #1
    wZ = (wUBeta - wUAlpha) / 2;
 80023a6:	0fcc      	lsrs	r4, r1, #31
 80023a8:	1864      	adds	r4, r4, r1
 80023aa:	1064      	asrs	r4, r4, #1

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80023ac:	1c7a      	adds	r2, r7, #1
 80023ae:	db66      	blt.n	800247e <PWMC_SetPhaseVoltage+0xfe>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80023b0:	1c4a      	adds	r2, r1, #1
 80023b2:	db3e      	blt.n	8002432 <PWMC_SetPhaseVoltage+0xb2>
      {
        pHandle->Sector = SECTOR_2;
 80023b4:	227c      	movs	r2, #124	; 0x7c
 80023b6:	2601      	movs	r6, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023b8:	1b1c      	subs	r4, r3, r4
 80023ba:	17e3      	asrs	r3, r4, #31
 80023bc:	039b      	lsls	r3, r3, #14
 80023be:	0b9b      	lsrs	r3, r3, #14
 80023c0:	191b      	adds	r3, r3, r4
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);

        if(true == pHandle->SingleShuntTopology)
 80023c2:	2487      	movs	r4, #135	; 0x87
        pHandle->Sector = SECTOR_2;
 80023c4:	5486      	strb	r6, [r0, r2]
        wTimePhB = wTimePhA + (wZ / 131072);
 80023c6:	17ca      	asrs	r2, r1, #31
 80023c8:	0392      	lsls	r2, r2, #14
 80023ca:	0b92      	lsrs	r2, r2, #14
 80023cc:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072);
 80023ce:	17f9      	asrs	r1, r7, #31
 80023d0:	0389      	lsls	r1, r1, #14
 80023d2:	0b89      	lsrs	r1, r1, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023d4:	149b      	asrs	r3, r3, #18
 80023d6:	08ad      	lsrs	r5, r5, #2
        wTimePhC = wTimePhA - (wY / 131072);
 80023d8:	19c9      	adds	r1, r1, r7
        if(true == pHandle->SingleShuntTopology)
 80023da:	5d04      	ldrb	r4, [r0, r4]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80023dc:	195b      	adds	r3, r3, r5
        wTimePhB = wTimePhA + (wZ / 131072);
 80023de:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072);
 80023e0:	1489      	asrs	r1, r1, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 80023e2:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhA - (wY / 131072);
 80023e4:	1a59      	subs	r1, r3, r1
        if(true == pHandle->SingleShuntTopology)
 80023e6:	2c00      	cmp	r4, #0
 80023e8:	d169      	bne.n	80024be <PWMC_SetPhaseVoltage+0x13e>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80023ea:	b297      	uxth	r7, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 80023ec:	b29e      	uxth	r6, r3
        pHandle->highDuty = (uint16_t)wTimePhC;
 80023ee:	b28d      	uxth	r5, r1
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80023f0:	2458      	movs	r4, #88	; 0x58
 80023f2:	5307      	strh	r7, [r0, r4]
          pHandle->midDuty = (uint16_t)wTimePhB;
 80023f4:	3402      	adds	r4, #2
 80023f6:	5306      	strh	r6, [r0, r4]
          pHandle->highDuty = (uint16_t)wTimePhA;
 80023f8:	3402      	adds	r4, #2
 80023fa:	5305      	strh	r5, [r0, r4]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80023fc:	43dc      	mvns	r4, r3
 80023fe:	17e4      	asrs	r4, r4, #31
 8002400:	4023      	ands	r3, r4
 8002402:	2450      	movs	r4, #80	; 0x50
 8002404:	b29b      	uxth	r3, r3
 8002406:	5303      	strh	r3, [r0, r4]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002408:	43d4      	mvns	r4, r2
 800240a:	17e4      	asrs	r4, r4, #31
 800240c:	4022      	ands	r2, r4
 800240e:	2452      	movs	r4, #82	; 0x52
 8002410:	b292      	uxth	r2, r2
 8002412:	5302      	strh	r2, [r0, r4]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002414:	43cc      	mvns	r4, r1
 8002416:	17e4      	asrs	r4, r4, #31
 8002418:	4021      	ands	r1, r4
 800241a:	2454      	movs	r4, #84	; 0x54
 800241c:	b289      	uxth	r1, r1
 800241e:	5301      	strh	r1, [r0, r4]

    if (1U == pHandle->DTTest)
 8002420:	341c      	adds	r4, #28
 8002422:	5b04      	ldrh	r4, [r0, r4]
 8002424:	2c01      	cmp	r4, #1
 8002426:	d100      	bne.n	800242a <PWMC_SetPhaseVoltage+0xaa>
 8002428:	e08b      	b.n	8002542 <PWMC_SetPhaseVoltage+0x1c2>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800242a:	6943      	ldr	r3, [r0, #20]
 800242c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800242e:	b003      	add	sp, #12
 8002430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 8002432:	2e00      	cmp	r6, #0
 8002434:	dd66      	ble.n	8002504 <PWMC_SetPhaseVoltage+0x184>
          pHandle->Sector = SECTOR_1;
 8002436:	237c      	movs	r3, #124	; 0x7c
 8002438:	2200      	movs	r2, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800243a:	1b34      	subs	r4, r6, r4
          pHandle->Sector = SECTOR_1;
 800243c:	54c2      	strb	r2, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800243e:	17e3      	asrs	r3, r4, #31
 8002440:	039b      	lsls	r3, r3, #14
 8002442:	0b9b      	lsrs	r3, r3, #14
 8002444:	191b      	adds	r3, r3, r4
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002446:	247f      	movs	r4, #127	; 0x7f
          wTimePhB = wTimePhA + (wZ / 131072);
 8002448:	17ca      	asrs	r2, r1, #31
 800244a:	0392      	lsls	r2, r2, #14
 800244c:	0b92      	lsrs	r2, r2, #14
 800244e:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 8002450:	17f1      	asrs	r1, r6, #31
 8002452:	03c9      	lsls	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002454:	149b      	asrs	r3, r3, #18
 8002456:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002458:	0bc9      	lsrs	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800245a:	195b      	adds	r3, r3, r5
          wTimePhB = wTimePhA + (wZ / 131072);
 800245c:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 800245e:	1989      	adds	r1, r1, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002460:	5d04      	ldrb	r4, [r0, r4]
          wTimePhB = wTimePhA + (wZ / 131072);
 8002462:	18d2      	adds	r2, r2, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8002464:	1449      	asrs	r1, r1, #17
 8002466:	1a51      	subs	r1, r2, r1
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002468:	2c00      	cmp	r4, #0
 800246a:	d104      	bne.n	8002476 <PWMC_SetPhaseVoltage+0xf6>
 800246c:	3487      	adds	r4, #135	; 0x87
 800246e:	5d04      	ldrb	r4, [r0, r4]
 8002470:	2c00      	cmp	r4, #0
 8002472:	d100      	bne.n	8002476 <PWMC_SetPhaseVoltage+0xf6>
 8002474:	e0ba      	b.n	80025ec <PWMC_SetPhaseVoltage+0x26c>
 8002476:	2702      	movs	r7, #2
 8002478:	2601      	movs	r6, #1
 800247a:	2500      	movs	r5, #0
 800247c:	e7b8      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
      if (wZ < 0)
 800247e:	1c4a      	adds	r2, r1, #1
 8002480:	db79      	blt.n	8002576 <PWMC_SetPhaseVoltage+0x1f6>
        if (wX <= 0)
 8002482:	2e00      	cmp	r6, #0
 8002484:	dd1f      	ble.n	80024c6 <PWMC_SetPhaseVoltage+0x146>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002486:	1b9c      	subs	r4, r3, r6
          pHandle->Sector = SECTOR_3;
 8002488:	227c      	movs	r2, #124	; 0x7c
 800248a:	2102      	movs	r1, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800248c:	17e3      	asrs	r3, r4, #31
 800248e:	039b      	lsls	r3, r3, #14
 8002490:	0b9b      	lsrs	r3, r3, #14
 8002492:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 8002494:	2487      	movs	r4, #135	; 0x87
          pHandle->Sector = SECTOR_3;
 8002496:	5481      	strb	r1, [r0, r2]
          wTimePhC = wTimePhA - (wY / 131072);
 8002498:	17f9      	asrs	r1, r7, #31
 800249a:	0389      	lsls	r1, r1, #14
 800249c:	0b89      	lsrs	r1, r1, #14
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800249e:	149b      	asrs	r3, r3, #18
 80024a0:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80024a2:	19c9      	adds	r1, r1, r7
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80024a4:	195b      	adds	r3, r3, r5
          wTimePhC = wTimePhA - (wY / 131072);
 80024a6:	1489      	asrs	r1, r1, #18
          if(true == pHandle->SingleShuntTopology)
 80024a8:	5d04      	ldrb	r4, [r0, r4]
          wTimePhC = wTimePhA - (wY / 131072);
 80024aa:	1a59      	subs	r1, r3, r1
          wTimePhB = wTimePhC + (wX / 131072);
 80024ac:	1472      	asrs	r2, r6, #17
 80024ae:	1852      	adds	r2, r2, r1
          if(true == pHandle->SingleShuntTopology)
 80024b0:	2c00      	cmp	r4, #0
 80024b2:	d000      	beq.n	80024b6 <PWMC_SetPhaseVoltage+0x136>
 80024b4:	e08e      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x254>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80024b6:	b297      	uxth	r7, r2
          pHandle->midDuty = (uint16_t)wTimePhC;
 80024b8:	b28e      	uxth	r6, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 80024ba:	b29d      	uxth	r5, r3
 80024bc:	e798      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
 80024be:	2702      	movs	r7, #2
 80024c0:	2600      	movs	r6, #0
 80024c2:	2501      	movs	r5, #1
 80024c4:	e794      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
          pHandle->Sector = SECTOR_4;
 80024c6:	237c      	movs	r3, #124	; 0x7c
 80024c8:	2203      	movs	r2, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80024ca:	1b34      	subs	r4, r6, r4
          pHandle->Sector = SECTOR_4;
 80024cc:	54c2      	strb	r2, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80024ce:	17e3      	asrs	r3, r4, #31
 80024d0:	039b      	lsls	r3, r3, #14
 80024d2:	0b9b      	lsrs	r3, r3, #14
 80024d4:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 80024d6:	2487      	movs	r4, #135	; 0x87
          wTimePhB = wTimePhA + (wZ / 131072);
 80024d8:	17ca      	asrs	r2, r1, #31
 80024da:	0392      	lsls	r2, r2, #14
 80024dc:	0b92      	lsrs	r2, r2, #14
 80024de:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 80024e0:	17f1      	asrs	r1, r6, #31
 80024e2:	03c9      	lsls	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80024e4:	149b      	asrs	r3, r3, #18
 80024e6:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhB - (wX / 131072);
 80024e8:	0bc9      	lsrs	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80024ea:	195b      	adds	r3, r3, r5
          wTimePhB = wTimePhA + (wZ / 131072);
 80024ec:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80024ee:	1989      	adds	r1, r1, r6
          if(true == pHandle->SingleShuntTopology)
 80024f0:	5d04      	ldrb	r4, [r0, r4]
          wTimePhB = wTimePhA + (wZ / 131072);
 80024f2:	18d2      	adds	r2, r2, r3
          wTimePhC = wTimePhB - (wX / 131072);
 80024f4:	1449      	asrs	r1, r1, #17
 80024f6:	1a51      	subs	r1, r2, r1
          if(true == pHandle->SingleShuntTopology)
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d073      	beq.n	80025e4 <PWMC_SetPhaseVoltage+0x264>
 80024fc:	2700      	movs	r7, #0
 80024fe:	2601      	movs	r6, #1
 8002500:	2502      	movs	r5, #2
 8002502:	e775      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002504:	1b9c      	subs	r4, r3, r6
          pHandle->Sector = SECTOR_6;
 8002506:	227c      	movs	r2, #124	; 0x7c
 8002508:	2105      	movs	r1, #5
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800250a:	17e3      	asrs	r3, r4, #31
 800250c:	039b      	lsls	r3, r3, #14
 800250e:	0b9b      	lsrs	r3, r3, #14
 8002510:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 8002512:	2487      	movs	r4, #135	; 0x87
          pHandle->Sector = SECTOR_6;
 8002514:	5481      	strb	r1, [r0, r2]
          wTimePhC = wTimePhA - (wY / 131072);
 8002516:	17f9      	asrs	r1, r7, #31
 8002518:	0389      	lsls	r1, r1, #14
          wTimePhB = wTimePhC + (wX / 131072);
 800251a:	17f2      	asrs	r2, r6, #31
          wTimePhC = wTimePhA - (wY / 131072);
 800251c:	0b89      	lsrs	r1, r1, #14
          wTimePhB = wTimePhC + (wX / 131072);
 800251e:	03d2      	lsls	r2, r2, #15
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002520:	149b      	asrs	r3, r3, #18
 8002522:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002524:	19c9      	adds	r1, r1, r7
          wTimePhB = wTimePhC + (wX / 131072);
 8002526:	0bd2      	lsrs	r2, r2, #15
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002528:	195b      	adds	r3, r3, r5
          wTimePhC = wTimePhA - (wY / 131072);
 800252a:	1489      	asrs	r1, r1, #18
          wTimePhB = wTimePhC + (wX / 131072);
 800252c:	1992      	adds	r2, r2, r6
          if(true == pHandle->SingleShuntTopology)
 800252e:	5d04      	ldrb	r4, [r0, r4]
          wTimePhC = wTimePhA - (wY / 131072);
 8002530:	1a59      	subs	r1, r3, r1
          wTimePhB = wTimePhC + (wX / 131072);
 8002532:	1452      	asrs	r2, r2, #17
 8002534:	1852      	adds	r2, r2, r1
          if(true == pHandle->SingleShuntTopology)
 8002536:	2c00      	cmp	r4, #0
 8002538:	d050      	beq.n	80025dc <PWMC_SetPhaseVoltage+0x25c>
 800253a:	2701      	movs	r7, #1
 800253c:	2602      	movs	r6, #2
 800253e:	2500      	movs	r5, #0
 8002540:	e756      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
      if (pHandle->Ia > 0)
 8002542:	3461      	adds	r4, #97	; 0x61
 8002544:	5f04      	ldrsh	r4, [r0, r4]
 8002546:	2c00      	cmp	r4, #0
 8002548:	dd3b      	ble.n	80025c2 <PWMC_SetPhaseVoltage+0x242>
        pHandle->CntPhA += pHandle->DTCompCnt;
 800254a:	2474      	movs	r4, #116	; 0x74
 800254c:	5b04      	ldrh	r4, [r0, r4]
 800254e:	18e3      	adds	r3, r4, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	2550      	movs	r5, #80	; 0x50
 8002554:	5343      	strh	r3, [r0, r5]
      if (pHandle->Ib > 0)
 8002556:	2364      	movs	r3, #100	; 0x64
 8002558:	5ec3      	ldrsh	r3, [r0, r3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	dd2e      	ble.n	80025bc <PWMC_SetPhaseVoltage+0x23c>
        pHandle->CntPhB += pHandle->DTCompCnt;
 800255e:	1912      	adds	r2, r2, r4
 8002560:	b292      	uxth	r2, r2
 8002562:	2352      	movs	r3, #82	; 0x52
 8002564:	52c2      	strh	r2, [r0, r3]
      if (pHandle->Ic > 0)
 8002566:	3314      	adds	r3, #20
 8002568:	5ec3      	ldrsh	r3, [r0, r3]
 800256a:	2b00      	cmp	r3, #0
 800256c:	dd22      	ble.n	80025b4 <PWMC_SetPhaseVoltage+0x234>
        pHandle->CntPhC += pHandle->DTCompCnt;
 800256e:	2354      	movs	r3, #84	; 0x54
 8002570:	190c      	adds	r4, r1, r4
 8002572:	52c4      	strh	r4, [r0, r3]
 8002574:	e759      	b.n	800242a <PWMC_SetPhaseVoltage+0xaa>
        pHandle->Sector = SECTOR_5;
 8002576:	227c      	movs	r2, #124	; 0x7c
 8002578:	2604      	movs	r6, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800257a:	1b1c      	subs	r4, r3, r4
 800257c:	17e3      	asrs	r3, r4, #31
 800257e:	039b      	lsls	r3, r3, #14
 8002580:	0b9b      	lsrs	r3, r3, #14
 8002582:	191b      	adds	r3, r3, r4
        if(true == pHandle->SingleShuntTopology)
 8002584:	2487      	movs	r4, #135	; 0x87
        pHandle->Sector = SECTOR_5;
 8002586:	5486      	strb	r6, [r0, r2]
        wTimePhB = wTimePhA + (wZ / 131072);
 8002588:	17ca      	asrs	r2, r1, #31
 800258a:	0392      	lsls	r2, r2, #14
 800258c:	0b92      	lsrs	r2, r2, #14
 800258e:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002590:	17f9      	asrs	r1, r7, #31
 8002592:	0389      	lsls	r1, r1, #14
 8002594:	0b89      	lsrs	r1, r1, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002596:	149b      	asrs	r3, r3, #18
 8002598:	08ad      	lsrs	r5, r5, #2
        wTimePhC = wTimePhA - (wY / 131072) ;
 800259a:	19c9      	adds	r1, r1, r7
        if(true == pHandle->SingleShuntTopology)
 800259c:	5d04      	ldrb	r4, [r0, r4]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800259e:	195b      	adds	r3, r3, r5
        wTimePhB = wTimePhA + (wZ / 131072);
 80025a0:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025a2:	1489      	asrs	r1, r1, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 80025a4:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhA - (wY / 131072) ;
 80025a6:	1a59      	subs	r1, r3, r1
        if(true == pHandle->SingleShuntTopology)
 80025a8:	2c00      	cmp	r4, #0
 80025aa:	d10f      	bne.n	80025cc <PWMC_SetPhaseVoltage+0x24c>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025ac:	b28f      	uxth	r7, r1
          pHandle->midDuty = (uint16_t)wTimePhA;
 80025ae:	b29e      	uxth	r6, r3
          pHandle->highDuty = (uint16_t)wTimePhB;
 80025b0:	b295      	uxth	r5, r2
 80025b2:	e71d      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80025b4:	2354      	movs	r3, #84	; 0x54
 80025b6:	1b09      	subs	r1, r1, r4
 80025b8:	52c1      	strh	r1, [r0, r3]
 80025ba:	e736      	b.n	800242a <PWMC_SetPhaseVoltage+0xaa>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80025bc:	1b12      	subs	r2, r2, r4
 80025be:	b292      	uxth	r2, r2
 80025c0:	e7cf      	b.n	8002562 <PWMC_SetPhaseVoltage+0x1e2>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80025c2:	2474      	movs	r4, #116	; 0x74
 80025c4:	5b04      	ldrh	r4, [r0, r4]
 80025c6:	1b1b      	subs	r3, r3, r4
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	e7c2      	b.n	8002552 <PWMC_SetPhaseVoltage+0x1d2>
 80025cc:	2701      	movs	r7, #1
 80025ce:	2600      	movs	r6, #0
 80025d0:	2502      	movs	r5, #2
 80025d2:	e70d      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
 80025d4:	2700      	movs	r7, #0
 80025d6:	2602      	movs	r6, #2
 80025d8:	2501      	movs	r5, #1
 80025da:	e709      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80025dc:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhC;
 80025de:	b28e      	uxth	r6, r1
            pHandle->highDuty = (uint16_t)wTimePhB;
 80025e0:	b295      	uxth	r5, r2
 80025e2:	e705      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025e4:	b28f      	uxth	r7, r1
          pHandle->midDuty = (uint16_t)wTimePhB;
 80025e6:	b296      	uxth	r6, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80025e8:	b29d      	uxth	r5, r3
 80025ea:	e701      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80025ec:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhB;
 80025ee:	b296      	uxth	r6, r2
            pHandle->highDuty = (uint16_t)wTimePhC;
 80025f0:	b28d      	uxth	r5, r1
 80025f2:	e6fd      	b.n	80023f0 <PWMC_SetPhaseVoltage+0x70>

080025f4 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 80025f4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80025f6:	6843      	ldr	r3, [r0, #4]
 80025f8:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80025fa:	bd10      	pop	{r4, pc}

080025fc <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 80025fc:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80025fe:	6883      	ldr	r3, [r0, #8]
 8002600:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8002602:	bd10      	pop	{r4, pc}

08002604 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002608:	2900      	cmp	r1, #0
 800260a:	d011      	beq.n	8002630 <PWMC_CurrentReadingCalibr+0x2c>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800260c:	2901      	cmp	r1, #1
 800260e:	d002      	beq.n	8002616 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002610:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002612:	0028      	movs	r0, r5
 8002614:	bd70      	pop	{r4, r5, r6, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002616:	2260      	movs	r2, #96	; 0x60
 8002618:	5a83      	ldrh	r3, [r0, r2]
        retVal = true;
 800261a:	2501      	movs	r5, #1
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f8      	beq.n	8002612 <PWMC_CurrentReadingCalibr+0xe>
        pHandle->OffCalibrWaitTimeCounter--;
 8002620:	3b01      	subs	r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f2      	bne.n	8002610 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800262a:	68c3      	ldr	r3, [r0, #12]
 800262c:	4798      	blx	r3
          retVal = true;
 800262e:	e7f0      	b.n	8002612 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002630:	f7ff ffe0 	bl	80025f4 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002634:	0020      	movs	r0, r4
 8002636:	68e3      	ldr	r3, [r4, #12]
 8002638:	4798      	blx	r3
      retVal = true;
 800263a:	2501      	movs	r5, #1
 800263c:	e7e9      	b.n	8002612 <PWMC_CurrentReadingCalibr+0xe>
 800263e:	46c0      	nop			; (mov r8, r8)

08002640 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8002640:	2385      	movs	r3, #133	; 0x85
 8002642:	5cc3      	ldrb	r3, [r0, r3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <PWMC_OCP_Handler+0x10>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002648:	337d      	adds	r3, #125	; 0x7d
 800264a:	5cc3      	ldrb	r3, [r0, r3]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d004      	beq.n	800265a <PWMC_OCP_Handler+0x1a>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8002650:	2382      	movs	r3, #130	; 0x82
 8002652:	2201      	movs	r2, #1
 8002654:	54c2      	strb	r2, [r0, r3]
    tempPointer = &(pHandle->Motor);
 8002656:	307a      	adds	r0, #122	; 0x7a
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002658:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 800265a:	2248      	movs	r2, #72	; 0x48
 800265c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800265e:	5a82      	ldrh	r2, [r0, r2]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002662:	224a      	movs	r2, #74	; 0x4a
 8002664:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002666:	5a82      	ldrh	r2, [r0, r2]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 800266a:	224c      	movs	r2, #76	; 0x4c
 800266c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800266e:	5a82      	ldrh	r2, [r0, r2]
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002672:	e7ed      	b.n	8002650 <PWMC_OCP_Handler+0x10>

08002674 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8002674:	2283      	movs	r2, #131	; 0x83
{
 8002676:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 8002678:	5c81      	ldrb	r1, [r0, r2]
{
 800267a:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 800267c:	2900      	cmp	r1, #0
 800267e:	d015      	beq.n	80026ac <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002680:	2100      	movs	r1, #0
 8002682:	2442      	movs	r4, #66	; 0x42
 8002684:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 8002686:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002688:	2282      	movs	r2, #130	; 0x82
 800268a:	5c99      	ldrb	r1, [r3, r2]
 800268c:	2900      	cmp	r1, #0
 800268e:	d002      	beq.n	8002696 <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002690:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 8002692:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 8002694:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002696:	2284      	movs	r2, #132	; 0x84
 8002698:	5c99      	ldrb	r1, [r3, r2]
 800269a:	2900      	cmp	r1, #0
 800269c:	d005      	beq.n	80026aa <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	00c9      	lsls	r1, r1, #3
 80026a2:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 80026a4:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 80026a6:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80026a8:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80026aa:	bd10      	pop	{r4, pc}
 80026ac:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 80026ae:	2000      	movs	r0, #0
 80026b0:	e7ea      	b.n	8002688 <PWMC_IsFaultOccurred+0x14>
 80026b2:	46c0      	nop			; (mov r8, r8)

080026b4 <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80026b4:	b530      	push	{r4, r5, lr}
 80026b6:	ac03      	add	r4, sp, #12
 80026b8:	2500      	movs	r5, #0
 80026ba:	5f64      	ldrsh	r4, [r4, r5]
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80026bc:	2918      	cmp	r1, #24
 80026be:	d031      	beq.n	8002724 <RI_SetRegisterGlobal+0x70>
 80026c0:	d815      	bhi.n	80026ee <RI_SetRegisterGlobal+0x3a>
 80026c2:	2908      	cmp	r1, #8
 80026c4:	d039      	beq.n	800273a <RI_SetRegisterGlobal+0x86>
 80026c6:	2910      	cmp	r1, #16
 80026c8:	d133      	bne.n	8002732 <RI_SetRegisterGlobal+0x7e>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      switch (regID)
 80026ca:	22e5      	movs	r2, #229	; 0xe5
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d03a      	beq.n	8002748 <RI_SetRegisterGlobal+0x94>
 80026d2:	d91e      	bls.n	8002712 <RI_SetRegisterGlobal+0x5e>
 80026d4:	22e9      	movs	r2, #233	; 0xe9
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	4290      	cmp	r0, r2
 80026da:	d035      	beq.n	8002748 <RI_SetRegisterGlobal+0x94>
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <RI_SetRegisterGlobal+0xa4>)
 80026de:	4694      	mov	ip, r2
 80026e0:	4460      	add	r0, ip
 80026e2:	1e42      	subs	r2, r0, #1
 80026e4:	4190      	sbcs	r0, r2
 80026e6:	3004      	adds	r0, #4
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 80026e8:	2202      	movs	r2, #2
 80026ea:	801a      	strh	r2, [r3, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 80026ec:	bd30      	pop	{r4, r5, pc}
  switch(typeID)
 80026ee:	2928      	cmp	r1, #40	; 0x28
 80026f0:	d11f      	bne.n	8002732 <RI_SetRegisterGlobal+0x7e>
      *size = rawSize + 2U;
 80026f2:	8812      	ldrh	r2, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 80026f4:	b2a4      	uxth	r4, r4
      *size = rawSize + 2U;
 80026f6:	3202      	adds	r2, #2
 80026f8:	b292      	uxth	r2, r2
 80026fa:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80026fc:	42a2      	cmp	r2, r4
 80026fe:	d825      	bhi.n	800274c <RI_SetRegisterGlobal+0x98>
        switch (regID)
 8002700:	28e8      	cmp	r0, #232	; 0xe8
 8002702:	d027      	beq.n	8002754 <RI_SetRegisterGlobal+0xa0>
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	4398      	bics	r0, r3
            retVal = MCP_ERROR_RO_REG;
 8002708:	3828      	subs	r0, #40	; 0x28
 800270a:	1e43      	subs	r3, r0, #1
 800270c:	4198      	sbcs	r0, r3
 800270e:	3004      	adds	r0, #4
 8002710:	e7ec      	b.n	80026ec <RI_SetRegisterGlobal+0x38>
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	4390      	bics	r0, r2
 8002716:	4a11      	ldr	r2, [pc, #68]	; (800275c <RI_SetRegisterGlobal+0xa8>)
 8002718:	4694      	mov	ip, r2
 800271a:	4460      	add	r0, ip
 800271c:	1e42      	subs	r2, r0, #1
 800271e:	4190      	sbcs	r0, r2
 8002720:	3004      	adds	r0, #4
 8002722:	e7e1      	b.n	80026e8 <RI_SetRegisterGlobal+0x34>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002724:	3818      	subs	r0, #24
 8002726:	1e42      	subs	r2, r0, #1
 8002728:	4190      	sbcs	r0, r2
      *size = 4;
 800272a:	2204      	movs	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 800272c:	3004      	adds	r0, #4
      *size = 4;
 800272e:	801a      	strh	r2, [r3, #0]
      break;
 8002730:	e7dc      	b.n	80026ec <RI_SetRegisterGlobal+0x38>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002732:	2200      	movs	r2, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002734:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002736:	801a      	strh	r2, [r3, #0]
      break;
 8002738:	e7d8      	b.n	80026ec <RI_SetRegisterGlobal+0x38>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800273a:	3848      	subs	r0, #72	; 0x48
 800273c:	1e42      	subs	r2, r0, #1
 800273e:	4190      	sbcs	r0, r2
      *size = 1;
 8002740:	2201      	movs	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002742:	3004      	adds	r0, #4
      *size = 1;
 8002744:	801a      	strh	r2, [r3, #0]
      break;
 8002746:	e7d1      	b.n	80026ec <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8002748:	2000      	movs	r0, #0
 800274a:	e7cd      	b.n	80026e8 <RI_SetRegisterGlobal+0x34>
        *size = 0;
 800274c:	2200      	movs	r2, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800274e:	200a      	movs	r0, #10
        *size = 0;
 8002750:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002752:	e7cb      	b.n	80026ec <RI_SetRegisterGlobal+0x38>
            retVal = MCP_ERROR_RO_REG;
 8002754:	2004      	movs	r0, #4
 8002756:	e7c9      	b.n	80026ec <RI_SetRegisterGlobal+0x38>
 8002758:	ffffe4a8 	.word	0xffffe4a8
 800275c:	fffffa70 	.word	0xfffffa70

08002760 <RI_SetRegisterMotor1>:

uint8_t RI_SetRegisterMotor1(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	b083      	sub	sp, #12
 8002764:	001d      	movs	r5, r3
 8002766:	ab08      	add	r3, sp, #32
 8002768:	2400      	movs	r4, #0
 800276a:	5f1b      	ldrsh	r3, [r3, r4]
  uint8_t retVal = MCP_CMD_OK;
  uint8_t motorID=0;
  MCI_Handle_t *pMCIN = &Mci[motorID];

  switch(typeID)
 800276c:	2918      	cmp	r1, #24
 800276e:	d100      	bne.n	8002772 <RI_SetRegisterMotor1+0x12>
 8002770:	e094      	b.n	800289c <RI_SetRegisterMotor1+0x13c>
 8002772:	d823      	bhi.n	80027bc <RI_SetRegisterMotor1+0x5c>
 8002774:	2908      	cmp	r1, #8
 8002776:	d100      	bne.n	800277a <RI_SetRegisterMotor1+0x1a>
 8002778:	e0a9      	b.n	80028ce <RI_SetRegisterMotor1+0x16e>
 800277a:	2910      	cmp	r1, #16
 800277c:	d000      	beq.n	8002780 <RI_SetRegisterMotor1+0x20>
 800277e:	e0a2      	b.n	80028c6 <RI_SetRegisterMotor1+0x166>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002780:	238a      	movs	r3, #138	; 0x8a
 8002782:	8814      	ldrh	r4, [r2, #0]
      switch (regID)
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4298      	cmp	r0, r3
 8002788:	d100      	bne.n	800278c <RI_SetRegisterMotor1+0x2c>
 800278a:	e10b      	b.n	80029a4 <RI_SetRegisterMotor1+0x244>
 800278c:	d94b      	bls.n	8002826 <RI_SetRegisterMotor1+0xc6>
 800278e:	23a9      	movs	r3, #169	; 0xa9
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4298      	cmp	r0, r3
 8002794:	d100      	bne.n	8002798 <RI_SetRegisterMotor1+0x38>
 8002796:	e0e5      	b.n	8002964 <RI_SetRegisterMotor1+0x204>
 8002798:	d92d      	bls.n	80027f6 <RI_SetRegisterMotor1+0x96>
 800279a:	23e5      	movs	r3, #229	; 0xe5
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	4298      	cmp	r0, r3
 80027a0:	d100      	bne.n	80027a4 <RI_SetRegisterMotor1+0x44>
 80027a2:	e0fd      	b.n	80029a0 <RI_SetRegisterMotor1+0x240>
 80027a4:	d800      	bhi.n	80027a8 <RI_SetRegisterMotor1+0x48>
 80027a6:	e09e      	b.n	80028e6 <RI_SetRegisterMotor1+0x186>
 80027a8:	23e9      	movs	r3, #233	; 0xe9
  uint8_t retVal = MCP_CMD_OK;
 80027aa:	2400      	movs	r4, #0
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4298      	cmp	r0, r3
 80027b0:	d133      	bne.n	800281a <RI_SetRegisterMotor1+0xba>
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 80027b2:	2302      	movs	r3, #2
 80027b4:	802b      	strh	r3, [r5, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 80027b6:	0020      	movs	r0, r4
 80027b8:	b003      	add	sp, #12
 80027ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch(typeID)
 80027bc:	2928      	cmp	r1, #40	; 0x28
 80027be:	d000      	beq.n	80027c2 <RI_SetRegisterMotor1+0x62>
 80027c0:	e081      	b.n	80028c6 <RI_SetRegisterMotor1+0x166>
      *size = rawSize + 2U;
 80027c2:	8811      	ldrh	r1, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 80027c4:	b29b      	uxth	r3, r3
      *size = rawSize + 2U;
 80027c6:	3102      	adds	r1, #2
 80027c8:	b289      	uxth	r1, r1
 80027ca:	8029      	strh	r1, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 80027cc:	4299      	cmp	r1, r3
 80027ce:	d900      	bls.n	80027d2 <RI_SetRegisterMotor1+0x72>
 80027d0:	e0a8      	b.n	8002924 <RI_SetRegisterMotor1+0x1c4>
        switch (regID)
 80027d2:	23d4      	movs	r3, #212	; 0xd4
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4298      	cmp	r0, r3
 80027d8:	d100      	bne.n	80027dc <RI_SetRegisterMotor1+0x7c>
 80027da:	e0e9      	b.n	80029b0 <RI_SetRegisterMotor1+0x250>
 80027dc:	d900      	bls.n	80027e0 <RI_SetRegisterMotor1+0x80>
 80027de:	e0f6      	b.n	80029ce <RI_SetRegisterMotor1+0x26e>
            retVal = MCP_ERROR_RO_REG;
 80027e0:	2404      	movs	r4, #4
 80027e2:	28e8      	cmp	r0, #232	; 0xe8
 80027e4:	d0e7      	beq.n	80027b6 <RI_SetRegisterMotor1+0x56>
 80027e6:	3b29      	subs	r3, #41	; 0x29
 80027e8:	3bff      	subs	r3, #255	; 0xff
 80027ea:	4398      	bics	r0, r3
 80027ec:	3828      	subs	r0, #40	; 0x28
 80027ee:	1e43      	subs	r3, r0, #1
 80027f0:	4198      	sbcs	r0, r3
 80027f2:	1d04      	adds	r4, r0, #4
 80027f4:	e7df      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
 80027f6:	23ba      	movs	r3, #186	; 0xba
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4298      	cmp	r0, r3
 80027fc:	d100      	bne.n	8002800 <RI_SetRegisterMotor1+0xa0>
 80027fe:	e0b1      	b.n	8002964 <RI_SetRegisterMotor1+0x204>
 8002800:	d93c      	bls.n	800287c <RI_SetRegisterMotor1+0x11c>
 8002802:	23a1      	movs	r3, #161	; 0xa1
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	4298      	cmp	r0, r3
 8002808:	d100      	bne.n	800280c <RI_SetRegisterMotor1+0xac>
 800280a:	e0ab      	b.n	8002964 <RI_SetRegisterMotor1+0x204>
 800280c:	d976      	bls.n	80028fc <RI_SetRegisterMotor1+0x19c>
 800280e:	4b77      	ldr	r3, [pc, #476]	; (80029ec <RI_SetRegisterMotor1+0x28c>)
 8002810:	18c4      	adds	r4, r0, r3
 8002812:	1e63      	subs	r3, r4, #1
 8002814:	419c      	sbcs	r4, r3
 8002816:	3404      	adds	r4, #4
 8002818:	e7cb      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 800281a:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <RI_SetRegisterMotor1+0x290>)
 800281c:	18c4      	adds	r4, r0, r3
 800281e:	1e63      	subs	r3, r4, #1
 8002820:	419c      	sbcs	r4, r3
 8002822:	3404      	adds	r4, #4
 8002824:	e7c5      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 8002826:	2388      	movs	r3, #136	; 0x88
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4298      	cmp	r0, r3
 800282c:	d100      	bne.n	8002830 <RI_SetRegisterMotor1+0xd0>
 800282e:	e0b1      	b.n	8002994 <RI_SetRegisterMotor1+0x234>
 8002830:	d918      	bls.n	8002864 <RI_SetRegisterMotor1+0x104>
 8002832:	23d4      	movs	r3, #212	; 0xd4
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4298      	cmp	r0, r3
 8002838:	d100      	bne.n	800283c <RI_SetRegisterMotor1+0xdc>
 800283a:	e095      	b.n	8002968 <RI_SetRegisterMotor1+0x208>
 800283c:	3340      	adds	r3, #64	; 0x40
 800283e:	4298      	cmp	r0, r3
 8002840:	d000      	beq.n	8002844 <RI_SetRegisterMotor1+0xe4>
 8002842:	e0d1      	b.n	80029e8 <RI_SetRegisterMotor1+0x288>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002844:	466b      	mov	r3, sp
 8002846:	4e6b      	ldr	r6, [pc, #428]	; (80029f4 <RI_SetRegisterMotor1+0x294>)
 8002848:	af01      	add	r7, sp, #4
 800284a:	1d9a      	adds	r2, r3, #6
 800284c:	0039      	movs	r1, r7
 800284e:	0030      	movs	r0, r6
 8002850:	f003 fdd8 	bl	8006404 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8002854:	b222      	sxth	r2, r4
 8002856:	0030      	movs	r0, r6
 8002858:	2300      	movs	r3, #0
 800285a:	5ef9      	ldrsh	r1, [r7, r3]
 800285c:	f003 fdda 	bl	8006414 <STO_PLL_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 8002860:	2400      	movs	r4, #0
 8002862:	e7a6      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 8002864:	2890      	cmp	r0, #144	; 0x90
 8002866:	d100      	bne.n	800286a <RI_SetRegisterMotor1+0x10a>
 8002868:	e08e      	b.n	8002988 <RI_SetRegisterMotor1+0x228>
 800286a:	28d0      	cmp	r0, #208	; 0xd0
 800286c:	d000      	beq.n	8002870 <RI_SetRegisterMotor1+0x110>
 800286e:	e0bb      	b.n	80029e8 <RI_SetRegisterMotor1+0x288>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002870:	b221      	sxth	r1, r4
 8002872:	4861      	ldr	r0, [pc, #388]	; (80029f8 <RI_SetRegisterMotor1+0x298>)
 8002874:	f002 fbac 	bl	8004fd0 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 8002878:	2400      	movs	r4, #0
          break;
 800287a:	e79a      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 800287c:	3b41      	subs	r3, #65	; 0x41
 800287e:	3bff      	subs	r3, #255	; 0xff
 8002880:	4298      	cmp	r0, r3
 8002882:	d105      	bne.n	8002890 <RI_SetRegisterMotor1+0x130>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8002884:	b221      	sxth	r1, r4
 8002886:	485d      	ldr	r0, [pc, #372]	; (80029fc <RI_SetRegisterMotor1+0x29c>)
 8002888:	f002 fba0 	bl	8004fcc <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 800288c:	2400      	movs	r4, #0
          break;
 800288e:	e790      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 8002890:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <RI_SetRegisterMotor1+0x2a0>)
 8002892:	18c4      	adds	r4, r0, r3
 8002894:	1e63      	subs	r3, r4, #1
 8002896:	419c      	sbcs	r4, r3
 8002898:	3404      	adds	r4, #4
 800289a:	e78a      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
      switch (regID)
 800289c:	2898      	cmp	r0, #152	; 0x98
 800289e:	d045      	beq.n	800292c <RI_SetRegisterMotor1+0x1cc>
 80028a0:	d909      	bls.n	80028b6 <RI_SetRegisterMotor1+0x156>
 80028a2:	38d8      	subs	r0, #216	; 0xd8
 80028a4:	0004      	movs	r4, r0
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <RI_SetRegisterMotor1+0x2a4>)
 80028a8:	401c      	ands	r4, r3
          retVal = MCP_ERROR_RO_REG;
 80028aa:	1e63      	subs	r3, r4, #1
 80028ac:	419c      	sbcs	r4, r3
 80028ae:	3404      	adds	r4, #4
      *size = 4;
 80028b0:	2304      	movs	r3, #4
 80028b2:	802b      	strh	r3, [r5, #0]
      break;
 80028b4:	e77f      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
 80028b6:	2340      	movs	r3, #64	; 0x40
 80028b8:	4398      	bics	r0, r3
          retVal = MCP_ERROR_RO_REG;
 80028ba:	3818      	subs	r0, #24
 80028bc:	0004      	movs	r4, r0
 80028be:	1e63      	subs	r3, r4, #1
 80028c0:	419c      	sbcs	r4, r3
 80028c2:	3404      	adds	r4, #4
 80028c4:	e7f4      	b.n	80028b0 <RI_SetRegisterMotor1+0x150>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80028c6:	2300      	movs	r3, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80028c8:	2407      	movs	r4, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80028ca:	802b      	strh	r3, [r5, #0]
      break;
 80028cc:	e773      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
      switch (regID)
 80028ce:	2888      	cmp	r0, #136	; 0x88
 80028d0:	d038      	beq.n	8002944 <RI_SetRegisterMotor1+0x1e4>
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	4398      	bics	r0, r3
            retVal = MCP_ERROR_RO_REG;
 80028d6:	3848      	subs	r0, #72	; 0x48
 80028d8:	0004      	movs	r4, r0
 80028da:	1e63      	subs	r3, r4, #1
 80028dc:	419c      	sbcs	r4, r3
 80028de:	3404      	adds	r4, #4
      *size = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	802b      	strh	r3, [r5, #0]
      break;
 80028e4:	e767      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
 80028e6:	23c5      	movs	r3, #197	; 0xc5
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4298      	cmp	r0, r3
 80028ec:	d03a      	beq.n	8002964 <RI_SetRegisterMotor1+0x204>
 80028ee:	d911      	bls.n	8002914 <RI_SetRegisterMotor1+0x1b4>
 80028f0:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <RI_SetRegisterMotor1+0x2a8>)
 80028f2:	18c4      	adds	r4, r0, r3
 80028f4:	1e63      	subs	r3, r4, #1
 80028f6:	419c      	sbcs	r4, r3
 80028f8:	3404      	adds	r4, #4
 80028fa:	e75a      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 80028fc:	23f2      	movs	r3, #242	; 0xf2
 80028fe:	2404      	movs	r4, #4
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4298      	cmp	r0, r3
 8002904:	d100      	bne.n	8002908 <RI_SetRegisterMotor1+0x1a8>
 8002906:	e754      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <RI_SetRegisterMotor1+0x2ac>)
 800290a:	18c4      	adds	r4, r0, r3
 800290c:	1e63      	subs	r3, r4, #1
 800290e:	419c      	sbcs	r4, r3
 8002910:	3404      	adds	r4, #4
 8002912:	e74e      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <RI_SetRegisterMotor1+0x2b0>)
 8002916:	18c4      	adds	r4, r0, r3
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <RI_SetRegisterMotor1+0x2a4>)
 800291a:	401c      	ands	r4, r3
 800291c:	1e63      	subs	r3, r4, #1
 800291e:	419c      	sbcs	r4, r3
 8002920:	3404      	adds	r4, #4
 8002922:	e746      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
        *size = 0;
 8002924:	2300      	movs	r3, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002926:	240a      	movs	r4, #10
        *size = 0;
 8002928:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800292a:	e744      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 800292c:	2300      	movs	r3, #0
 800292e:	5ed0      	ldrsh	r0, [r2, r3]
 8002930:	2106      	movs	r1, #6
 8002932:	f7fd fc73 	bl	800021c <__divsi3>
 8002936:	2200      	movs	r2, #0
 8002938:	b201      	sxth	r1, r0
 800293a:	4836      	ldr	r0, [pc, #216]	; (8002a14 <RI_SetRegisterMotor1+0x2b4>)
 800293c:	f7fe fd08 	bl	8001350 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002940:	2400      	movs	r4, #0
          break;
 8002942:	e7b5      	b.n	80028b0 <RI_SetRegisterMotor1+0x150>
          uint8_t regdata8 = *data;
 8002944:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002946:	2b04      	cmp	r3, #4
 8002948:	d043      	beq.n	80029d2 <RI_SetRegisterMotor1+0x272>
  uint8_t retVal = MCP_CMD_OK;
 800294a:	2400      	movs	r4, #0
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800294c:	2b03      	cmp	r3, #3
 800294e:	d1c7      	bne.n	80028e0 <RI_SetRegisterMotor1+0x180>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002950:	4e30      	ldr	r6, [pc, #192]	; (8002a14 <RI_SetRegisterMotor1+0x2b4>)
 8002952:	0030      	movs	r0, r6
 8002954:	f7fe fdf6 	bl	8001544 <MCI_GetMecSpeedRefUnit>
 8002958:	2200      	movs	r2, #0
 800295a:	0001      	movs	r1, r0
 800295c:	0030      	movs	r0, r6
 800295e:	f7fe fcf7 	bl	8001350 <MCI_ExecSpeedRamp>
 8002962:	e7bd      	b.n	80028e0 <RI_SetRegisterMotor1+0x180>
 8002964:	2404      	movs	r4, #4
 8002966:	e724      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002968:	466b      	mov	r3, sp
 800296a:	4e22      	ldr	r6, [pc, #136]	; (80029f4 <RI_SetRegisterMotor1+0x294>)
 800296c:	1d9f      	adds	r7, r3, #6
 800296e:	003a      	movs	r2, r7
 8002970:	0030      	movs	r0, r6
 8002972:	a901      	add	r1, sp, #4
 8002974:	f003 fd46 	bl	8006404 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8002978:	b221      	sxth	r1, r4
 800297a:	0030      	movs	r0, r6
 800297c:	2300      	movs	r3, #0
 800297e:	5efa      	ldrsh	r2, [r7, r3]
 8002980:	f003 fd48 	bl	8006414 <STO_PLL_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 8002984:	2400      	movs	r4, #0
 8002986:	e714      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002988:	b221      	sxth	r1, r4
 800298a:	481b      	ldr	r0, [pc, #108]	; (80029f8 <RI_SetRegisterMotor1+0x298>)
 800298c:	f002 fb1e 	bl	8004fcc <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8002990:	2400      	movs	r4, #0
          break;
 8002992:	e70e      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002994:	b221      	sxth	r1, r4
 8002996:	4818      	ldr	r0, [pc, #96]	; (80029f8 <RI_SetRegisterMotor1+0x298>)
 8002998:	f002 fb28 	bl	8004fec <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 800299c:	2400      	movs	r4, #0
          break;
 800299e:	e708      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
  uint8_t retVal = MCP_CMD_OK;
 80029a0:	2400      	movs	r4, #0
 80029a2:	e706      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80029a4:	b221      	sxth	r1, r4
 80029a6:	4815      	ldr	r0, [pc, #84]	; (80029fc <RI_SetRegisterMotor1+0x29c>)
 80029a8:	f002 fb12 	bl	8004fd0 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80029ac:	2400      	movs	r4, #0
          break;
 80029ae:	e700      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 80029b0:	8890      	ldrh	r0, [r2, #4]
 80029b2:	8853      	ldrh	r3, [r2, #2]
 80029b4:	0400      	lsls	r0, r0, #16
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80029b6:	2106      	movs	r1, #6
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 80029b8:	4318      	orrs	r0, r3
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80029ba:	88d4      	ldrh	r4, [r2, #6]
 80029bc:	f7fd fc2e 	bl	800021c <__divsi3>
 80029c0:	0022      	movs	r2, r4
 80029c2:	b201      	sxth	r1, r0
 80029c4:	4813      	ldr	r0, [pc, #76]	; (8002a14 <RI_SetRegisterMotor1+0x2b4>)
 80029c6:	f7fe fcc3 	bl	8001350 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80029ca:	2400      	movs	r4, #0
            break;
 80029cc:	e6f3      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
 80029ce:	2405      	movs	r4, #5
 80029d0:	e6f1      	b.n	80027b6 <RI_SetRegisterMotor1+0x56>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80029d2:	4c10      	ldr	r4, [pc, #64]	; (8002a14 <RI_SetRegisterMotor1+0x2b4>)
 80029d4:	0020      	movs	r0, r4
 80029d6:	f7fe fddb 	bl	8001590 <MCI_GetTeref>
 80029da:	2200      	movs	r2, #0
 80029dc:	0001      	movs	r1, r0
 80029de:	0020      	movs	r0, r4
 80029e0:	f7fe fcc0 	bl	8001364 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 80029e4:	2400      	movs	r4, #0
 80029e6:	e77b      	b.n	80028e0 <RI_SetRegisterMotor1+0x180>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80029e8:	2405      	movs	r4, #5
 80029ea:	e6e2      	b.n	80027b2 <RI_SetRegisterMotor1+0x52>
 80029ec:	fffff5b0 	.word	0xfffff5b0
 80029f0:	ffffe4a8 	.word	0xffffe4a8
 80029f4:	20000200 	.word	0x20000200
 80029f8:	20000078 	.word	0x20000078
 80029fc:	20000234 	.word	0x20000234
 8002a00:	fffffa70 	.word	0xfffffa70
 8002a04:	0000ffbf 	.word	0x0000ffbf
 8002a08:	fffff370 	.word	0xfffff370
 8002a0c:	fffff630 	.word	0xfffff630
 8002a10:	fffff4b0 	.word	0xfffff4b0
 8002a14:	20000670 	.word	0x20000670

08002a18 <RI_GetRegisterGlobal>:

uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002a18:	b570      	push	{r4, r5, r6, lr}
    uint8_t retVal = MCP_CMD_OK;
    switch (typeID)
 8002a1a:	000c      	movs	r4, r1
 8002a1c:	3c08      	subs	r4, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002a1e:	001e      	movs	r6, r3
    switch (typeID)
 8002a20:	b2e4      	uxtb	r4, r4
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002a22:	ab04      	add	r3, sp, #16
 8002a24:	0005      	movs	r5, r0
 8002a26:	2000      	movs	r0, #0
 8002a28:	5e1b      	ldrsh	r3, [r3, r0]
    switch (typeID)
 8002a2a:	2c20      	cmp	r4, #32
 8002a2c:	d803      	bhi.n	8002a36 <RI_GetRegisterGlobal+0x1e>
 8002a2e:	4821      	ldr	r0, [pc, #132]	; (8002ab4 <RI_GetRegisterGlobal+0x9c>)
 8002a30:	00a4      	lsls	r4, r4, #2
 8002a32:	5900      	ldr	r0, [r0, r4]
 8002a34:	4687      	mov	pc, r0
 8002a36:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
  return (retVal);
}
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8002a3a:	2d28      	cmp	r5, #40	; 0x28
 8002a3c:	d025      	beq.n	8002a8a <RI_GetRegisterGlobal+0x72>
        *size = (*rawSize) + 2U;
 8002a3e:	8813      	ldrh	r3, [r2, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a40:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002a42:	3302      	adds	r3, #2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8033      	strh	r3, [r6, #0]
        break;
 8002a48:	e7f6      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a4a:	0008      	movs	r0, r1
        if (freeSpace > 0)
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	ddf3      	ble.n	8002a38 <RI_GetRegisterGlobal+0x20>
          *size = 1;
 8002a50:	2301      	movs	r3, #1
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a52:	2005      	movs	r0, #5
          *size = 1;
 8002a54:	8033      	strh	r3, [r6, #0]
 8002a56:	e7ef      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
        if (freeSpace >= 2)
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	dd28      	ble.n	8002aae <RI_GetRegisterGlobal+0x96>
          switch (regID)
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <RI_GetRegisterGlobal+0xa0>)
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <RI_GetRegisterGlobal+0xa4>)
 8002a60:	18eb      	adds	r3, r5, r3
 8002a62:	4013      	ands	r3, r2
    uint8_t retVal = MCP_CMD_OK;
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	4193      	sbcs	r3, r2
 8002a68:	2005      	movs	r0, #5
 8002a6a:	425b      	negs	r3, r3
 8002a6c:	4018      	ands	r0, r3
          *size = 2;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	8033      	strh	r3, [r6, #0]
 8002a72:	e7e1      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a74:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	ddde      	ble.n	8002a38 <RI_GetRegisterGlobal+0x20>
          *size = 4;
 8002a7a:	2304      	movs	r3, #4
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a7c:	3803      	subs	r0, #3
          *size = 4;
 8002a7e:	8033      	strh	r3, [r6, #0]
 8002a80:	e7da      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
            *size= 0 ; /* */
 8002a82:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a84:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8002a86:	8033      	strh	r3, [r6, #0]
            break;
 8002a88:	e7d6      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a8a:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a8c:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002a8e:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002a90:	2b0b      	cmp	r3, #11
 8002a92:	d803      	bhi.n	8002a9c <RI_GetRegisterGlobal+0x84>
 8002a94:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a96:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002a98:	8033      	strh	r3, [r6, #0]
        break;
 8002a9a:	e7cd      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002a9c:	1c90      	adds	r0, r2, #2
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <RI_GetRegisterGlobal+0xa8>)
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	f003 fe2d 	bl	8006700 <memcpy>
 8002aa6:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8002aa8:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002aaa:	8033      	strh	r3, [r6, #0]
        break;
 8002aac:	e7c4      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002aae:	2008      	movs	r0, #8
 8002ab0:	e7c2      	b.n	8002a38 <RI_GetRegisterGlobal+0x20>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	08006bfc 	.word	0x08006bfc
 8002ab8:	fffff1b0 	.word	0xfffff1b0
 8002abc:	0000ffbf 	.word	0x0000ffbf
 8002ac0:	0800685c 	.word	0x0800685c

08002ac4 <RI_GetRegisterMotor1>:

  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t retVal = MCP_CMD_OK;
    uint8_t motorID=0;
    MCI_Handle_t *pMCIN = &Mci[motorID];
    BusVoltageSensor_Handle_t* BusVoltageSensor= &BusVoltageSensor_M1._Super;
    switch (typeID)
 8002ac6:	000d      	movs	r5, r1
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002ac8:	b087      	sub	sp, #28
    switch (typeID)
 8002aca:	3d08      	subs	r5, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002acc:	001e      	movs	r6, r3
    switch (typeID)
 8002ace:	b2ed      	uxtb	r5, r5
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002ad0:	ab0c      	add	r3, sp, #48	; 0x30
 8002ad2:	0017      	movs	r7, r2
 8002ad4:	0004      	movs	r4, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	5e9b      	ldrsh	r3, [r3, r2]
    switch (typeID)
 8002ada:	2d20      	cmp	r5, #32
 8002adc:	d803      	bhi.n	8002ae6 <RI_GetRegisterMotor1+0x22>
 8002ade:	4abc      	ldr	r2, [pc, #752]	; (8002dd0 <RI_GetRegisterMotor1+0x30c>)
 8002ae0:	00ad      	lsls	r5, r5, #2
 8002ae2:	5952      	ldr	r2, [r2, r5]
 8002ae4:	4697      	mov	pc, r2
 8002ae6:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
    return (retVal);
  }
 8002ae8:	b007      	add	sp, #28
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rawData++;
 8002aec:	2294      	movs	r2, #148	; 0x94
 8002aee:	1cb8      	adds	r0, r7, #2
        switch (regID)
 8002af0:	0052      	lsls	r2, r2, #1
 8002af2:	4294      	cmp	r4, r2
 8002af4:	d100      	bne.n	8002af8 <RI_GetRegisterMotor1+0x34>
 8002af6:	e110      	b.n	8002d1a <RI_GetRegisterMotor1+0x256>
 8002af8:	d85e      	bhi.n	8002bb8 <RI_GetRegisterMotor1+0xf4>
 8002afa:	2ca8      	cmp	r4, #168	; 0xa8
 8002afc:	d100      	bne.n	8002b00 <RI_GetRegisterMotor1+0x3c>
 8002afe:	e103      	b.n	8002d08 <RI_GetRegisterMotor1+0x244>
 8002b00:	2ce8      	cmp	r4, #232	; 0xe8
 8002b02:	d000      	beq.n	8002b06 <RI_GetRegisterMotor1+0x42>
 8002b04:	e116      	b.n	8002d34 <RI_GetRegisterMotor1+0x270>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002b06:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b08:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002b0a:	803a      	strh	r2, [r7, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d900      	bls.n	8002b12 <RI_GetRegisterMotor1+0x4e>
 8002b10:	e0f0      	b.n	8002cf4 <RI_GetRegisterMotor1+0x230>
 8002b12:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b14:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002b16:	8033      	strh	r3, [r6, #0]
        break;
 8002b18:	e7e6      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b1a:	0008      	movs	r0, r1
        if (freeSpace > 0)
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	dde3      	ble.n	8002ae8 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 8002b20:	2c88      	cmp	r4, #136	; 0x88
 8002b22:	d100      	bne.n	8002b26 <RI_GetRegisterMotor1+0x62>
 8002b24:	e118      	b.n	8002d58 <RI_GetRegisterMotor1+0x294>
 8002b26:	2cc8      	cmp	r4, #200	; 0xc8
 8002b28:	d100      	bne.n	8002b2c <RI_GetRegisterMotor1+0x68>
 8002b2a:	e10f      	b.n	8002d4c <RI_GetRegisterMotor1+0x288>
 8002b2c:	2005      	movs	r0, #5
 8002b2e:	2c48      	cmp	r4, #72	; 0x48
 8002b30:	d100      	bne.n	8002b34 <RI_GetRegisterMotor1+0x70>
 8002b32:	e105      	b.n	8002d40 <RI_GetRegisterMotor1+0x27c>
          *size = 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	8033      	strh	r3, [r6, #0]
 8002b38:	e7d6      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 2)
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	dc00      	bgt.n	8002b40 <RI_GetRegisterMotor1+0x7c>
 8002b3e:	e0d5      	b.n	8002cec <RI_GetRegisterMotor1+0x228>
          switch (regID)
 8002b40:	239d      	movs	r3, #157	; 0x9d
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d100      	bne.n	8002b4a <RI_GetRegisterMotor1+0x86>
 8002b48:	e181      	b.n	8002e4e <RI_GetRegisterMotor1+0x38a>
 8002b4a:	d870      	bhi.n	8002c2e <RI_GetRegisterMotor1+0x16a>
 8002b4c:	23e4      	movs	r3, #228	; 0xe4
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4298      	cmp	r0, r3
 8002b52:	d100      	bne.n	8002b56 <RI_GetRegisterMotor1+0x92>
 8002b54:	e171      	b.n	8002e3a <RI_GetRegisterMotor1+0x376>
 8002b56:	d956      	bls.n	8002c06 <RI_GetRegisterMotor1+0x142>
 8002b58:	23b2      	movs	r3, #178	; 0xb2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4298      	cmp	r0, r3
 8002b5e:	d100      	bne.n	8002b62 <RI_GetRegisterMotor1+0x9e>
 8002b60:	e165      	b.n	8002e2e <RI_GetRegisterMotor1+0x36a>
 8002b62:	d942      	bls.n	8002bea <RI_GetRegisterMotor1+0x126>
 8002b64:	23ba      	movs	r3, #186	; 0xba
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4298      	cmp	r0, r3
 8002b6a:	d000      	beq.n	8002b6e <RI_GetRegisterMotor1+0xaa>
 8002b6c:	e0c0      	b.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002b6e:	4899      	ldr	r0, [pc, #612]	; (8002dd4 <RI_GetRegisterMotor1+0x310>)
 8002b70:	f002 fa14 	bl	8004f9c <NTC_GetAvTemp_C>
 8002b74:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b76:	2000      	movs	r0, #0
          *size = 2;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	8033      	strh	r3, [r6, #0]
 8002b7c:	e7b4      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 4)
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	dc00      	bgt.n	8002b84 <RI_GetRegisterMotor1+0xc0>
 8002b82:	e0b3      	b.n	8002cec <RI_GetRegisterMotor1+0x228>
          switch (regID)
 8002b84:	28d8      	cmp	r0, #216	; 0xd8
 8002b86:	d100      	bne.n	8002b8a <RI_GetRegisterMotor1+0xc6>
 8002b88:	e0f6      	b.n	8002d78 <RI_GetRegisterMotor1+0x2b4>
 8002b8a:	d900      	bls.n	8002b8e <RI_GetRegisterMotor1+0xca>
 8002b8c:	e0a0      	b.n	8002cd0 <RI_GetRegisterMotor1+0x20c>
 8002b8e:	2858      	cmp	r0, #88	; 0x58
 8002b90:	d100      	bne.n	8002b94 <RI_GetRegisterMotor1+0xd0>
 8002b92:	e0f7      	b.n	8002d84 <RI_GetRegisterMotor1+0x2c0>
 8002b94:	2898      	cmp	r0, #152	; 0x98
 8002b96:	d000      	beq.n	8002b9a <RI_GetRegisterMotor1+0xd6>
 8002b98:	e092      	b.n	8002cc0 <RI_GetRegisterMotor1+0x1fc>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002b9a:	488f      	ldr	r0, [pc, #572]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002b9c:	f7fe fcd2 	bl	8001544 <MCI_GetMecSpeedRefUnit>
 8002ba0:	0043      	lsls	r3, r0, #1
 8002ba2:	181b      	adds	r3, r3, r0
    uint8_t retVal = MCP_CMD_OK;
 8002ba4:	2000      	movs	r0, #0
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	603b      	str	r3, [r7, #0]
          *size = 4;
 8002baa:	2304      	movs	r3, #4
 8002bac:	8033      	strh	r3, [r6, #0]
 8002bae:	e79b      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
            *size= 0 ; /* */
 8002bb0:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002bb2:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8002bb4:	8033      	strh	r3, [r6, #0]
            break;
 8002bb6:	e797      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
 8002bb8:	23d4      	movs	r3, #212	; 0xd4
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	429c      	cmp	r4, r3
 8002bbe:	d000      	beq.n	8002bc2 <RI_GetRegisterMotor1+0xfe>
 8002bc0:	e0b8      	b.n	8002d34 <RI_GetRegisterMotor1+0x270>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002bc2:	4c85      	ldr	r4, [pc, #532]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	f7fe fca9 	bl	800151c <MCI_GetLastRampFinalSpeed>
 8002bca:	0043      	lsls	r3, r0, #1
 8002bcc:	1818      	adds	r0, r3, r0
 8002bce:	0040      	lsls	r0, r0, #1
            *rpm16p = (uint16_t)rpm32;
 8002bd0:	8078      	strh	r0, [r7, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 8002bd2:	1400      	asrs	r0, r0, #16
 8002bd4:	80b8      	strh	r0, [r7, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002bd6:	0020      	movs	r0, r4
 8002bd8:	f7fe fca4 	bl	8001524 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002bdc:	2306      	movs	r3, #6
 8002bde:	803b      	strh	r3, [r7, #0]
            break;
 8002be0:	3302      	adds	r3, #2
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002be2:	80f8      	strh	r0, [r7, #6]
    uint8_t retVal = MCP_CMD_OK;
 8002be4:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002be6:	8033      	strh	r3, [r6, #0]
        break;
 8002be8:	e77e      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
 8002bea:	3b41      	subs	r3, #65	; 0x41
 8002bec:	3bff      	subs	r3, #255	; 0xff
 8002bee:	4298      	cmp	r0, r3
 8002bf0:	d100      	bne.n	8002bf4 <RI_GetRegisterMotor1+0x130>
 8002bf2:	e10f      	b.n	8002e14 <RI_GetRegisterMotor1+0x350>
 8002bf4:	3340      	adds	r3, #64	; 0x40
 8002bf6:	4298      	cmp	r0, r3
 8002bf8:	d17a      	bne.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8002bfa:	4878      	ldr	r0, [pc, #480]	; (8002ddc <RI_GetRegisterMotor1+0x318>)
 8002bfc:	f002 f9ea 	bl	8004fd4 <PID_GetKP>
 8002c00:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c02:	2000      	movs	r0, #0
              break;
 8002c04:	e7b8      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002c06:	2388      	movs	r3, #136	; 0x88
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4298      	cmp	r0, r3
 8002c0c:	d100      	bne.n	8002c10 <RI_GetRegisterMotor1+0x14c>
 8002c0e:	e0d2      	b.n	8002db6 <RI_GetRegisterMotor1+0x2f2>
 8002c10:	d923      	bls.n	8002c5a <RI_GetRegisterMotor1+0x196>
 8002c12:	23d4      	movs	r3, #212	; 0xd4
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4298      	cmp	r0, r3
 8002c18:	d16a      	bne.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002c1a:	ac04      	add	r4, sp, #16
 8002c1c:	4870      	ldr	r0, [pc, #448]	; (8002de0 <RI_GetRegisterMotor1+0x31c>)
 8002c1e:	0021      	movs	r1, r4
 8002c20:	aa05      	add	r2, sp, #20
 8002c22:	f003 fbef 	bl	8006404 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8002c26:	8823      	ldrh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c28:	2000      	movs	r0, #0
              *regdata16 = hC1;
 8002c2a:	803b      	strh	r3, [r7, #0]
              break;
 8002c2c:	e7a4      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002c2e:	23b9      	movs	r3, #185	; 0xb9
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4298      	cmp	r0, r3
 8002c34:	d100      	bne.n	8002c38 <RI_GetRegisterMotor1+0x174>
 8002c36:	e0b8      	b.n	8002daa <RI_GetRegisterMotor1+0x2e6>
 8002c38:	d827      	bhi.n	8002c8a <RI_GetRegisterMotor1+0x1c6>
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	3bff      	subs	r3, #255	; 0xff
 8002c3e:	4298      	cmp	r0, r3
 8002c40:	d100      	bne.n	8002c44 <RI_GetRegisterMotor1+0x180>
 8002c42:	e0ab      	b.n	8002d9c <RI_GetRegisterMotor1+0x2d8>
 8002c44:	d914      	bls.n	8002c70 <RI_GetRegisterMotor1+0x1ac>
 8002c46:	23b5      	movs	r3, #181	; 0xb5
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d150      	bne.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8002c4e:	4864      	ldr	r0, [pc, #400]	; (8002de0 <RI_GetRegisterMotor1+0x31c>)
 8002c50:	f003 f808 	bl	8005c64 <SPD_GetElAngle>
 8002c54:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c56:	2000      	movs	r0, #0
              break;
 8002c58:	e78e      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002c5a:	2890      	cmp	r0, #144	; 0x90
 8002c5c:	d100      	bne.n	8002c60 <RI_GetRegisterMotor1+0x19c>
 8002c5e:	e0d3      	b.n	8002e08 <RI_GetRegisterMotor1+0x344>
 8002c60:	28d0      	cmp	r0, #208	; 0xd0
 8002c62:	d145      	bne.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002c64:	485f      	ldr	r0, [pc, #380]	; (8002de4 <RI_GetRegisterMotor1+0x320>)
 8002c66:	f002 f9b9 	bl	8004fdc <PID_GetKI>
 8002c6a:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c6c:	2000      	movs	r0, #0
              break;
 8002c6e:	e783      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002c70:	3b80      	subs	r3, #128	; 0x80
 8002c72:	4298      	cmp	r0, r3
 8002c74:	d100      	bne.n	8002c78 <RI_GetRegisterMotor1+0x1b4>
 8002c76:	e0a4      	b.n	8002dc2 <RI_GetRegisterMotor1+0x2fe>
 8002c78:	3340      	adds	r3, #64	; 0x40
 8002c7a:	4298      	cmp	r0, r3
 8002c7c:	d138      	bne.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002c7e:	4856      	ldr	r0, [pc, #344]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002c80:	f7fe fc76 	bl	8001570 <MCI_GetValphabeta>
 8002c84:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c86:	2000      	movs	r0, #0
              break;
 8002c88:	e776      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002c8a:	23c9      	movs	r3, #201	; 0xc9
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	4298      	cmp	r0, r3
 8002c90:	d100      	bne.n	8002c94 <RI_GetRegisterMotor1+0x1d0>
 8002c92:	e0c5      	b.n	8002e20 <RI_GetRegisterMotor1+0x35c>
 8002c94:	d90b      	bls.n	8002cae <RI_GetRegisterMotor1+0x1ea>
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <RI_GetRegisterMotor1+0x324>)
 8002c98:	4a54      	ldr	r2, [pc, #336]	; (8002dec <RI_GetRegisterMotor1+0x328>)
 8002c9a:	18c3      	adds	r3, r0, r3
 8002c9c:	4013      	ands	r3, r2
    uint8_t retVal = MCP_CMD_OK;
 8002c9e:	1e5a      	subs	r2, r3, #1
 8002ca0:	4193      	sbcs	r3, r2
 8002ca2:	2005      	movs	r0, #5
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	4018      	ands	r0, r3
          *size = 2;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	8033      	strh	r3, [r6, #0]
 8002cac:	e71c      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
 8002cae:	3b40      	subs	r3, #64	; 0x40
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d11d      	bne.n	8002cf0 <RI_GetRegisterMotor1+0x22c>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8002cb4:	484a      	ldr	r0, [pc, #296]	; (8002de0 <RI_GetRegisterMotor1+0x31c>)
 8002cb6:	f003 fb9b 	bl	80063f0 <STO_PLL_GetEstimatedBemf>
 8002cba:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002cbc:	2000      	movs	r0, #0
              break;
 8002cbe:	e75b      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002cc0:	2818      	cmp	r0, #24
 8002cc2:	d11f      	bne.n	8002d04 <RI_GetRegisterMotor1+0x240>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002cc4:	4844      	ldr	r0, [pc, #272]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002cc6:	f7fe fc03 	bl	80014d0 <MCI_GetFaultState>
 8002cca:	6038      	str	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ccc:	2000      	movs	r0, #0
              break;
 8002cce:	e76c      	b.n	8002baa <RI_GetRegisterMotor1+0xe6>
 8002cd0:	238c      	movs	r3, #140	; 0x8c
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	d049      	beq.n	8002d6c <RI_GetRegisterMotor1+0x2a8>
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <RI_GetRegisterMotor1+0x32c>)
 8002cda:	4298      	cmp	r0, r3
 8002cdc:	d112      	bne.n	8002d04 <RI_GetRegisterMotor1+0x240>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8002cde:	4b45      	ldr	r3, [pc, #276]	; (8002df4 <RI_GetRegisterMotor1+0x330>)
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f002 f9eb 	bl	80050bc <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8002ce6:	6038      	str	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e75e      	b.n	8002baa <RI_GetRegisterMotor1+0xe6>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002cec:	2008      	movs	r0, #8
 8002cee:	e6fb      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	e741      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002cf4:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <RI_GetRegisterMotor1+0x334>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	f003 fd02 	bl	8006700 <memcpy>
 8002cfc:	2310      	movs	r3, #16
    uint8_t retVal = MCP_CMD_OK;
 8002cfe:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002d00:	8033      	strh	r3, [r6, #0]
        break;
 8002d02:	e6f1      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
 8002d04:	2005      	movs	r0, #5
 8002d06:	e750      	b.n	8002baa <RI_GetRegisterMotor1+0xe6>
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002d08:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d0a:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002d0c:	803a      	strh	r2, [r7, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002d0e:	2b11      	cmp	r3, #17
 8002d10:	d83c      	bhi.n	8002d8c <RI_GetRegisterMotor1+0x2c8>
 8002d12:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002d14:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002d16:	8033      	strh	r3, [r6, #0]
        break;
 8002d18:	e6e6      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
            *rawSize = 12;
 8002d1a:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002d1c:	b29b      	uxth	r3, r3
            *rawSize = 12;
 8002d1e:	803a      	strh	r2, [r7, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002d20:	2b0d      	cmp	r3, #13
 8002d22:	d91f      	bls.n	8002d64 <RI_GetRegisterMotor1+0x2a0>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002d24:	4935      	ldr	r1, [pc, #212]	; (8002dfc <RI_GetRegisterMotor1+0x338>)
 8002d26:	3204      	adds	r2, #4
 8002d28:	f003 fcea 	bl	8006700 <memcpy>
 8002d2c:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8002d2e:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002d30:	8033      	strh	r3, [r6, #0]
        break;
 8002d32:	e6d9      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
        *size = (*rawSize) + 2U;
 8002d34:	883b      	ldrh	r3, [r7, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002d36:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002d38:	3302      	adds	r3, #2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	8033      	strh	r3, [r6, #0]
        break;
 8002d3e:	e6d3      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002d40:	4825      	ldr	r0, [pc, #148]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002d42:	f7fe fb5d 	bl	8001400 <MCI_GetSTMState>
 8002d46:	7038      	strb	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d48:	2000      	movs	r0, #0
              break;
 8002d4a:	e6f3      	b.n	8002b34 <RI_GetRegisterMotor1+0x70>
              *data = (uint8_t)RUC_GetNumberOfPhases(&RevUpControlM1);
 8002d4c:	482c      	ldr	r0, [pc, #176]	; (8002e00 <RI_GetRegisterMotor1+0x33c>)
 8002d4e:	f002 ff85 	bl	8005c5c <RUC_GetNumberOfPhases>
 8002d52:	7038      	strb	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d54:	2000      	movs	r0, #0
              break;
 8002d56:	e6ed      	b.n	8002b34 <RI_GetRegisterMotor1+0x70>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002d58:	481f      	ldr	r0, [pc, #124]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002d5a:	f7fe fbbf 	bl	80014dc <MCI_GetControlMode>
 8002d5e:	7038      	strb	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d60:	2000      	movs	r0, #0
              break;
 8002d62:	e6e7      	b.n	8002b34 <RI_GetRegisterMotor1+0x70>
 8002d64:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002d66:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002d68:	8033      	strh	r3, [r6, #0]
        break;
 8002d6a:	e6bd      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8002d6c:	481c      	ldr	r0, [pc, #112]	; (8002de0 <RI_GetRegisterMotor1+0x31c>)
 8002d6e:	f003 fb67 	bl	8006440 <STO_PLL_GetObservedBemfLevel>
 8002d72:	6038      	str	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d74:	2000      	movs	r0, #0
              break;
 8002d76:	e718      	b.n	8002baa <RI_GetRegisterMotor1+0xe6>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8002d78:	4819      	ldr	r0, [pc, #100]	; (8002de0 <RI_GetRegisterMotor1+0x31c>)
 8002d7a:	f003 fb5d 	bl	8006438 <STO_PLL_GetEstimatedBemfLevel>
 8002d7e:	6038      	str	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d80:	2000      	movs	r0, #0
              break;
 8002d82:	e712      	b.n	8002baa <RI_GetRegisterMotor1+0xe6>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002d84:	4814      	ldr	r0, [pc, #80]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002d86:	f7fe fbd5 	bl	8001534 <MCI_GetAvrgMecSpeedUnit>
 8002d8a:	e709      	b.n	8002ba0 <RI_GetRegisterMotor1+0xdc>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <RI_GetRegisterMotor1+0x340>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	f003 fcb6 	bl	8006700 <memcpy>
 8002d94:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8002d96:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8002d98:	8033      	strh	r3, [r6, #0]
        break;
 8002d9a:	e6a5      	b.n	8002ae8 <RI_GetRegisterMotor1+0x24>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8002d9c:	480e      	ldr	r0, [pc, #56]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002d9e:	f7fe fbe7 	bl	8001570 <MCI_GetValphabeta>
 8002da2:	0c00      	lsrs	r0, r0, #16
 8002da4:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002da6:	2000      	movs	r0, #0
              break;
 8002da8:	e6e6      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <RI_GetRegisterMotor1+0x31c>)
 8002dac:	f002 ff96 	bl	8005cdc <SPD_GetS16Speed>
 8002db0:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002db2:	2000      	movs	r0, #0
              break;
 8002db4:	e6e0      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002db6:	480b      	ldr	r0, [pc, #44]	; (8002de4 <RI_GetRegisterMotor1+0x320>)
 8002db8:	f002 f91a 	bl	8004ff0 <PID_GetKD>
 8002dbc:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002dbe:	2000      	movs	r0, #0
              break;
 8002dc0:	e6da      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8002dc2:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <RI_GetRegisterMotor1+0x314>)
 8002dc4:	f7fe fbc4 	bl	8001550 <MCI_GetVqd>
 8002dc8:	0c00      	lsrs	r0, r0, #16
 8002dca:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002dcc:	2000      	movs	r0, #0
              break;
 8002dce:	e6d3      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002dd0:	08006c80 	.word	0x08006c80
 8002dd4:	2000035c 	.word	0x2000035c
 8002dd8:	20000670 	.word	0x20000670
 8002ddc:	20000234 	.word	0x20000234
 8002de0:	20000200 	.word	0x20000200
 8002de4:	20000078 	.word	0x20000078
 8002de8:	fffff1b0 	.word	0xfffff1b0
 8002dec:	0000ffbf 	.word	0x0000ffbf
 8002df0:	00001b58 	.word	0x00001b58
 8002df4:	200003c0 	.word	0x200003c0
 8002df8:	200003d4 	.word	0x200003d4
 8002dfc:	200003d8 	.word	0x200003d8
 8002e00:	20000174 	.word	0x20000174
 8002e04:	200003d0 	.word	0x200003d0
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002e08:	4814      	ldr	r0, [pc, #80]	; (8002e5c <RI_GetRegisterMotor1+0x398>)
 8002e0a:	f002 f8e3 	bl	8004fd4 <PID_GetKP>
 8002e0e:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e10:	2000      	movs	r0, #0
              break;
 8002e12:	e6b1      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8002e14:	4812      	ldr	r0, [pc, #72]	; (8002e60 <RI_GetRegisterMotor1+0x39c>)
 8002e16:	f002 f8e1 	bl	8004fdc <PID_GetKI>
 8002e1a:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e1c:	2000      	movs	r0, #0
              break;
 8002e1e:	e6ab      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8002e20:	4810      	ldr	r0, [pc, #64]	; (8002e64 <RI_GetRegisterMotor1+0x3a0>)
 8002e22:	f003 fae5 	bl	80063f0 <STO_PLL_GetEstimatedBemf>
 8002e26:	0c00      	lsrs	r0, r0, #16
 8002e28:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e2a:	2000      	movs	r0, #0
              break;
 8002e2c:	e6a4      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <RI_GetRegisterMotor1+0x3a4>)
 8002e30:	f002 f860 	bl	8004ef4 <VBS_GetAvBusVoltage_V>
 8002e34:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e36:	2000      	movs	r0, #0
              break;
 8002e38:	e69e      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8002e3a:	ac05      	add	r4, sp, #20
 8002e3c:	4809      	ldr	r0, [pc, #36]	; (8002e64 <RI_GetRegisterMotor1+0x3a0>)
 8002e3e:	0022      	movs	r2, r4
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	f003 fadf 	bl	8006404 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002e46:	8823      	ldrh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e48:	2000      	movs	r0, #0
              *regdata16 = hC2;
 8002e4a:	803b      	strh	r3, [r7, #0]
              break;
 8002e4c:	e694      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8002e4e:	4807      	ldr	r0, [pc, #28]	; (8002e6c <RI_GetRegisterMotor1+0x3a8>)
 8002e50:	f7fe fb7e 	bl	8001550 <MCI_GetVqd>
 8002e54:	8038      	strh	r0, [r7, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002e56:	2000      	movs	r0, #0
              break;
 8002e58:	e68e      	b.n	8002b78 <RI_GetRegisterMotor1+0xb4>
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	20000078 	.word	0x20000078
 8002e60:	20000234 	.word	0x20000234
 8002e64:	20000200 	.word	0x20000200
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000670 	.word	0x20000670

08002e70 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e70:	4955      	ldr	r1, [pc, #340]	; (8002fc8 <RCM_RegisterRegConv+0x158>)
{
 8002e72:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e74:	680b      	ldr	r3, [r1, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d029      	beq.n	8002ece <RCM_RegisterRegConv+0x5e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e7a:	791e      	ldrb	r6, [r3, #4]
 8002e7c:	7904      	ldrb	r4, [r0, #4]
 8002e7e:	42a6      	cmp	r6, r4
 8002e80:	d019      	beq.n	8002eb6 <RCM_RegisterRegConv+0x46>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e82:	684d      	ldr	r5, [r1, #4]
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	d03b      	beq.n	8002f00 <RCM_RegisterRegConv+0x90>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e88:	792a      	ldrb	r2, [r5, #4]
  uint8_t handle = 255U;
 8002e8a:	23ff      	movs	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e8c:	42a2      	cmp	r2, r4
 8002e8e:	d025      	beq.n	8002edc <RCM_RegisterRegConv+0x6c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e90:	688d      	ldr	r5, [r1, #8]
 8002e92:	2d00      	cmp	r5, #0
 8002e94:	d05d      	beq.n	8002f52 <RCM_RegisterRegConv+0xe2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e96:	792a      	ldrb	r2, [r5, #4]
 8002e98:	42a2      	cmp	r2, r4
 8002e9a:	d029      	beq.n	8002ef0 <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e9c:	68cd      	ldr	r5, [r1, #12]
 8002e9e:	2d00      	cmp	r5, #0
 8002ea0:	d064      	beq.n	8002f6c <RCM_RegisterRegConv+0xfc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002ea2:	792a      	ldrb	r2, [r5, #4]
 8002ea4:	42a2      	cmp	r2, r4
 8002ea6:	d068      	beq.n	8002f7a <RCM_RegisterRegConv+0x10a>
    while (i < RCM_MAX_CONV)
 8002ea8:	021c      	lsls	r4, r3, #8
 8002eaa:	431c      	orrs	r4, r3
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d95b      	bls.n	8002f68 <RCM_RegisterRegConv+0xf8>
 8002eb0:	23ff      	movs	r3, #255	; 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8002eb2:	7303      	strb	r3, [r0, #12]
}
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6802      	ldr	r2, [r0, #0]
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d026      	beq.n	8002f0c <RCM_RegisterRegConv+0x9c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002ebe:	684d      	ldr	r5, [r1, #4]
 8002ec0:	2d00      	cmp	r5, #0
 8002ec2:	d1e1      	bne.n	8002e88 <RCM_RegisterRegConv+0x18>
 8002ec4:	688d      	ldr	r5, [r1, #8]
 8002ec6:	2d00      	cmp	r5, #0
 8002ec8:	d071      	beq.n	8002fae <RCM_RegisterRegConv+0x13e>
      i++;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e7e3      	b.n	8002e96 <RCM_RegisterRegConv+0x26>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002ece:	684d      	ldr	r5, [r1, #4]
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	d065      	beq.n	8002fa0 <RCM_RegisterRegConv+0x130>
 8002ed4:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002ed6:	792a      	ldrb	r2, [r5, #4]
 8002ed8:	42a2      	cmp	r2, r4
 8002eda:	d1d9      	bne.n	8002e90 <RCM_RegisterRegConv+0x20>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	6802      	ldr	r2, [r0, #0]
 8002ee0:	4295      	cmp	r5, r2
 8002ee2:	d1d5      	bne.n	8002e90 <RCM_RegisterRegConv+0x20>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	33ff      	adds	r3, #255	; 0xff
 8002ee8:	1c1c      	adds	r4, r3, #0
      i++;
 8002eea:	3b01      	subs	r3, #1
 8002eec:	3bff      	subs	r3, #255	; 0xff
 8002eee:	e00f      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002ef0:	682d      	ldr	r5, [r5, #0]
 8002ef2:	6802      	ldr	r2, [r0, #0]
 8002ef4:	4295      	cmp	r5, r2
 8002ef6:	d1d1      	bne.n	8002e9c <RCM_RegisterRegConv+0x2c>
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <RCM_RegisterRegConv+0x15c>)
 8002efa:	1c1c      	adds	r4, r3, #0
      i++;
 8002efc:	2302      	movs	r3, #2
 8002efe:	e007      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
 8002f00:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f02:	688d      	ldr	r5, [r1, #8]
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	d042      	beq.n	8002f8e <RCM_RegisterRegConv+0x11e>
 8002f08:	7904      	ldrb	r4, [r0, #4]
 8002f0a:	e7c4      	b.n	8002e96 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002f0c:	2400      	movs	r4, #0
    uint8_t i = 0;
 8002f0e:	2300      	movs	r3, #0
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002f10:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 8002f12:	009d      	lsls	r5, r3, #2
 8002f14:	5148      	str	r0, [r1, r5]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002f16:	492e      	ldr	r1, [pc, #184]	; (8002fd0 <RCM_RegisterRegConv+0x160>)
 8002f18:	00dd      	lsls	r5, r3, #3
 8002f1a:	506e      	str	r6, [r5, r1]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002f1c:	6891      	ldr	r1, [r2, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002f1e:	07c9      	lsls	r1, r1, #31
 8002f20:	d40e      	bmi.n	8002f40 <RCM_RegisterRegConv+0xd0>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f22:	6895      	ldr	r5, [r2, #8]
 8002f24:	492b      	ldr	r1, [pc, #172]	; (8002fd4 <RCM_RegisterRegConv+0x164>)
 8002f26:	400d      	ands	r5, r1
 8002f28:	3118      	adds	r1, #24
 8002f2a:	4329      	orrs	r1, r5
 8002f2c:	6091      	str	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002f2e:	6891      	ldr	r1, [r2, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002f30:	2900      	cmp	r1, #0
 8002f32:	dbfc      	blt.n	8002f2e <RCM_RegisterRegConv+0xbe>
  MODIFY_REG(ADCx->CR,
 8002f34:	6891      	ldr	r1, [r2, #8]
 8002f36:	4d27      	ldr	r5, [pc, #156]	; (8002fd4 <RCM_RegisterRegConv+0x164>)
 8002f38:	4029      	ands	r1, r5
 8002f3a:	2501      	movs	r5, #1
 8002f3c:	4329      	orrs	r1, r5
 8002f3e:	6091      	str	r1, [r2, #8]
      RCM_NoInj_array[handle].enable = false;
 8002f40:	2500      	movs	r5, #0
 8002f42:	0059      	lsls	r1, r3, #1
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <RCM_RegisterRegConv+0x168>)
 8002f46:	18c9      	adds	r1, r1, r3
 8002f48:	0049      	lsls	r1, r1, #1
 8002f4a:	548d      	strb	r5, [r1, r2]
      RCM_NoInj_array[handle].prev = handle;
 8002f4c:	1852      	adds	r2, r2, r1
 8002f4e:	8094      	strh	r4, [r2, #4]
 8002f50:	e7af      	b.n	8002eb2 <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d91a      	bls.n	8002f8c <RCM_RegisterRegConv+0x11c>
 8002f56:	68cb      	ldr	r3, [r1, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002f5c:	791a      	ldrb	r2, [r3, #4]
 8002f5e:	4294      	cmp	r4, r2
 8002f60:	d020      	beq.n	8002fa4 <RCM_RegisterRegConv+0x134>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <RCM_RegisterRegConv+0x15c>)
 8002f64:	1c1c      	adds	r4, r3, #0
      i++;
 8002f66:	2302      	movs	r3, #2
 8002f68:	6802      	ldr	r2, [r0, #0]
 8002f6a:	e7d1      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d913      	bls.n	8002f98 <RCM_RegisterRegConv+0x128>
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <RCM_RegisterRegConv+0x16c>)
 8002f72:	6802      	ldr	r2, [r0, #0]
 8002f74:	1c1c      	adds	r4, r3, #0
      i++;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e7ca      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
 8002f7a:	6802      	ldr	r2, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002f7c:	682c      	ldr	r4, [r5, #0]
 8002f7e:	4294      	cmp	r4, r2
 8002f80:	d000      	beq.n	8002f84 <RCM_RegisterRegConv+0x114>
 8002f82:	e791      	b.n	8002ea8 <RCM_RegisterRegConv+0x38>
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <RCM_RegisterRegConv+0x16c>)
 8002f86:	1c1c      	adds	r4, r3, #0
      i++;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e7c1      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	68cd      	ldr	r5, [r1, #12]
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	d001      	beq.n	8002f98 <RCM_RegisterRegConv+0x128>
 8002f94:	7904      	ldrb	r4, [r0, #4]
 8002f96:	e784      	b.n	8002ea2 <RCM_RegisterRegConv+0x32>
 8002f98:	6802      	ldr	r2, [r0, #0]
    while (i < RCM_MAX_CONV)
 8002f9a:	021c      	lsls	r4, r3, #8
 8002f9c:	431c      	orrs	r4, r3
    if (handle < RCM_MAX_CONV)
 8002f9e:	e7b7      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e7ae      	b.n	8002f02 <RCM_RegisterRegConv+0x92>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6802      	ldr	r2, [r0, #0]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d0eb      	beq.n	8002f84 <RCM_RegisterRegConv+0x114>
 8002fac:	e7a4      	b.n	8002ef8 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002fae:	68cd      	ldr	r5, [r1, #12]
 8002fb0:	2d00      	cmp	r5, #0
 8002fb2:	d006      	beq.n	8002fc2 <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002fb4:	792c      	ldrb	r4, [r5, #4]
      i++;
 8002fb6:	2301      	movs	r3, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002fb8:	42b4      	cmp	r4, r6
 8002fba:	d0df      	beq.n	8002f7c <RCM_RegisterRegConv+0x10c>
 8002fbc:	2402      	movs	r4, #2
 8002fbe:	34ff      	adds	r4, #255	; 0xff
 8002fc0:	e7a6      	b.n	8002f10 <RCM_RegisterRegConv+0xa0>
      i++;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e7e9      	b.n	8002f9a <RCM_RegisterRegConv+0x12a>
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20000840 	.word	0x20000840
 8002fcc:	00000202 	.word	0x00000202
 8002fd0:	200007fc 	.word	0x200007fc
 8002fd4:	7fffffe8 	.word	0x7fffffe8
 8002fd8:	2000081c 	.word	0x2000081c
 8002fdc:	00000303 	.word	0x00000303

08002fe0 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8002fe2:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <RCM_ExecRegularConv+0x170>)
 8002fe6:	0050      	lsls	r0, r2, #1
 8002fe8:	1881      	adds	r1, r0, r2
 8002fea:	0049      	lsls	r1, r1, #1
 8002fec:	5c59      	ldrb	r1, [r3, r1]
 8002fee:	2900      	cmp	r1, #0
 8002ff0:	d142      	bne.n	8003078 <RCM_ExecRegularConv+0x98>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8002ff2:	7819      	ldrb	r1, [r3, #0]
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	d11c      	bne.n	8003032 <RCM_ExecRegularConv+0x52>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002ff8:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 8002ffa:	7999      	ldrb	r1, [r3, #6]
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d100      	bne.n	8003002 <RCM_ExecRegularConv+0x22>
 8003000:	e07a      	b.n	80030f8 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003002:	7add      	ldrb	r5, [r3, #11]
 8003004:	42aa      	cmp	r2, r5
 8003006:	d200      	bcs.n	800300a <RCM_ExecRegularConv+0x2a>
 8003008:	e094      	b.n	8003134 <RCM_ExecRegularConv+0x154>
      if (true == RCM_NoInj_array [i].enable)
 800300a:	7b19      	ldrb	r1, [r3, #12]
 800300c:	2900      	cmp	r1, #0
 800300e:	d100      	bne.n	8003012 <RCM_ExecRegularConv+0x32>
 8003010:	e093      	b.n	800313a <RCM_ExecRegularConv+0x15a>
        if (RCM_NoInj_array[i].next > handle)
 8003012:	7c5d      	ldrb	r5, [r3, #17]
 8003014:	42aa      	cmp	r2, r5
 8003016:	d200      	bcs.n	800301a <RCM_ExecRegularConv+0x3a>
 8003018:	e094      	b.n	8003144 <RCM_ExecRegularConv+0x164>
      if (true == RCM_NoInj_array [i].enable)
 800301a:	7c99      	ldrb	r1, [r3, #18]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 800301c:	2502      	movs	r5, #2
      if (true == RCM_NoInj_array [i].enable)
 800301e:	2900      	cmp	r1, #0
 8003020:	d100      	bne.n	8003024 <RCM_ExecRegularConv+0x44>
 8003022:	e073      	b.n	800310c <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003024:	7ddd      	ldrb	r5, [r3, #23]
 8003026:	4295      	cmp	r5, r2
 8003028:	d800      	bhi.n	800302c <RCM_ExecRegularConv+0x4c>
 800302a:	e08e      	b.n	800314a <RCM_ExecRegularConv+0x16a>
      i++;
 800302c:	2603      	movs	r6, #3
      if (true == RCM_NoInj_array [i].enable)
 800302e:	2403      	movs	r4, #3
 8003030:	e005      	b.n	800303e <RCM_ExecRegularConv+0x5e>
        if (RCM_NoInj_array[i].next > handle)
 8003032:	795d      	ldrb	r5, [r3, #5]
 8003034:	4295      	cmp	r5, r2
 8003036:	d800      	bhi.n	800303a <RCM_ExecRegularConv+0x5a>
 8003038:	e076      	b.n	8003128 <RCM_ExecRegularConv+0x148>
  uint8_t i=0;
 800303a:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 800303c:	2400      	movs	r4, #0
          RCM_NoInj_array[handle].next = formerNext;
 800303e:	1881      	adds	r1, r0, r2
 8003040:	0049      	lsls	r1, r1, #1
 8003042:	1859      	adds	r1, r3, r1
 8003044:	714d      	strb	r5, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 8003046:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8003048:	0061      	lsls	r1, r4, #1
 800304a:	1909      	adds	r1, r1, r4
 800304c:	0049      	lsls	r1, r1, #1
 800304e:	1859      	adds	r1, r3, r1
 8003050:	714a      	strb	r2, [r1, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003052:	0069      	lsls	r1, r5, #1
 8003054:	1949      	adds	r1, r1, r5
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8003056:	0049      	lsls	r1, r1, #1
 8003058:	1859      	adds	r1, r3, r1
 800305a:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800305c:	493d      	ldr	r1, [pc, #244]	; (8003154 <RCM_ExecRegularConv+0x174>)
 800305e:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 8003060:	2601      	movs	r6, #1
 8003062:	1884      	adds	r4, r0, r2
 8003064:	0064      	lsls	r4, r4, #1
 8003066:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003068:	006c      	lsls	r4, r5, #1
 800306a:	1964      	adds	r4, r4, r5
 800306c:	0064      	lsls	r4, r4, #1
 800306e:	191c      	adds	r4, r3, r4
 8003070:	7864      	ldrb	r4, [r4, #1]
 8003072:	2c01      	cmp	r4, #1
 8003074:	d000      	beq.n	8003078 <RCM_ExecRegularConv+0x98>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003076:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003078:	24a0      	movs	r4, #160	; 0xa0
 800307a:	4937      	ldr	r1, [pc, #220]	; (8003158 <RCM_ExecRegularConv+0x178>)
 800307c:	5d09      	ldrb	r1, [r1, r4]
 800307e:	2900      	cmp	r1, #0
 8003080:	d135      	bne.n	80030ee <RCM_ExecRegularConv+0x10e>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003082:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8003084:	4e35      	ldr	r6, [pc, #212]	; (800315c <RCM_ExecRegularConv+0x17c>)
 8003086:	0091      	lsls	r1, r2, #2
 8003088:	5875      	ldr	r5, [r6, r1]
 800308a:	6829      	ldr	r1, [r5, #0]
 800308c:	68cc      	ldr	r4, [r1, #12]
 800308e:	43bc      	bics	r4, r7
 8003090:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003092:	68cc      	ldr	r4, [r1, #12]
 8003094:	4f32      	ldr	r7, [pc, #200]	; (8003160 <RCM_ExecRegularConv+0x180>)
 8003096:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003098:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800309a:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800309c:	694c      	ldr	r4, [r1, #20]
 800309e:	43bc      	bics	r4, r7
 80030a0:	68af      	ldr	r7, [r5, #8]
 80030a2:	433c      	orrs	r4, r7
 80030a4:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030a6:	2480      	movs	r4, #128	; 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80030a8:	792d      	ldrb	r5, [r5, #4]
 80030aa:	01a4      	lsls	r4, r4, #6
 80030ac:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80030ae:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030b0:	0b64      	lsrs	r4, r4, #13
 80030b2:	628c      	str	r4, [r1, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80030b4:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 80030b6:	688c      	ldr	r4, [r1, #8]
 80030b8:	4f2a      	ldr	r7, [pc, #168]	; (8003164 <RCM_ExecRegularConv+0x184>)
 80030ba:	403c      	ands	r4, r7
 80030bc:	432c      	orrs	r4, r5
 80030be:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80030c0:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 80030c2:	4225      	tst	r5, r4
 80030c4:	d0fc      	beq.n	80030c0 <RCM_ExecRegularConv+0xe0>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80030c6:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80030c8:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80030ca:	1881      	adds	r1, r0, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 80030cc:	4d21      	ldr	r5, [pc, #132]	; (8003154 <RCM_ExecRegularConv+0x174>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80030ce:	0049      	lsls	r1, r1, #1
 80030d0:	1859      	adds	r1, r3, r1
 80030d2:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 80030d4:	782c      	ldrb	r4, [r5, #0]
 80030d6:	00a4      	lsls	r4, r4, #2
 80030d8:	5934      	ldr	r4, [r6, r4]
 80030da:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80030dc:	68f4      	ldr	r4, [r6, #12]
 80030de:	43bc      	bics	r4, r7
 80030e0:	3f02      	subs	r7, #2
 80030e2:	433c      	orrs	r4, r7
 80030e4:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80030e6:	794c      	ldrb	r4, [r1, #5]
 80030e8:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 80030ea:	2402      	movs	r4, #2
 80030ec:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80030ee:	1880      	adds	r0, r0, r2
 80030f0:	0040      	lsls	r0, r0, #1
 80030f2:	181b      	adds	r3, r3, r0
  return (retVal);
 80030f4:	8858      	ldrh	r0, [r3, #2]
}
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (true == RCM_NoInj_array [i].enable)
 80030f8:	7b19      	ldrb	r1, [r3, #12]
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d000      	beq.n	8003100 <RCM_ExecRegularConv+0x120>
 80030fe:	e788      	b.n	8003012 <RCM_ExecRegularConv+0x32>
 8003100:	7c99      	ldrb	r1, [r3, #18]
 8003102:	2900      	cmp	r1, #0
 8003104:	d000      	beq.n	8003108 <RCM_ExecRegularConv+0x128>
 8003106:	e78d      	b.n	8003024 <RCM_ExecRegularConv+0x44>
       if (LastEnable != RCM_MAX_CONV )
 8003108:	2d04      	cmp	r5, #4
 800310a:	d00f      	beq.n	800312c <RCM_ExecRegularConv+0x14c>
         formerNext = RCM_NoInj_array[LastEnable].next;
 800310c:	0069      	lsls	r1, r5, #1
 800310e:	1949      	adds	r1, r1, r5
 8003110:	0049      	lsls	r1, r1, #1
 8003112:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 8003114:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003116:	794e      	ldrb	r6, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003118:	0064      	lsls	r4, r4, #1
 800311a:	191c      	adds	r4, r3, r4
 800311c:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 800311e:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003120:	0071      	lsls	r1, r6, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003122:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 8003124:	1989      	adds	r1, r1, r6
 8003126:	e796      	b.n	8003056 <RCM_ExecRegularConv+0x76>
  uint8_t i=0;
 8003128:	2500      	movs	r5, #0
 800312a:	e766      	b.n	8002ffa <RCM_ExecRegularConv+0x1a>
         RCM_currentHandle = handle;
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <RCM_ExecRegularConv+0x174>)
 800312e:	0015      	movs	r5, r2
 8003130:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 8003132:	e795      	b.n	8003060 <RCM_ExecRegularConv+0x80>
      i++;
 8003134:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8003136:	2401      	movs	r4, #1
 8003138:	e781      	b.n	800303e <RCM_ExecRegularConv+0x5e>
 800313a:	7c99      	ldrb	r1, [r3, #18]
      i++;
 800313c:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 800313e:	2900      	cmp	r1, #0
 8003140:	d0e4      	beq.n	800310c <RCM_ExecRegularConv+0x12c>
 8003142:	e76f      	b.n	8003024 <RCM_ExecRegularConv+0x44>
      i++;
 8003144:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8003146:	2402      	movs	r4, #2
 8003148:	e779      	b.n	800303e <RCM_ExecRegularConv+0x5e>
      i++;
 800314a:	2503      	movs	r5, #3
 800314c:	e7de      	b.n	800310c <RCM_ExecRegularConv+0x12c>
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	2000081c 	.word	0x2000081c
 8003154:	2000083c 	.word	0x2000083c
 8003158:	200000b4 	.word	0x200000b4
 800315c:	20000840 	.word	0x20000840
 8003160:	fffff23f 	.word	0xfffff23f
 8003164:	7fffffe8 	.word	0x7fffffe8

08003168 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <RCM_ExecUserConv+0x50>)
 800316c:	681c      	ldr	r4, [r3, #0]
 800316e:	2c00      	cmp	r4, #0
 8003170:	d004      	beq.n	800317c <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003172:	4d12      	ldr	r5, [pc, #72]	; (80031bc <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 8003174:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003176:	782b      	ldrb	r3, [r5, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d000      	beq.n	800317e <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 800317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800317e:	0020      	movs	r0, r4
 8003180:	f7ff ff2e 	bl	8002fe0 <RCM_ExecRegularConv>
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8003186:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003188:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 800318a:	1992      	adds	r2, r2, r6
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <RCM_ExecUserConv+0x5c>)
 800318e:	0052      	lsls	r2, r2, #1
 8003190:	189b      	adds	r3, r3, r2
 8003192:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003194:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 800319a:	2302      	movs	r3, #2
 800319c:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <RCM_ExecUserConv+0x60>)
 80031a0:	00f6      	lsls	r6, r6, #3
 80031a2:	58f7      	ldr	r7, [r6, r3]
 80031a4:	2f00      	cmp	r7, #0
 80031a6:	d0e9      	beq.n	800317c <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80031a8:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80031aa:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80031ac:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80031ae:	0020      	movs	r0, r4
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	47b8      	blx	r7
}
 80031b4:	e7e2      	b.n	800317c <RCM_ExecUserConv+0x14>
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000834 	.word	0x20000834
 80031bc:	20000838 	.word	0x20000838
 80031c0:	2000083a 	.word	0x2000083a
 80031c4:	2000081c 	.word	0x2000081c
 80031c8:	200007fc 	.word	0x200007fc

080031cc <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 80031cc:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <RCM_ExecNextConv+0x5c>)
 80031d0:	4916      	ldr	r1, [pc, #88]	; (800322c <RCM_ExecNextConv+0x60>)
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	0053      	lsls	r3, r2, #1
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	5c58      	ldrb	r0, [r3, r1]
 80031dc:	2800      	cmp	r0, #0
 80031de:	d021      	beq.n	8003224 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031e0:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80031e2:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80031e4:	4812      	ldr	r0, [pc, #72]	; (8003230 <RCM_ExecNextConv+0x64>)
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80031ea:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80031ec:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031ee:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80031f0:	68d0      	ldr	r0, [r2, #12]
 80031f2:	43b0      	bics	r0, r6
 80031f4:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80031f6:	68d0      	ldr	r0, [r2, #12]
 80031f8:	4e0e      	ldr	r6, [pc, #56]	; (8003234 <RCM_ExecNextConv+0x68>)
 80031fa:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80031fc:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80031fe:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003200:	6950      	ldr	r0, [r2, #20]
 8003202:	43b0      	bics	r0, r6
 8003204:	68a6      	ldr	r6, [r4, #8]
 8003206:	4330      	orrs	r0, r6
 8003208:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800320a:	7920      	ldrb	r0, [r4, #4]
 800320c:	2401      	movs	r4, #1
 800320e:	0026      	movs	r6, r4
 8003210:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003212:	0370      	lsls	r0, r6, #13
 8003214:	0b40      	lsrs	r0, r0, #13
 8003216:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8003218:	6890      	ldr	r0, [r2, #8]
 800321a:	4e07      	ldr	r6, [pc, #28]	; (8003238 <RCM_ExecNextConv+0x6c>)
 800321c:	4030      	ands	r0, r6
 800321e:	4328      	orrs	r0, r5
 8003220:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003222:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003224:	bd70      	pop	{r4, r5, r6, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	2000083c 	.word	0x2000083c
 800322c:	2000081c 	.word	0x2000081c
 8003230:	20000840 	.word	0x20000840
 8003234:	fffff23f 	.word	0xfffff23f
 8003238:	7fffffe8 	.word	0x7fffffe8

0800323c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 800323c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800323e:	4c13      	ldr	r4, [pc, #76]	; (800328c <RCM_ReadOngoingConv+0x50>)
 8003240:	4913      	ldr	r1, [pc, #76]	; (8003290 <RCM_ReadOngoingConv+0x54>)
 8003242:	7820      	ldrb	r0, [r4, #0]
 8003244:	0042      	lsls	r2, r0, #1
 8003246:	1813      	adds	r3, r2, r0
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	5ccd      	ldrb	r5, [r1, r3]
 800324c:	2d00      	cmp	r5, #0
 800324e:	d00f      	beq.n	8003270 <RCM_ReadOngoingConv+0x34>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003250:	2702      	movs	r7, #2
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003252:	4d10      	ldr	r5, [pc, #64]	; (8003294 <RCM_ReadOngoingConv+0x58>)
 8003254:	0086      	lsls	r6, r0, #2
 8003256:	5975      	ldr	r5, [r6, r5]
    status = RCM_NoInj_array[RCM_currentHandle].status;
 8003258:	18cb      	adds	r3, r1, r3
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800325a:	682e      	ldr	r6, [r5, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800325c:	6835      	ldr	r5, [r6, #0]
 800325e:	46ac      	mov	ip, r5
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003260:	785d      	ldrb	r5, [r3, #1]
 8003262:	43bd      	bics	r5, r7
 8003264:	d105      	bne.n	8003272 <RCM_ReadOngoingConv+0x36>
      /* Restore back DMA configuration */
      LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003266:	1812      	adds	r2, r2, r0
 8003268:	0052      	lsls	r2, r2, #1
 800326a:	1889      	adds	r1, r1, r2
 800326c:	794b      	ldrb	r3, [r1, #5]
 800326e:	7023      	strb	r3, [r4, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8003270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003272:	4665      	mov	r5, ip
 8003274:	076d      	lsls	r5, r5, #29
 8003276:	d5f6      	bpl.n	8003266 <RCM_ReadOngoingConv+0x2a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003278:	6c35      	ldr	r5, [r6, #64]	; 0x40
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 800327a:	705f      	strb	r7, [r3, #1]
                    = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 800327c:	805d      	strh	r5, [r3, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800327e:	2503      	movs	r5, #3
 8003280:	68f3      	ldr	r3, [r6, #12]
 8003282:	43ab      	bics	r3, r5
 8003284:	3d02      	subs	r5, #2
 8003286:	432b      	orrs	r3, r5
 8003288:	60f3      	str	r3, [r6, #12]
}
 800328a:	e7ec      	b.n	8003266 <RCM_ReadOngoingConv+0x2a>
 800328c:	2000083c 	.word	0x2000083c
 8003290:	2000081c 	.word	0x2000081c
 8003294:	20000840 	.word	0x20000840

08003298 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003298:	2201      	movs	r2, #1
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_MspInit+0x2c>)
{
 800329c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	6999      	ldr	r1, [r3, #24]
 80032a0:	4311      	orrs	r1, r2
 80032a2:	6199      	str	r1, [r3, #24]
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	9200      	str	r2, [sp, #0]
 80032ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	0549      	lsls	r1, r1, #21
 80032b2:	430a      	orrs	r2, r1
 80032b4:	61da      	str	r2, [r3, #28]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	400b      	ands	r3, r1
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	b002      	add	sp, #8
 80032c0:	4770      	bx	lr
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	0004      	movs	r4, r0
 80032cc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ce:	2214      	movs	r2, #20
 80032d0:	2100      	movs	r1, #0
 80032d2:	a804      	add	r0, sp, #16
 80032d4:	f003 f9e8 	bl	80066a8 <memset>
  if(hadc->Instance==ADC1)
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_ADC_MspInit+0xb4>)
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032e0:	b00a      	add	sp, #40	; 0x28
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_ADC_MspInit+0xb8>)
 80032e8:	0089      	lsls	r1, r1, #2
 80032ea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032f6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032fa:	9201      	str	r2, [sp, #4]
 80032fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	0289      	lsls	r1, r1, #10
 8003302:	430a      	orrs	r2, r1
 8003304:	615a      	str	r2, [r3, #20]
 8003306:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	9202      	str	r2, [sp, #8]
 8003310:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	02c9      	lsls	r1, r1, #11
 8003316:	430a      	orrs	r2, r1
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 800331c:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331e:	400b      	ands	r3, r1
 8003320:	9303      	str	r3, [sp, #12]
 8003322:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8003324:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8003328:	9204      	str	r2, [sp, #16]
 800332a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	f000 fc8a 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003330:	2303      	movs	r3, #3
 8003332:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003334:	4813      	ldr	r0, [pc, #76]	; (8003384 <HAL_ADC_MspInit+0xbc>)
 8003336:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003338:	9204      	str	r2, [sp, #16]
 800333a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800333e:	f000 fc81 	bl	8003c44 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8003342:	4d11      	ldr	r5, [pc, #68]	; (8003388 <HAL_ADC_MspInit+0xc0>)
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003346:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8003348:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800334e:	3380      	adds	r3, #128	; 0x80
 8003350:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003358:	2320      	movs	r3, #32
 800335a:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003360:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003362:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003364:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003366:	f000 fc39 	bl	8003bdc <HAL_DMA_Init>
 800336a:	2800      	cmp	r0, #0
 800336c:	d102      	bne.n	8003374 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800336e:	6325      	str	r5, [r4, #48]	; 0x30
 8003370:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003372:	e7b5      	b.n	80032e0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8003374:	f7fd ffbe 	bl	80012f4 <Error_Handler>
 8003378:	e7f9      	b.n	800336e <HAL_ADC_MspInit+0xa6>
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	40012400 	.word	0x40012400
 8003380:	40021000 	.word	0x40021000
 8003384:	48000400 	.word	0x48000400
 8003388:	200004d4 	.word	0x200004d4
 800338c:	40020008 	.word	0x40020008

08003390 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003390:	b510      	push	{r4, lr}
 8003392:	0004      	movs	r4, r0
 8003394:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003396:	2214      	movs	r2, #20
 8003398:	2100      	movs	r1, #0
 800339a:	a802      	add	r0, sp, #8
 800339c:	f003 f984 	bl	80066a8 <memset>
  if(htim_pwm->Instance==TIM1)
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_TIM_PWM_MspInit+0x5c>)
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033a8:	b008      	add	sp, #32
 80033aa:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_TIM_PWM_MspInit+0x60>)
 80033b0:	0109      	lsls	r1, r1, #4
 80033b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80033b4:	480f      	ldr	r0, [pc, #60]	; (80033f4 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b6:	430a      	orrs	r2, r1
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	02c9      	lsls	r1, r1, #11
 80033c8:	430a      	orrs	r2, r1
 80033ca:	615a      	str	r2, [r3, #20]
 80033cc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80033ce:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d0:	400b      	ands	r3, r1
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80033d6:	2302      	movs	r3, #2
 80033d8:	0152      	lsls	r2, r2, #5
 80033da:	9202      	str	r2, [sp, #8]
 80033dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033de:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80033e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80033e4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f000 fc2d 	bl	8003c44 <HAL_GPIO_Init>
}
 80033ea:	e7dd      	b.n	80033a8 <HAL_TIM_PWM_MspInit+0x18>
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	48000400 	.word	0x48000400

080033f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033f8:	b5d0      	push	{r4, r6, r7, lr}
 80033fa:	0004      	movs	r4, r0
 80033fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fe:	2214      	movs	r2, #20
 8003400:	2100      	movs	r1, #0
 8003402:	a802      	add	r0, sp, #8
 8003404:	f003 f950 	bl	80066a8 <memset>
  if(htim->Instance==TIM1)
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_TIM_MspPostInit+0x7c>)
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003410:	b008      	add	sp, #32
 8003412:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_TIM_MspPostInit+0x80>)
 8003418:	02c9      	lsls	r1, r1, #11
 800341a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800341c:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	430a      	orrs	r2, r1
 8003420:	615a      	str	r2, [r3, #20]
 8003422:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003424:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003426:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	9200      	str	r2, [sp, #0]
 800342c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	0289      	lsls	r1, r1, #10
 8003432:	430a      	orrs	r2, r1
 8003434:	615a      	str	r2, [r3, #20]
 8003436:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003438:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	400b      	ands	r3, r1
 800343c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800343e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003442:	2302      	movs	r3, #2
 8003444:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	a902      	add	r1, sp, #8
 8003448:	480c      	ldr	r0, [pc, #48]	; (800347c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800344a:	9202      	str	r2, [sp, #8]
 800344c:	9303      	str	r3, [sp, #12]
 800344e:	9604      	str	r6, [sp, #16]
 8003450:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003452:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003454:	f000 fbf6 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003458:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800345c:	2302      	movs	r3, #2
 800345e:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	a902      	add	r1, sp, #8
 8003462:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003464:	9202      	str	r2, [sp, #8]
 8003466:	9303      	str	r3, [sp, #12]
 8003468:	9604      	str	r6, [sp, #16]
 800346a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800346c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f000 fbe9 	bl	8003c44 <HAL_GPIO_Init>
}
 8003472:	e7cd      	b.n	8003410 <HAL_TIM_MspPostInit+0x18>
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40021000 	.word	0x40021000
 800347c:	48000400 	.word	0x48000400

08003480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003480:	b530      	push	{r4, r5, lr}
 8003482:	0004      	movs	r4, r0
 8003484:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003486:	2214      	movs	r2, #20
 8003488:	2100      	movs	r1, #0
 800348a:	a802      	add	r0, sp, #8
 800348c:	f003 f90c 	bl	80066a8 <memset>
  if(huart->Instance==USART1)
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_UART_MspInit+0xb0>)
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003498:	b009      	add	sp, #36	; 0x24
 800349a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_UART_MspInit+0xb4>)
 80034a0:	01c9      	lsls	r1, r1, #7
 80034a2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a4:	4824      	ldr	r0, [pc, #144]	; (8003538 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80034a6:	430a      	orrs	r2, r1
 80034a8:	619a      	str	r2, [r3, #24]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ae:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80034b0:	9200      	str	r2, [sp, #0]
 80034b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	02c9      	lsls	r1, r1, #11
 80034b8:	430a      	orrs	r2, r1
 80034ba:	615a      	str	r2, [r3, #20]
 80034bc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80034be:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c0:	400b      	ands	r3, r1
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80034c6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80034ca:	9202      	str	r2, [sp, #8]
 80034cc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	f000 fbb9 	bl	8003c44 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80034d2:	4d1a      	ldr	r5, [pc, #104]	; (800353c <HAL_UART_MspInit+0xbc>)
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034d6:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80034d8:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034da:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034dc:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034de:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e0:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034e2:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034e4:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e6:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034e8:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034ea:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034ec:	f000 fb76 	bl	8003bdc <HAL_DMA_Init>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d116      	bne.n	8003522 <HAL_UART_MspInit+0xa2>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_UART_MspInit+0xc4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034f6:	6765      	str	r5, [r4, #116]	; 0x74
 80034f8:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034fa:	4d13      	ldr	r5, [pc, #76]	; (8003548 <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80034fe:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003500:	2310      	movs	r3, #16
 8003502:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003504:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003506:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003508:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800350a:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350c:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800350e:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003510:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003512:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003514:	f000 fb62 	bl	8003bdc <HAL_DMA_Init>
 8003518:	2800      	cmp	r0, #0
 800351a:	d105      	bne.n	8003528 <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800351c:	6725      	str	r5, [r4, #112]	; 0x70
 800351e:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003520:	e7ba      	b.n	8003498 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003522:	f7fd fee7 	bl	80012f4 <Error_Handler>
 8003526:	e7e5      	b.n	80034f4 <HAL_UART_MspInit+0x74>
      Error_Handler();
 8003528:	f7fd fee4 	bl	80012f4 <Error_Handler>
 800352c:	e7f6      	b.n	800351c <HAL_UART_MspInit+0x9c>
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40013800 	.word	0x40013800
 8003534:	40021000 	.word	0x40021000
 8003538:	48000400 	.word	0x48000400
 800353c:	20000518 	.word	0x20000518
 8003540:	40020030 	.word	0x40020030
 8003544:	4002001c 	.word	0x4002001c
 8003548:	2000055c 	.word	0x2000055c

0800354c <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 800354c:	2207      	movs	r2, #7
{
 800354e:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <DMA1_Channel1_IRQHandler+0x10>)
 8003552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8003554:	f7fe fbce 	bl	8001cf4 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8003558:	bd10      	pop	{r4, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	40020000 	.word	0x40020000

08003560 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003560:	2201      	movs	r2, #1
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8003564:	b510      	push	{r4, lr}
 8003566:	6919      	ldr	r1, [r3, #16]
 8003568:	420a      	tst	r2, r1
 800356a:	d002      	beq.n	8003572 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	420a      	tst	r2, r1
 8003570:	d10e      	bne.n	8003590 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 8003576:	6919      	ldr	r1, [r3, #16]
 8003578:	420a      	tst	r2, r1
 800357a:	d008      	beq.n	800358e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	420a      	tst	r2, r1
 8003580:	d005      	beq.n	800358e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003582:	3a02      	subs	r2, #2
 8003584:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8003586:	4806      	ldr	r0, [pc, #24]	; (80035a0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	f7ff f859 	bl	8002640 <PWMC_OCP_Handler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 800358e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003590:	3a03      	subs	r2, #3
 8003592:	611a      	str	r2, [r3, #16]
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8003596:	f002 f961 	bl	800585c <R3_1_TIMx_UP_IRQHandler>
 800359a:	e7ea      	b.n	8003572 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	200000b4 	.word	0x200000b4

080035a4 <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <DMA1_Channel4_5_IRQHandler+0x10>)
 80035a8:	0292      	lsls	r2, r2, #10
 80035aa:	6819      	ldr	r1, [r3, #0]
void DMAx_R1_M1_IRQHandler(void)
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 80035ac:	4211      	tst	r1, r2
 80035ae:	d000      	beq.n	80035b2 <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 80035b2:	4770      	bx	lr
 80035b4:	40020000 	.word	0x40020000

080035b8 <DMA1_Channel2_3_IRQHandler>:
}

//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <DMA1_Channel2_3_IRQHandler+0x18>)
 80035bc:	0092      	lsls	r2, r2, #2
 80035be:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 80035c0:	b510      	push	{r4, lr}
 80035c2:	4211      	tst	r1, r2
 80035c4:	d003      	beq.n	80035ce <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	f7fd fc6f 	bl	8000eac <ASPEP_HWDataReceivedIT>
  }
}
 80035ce:	bd10      	pop	{r4, pc}
 80035d0:	40020000 	.word	0x40020000
 80035d4:	2000040c 	.word	0x2000040c

080035d8 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <USART1_IRQHandler+0x94>)

void USART1_IRQHandler(void)
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	420a      	tst	r2, r1
 80035e2:	d008      	beq.n	80035f6 <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80035e4:	2401      	movs	r4, #1
 80035e6:	4822      	ldr	r0, [pc, #136]	; (8003670 <USART1_IRQHandler+0x98>)
 80035e8:	6801      	ldr	r1, [r0, #0]
 80035ea:	43a1      	bics	r1, r4
 80035ec:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80035ee:	4821      	ldr	r0, [pc, #132]	; (8003674 <USART1_IRQHandler+0x9c>)
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80035f0:	621a      	str	r2, [r3, #32]
 80035f2:	f7fd fa87 	bl	8000b04 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80035f6:	2208      	movs	r2, #8
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <USART1_IRQHandler+0x94>)
 80035fa:	69d9      	ldr	r1, [r3, #28]
 80035fc:	420a      	tst	r2, r1
 80035fe:	d00b      	beq.n	8003618 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003600:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003602:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003606:	3a07      	subs	r2, #7
 8003608:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800360c:	2010      	movs	r0, #16
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4302      	orrs	r2, r0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003618:	2210      	movs	r2, #16
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <USART1_IRQHandler+0x94>)
 800361c:	69d9      	ldr	r1, [r3, #28]
 800361e:	420a      	tst	r2, r1
 8003620:	d023      	beq.n	800366a <USART1_IRQHandler+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	420a      	tst	r2, r1
 8003626:	d020      	beq.n	800366a <USART1_IRQHandler+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003628:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	2101      	movs	r1, #1
 800362e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	4390      	bics	r0, r2
 8003636:	6018      	str	r0, [r3, #0]
 8003638:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003644:	2040      	movs	r0, #64	; 0x40
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4382      	bics	r2, r0
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	f384 8810 	msr	PRIMASK, r4
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003650:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003652:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	4302      	orrs	r2, r0
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	f384 8810 	msr	PRIMASK, r4
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <USART1_IRQHandler+0x9c>)
 8003666:	f7fd fc6f 	bl	8000f48 <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 800366a:	bd10      	pop	{r4, pc}
 800366c:	40013800 	.word	0x40013800
 8003670:	4002001c 	.word	0x4002001c
 8003674:	2000040c 	.word	0x2000040c

08003678 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003678:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800367a:	f7fe fc65 	bl	8001f48 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800367e:	e7fe      	b.n	800367e <HardFault_Handler+0x6>

08003680 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003680:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003682:	4c0d      	ldr	r4, [pc, #52]	; (80036b8 <SysTick_Handler+0x38>)
 8003684:	7823      	ldrb	r3, [r4, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d00f      	beq.n	80036aa <SysTick_Handler+0x2a>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 800368a:	3301      	adds	r3, #1
 800368c:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	7023      	strb	r3, [r4, #0]
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <SysTick_Handler+0x3c>)
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	4211      	tst	r1, r2
 800369a:	d003      	beq.n	80036a4 <SysTick_Handler+0x24>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 800369c:	4808      	ldr	r0, [pc, #32]	; (80036c0 <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	f7fd fc04 	bl	8000eac <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 80036a4:	f7fe fc42 	bl	8001f2c <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80036a8:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80036aa:	f000 f8d9 	bl	8003860 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80036ae:	f000 fa91 	bl	8003bd4 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e7eb      	b.n	800368e <SysTick_Handler+0xe>
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	20000468 	.word	0x20000468
 80036bc:	40020000 	.word	0x40020000
 80036c0:	2000040c 	.word	0x2000040c

080036c4 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80036c4:	2201      	movs	r2, #1
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 80036c8:	b510      	push	{r4, lr}
 80036ca:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 80036cc:	420a      	tst	r2, r1
 80036ce:	d100      	bne.n	80036d2 <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 80036d0:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80036d2:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 80036d4:	f7fe fc48 	bl	8001f68 <UI_HandleStartStopButton_cb>
}
 80036d8:	e7fa      	b.n	80036d0 <EXTI0_1_IRQHandler+0xc>
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	40010400 	.word	0x40010400

080036e0 <UASPEP_INIT>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80036e0:	2240      	movs	r2, #64	; 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80036e2:	6803      	ldr	r3, [r0, #0]
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	2101      	movs	r1, #1
 80036ee:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80036f2:	681c      	ldr	r4, [r3, #0]
 80036f4:	4314      	orrs	r4, r2
 80036f6:	601c      	str	r4, [r3, #0]
 80036f8:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 80036fc:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003706:	2680      	movs	r6, #128	; 0x80
 8003708:	68a3      	ldr	r3, [r4, #8]
 800370a:	4333      	orrs	r3, r6
 800370c:	60a3      	str	r3, [r4, #8]
 800370e:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003712:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003714:	6904      	ldr	r4, [r0, #16]
 8003716:	002e      	movs	r6, r5
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <UASPEP_INIT+0x88>)
 800371a:	3628      	adds	r6, #40	; 0x28
 800371c:	191c      	adds	r4, r3, r4
 800371e:	3c01      	subs	r4, #1
 8003720:	7827      	ldrb	r7, [r4, #0]
 8003722:	6884      	ldr	r4, [r0, #8]
 8003724:	19e4      	adds	r4, r4, r7
 8003726:	60a6      	str	r6, [r4, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003728:	622a      	str	r2, [r5, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003732:	68ac      	ldr	r4, [r5, #8]
 8003734:	430c      	orrs	r4, r1
 8003736:	60ac      	str	r4, [r5, #8]
 8003738:	f386 8810 	msr	PRIMASK, r6
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 800373c:	6804      	ldr	r4, [r0, #0]
 800373e:	68c6      	ldr	r6, [r0, #12]
 8003740:	0025      	movs	r5, r4
 8003742:	199b      	adds	r3, r3, r6
 8003744:	3b01      	subs	r3, #1
 8003746:	781e      	ldrb	r6, [r3, #0]
 8003748:	6843      	ldr	r3, [r0, #4]
 800374a:	3524      	adds	r5, #36	; 0x24
 800374c:	199b      	adds	r3, r3, r6
 800374e:	609d      	str	r5, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003750:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	f380 8810 	msr	PRIMASK, r0
}
 8003764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	08006d04 	.word	0x08006d04

0800376c <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 800376c:	b530      	push	{r4, r5, lr}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 800376e:	2501      	movs	r5, #1
{
 8003770:	0014      	movs	r4, r2
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <UASPEP_SEND_PACKET+0x34>)
 8003774:	6902      	ldr	r2, [r0, #16]
 8003776:	189b      	adds	r3, r3, r2
 8003778:	3b01      	subs	r3, #1
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 800377e:	2000      	movs	r0, #0
 8003780:	189b      	adds	r3, r3, r2
 8003782:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003784:	4215      	tst	r5, r2
 8003786:	d109      	bne.n	800379c <UASPEP_SEND_PACKET+0x30>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003788:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800378a:	6859      	ldr	r1, [r3, #4]
    result = true;
 800378c:	3001      	adds	r0, #1
 800378e:	0c09      	lsrs	r1, r1, #16
 8003790:	040a      	lsls	r2, r1, #16
 8003792:	4322      	orrs	r2, r4
 8003794:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	432a      	orrs	r2, r5
 800379a:	601a      	str	r2, [r3, #0]
  }
  return (result);
}
 800379c:	bd30      	pop	{r4, r5, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	08006d04 	.word	0x08006d04

080037a4 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80037a4:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <UASPEP_RECEIVE_BUFFER+0x2c>)
 80037a8:	68c4      	ldr	r4, [r0, #12]
 80037aa:	191b      	adds	r3, r3, r4
 80037ac:	3b01      	subs	r3, #1
 80037ae:	781c      	ldrb	r4, [r3, #0]
 80037b0:	6843      	ldr	r3, [r0, #4]
 80037b2:	191b      	adds	r3, r3, r4
 80037b4:	2401      	movs	r4, #1
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	43a0      	bics	r0, r4
 80037ba:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80037bc:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	0c09      	lsrs	r1, r1, #16
 80037c2:	0409      	lsls	r1, r1, #16
 80037c4:	4311      	orrs	r1, r2
 80037c6:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4322      	orrs	r2, r4
 80037cc:	601a      	str	r2, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 80037ce:	bd10      	pop	{r4, pc}
 80037d0:	08006d04 	.word	0x08006d04

080037d4 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80037d4:	2110      	movs	r1, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80037d6:	6803      	ldr	r3, [r0, #0]
 80037d8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037de:	2201      	movs	r2, #1
 80037e0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80037ee:	4770      	bx	lr

080037f0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80037f0:	4770      	bx	lr
 80037f2:	46c0      	nop			; (mov r8, r8)

080037f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f8:	20fa      	movs	r0, #250	; 0xfa
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_InitTick+0x40>)
 80037fc:	0080      	lsls	r0, r0, #2
 80037fe:	7819      	ldrb	r1, [r3, #0]
 8003800:	f7fc fc82 	bl	8000108 <__udivsi3>
 8003804:	4d0c      	ldr	r5, [pc, #48]	; (8003838 <HAL_InitTick+0x44>)
 8003806:	0001      	movs	r1, r0
 8003808:	6828      	ldr	r0, [r5, #0]
 800380a:	f7fc fc7d 	bl	8000108 <__udivsi3>
 800380e:	f000 f9c5 	bl	8003b9c <HAL_SYSTICK_Config>
 8003812:	2800      	cmp	r0, #0
 8003814:	d10c      	bne.n	8003830 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8003816:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003818:	2c03      	cmp	r4, #3
 800381a:	d900      	bls.n	800381e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800381c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381e:	3802      	subs	r0, #2
 8003820:	2200      	movs	r2, #0
 8003822:	0021      	movs	r1, r4
 8003824:	f000 f97c 	bl	8003b20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_InitTick+0x48>)
 800382a:	2000      	movs	r0, #0
 800382c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800382e:	e7f5      	b.n	800381c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8003830:	2001      	movs	r0, #1
 8003832:	e7f3      	b.n	800381c <HAL_InitTick+0x28>
 8003834:	20000470 	.word	0x20000470
 8003838:	2000046c 	.word	0x2000046c
 800383c:	20000474 	.word	0x20000474

08003840 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003840:	2110      	movs	r1, #16
 8003842:	4a06      	ldr	r2, [pc, #24]	; (800385c <HAL_Init+0x1c>)
{
 8003844:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003846:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003848:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800384a:	430b      	orrs	r3, r1
 800384c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800384e:	f7ff ffd1 	bl	80037f4 <HAL_InitTick>
  HAL_MspInit();
 8003852:	f7ff fd21 	bl	8003298 <HAL_MspInit>
}
 8003856:	2000      	movs	r0, #0
 8003858:	bd10      	pop	{r4, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40022000 	.word	0x40022000

08003860 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003860:	4a03      	ldr	r2, [pc, #12]	; (8003870 <HAL_IncTick+0x10>)
 8003862:	4b04      	ldr	r3, [pc, #16]	; (8003874 <HAL_IncTick+0x14>)
 8003864:	6811      	ldr	r1, [r2, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	185b      	adds	r3, r3, r1
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	4770      	bx	lr
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	20000850 	.word	0x20000850
 8003874:	20000470 	.word	0x20000470

08003878 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003878:	4b01      	ldr	r3, [pc, #4]	; (8003880 <HAL_GetTick+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
}
 800387c:	4770      	bx	lr
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000850 	.word	0x20000850

08003884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7ff fff6 	bl	8003878 <HAL_GetTick>
 800388c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800388e:	1c63      	adds	r3, r4, #1
 8003890:	d002      	beq.n	8003898 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <HAL_Delay+0x20>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003898:	f7ff ffee 	bl	8003878 <HAL_GetTick>
 800389c:	1b40      	subs	r0, r0, r5
 800389e:	42a0      	cmp	r0, r4
 80038a0:	d3fa      	bcc.n	8003898 <HAL_Delay+0x14>
  {
  }
}
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	20000470 	.word	0x20000470

080038a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 80038ac:	d100      	bne.n	80038b0 <HAL_ADC_Init+0x8>
 80038ae:	e082      	b.n	80039b6 <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d069      	beq.n	800398a <HAL_ADC_Init+0xe2>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038b8:	06db      	lsls	r3, r3, #27
 80038ba:	d460      	bmi.n	800397e <HAL_ADC_Init+0xd6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80038c0:	075b      	lsls	r3, r3, #29
 80038c2:	d45c      	bmi.n	800397e <HAL_ADC_Init+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038c6:	4949      	ldr	r1, [pc, #292]	; (80039ec <HAL_ADC_Init+0x144>)
 80038c8:	400b      	ands	r3, r1
 80038ca:	3106      	adds	r1, #6
 80038cc:	31ff      	adds	r1, #255	; 0xff
 80038ce:	430b      	orrs	r3, r1
 80038d0:	63a3      	str	r3, [r4, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80038d2:	2303      	movs	r3, #3
 80038d4:	6891      	ldr	r1, [r2, #8]
 80038d6:	400b      	ands	r3, r1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d05c      	beq.n	8003996 <HAL_ADC_Init+0xee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80038dc:	2118      	movs	r1, #24
 80038de:	68d3      	ldr	r3, [r2, #12]
 80038e0:	438b      	bics	r3, r1
 80038e2:	68a1      	ldr	r1, [r4, #8]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80038e8:	6913      	ldr	r3, [r2, #16]
 80038ea:	6861      	ldr	r1, [r4, #4]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80038f4:	68d3      	ldr	r3, [r2, #12]
 80038f6:	493e      	ldr	r1, [pc, #248]	; (80039f0 <HAL_ADC_Init+0x148>)
 80038f8:	400b      	ands	r3, r1
 80038fa:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038fc:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80038fe:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003900:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003902:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003904:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003906:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003908:	68e1      	ldr	r1, [r4, #12]
 800390a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800390c:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800390e:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003910:	2124      	movs	r1, #36	; 0x24
 8003912:	5c61      	ldrb	r1, [r4, r1]
 8003914:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003916:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003918:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800391a:	3901      	subs	r1, #1
 800391c:	1e4d      	subs	r5, r1, #1
 800391e:	41a9      	sbcs	r1, r5
 8003920:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003922:	430b      	orrs	r3, r1
 8003924:	6921      	ldr	r1, [r4, #16]
 8003926:	3902      	subs	r1, #2
 8003928:	424d      	negs	r5, r1
 800392a:	4169      	adcs	r1, r5
 800392c:	0089      	lsls	r1, r1, #2
 800392e:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003930:	7ee1      	ldrb	r1, [r4, #27]
 8003932:	2901      	cmp	r1, #1
 8003934:	d04b      	beq.n	80039ce <HAL_ADC_Init+0x126>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003936:	20c2      	movs	r0, #194	; 0xc2
 8003938:	69e1      	ldr	r1, [r4, #28]
 800393a:	30ff      	adds	r0, #255	; 0xff
 800393c:	4281      	cmp	r1, r0
 800393e:	d002      	beq.n	8003946 <HAL_ADC_Init+0x9e>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003940:	6a20      	ldr	r0, [r4, #32]
 8003942:	4301      	orrs	r1, r0
 8003944:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003946:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003948:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800394a:	4319      	orrs	r1, r3
 800394c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800394e:	2180      	movs	r1, #128	; 0x80
 8003950:	0549      	lsls	r1, r1, #21
 8003952:	428d      	cmp	r5, r1
 8003954:	d026      	beq.n	80039a4 <HAL_ADC_Init+0xfc>
 8003956:	1e69      	subs	r1, r5, #1
 8003958:	2906      	cmp	r1, #6
 800395a:	d923      	bls.n	80039a4 <HAL_ADC_Init+0xfc>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	4925      	ldr	r1, [pc, #148]	; (80039f4 <HAL_ADC_Init+0x14c>)
 8003960:	400a      	ands	r2, r1
 8003962:	429a      	cmp	r2, r3
 8003964:	d029      	beq.n	80039ba <HAL_ADC_Init+0x112>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003966:	2212      	movs	r2, #18
 8003968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 800396a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800396c:	4393      	bics	r3, r2
 800396e:	3a02      	subs	r2, #2
 8003970:	4313      	orrs	r3, r2
 8003972:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003974:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003976:	3a0f      	subs	r2, #15
 8003978:	4313      	orrs	r3, r2
 800397a:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800397c:	e004      	b.n	8003988 <HAL_ADC_Init+0xe0>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 8003980:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003984:	4313      	orrs	r3, r2
 8003986:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003988:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 800398a:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800398c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 800398e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8003990:	f7ff fc9a 	bl	80032c8 <HAL_ADC_MspInit>
 8003994:	e78f      	b.n	80038b6 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003996:	6811      	ldr	r1, [r2, #0]
 8003998:	420b      	tst	r3, r1
 800399a:	d1ab      	bne.n	80038f4 <HAL_ADC_Init+0x4c>
 800399c:	68d3      	ldr	r3, [r2, #12]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	d4a8      	bmi.n	80038f4 <HAL_ADC_Init+0x4c>
 80039a2:	e79b      	b.n	80038dc <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039a4:	2107      	movs	r1, #7
 80039a6:	6950      	ldr	r0, [r2, #20]
 80039a8:	4388      	bics	r0, r1
 80039aa:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80039ac:	6950      	ldr	r0, [r2, #20]
 80039ae:	4029      	ands	r1, r5
 80039b0:	4301      	orrs	r1, r0
 80039b2:	6151      	str	r1, [r2, #20]
 80039b4:	e7d2      	b.n	800395c <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 80039b6:	2001      	movs	r0, #1
 80039b8:	e7e6      	b.n	8003988 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 80039ba:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80039bc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80039be:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80039c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80039c4:	4393      	bics	r3, r2
 80039c6:	3a02      	subs	r2, #2
 80039c8:	4313      	orrs	r3, r2
 80039ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80039cc:	e7dc      	b.n	8003988 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d103      	bne.n	80039da <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430b      	orrs	r3, r1
 80039d8:	e7ad      	b.n	8003936 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039da:	2520      	movs	r5, #32
 80039dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039de:	4328      	orrs	r0, r5
 80039e0:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80039e4:	4301      	orrs	r1, r0
 80039e6:	63e1      	str	r1, [r4, #60]	; 0x3c
 80039e8:	e7a5      	b.n	8003936 <HAL_ADC_Init+0x8e>
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	fffffefd 	.word	0xfffffefd
 80039f0:	fffe0219 	.word	0xfffe0219
 80039f4:	833fffe7 	.word	0x833fffe7

080039f8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80039f8:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039fa:	2234      	movs	r2, #52	; 0x34
{
 80039fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fe:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003a00:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003a02:	5c83      	ldrb	r3, [r0, r2]
{
 8003a04:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a06:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d060      	beq.n	8003ace <HAL_ADC_ConfigChannel+0xd6>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a10:	6805      	ldr	r5, [r0, #0]
 8003a12:	68aa      	ldr	r2, [r5, #8]
 8003a14:	0752      	lsls	r2, r2, #29
 8003a16:	d509      	bpl.n	8003a2c <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a18:	2220      	movs	r2, #32
 8003a1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	6383      	str	r3, [r0, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a22:	2334      	movs	r3, #52	; 0x34
 8003a24:	2200      	movs	r2, #0
 8003a26:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8003a28:	b003      	add	sp, #12
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a2c:	4a36      	ldr	r2, [pc, #216]	; (8003b08 <HAL_ADC_ConfigChannel+0x110>)
 8003a2e:	6848      	ldr	r0, [r1, #4]
 8003a30:	4290      	cmp	r0, r2
 8003a32:	d030      	beq.n	8003a96 <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a34:	680a      	ldr	r2, [r1, #0]
 8003a36:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a3c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a3e:	4338      	orrs	r0, r7
 8003a40:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a42:	055b      	lsls	r3, r3, #21
 8003a44:	429e      	cmp	r6, r3
 8003a46:	d00f      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0x70>
 8003a48:	3e01      	subs	r6, #1
 8003a4a:	2e06      	cmp	r6, #6
 8003a4c:	d90c      	bls.n	8003a68 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a4e:	2307      	movs	r3, #7
 8003a50:	6888      	ldr	r0, [r1, #8]
 8003a52:	6969      	ldr	r1, [r5, #20]
 8003a54:	4019      	ands	r1, r3
 8003a56:	4288      	cmp	r0, r1
 8003a58:	d006      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a5a:	6969      	ldr	r1, [r5, #20]
 8003a5c:	4399      	bics	r1, r3
 8003a5e:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003a60:	6969      	ldr	r1, [r5, #20]
 8003a62:	4003      	ands	r3, r0
 8003a64:	430b      	orrs	r3, r1
 8003a66:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a68:	0013      	movs	r3, r2
 8003a6a:	3b10      	subs	r3, #16
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d810      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a70:	4926      	ldr	r1, [pc, #152]	; (8003b0c <HAL_ADC_ConfigChannel+0x114>)
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	2a10      	cmp	r2, #16
 8003a76:	d02e      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0xde>
 8003a78:	3a11      	subs	r2, #17
 8003a7a:	1e50      	subs	r0, r2, #1
 8003a7c:	4182      	sbcs	r2, r0
 8003a7e:	20c0      	movs	r0, #192	; 0xc0
 8003a80:	4252      	negs	r2, r2
 8003a82:	0400      	lsls	r0, r0, #16
 8003a84:	4002      	ands	r2, r0
 8003a86:	2080      	movs	r0, #128	; 0x80
 8003a88:	03c0      	lsls	r0, r0, #15
 8003a8a:	4684      	mov	ip, r0
 8003a8c:	4462      	add	r2, ip
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a92:	2000      	movs	r0, #0
 8003a94:	e7c5      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a96:	680a      	ldr	r2, [r1, #0]
 8003a98:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003a9a:	4093      	lsls	r3, r2
 8003a9c:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a9e:	0013      	movs	r3, r2
 8003aa0:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003aa2:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d8f4      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003aa8:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_ADC_ConfigChannel+0x114>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2a10      	cmp	r2, #16
 8003aae:	d010      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0xda>
 8003ab0:	3a11      	subs	r2, #17
 8003ab2:	4251      	negs	r1, r2
 8003ab4:	414a      	adcs	r2, r1
 8003ab6:	21c0      	movs	r1, #192	; 0xc0
 8003ab8:	4252      	negs	r2, r2
 8003aba:	0409      	lsls	r1, r1, #16
 8003abc:	400a      	ands	r2, r1
 8003abe:	4914      	ldr	r1, [pc, #80]	; (8003b10 <HAL_ADC_ConfigChannel+0x118>)
 8003ac0:	468c      	mov	ip, r1
 8003ac2:	4462      	add	r2, ip
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac8:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e7a9      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8003ace:	2002      	movs	r0, #2
 8003ad0:	e7aa      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <HAL_ADC_ConfigChannel+0x11c>)
 8003ad4:	e7f6      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	0412      	lsls	r2, r2, #16
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <HAL_ADC_ConfigChannel+0x120>)
 8003ae0:	490e      	ldr	r1, [pc, #56]	; (8003b1c <HAL_ADC_ConfigChannel+0x124>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	f7fc fb10 	bl	8000108 <__udivsi3>
 8003ae8:	0083      	lsls	r3, r0, #2
 8003aea:	181b      	adds	r3, r3, r0
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003af0:	9b01      	ldr	r3, [sp, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0cd      	beq.n	8003a92 <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 8003af6:	9b01      	ldr	r3, [sp, #4]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003afc:	9b01      	ldr	r3, [sp, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f9      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b02:	2000      	movs	r0, #0
 8003b04:	e78d      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x2a>
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	00001001 	.word	0x00001001
 8003b0c:	40012708 	.word	0x40012708
 8003b10:	feffffff 	.word	0xfeffffff
 8003b14:	ff7fffff 	.word	0xff7fffff
 8003b18:	2000046c 	.word	0x2000046c
 8003b1c:	000f4240 	.word	0x000f4240

08003b20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b20:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003b22:	2800      	cmp	r0, #0
 8003b24:	db14      	blt.n	8003b50 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <HAL_NVIC_SetPriority+0x5c>)
 8003b28:	2203      	movs	r2, #3
 8003b2a:	469c      	mov	ip, r3
 8003b2c:	23ff      	movs	r3, #255	; 0xff
 8003b2e:	0884      	lsrs	r4, r0, #2
 8003b30:	4002      	ands	r2, r0
 8003b32:	0018      	movs	r0, r3
 8003b34:	26c0      	movs	r6, #192	; 0xc0
 8003b36:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b38:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b3a:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b3c:	400b      	ands	r3, r1
 8003b3e:	4093      	lsls	r3, r2
 8003b40:	00a4      	lsls	r4, r4, #2
 8003b42:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b44:	00b6      	lsls	r6, r6, #2
 8003b46:	59a5      	ldr	r5, [r4, r6]
 8003b48:	4385      	bics	r5, r0
 8003b4a:	432b      	orrs	r3, r5
 8003b4c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b50:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_NVIC_SetPriority+0x60>)
 8003b52:	230f      	movs	r3, #15
 8003b54:	4694      	mov	ip, r2
 8003b56:	2203      	movs	r2, #3
 8003b58:	4003      	ands	r3, r0
 8003b5a:	4010      	ands	r0, r2
 8003b5c:	32fc      	adds	r2, #252	; 0xfc
 8003b5e:	0015      	movs	r5, r2
 8003b60:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b62:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b64:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b66:	400a      	ands	r2, r1
 8003b68:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b6a:	3b08      	subs	r3, #8
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4463      	add	r3, ip
 8003b72:	69dc      	ldr	r4, [r3, #28]
 8003b74:	43ac      	bics	r4, r5
 8003b76:	4322      	orrs	r2, r4
 8003b78:	61da      	str	r2, [r3, #28]
 8003b7a:	e7e8      	b.n	8003b4e <HAL_NVIC_SetPriority+0x2e>
 8003b7c:	e000e100 	.word	0xe000e100
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b84:	2800      	cmp	r0, #0
 8003b86:	db05      	blt.n	8003b94 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b88:	221f      	movs	r2, #31
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4002      	ands	r2, r0
 8003b8e:	4093      	lsls	r3, r2
 8003b90:	4a01      	ldr	r2, [pc, #4]	; (8003b98 <HAL_NVIC_EnableIRQ+0x14>)
 8003b92:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b94:	4770      	bx	lr
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	1e43      	subs	r3, r0, #1
 8003ba0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d20e      	bcs.n	8003bc6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ba8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bac:	4807      	ldr	r0, [pc, #28]	; (8003bcc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bae:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bb0:	6a03      	ldr	r3, [r0, #32]
 8003bb2:	0609      	lsls	r1, r1, #24
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bbc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bbe:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e010 	.word	0xe000e010
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003bd0:	4770      	bx	lr
 8003bd2:	46c0      	nop			; (mov r8, r8)

08003bd4 <HAL_SYSTICK_IRQHandler>:
{
 8003bd4:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003bd6:	f7ff fffb 	bl	8003bd0 <HAL_SYSTICK_Callback>
}
 8003bda:	bd10      	pop	{r4, pc}

08003bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003be0:	d027      	beq.n	8003c32 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003be2:	2521      	movs	r5, #33	; 0x21
 8003be4:	2302      	movs	r3, #2
 8003be6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003be8:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8003bec:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bee:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bf0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf6:	68e1      	ldr	r1, [r4, #12]
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6921      	ldr	r1, [r4, #16]
 8003bfc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfe:	6961      	ldr	r1, [r4, #20]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	69a1      	ldr	r1, [r4, #24]
 8003c04:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c06:	69e1      	ldr	r1, [r4, #28]
 8003c08:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003c0a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c0c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_DMA_Init+0x60>)
 8003c10:	2114      	movs	r1, #20
 8003c12:	469c      	mov	ip, r3
 8003c14:	4460      	add	r0, ip
 8003c16:	f7fc fa77 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8003c1e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c20:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c22:	0080      	lsls	r0, r0, #2
 8003c24:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8003c26:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8003c2c:	321f      	adds	r2, #31
 8003c2e:	54a3      	strb	r3, [r4, r2]
}
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003c32:	2001      	movs	r0, #1
 8003c34:	e7fc      	b.n	8003c30 <HAL_DMA_Init+0x54>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	ffffc00f 	.word	0xffffc00f
 8003c3c:	bffdfff8 	.word	0xbffdfff8
 8003c40:	40020000 	.word	0x40020000

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	46de      	mov	lr, fp
 8003c48:	4657      	mov	r7, sl
 8003c4a:	464e      	mov	r6, r9
 8003c4c:	4645      	mov	r5, r8
 8003c4e:	b5e0      	push	{r5, r6, r7, lr}
 8003c50:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003c56:	2300      	movs	r3, #0
{
 8003c58:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5a:	2900      	cmp	r1, #0
 8003c5c:	d100      	bne.n	8003c60 <HAL_GPIO_Init+0x1c>
 8003c5e:	e0d0      	b.n	8003e02 <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c60:	4c72      	ldr	r4, [pc, #456]	; (8003e2c <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c62:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c64:	46a3      	mov	fp, r4
 8003c66:	e064      	b.n	8003d32 <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c68:	4665      	mov	r5, ip
 8003c6a:	2d03      	cmp	r5, #3
 8003c6c:	d000      	beq.n	8003c70 <HAL_GPIO_Init+0x2c>
 8003c6e:	e0b6      	b.n	8003dde <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c70:	4666      	mov	r6, ip
 8003c72:	4096      	lsls	r6, r2
 8003c74:	43f5      	mvns	r5, r6
 8003c76:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8003c78:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c7a:	9d02      	ldr	r5, [sp, #8]
 8003c7c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c7e:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c80:	25c0      	movs	r5, #192	; 0xc0
 8003c82:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8003c84:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c86:	422c      	tst	r4, r5
 8003c88:	d04d      	beq.n	8003d26 <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8a:	465d      	mov	r5, fp
 8003c8c:	2601      	movs	r6, #1
 8003c8e:	465f      	mov	r7, fp
 8003c90:	69ad      	ldr	r5, [r5, #24]
 8003c92:	4335      	orrs	r5, r6
 8003c94:	61bd      	str	r5, [r7, #24]
 8003c96:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c98:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9a:	4035      	ands	r5, r6
 8003c9c:	4e64      	ldr	r6, [pc, #400]	; (8003e30 <HAL_GPIO_Init+0x1ec>)
 8003c9e:	9505      	str	r5, [sp, #20]
 8003ca0:	46b4      	mov	ip, r6
 8003ca2:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ca4:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ca6:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ca8:	00bf      	lsls	r7, r7, #2
 8003caa:	00ad      	lsls	r5, r5, #2
 8003cac:	4465      	add	r5, ip
 8003cae:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cb0:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cb2:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cb4:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cb6:	4666      	mov	r6, ip
 8003cb8:	40b7      	lsls	r7, r6
 8003cba:	003e      	movs	r6, r7
 8003cbc:	464f      	mov	r7, r9
 8003cbe:	43b7      	bics	r7, r6
 8003cc0:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cc2:	2790      	movs	r7, #144	; 0x90
 8003cc4:	05ff      	lsls	r7, r7, #23
 8003cc6:	42b8      	cmp	r0, r7
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_GPIO_Init+0xa4>
 8003cca:	4f5a      	ldr	r7, [pc, #360]	; (8003e34 <HAL_GPIO_Init+0x1f0>)
 8003ccc:	42b8      	cmp	r0, r7
 8003cce:	d100      	bne.n	8003cd2 <HAL_GPIO_Init+0x8e>
 8003cd0:	e09e      	b.n	8003e10 <HAL_GPIO_Init+0x1cc>
 8003cd2:	4f59      	ldr	r7, [pc, #356]	; (8003e38 <HAL_GPIO_Init+0x1f4>)
 8003cd4:	42b8      	cmp	r0, r7
 8003cd6:	d100      	bne.n	8003cda <HAL_GPIO_Init+0x96>
 8003cd8:	e0a1      	b.n	8003e1e <HAL_GPIO_Init+0x1da>
 8003cda:	4666      	mov	r6, ip
 8003cdc:	2705      	movs	r7, #5
 8003cde:	40b7      	lsls	r7, r6
 8003ce0:	003e      	movs	r6, r7
 8003ce2:	464f      	mov	r7, r9
 8003ce4:	4337      	orrs	r7, r6
 8003ce6:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ce8:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cea:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cec:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8003cee:	4d53      	ldr	r5, [pc, #332]	; (8003e3c <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8003cf0:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cf2:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8003cf4:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8003cf6:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cf8:	423c      	tst	r4, r7
 8003cfa:	d17f      	bne.n	8003dfc <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8003cfc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003cfe:	4f4f      	ldr	r7, [pc, #316]	; (8003e3c <HAL_GPIO_Init+0x1f8>)
 8003d00:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8003d02:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d04:	02a7      	lsls	r7, r4, #10
 8003d06:	d476      	bmi.n	8003df6 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8003d08:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003d0a:	4f4c      	ldr	r7, [pc, #304]	; (8003e3c <HAL_GPIO_Init+0x1f8>)
 8003d0c:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003d0e:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d10:	03a7      	lsls	r7, r4, #14
 8003d12:	d46d      	bmi.n	8003df0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8003d14:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003d16:	4f49      	ldr	r7, [pc, #292]	; (8003e3c <HAL_GPIO_Init+0x1f8>)
 8003d18:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8003d1a:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d1c:	03e4      	lsls	r4, r4, #15
 8003d1e:	d463      	bmi.n	8003de8 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8003d20:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003d22:	4c46      	ldr	r4, [pc, #280]	; (8003e3c <HAL_GPIO_Init+0x1f8>)
 8003d24:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d26:	000c      	movs	r4, r1
      }
    }

    position++;
 8003d28:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d2a:	40dc      	lsrs	r4, r3
 8003d2c:	3202      	adds	r2, #2
 8003d2e:	2c00      	cmp	r4, #0
 8003d30:	d067      	beq.n	8003e02 <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d32:	2601      	movs	r6, #1
 8003d34:	000c      	movs	r4, r1
 8003d36:	409e      	lsls	r6, r3
 8003d38:	4034      	ands	r4, r6
 8003d3a:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8003d3c:	4231      	tst	r1, r6
 8003d3e:	d0f2      	beq.n	8003d26 <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d40:	4654      	mov	r4, sl
 8003d42:	2503      	movs	r5, #3
 8003d44:	6864      	ldr	r4, [r4, #4]
 8003d46:	4025      	ands	r5, r4
 8003d48:	46ac      	mov	ip, r5
 8003d4a:	3d01      	subs	r5, #1
 8003d4c:	2d01      	cmp	r5, #1
 8003d4e:	d88b      	bhi.n	8003c68 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8003d50:	6885      	ldr	r5, [r0, #8]
 8003d52:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d54:	2503      	movs	r5, #3
 8003d56:	4095      	lsls	r5, r2
 8003d58:	46a8      	mov	r8, r5
 8003d5a:	43ed      	mvns	r5, r5
 8003d5c:	464f      	mov	r7, r9
 8003d5e:	9502      	str	r5, [sp, #8]
 8003d60:	4645      	mov	r5, r8
 8003d62:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d64:	4655      	mov	r5, sl
 8003d66:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d68:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d6a:	002f      	movs	r7, r5
 8003d6c:	4097      	lsls	r7, r2
 8003d6e:	46b8      	mov	r8, r7
 8003d70:	464f      	mov	r7, r9
 8003d72:	4645      	mov	r5, r8
 8003d74:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8003d76:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d78:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7a:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7c:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7e:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d80:	0926      	lsrs	r6, r4, #4
 8003d82:	402e      	ands	r6, r5
 8003d84:	409e      	lsls	r6, r3
 8003d86:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003d88:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003d8a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d8c:	9d02      	ldr	r5, [sp, #8]
 8003d8e:	402e      	ands	r6, r5
 8003d90:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d92:	4656      	mov	r6, sl
 8003d94:	68b6      	ldr	r6, [r6, #8]
 8003d96:	4647      	mov	r7, r8
 8003d98:	4096      	lsls	r6, r2
 8003d9a:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8003d9c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	4667      	mov	r7, ip
 8003da0:	4666      	mov	r6, ip
 8003da2:	4096      	lsls	r6, r2
 8003da4:	2f02      	cmp	r7, #2
 8003da6:	d000      	beq.n	8003daa <HAL_GPIO_Init+0x166>
 8003da8:	e766      	b.n	8003c78 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8003daa:	08dd      	lsrs	r5, r3, #3
 8003dac:	00ad      	lsls	r5, r5, #2
 8003dae:	46ac      	mov	ip, r5
 8003db0:	4484      	add	ip, r0
 8003db2:	4665      	mov	r5, ip
 8003db4:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db6:	2507      	movs	r5, #7
 8003db8:	401d      	ands	r5, r3
 8003dba:	00ad      	lsls	r5, r5, #2
 8003dbc:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8003dbe:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dc0:	250f      	movs	r5, #15
 8003dc2:	4647      	mov	r7, r8
 8003dc4:	40bd      	lsls	r5, r7
 8003dc6:	9f03      	ldr	r7, [sp, #12]
 8003dc8:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dca:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dcc:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dce:	4647      	mov	r7, r8
 8003dd0:	692d      	ldr	r5, [r5, #16]
 8003dd2:	40bd      	lsls	r5, r7
 8003dd4:	9f03      	ldr	r7, [sp, #12]
 8003dd6:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003dd8:	4665      	mov	r5, ip
 8003dda:	622f      	str	r7, [r5, #32]
 8003ddc:	e74c      	b.n	8003c78 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dde:	2503      	movs	r5, #3
 8003de0:	4095      	lsls	r5, r2
 8003de2:	43ed      	mvns	r5, r5
 8003de4:	9502      	str	r5, [sp, #8]
 8003de6:	e7d0      	b.n	8003d8a <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8003de8:	9c01      	ldr	r4, [sp, #4]
 8003dea:	432c      	orrs	r4, r5
 8003dec:	0025      	movs	r5, r4
 8003dee:	e798      	b.n	8003d22 <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8003df0:	9f01      	ldr	r7, [sp, #4]
 8003df2:	433d      	orrs	r5, r7
 8003df4:	e78f      	b.n	8003d16 <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8003df6:	9f01      	ldr	r7, [sp, #4]
 8003df8:	433d      	orrs	r5, r7
 8003dfa:	e786      	b.n	8003d0a <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 8003dfc:	9f01      	ldr	r7, [sp, #4]
 8003dfe:	433d      	orrs	r5, r7
 8003e00:	e77d      	b.n	8003cfe <HAL_GPIO_Init+0xba>
  } 
}
 8003e02:	b007      	add	sp, #28
 8003e04:	bcf0      	pop	{r4, r5, r6, r7}
 8003e06:	46bb      	mov	fp, r7
 8003e08:	46b2      	mov	sl, r6
 8003e0a:	46a9      	mov	r9, r5
 8003e0c:	46a0      	mov	r8, r4
 8003e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e10:	4667      	mov	r7, ip
 8003e12:	2601      	movs	r6, #1
 8003e14:	40be      	lsls	r6, r7
 8003e16:	464f      	mov	r7, r9
 8003e18:	4337      	orrs	r7, r6
 8003e1a:	46b9      	mov	r9, r7
 8003e1c:	e764      	b.n	8003ce8 <HAL_GPIO_Init+0xa4>
 8003e1e:	4667      	mov	r7, ip
 8003e20:	2602      	movs	r6, #2
 8003e22:	40be      	lsls	r6, r7
 8003e24:	464f      	mov	r7, r9
 8003e26:	4337      	orrs	r7, r6
 8003e28:	46b9      	mov	r9, r7
 8003e2a:	e75d      	b.n	8003ce8 <HAL_GPIO_Init+0xa4>
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40010000 	.word	0x40010000
 8003e34:	48000400 	.word	0x48000400
 8003e38:	48000800 	.word	0x48000800
 8003e3c:	40010400 	.word	0x40010400

08003e40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e44:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e46:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e48:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003e4a:	e7fc      	b.n	8003e46 <HAL_GPIO_WritePin+0x6>

08003e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	46ce      	mov	lr, r9
 8003e50:	4647      	mov	r7, r8
 8003e52:	b580      	push	{r7, lr}
 8003e54:	0004      	movs	r4, r0
 8003e56:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d100      	bne.n	8003e5e <HAL_RCC_OscConfig+0x12>
 8003e5c:	e0ee      	b.n	800403c <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	6803      	ldr	r3, [r0, #0]
 8003e60:	07da      	lsls	r2, r3, #31
 8003e62:	d535      	bpl.n	8003ed0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e64:	210c      	movs	r1, #12
 8003e66:	48c3      	ldr	r0, [pc, #780]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003e68:	6842      	ldr	r2, [r0, #4]
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	2a04      	cmp	r2, #4
 8003e6e:	d100      	bne.n	8003e72 <HAL_RCC_OscConfig+0x26>
 8003e70:	e101      	b.n	8004076 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e72:	6842      	ldr	r2, [r0, #4]
 8003e74:	4011      	ands	r1, r2
 8003e76:	2908      	cmp	r1, #8
 8003e78:	d100      	bne.n	8003e7c <HAL_RCC_OscConfig+0x30>
 8003e7a:	e0f8      	b.n	800406e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d00f      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x56>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d100      	bne.n	8003e88 <HAL_RCC_OscConfig+0x3c>
 8003e86:	e11e      	b.n	80040c6 <HAL_RCC_OscConfig+0x27a>
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d100      	bne.n	8003e8e <HAL_RCC_OscConfig+0x42>
 8003e8c:	e1a7      	b.n	80041de <HAL_RCC_OscConfig+0x392>
 8003e8e:	4bb9      	ldr	r3, [pc, #740]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003e90:	49b9      	ldr	r1, [pc, #740]	; (8004178 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	400a      	ands	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	49b8      	ldr	r1, [pc, #736]	; (800417c <HAL_RCC_OscConfig+0x330>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e005      	b.n	8003eae <HAL_RCC_OscConfig+0x62>
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	4ab3      	ldr	r2, [pc, #716]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7ff fce3 	bl	8003878 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003eb4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4faf      	ldr	r7, [pc, #700]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003eb8:	02b6      	lsls	r6, r6, #10
 8003eba:	e005      	b.n	8003ec8 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7ff fcdc 	bl	8003878 <HAL_GetTick>
 8003ec0:	1b40      	subs	r0, r0, r5
 8003ec2:	2864      	cmp	r0, #100	; 0x64
 8003ec4:	d900      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x7c>
 8003ec6:	e0fc      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4233      	tst	r3, r6
 8003ecc:	d0f6      	beq.n	8003ebc <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	079a      	lsls	r2, r3, #30
 8003ed2:	d529      	bpl.n	8003f28 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ed4:	220c      	movs	r2, #12
 8003ed6:	49a7      	ldr	r1, [pc, #668]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003ed8:	6848      	ldr	r0, [r1, #4]
 8003eda:	4202      	tst	r2, r0
 8003edc:	d100      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x94>
 8003ede:	e0a6      	b.n	800402e <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ee0:	6848      	ldr	r0, [r1, #4]
 8003ee2:	4002      	ands	r2, r0
 8003ee4:	2a08      	cmp	r2, #8
 8003ee6:	d100      	bne.n	8003eea <HAL_RCC_OscConfig+0x9e>
 8003ee8:	e09d      	b.n	8004026 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eea:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4da1      	ldr	r5, [pc, #644]	; (8004174 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d100      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xa8>
 8003ef2:	e11f      	b.n	8004134 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003efa:	4313      	orrs	r3, r2
 8003efc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003efe:	f7ff fcbb 	bl	8003878 <HAL_GetTick>
 8003f02:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e005      	b.n	8003f12 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f06:	f7ff fcb7 	bl	8003878 <HAL_GetTick>
 8003f0a:	1b80      	subs	r0, r0, r6
 8003f0c:	2802      	cmp	r0, #2
 8003f0e:	d900      	bls.n	8003f12 <HAL_RCC_OscConfig+0xc6>
 8003f10:	e0d7      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	421f      	tst	r7, r3
 8003f16:	d0f6      	beq.n	8003f06 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	21f8      	movs	r1, #248	; 0xf8
 8003f1a:	682a      	ldr	r2, [r5, #0]
 8003f1c:	6923      	ldr	r3, [r4, #16]
 8003f1e:	438a      	bics	r2, r1
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4313      	orrs	r3, r2
 8003f24:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	071a      	lsls	r2, r3, #28
 8003f2a:	d42d      	bmi.n	8003f88 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2c:	075a      	lsls	r2, r3, #29
 8003f2e:	d544      	bpl.n	8003fba <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f30:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003f32:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f34:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003f36:	0552      	lsls	r2, r2, #21
 8003f38:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3c:	4211      	tst	r1, r2
 8003f3e:	d108      	bne.n	8003f52 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f40:	69d9      	ldr	r1, [r3, #28]
 8003f42:	4311      	orrs	r1, r2
 8003f44:	61d9      	str	r1, [r3, #28]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	2780      	movs	r7, #128	; 0x80
 8003f54:	4e8a      	ldr	r6, [pc, #552]	; (8004180 <HAL_RCC_OscConfig+0x334>)
 8003f56:	007f      	lsls	r7, r7, #1
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	423b      	tst	r3, r7
 8003f5c:	d100      	bne.n	8003f60 <HAL_RCC_OscConfig+0x114>
 8003f5e:	e094      	b.n	800408a <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d100      	bne.n	8003f68 <HAL_RCC_OscConfig+0x11c>
 8003f66:	e0f8      	b.n	800415a <HAL_RCC_OscConfig+0x30e>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d100      	bne.n	8003f6e <HAL_RCC_OscConfig+0x122>
 8003f6c:	e0c4      	b.n	80040f8 <HAL_RCC_OscConfig+0x2ac>
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d100      	bne.n	8003f74 <HAL_RCC_OscConfig+0x128>
 8003f72:	e140      	b.n	80041f6 <HAL_RCC_OscConfig+0x3aa>
 8003f74:	2101      	movs	r1, #1
 8003f76:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	438a      	bics	r2, r1
 8003f7c:	621a      	str	r2, [r3, #32]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	3103      	adds	r1, #3
 8003f82:	438a      	bics	r2, r1
 8003f84:	621a      	str	r2, [r3, #32]
 8003f86:	e0ec      	b.n	8004162 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f88:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	4d7a      	ldr	r5, [pc, #488]	; (8004174 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05b      	beq.n	8004048 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003f90:	2201      	movs	r2, #1
 8003f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f94:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003f96:	4313      	orrs	r3, r2
 8003f98:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003f9a:	f7ff fc6d 	bl	8003878 <HAL_GetTick>
 8003f9e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa0:	e005      	b.n	8003fae <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7ff fc69 	bl	8003878 <HAL_GetTick>
 8003fa6:	1b80      	subs	r0, r0, r6
 8003fa8:	2802      	cmp	r0, #2
 8003faa:	d900      	bls.n	8003fae <HAL_RCC_OscConfig+0x162>
 8003fac:	e089      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fb0:	421f      	tst	r7, r3
 8003fb2:	d0f6      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	075a      	lsls	r2, r3, #29
 8003fb8:	d4ba      	bmi.n	8003f30 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fba:	06db      	lsls	r3, r3, #27
 8003fbc:	d512      	bpl.n	8003fe4 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fbe:	6963      	ldr	r3, [r4, #20]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d100      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x17a>
 8003fc4:	e13d      	b.n	8004242 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003fc6:	3305      	adds	r3, #5
 8003fc8:	d000      	beq.n	8003fcc <HAL_RCC_OscConfig+0x180>
 8003fca:	e0e9      	b.n	80041a0 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003fcc:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003fce:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8003fd0:	4a68      	ldr	r2, [pc, #416]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003fd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003fd4:	438b      	bics	r3, r1
 8003fd6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003fd8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003fda:	69a3      	ldr	r3, [r4, #24]
 8003fdc:	4381      	bics	r1, r0
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe4:	6a23      	ldr	r3, [r4, #32]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01b      	beq.n	8004022 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fea:	220c      	movs	r2, #12
 8003fec:	4d61      	ldr	r5, [pc, #388]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8003fee:	6869      	ldr	r1, [r5, #4]
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	2a08      	cmp	r2, #8
 8003ff4:	d100      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1ac>
 8003ff6:	e108      	b.n	800420a <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d100      	bne.n	8003ffe <HAL_RCC_OscConfig+0x1b2>
 8003ffc:	e13f      	b.n	800427e <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004002:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004004:	4013      	ands	r3, r2
 8004006:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004008:	f7ff fc36 	bl	8003878 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800400e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004010:	e004      	b.n	800401c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7ff fc31 	bl	8003878 <HAL_GetTick>
 8004016:	1b00      	subs	r0, r0, r4
 8004018:	2802      	cmp	r0, #2
 800401a:	d852      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	4233      	tst	r3, r6
 8004020:	d1f7      	bne.n	8004012 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8004022:	2000      	movs	r0, #0
 8004024:	e00b      	b.n	800403e <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004026:	684a      	ldr	r2, [r1, #4]
 8004028:	03d2      	lsls	r2, r2, #15
 800402a:	d500      	bpl.n	800402e <HAL_RCC_OscConfig+0x1e2>
 800402c:	e75d      	b.n	8003eea <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4a51      	ldr	r2, [pc, #324]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	0792      	lsls	r2, r2, #30
 8004034:	d539      	bpl.n	80040aa <HAL_RCC_OscConfig+0x25e>
 8004036:	68e2      	ldr	r2, [r4, #12]
 8004038:	2a01      	cmp	r2, #1
 800403a:	d036      	beq.n	80040aa <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800403c:	2001      	movs	r0, #1
}
 800403e:	b003      	add	sp, #12
 8004040:	bcc0      	pop	{r6, r7}
 8004042:	46b9      	mov	r9, r7
 8004044:	46b0      	mov	r8, r6
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8004048:	2201      	movs	r2, #1
 800404a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800404e:	4393      	bics	r3, r2
 8004050:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004052:	f7ff fc11 	bl	8003878 <HAL_GetTick>
 8004056:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	e004      	b.n	8004064 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405a:	f7ff fc0d 	bl	8003878 <HAL_GetTick>
 800405e:	1b80      	subs	r0, r0, r6
 8004060:	2802      	cmp	r0, #2
 8004062:	d82e      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004066:	421f      	tst	r7, r3
 8004068:	d1f7      	bne.n	800405a <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	e7a3      	b.n	8003fb6 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800406e:	6842      	ldr	r2, [r0, #4]
 8004070:	03d2      	lsls	r2, r2, #15
 8004072:	d400      	bmi.n	8004076 <HAL_RCC_OscConfig+0x22a>
 8004074:	e702      	b.n	8003e7c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	0392      	lsls	r2, r2, #14
 800407c:	d400      	bmi.n	8004080 <HAL_RCC_OscConfig+0x234>
 800407e:	e727      	b.n	8003ed0 <HAL_RCC_OscConfig+0x84>
 8004080:	6862      	ldr	r2, [r4, #4]
 8004082:	2a00      	cmp	r2, #0
 8004084:	d000      	beq.n	8004088 <HAL_RCC_OscConfig+0x23c>
 8004086:	e723      	b.n	8003ed0 <HAL_RCC_OscConfig+0x84>
 8004088:	e7d8      	b.n	800403c <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	6833      	ldr	r3, [r6, #0]
 800408c:	433b      	orrs	r3, r7
 800408e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004090:	f7ff fbf2 	bl	8003878 <HAL_GetTick>
 8004094:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	e004      	b.n	80040a2 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7ff fbee 	bl	8003878 <HAL_GetTick>
 800409c:	1b40      	subs	r0, r0, r5
 800409e:	2864      	cmp	r0, #100	; 0x64
 80040a0:	d80f      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	6833      	ldr	r3, [r6, #0]
 80040a4:	423b      	tst	r3, r7
 80040a6:	d0f7      	beq.n	8004098 <HAL_RCC_OscConfig+0x24c>
 80040a8:	e75a      	b.n	8003f60 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	25f8      	movs	r5, #248	; 0xf8
 80040ac:	4831      	ldr	r0, [pc, #196]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 80040ae:	6922      	ldr	r2, [r4, #16]
 80040b0:	6801      	ldr	r1, [r0, #0]
 80040b2:	00d2      	lsls	r2, r2, #3
 80040b4:	43a9      	bics	r1, r5
 80040b6:	430a      	orrs	r2, r1
 80040b8:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	071a      	lsls	r2, r3, #28
 80040bc:	d400      	bmi.n	80040c0 <HAL_RCC_OscConfig+0x274>
 80040be:	e735      	b.n	8003f2c <HAL_RCC_OscConfig+0xe0>
 80040c0:	e762      	b.n	8003f88 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80040c2:	2003      	movs	r0, #3
 80040c4:	e7bb      	b.n	800403e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c6:	4d2b      	ldr	r5, [pc, #172]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 80040c8:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040cc:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ce:	4013      	ands	r3, r2
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	4a29      	ldr	r2, [pc, #164]	; (800417c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	4013      	ands	r3, r2
 80040da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80040dc:	f7ff fbcc 	bl	8003878 <HAL_GetTick>
 80040e0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e004      	b.n	80040ee <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e4:	f7ff fbc8 	bl	8003878 <HAL_GetTick>
 80040e8:	1b80      	subs	r0, r0, r6
 80040ea:	2864      	cmp	r0, #100	; 0x64
 80040ec:	d8e9      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	423b      	tst	r3, r7
 80040f2:	d1f7      	bne.n	80040e4 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	e6eb      	b.n	8003ed0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f8:	2201      	movs	r2, #1
 80040fa:	4e1e      	ldr	r6, [pc, #120]	; (8004174 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	4d22      	ldr	r5, [pc, #136]	; (8004188 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fe:	6a33      	ldr	r3, [r6, #32]
 8004100:	4393      	bics	r3, r2
 8004102:	6233      	str	r3, [r6, #32]
 8004104:	6a33      	ldr	r3, [r6, #32]
 8004106:	3203      	adds	r2, #3
 8004108:	4393      	bics	r3, r2
 800410a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800410c:	f7ff fbb4 	bl	8003878 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004110:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8004112:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	4698      	mov	r8, r3
 8004116:	e004      	b.n	8004122 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7ff fbae 	bl	8003878 <HAL_GetTick>
 800411c:	1bc0      	subs	r0, r0, r7
 800411e:	42a8      	cmp	r0, r5
 8004120:	d8cf      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004122:	4642      	mov	r2, r8
 8004124:	6a33      	ldr	r3, [r6, #32]
 8004126:	421a      	tst	r2, r3
 8004128:	d1f6      	bne.n	8004118 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 800412a:	464b      	mov	r3, r9
 800412c:	2b01      	cmp	r3, #1
 800412e:	d04f      	beq.n	80041d0 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	e742      	b.n	8003fba <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8004134:	2201      	movs	r2, #1
 8004136:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004138:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800413a:	4393      	bics	r3, r2
 800413c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800413e:	f7ff fb9b 	bl	8003878 <HAL_GetTick>
 8004142:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004144:	e004      	b.n	8004150 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004146:	f7ff fb97 	bl	8003878 <HAL_GetTick>
 800414a:	1b80      	subs	r0, r0, r6
 800414c:	2802      	cmp	r0, #2
 800414e:	d8b8      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	421f      	tst	r7, r3
 8004154:	d1f7      	bne.n	8004146 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	e6e6      	b.n	8003f28 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415a:	4906      	ldr	r1, [pc, #24]	; (8004174 <HAL_RCC_OscConfig+0x328>)
 800415c:	6a0a      	ldr	r2, [r1, #32]
 800415e:	4313      	orrs	r3, r2
 8004160:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004162:	f7ff fb89 	bl	8003878 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8004168:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	4698      	mov	r8, r3
 800416c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	4d06      	ldr	r5, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	e011      	b.n	8004196 <HAL_RCC_OscConfig+0x34a>
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	40021000 	.word	0x40021000
 8004178:	fffeffff 	.word	0xfffeffff
 800417c:	fffbffff 	.word	0xfffbffff
 8004180:	40007000 	.word	0x40007000
 8004184:	feffffff 	.word	0xfeffffff
 8004188:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7ff fb74 	bl	8003878 <HAL_GetTick>
 8004190:	1b80      	subs	r0, r0, r6
 8004192:	42a8      	cmp	r0, r5
 8004194:	d895      	bhi.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	4643      	mov	r3, r8
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	421f      	tst	r7, r3
 800419c:	d0f6      	beq.n	800418c <HAL_RCC_OscConfig+0x340>
 800419e:	e7c4      	b.n	800412a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 80041a0:	2204      	movs	r2, #4
 80041a2:	4d53      	ldr	r5, [pc, #332]	; (80042f0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041a4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80041a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80041a8:	4313      	orrs	r3, r2
 80041aa:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80041ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80041ae:	3a03      	subs	r2, #3
 80041b0:	4393      	bics	r3, r2
 80041b2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80041b4:	f7ff fb60 	bl	8003878 <HAL_GetTick>
 80041b8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041ba:	e005      	b.n	80041c8 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041bc:	f7ff fb5c 	bl	8003878 <HAL_GetTick>
 80041c0:	1b80      	subs	r0, r0, r6
 80041c2:	2802      	cmp	r0, #2
 80041c4:	d900      	bls.n	80041c8 <HAL_RCC_OscConfig+0x37c>
 80041c6:	e77c      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80041ca:	421f      	tst	r7, r3
 80041cc:	d1f6      	bne.n	80041bc <HAL_RCC_OscConfig+0x370>
 80041ce:	e709      	b.n	8003fe4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d0:	4a47      	ldr	r2, [pc, #284]	; (80042f0 <HAL_RCC_OscConfig+0x4a4>)
 80041d2:	4948      	ldr	r1, [pc, #288]	; (80042f4 <HAL_RCC_OscConfig+0x4a8>)
 80041d4:	69d3      	ldr	r3, [r2, #28]
 80041d6:	400b      	ands	r3, r1
 80041d8:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	e6ed      	b.n	8003fba <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_RCC_OscConfig+0x4a4>)
 80041e2:	02d2      	lsls	r2, r2, #11
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	0252      	lsls	r2, r2, #9
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e65b      	b.n	8003eae <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f6:	2104      	movs	r1, #4
 80041f8:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_OscConfig+0x4a4>)
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	621a      	str	r2, [r3, #32]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	3903      	subs	r1, #3
 8004204:	430a      	orrs	r2, r1
 8004206:	621a      	str	r2, [r3, #32]
 8004208:	e7ab      	b.n	8004162 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420a:	2b01      	cmp	r3, #1
 800420c:	d100      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c4>
 800420e:	e715      	b.n	800403c <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004210:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8004212:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004214:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004216:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8004218:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 800421a:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800421c:	4013      	ands	r3, r2
 800421e:	428b      	cmp	r3, r1
 8004220:	d000      	beq.n	8004224 <HAL_RCC_OscConfig+0x3d8>
 8004222:	e70c      	b.n	800403e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004224:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004228:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	428b      	cmp	r3, r1
 800422c:	d000      	beq.n	8004230 <HAL_RCC_OscConfig+0x3e4>
 800422e:	e706      	b.n	800403e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004230:	23f0      	movs	r3, #240	; 0xf0
 8004232:	039b      	lsls	r3, r3, #14
 8004234:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004238:	1ad2      	subs	r2, r2, r3
 800423a:	1e53      	subs	r3, r2, #1
 800423c:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 800423e:	b2d0      	uxtb	r0, r2
 8004240:	e6fd      	b.n	800403e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004242:	2104      	movs	r1, #4
 8004244:	4d2a      	ldr	r5, [pc, #168]	; (80042f0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004246:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004248:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800424a:	430a      	orrs	r2, r1
 800424c:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800424e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004250:	4313      	orrs	r3, r2
 8004252:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004254:	f7ff fb10 	bl	8003878 <HAL_GetTick>
 8004258:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800425a:	e005      	b.n	8004268 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800425c:	f7ff fb0c 	bl	8003878 <HAL_GetTick>
 8004260:	1b80      	subs	r0, r0, r6
 8004262:	2802      	cmp	r0, #2
 8004264:	d900      	bls.n	8004268 <HAL_RCC_OscConfig+0x41c>
 8004266:	e72c      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004268:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800426a:	421f      	tst	r7, r3
 800426c:	d0f6      	beq.n	800425c <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800426e:	21f8      	movs	r1, #248	; 0xf8
 8004270:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004272:	69a3      	ldr	r3, [r4, #24]
 8004274:	438a      	bics	r2, r1
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4313      	orrs	r3, r2
 800427a:	636b      	str	r3, [r5, #52]	; 0x34
 800427c:	e6b2      	b.n	8003fe4 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004282:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004284:	4013      	ands	r3, r2
 8004286:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004288:	f7ff faf6 	bl	8003878 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800428e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004290:	e005      	b.n	800429e <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004292:	f7ff faf1 	bl	8003878 <HAL_GetTick>
 8004296:	1b80      	subs	r0, r0, r6
 8004298:	2802      	cmp	r0, #2
 800429a:	d900      	bls.n	800429e <HAL_RCC_OscConfig+0x452>
 800429c:	e711      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	423b      	tst	r3, r7
 80042a2:	d1f6      	bne.n	8004292 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	220f      	movs	r2, #15
 80042a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a8:	4e11      	ldr	r6, [pc, #68]	; (80042f0 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042aa:	4393      	bics	r3, r2
 80042ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042ae:	4313      	orrs	r3, r2
 80042b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80042b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80042b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042b6:	686a      	ldr	r2, [r5, #4]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	4910      	ldr	r1, [pc, #64]	; (80042fc <HAL_RCC_OscConfig+0x4b0>)
 80042bc:	400a      	ands	r2, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	682a      	ldr	r2, [r5, #0]
 80042c6:	045b      	lsls	r3, r3, #17
 80042c8:	4313      	orrs	r3, r2
 80042ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042cc:	f7ff fad4 	bl	8003878 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80042d2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d4:	04ad      	lsls	r5, r5, #18
 80042d6:	e005      	b.n	80042e4 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7ff face 	bl	8003878 <HAL_GetTick>
 80042dc:	1b00      	subs	r0, r0, r4
 80042de:	2802      	cmp	r0, #2
 80042e0:	d900      	bls.n	80042e4 <HAL_RCC_OscConfig+0x498>
 80042e2:	e6ee      	b.n	80040c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e4:	6833      	ldr	r3, [r6, #0]
 80042e6:	422b      	tst	r3, r5
 80042e8:	d0f6      	beq.n	80042d8 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 80042ea:	2000      	movs	r0, #0
 80042ec:	e6a7      	b.n	800403e <HAL_RCC_OscConfig+0x1f2>
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	40021000 	.word	0x40021000
 80042f4:	efffffff 	.word	0xefffffff
 80042f8:	feffffff 	.word	0xfeffffff
 80042fc:	ffc2ffff 	.word	0xffc2ffff

08004300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	46ce      	mov	lr, r9
 8004304:	4647      	mov	r7, r8
 8004306:	0004      	movs	r4, r0
 8004308:	000d      	movs	r5, r1
 800430a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800430c:	2800      	cmp	r0, #0
 800430e:	d00d      	beq.n	800432c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	2301      	movs	r3, #1
 8004312:	494a      	ldr	r1, [pc, #296]	; (800443c <HAL_RCC_ClockConfig+0x13c>)
 8004314:	680a      	ldr	r2, [r1, #0]
 8004316:	401a      	ands	r2, r3
 8004318:	42aa      	cmp	r2, r5
 800431a:	d20c      	bcs.n	8004336 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431c:	680a      	ldr	r2, [r1, #0]
 800431e:	439a      	bics	r2, r3
 8004320:	432a      	orrs	r2, r5
 8004322:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004324:	680a      	ldr	r2, [r1, #0]
 8004326:	4013      	ands	r3, r2
 8004328:	42ab      	cmp	r3, r5
 800432a:	d004      	beq.n	8004336 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800432c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800432e:	bcc0      	pop	{r6, r7}
 8004330:	46b9      	mov	r9, r7
 8004332:	46b0      	mov	r8, r6
 8004334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	079a      	lsls	r2, r3, #30
 800433a:	d50e      	bpl.n	800435a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	075a      	lsls	r2, r3, #29
 800433e:	d505      	bpl.n	800434c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004340:	22e0      	movs	r2, #224	; 0xe0
 8004342:	493f      	ldr	r1, [pc, #252]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
 8004344:	00d2      	lsls	r2, r2, #3
 8004346:	6848      	ldr	r0, [r1, #4]
 8004348:	4302      	orrs	r2, r0
 800434a:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	20f0      	movs	r0, #240	; 0xf0
 800434e:	493c      	ldr	r1, [pc, #240]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
 8004350:	684a      	ldr	r2, [r1, #4]
 8004352:	4382      	bics	r2, r0
 8004354:	68a0      	ldr	r0, [r4, #8]
 8004356:	4302      	orrs	r2, r0
 8004358:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	07db      	lsls	r3, r3, #31
 800435c:	d522      	bpl.n	80043a4 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b38      	ldr	r3, [pc, #224]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004360:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004364:	2a01      	cmp	r2, #1
 8004366:	d05b      	beq.n	8004420 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004368:	2a02      	cmp	r2, #2
 800436a:	d056      	beq.n	800441a <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	d5dd      	bpl.n	800432c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004370:	2103      	movs	r1, #3
 8004372:	4e33      	ldr	r6, [pc, #204]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
 8004374:	6873      	ldr	r3, [r6, #4]
 8004376:	438b      	bics	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800437c:	f7ff fa7c 	bl	8003878 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004380:	230c      	movs	r3, #12
 8004382:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8004386:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e004      	b.n	8004396 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7ff fa74 	bl	8003878 <HAL_GetTick>
 8004390:	1bc0      	subs	r0, r0, r7
 8004392:	4548      	cmp	r0, r9
 8004394:	d847      	bhi.n	8004426 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4643      	mov	r3, r8
 8004398:	6872      	ldr	r2, [r6, #4]
 800439a:	401a      	ands	r2, r3
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1f3      	bne.n	800438c <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	2101      	movs	r1, #1
 80043a6:	4a25      	ldr	r2, [pc, #148]	; (800443c <HAL_RCC_ClockConfig+0x13c>)
 80043a8:	6813      	ldr	r3, [r2, #0]
 80043aa:	400b      	ands	r3, r1
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	d905      	bls.n	80043bc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b0:	6813      	ldr	r3, [r2, #0]
 80043b2:	438b      	bics	r3, r1
 80043b4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	4219      	tst	r1, r3
 80043ba:	d1b7      	bne.n	800432c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	075b      	lsls	r3, r3, #29
 80043c0:	d506      	bpl.n	80043d0 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
 80043c4:	4920      	ldr	r1, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x148>)
 80043c6:	6853      	ldr	r3, [r2, #4]
 80043c8:	400b      	ands	r3, r1
 80043ca:	68e1      	ldr	r1, [r4, #12]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d0:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80043d2:	491b      	ldr	r1, [pc, #108]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
 80043d4:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d00e      	beq.n	80043fa <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043dc:	481b      	ldr	r0, [pc, #108]	; (800444c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <HAL_RCC_ClockConfig+0x140>)
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_RCC_ClockConfig+0x150>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	491b      	ldr	r1, [pc, #108]	; (8004454 <HAL_RCC_ClockConfig+0x154>)
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	0f1b      	lsrs	r3, r3, #28
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	40d8      	lsrs	r0, r3
 80043ee:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80043f0:	2003      	movs	r0, #3
 80043f2:	f7ff f9ff 	bl	80037f4 <HAL_InitTick>
  return HAL_OK;
 80043f6:	2000      	movs	r0, #0
 80043f8:	e799      	b.n	800432e <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043fa:	250f      	movs	r5, #15
 80043fc:	4816      	ldr	r0, [pc, #88]	; (8004458 <HAL_RCC_ClockConfig+0x158>)
 80043fe:	0c93      	lsrs	r3, r2, #18
 8004400:	402b      	ands	r3, r5
 8004402:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004404:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004406:	03d2      	lsls	r2, r2, #15
 8004408:	d50f      	bpl.n	800442a <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <HAL_RCC_ClockConfig+0x15c>)
 800440c:	400d      	ands	r5, r1
 800440e:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004410:	480e      	ldr	r0, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x14c>)
 8004412:	f7fb fe79 	bl	8000108 <__udivsi3>
 8004416:	4360      	muls	r0, r4
 8004418:	e7e1      	b.n	80043de <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	019b      	lsls	r3, r3, #6
 800441c:	d4a8      	bmi.n	8004370 <HAL_RCC_ClockConfig+0x70>
 800441e:	e785      	b.n	800432c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004420:	039b      	lsls	r3, r3, #14
 8004422:	d4a5      	bmi.n	8004370 <HAL_RCC_ClockConfig+0x70>
 8004424:	e782      	b.n	800432c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8004426:	2003      	movs	r0, #3
 8004428:	e781      	b.n	800432e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800442a:	0163      	lsls	r3, r4, #5
 800442c:	1b1b      	subs	r3, r3, r4
 800442e:	0198      	lsls	r0, r3, #6
 8004430:	1ac0      	subs	r0, r0, r3
 8004432:	00c0      	lsls	r0, r0, #3
 8004434:	1900      	adds	r0, r0, r4
 8004436:	0200      	lsls	r0, r0, #8
 8004438:	e7d1      	b.n	80043de <HAL_RCC_ClockConfig+0xde>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
 8004444:	00001388 	.word	0x00001388
 8004448:	fffff8ff 	.word	0xfffff8ff
 800444c:	007a1200 	.word	0x007a1200
 8004450:	08006d0c 	.word	0x08006d0c
 8004454:	2000046c 	.word	0x2000046c
 8004458:	08006d24 	.word	0x08006d24
 800445c:	08006d34 	.word	0x08006d34

08004460 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8004460:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004462:	4910      	ldr	r1, [pc, #64]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8004464:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004466:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004468:	4013      	ands	r3, r2
 800446a:	2b08      	cmp	r3, #8
 800446c:	d001      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 800446e:	480e      	ldr	r0, [pc, #56]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004470:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004472:	250f      	movs	r5, #15
 8004474:	480d      	ldr	r0, [pc, #52]	; (80044ac <HAL_RCC_GetSysClockFreq+0x4c>)
 8004476:	0c93      	lsrs	r3, r2, #18
 8004478:	402b      	ands	r3, r5
 800447a:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800447c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800447e:	03d2      	lsls	r2, r2, #15
 8004480:	d507      	bpl.n	8004492 <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x50>)
 8004484:	400d      	ands	r5, r1
 8004486:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004488:	4807      	ldr	r0, [pc, #28]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x48>)
 800448a:	f7fb fe3d 	bl	8000108 <__udivsi3>
 800448e:	4360      	muls	r0, r4
 8004490:	e7ee      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004492:	0162      	lsls	r2, r4, #5
 8004494:	1b12      	subs	r2, r2, r4
 8004496:	0193      	lsls	r3, r2, #6
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	191b      	adds	r3, r3, r4
 800449e:	0218      	lsls	r0, r3, #8
 80044a0:	e7e6      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x10>
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	40021000 	.word	0x40021000
 80044a8:	007a1200 	.word	0x007a1200
 80044ac:	08006d24 	.word	0x08006d24
 80044b0:	08006d34 	.word	0x08006d34

080044b4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80044b4:	4b01      	ldr	r3, [pc, #4]	; (80044bc <HAL_RCC_GetHCLKFreq+0x8>)
 80044b6:	6818      	ldr	r0, [r3, #0]
}
 80044b8:	4770      	bx	lr
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	2000046c 	.word	0x2000046c

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80044c2:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4905      	ldr	r1, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80044c8:	055b      	lsls	r3, r3, #21
 80044ca:	0f5b      	lsrs	r3, r3, #29
 80044cc:	5ccb      	ldrb	r3, [r1, r3]
 80044ce:	6810      	ldr	r0, [r2, #0]
 80044d0:	40d8      	lsrs	r0, r3
}    
 80044d2:	4770      	bx	lr
 80044d4:	40021000 	.word	0x40021000
 80044d8:	2000046c 	.word	0x2000046c
 80044dc:	08006d1c 	.word	0x08006d1c

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e2:	46ce      	mov	lr, r9
 80044e4:	4647      	mov	r7, r8
 80044e6:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e8:	6803      	ldr	r3, [r0, #0]
{
 80044ea:	0004      	movs	r4, r0
 80044ec:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ee:	03da      	lsls	r2, r3, #15
 80044f0:	d530      	bpl.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80044f6:	0552      	lsls	r2, r2, #21
 80044f8:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fc:	4211      	tst	r1, r2
 80044fe:	d041      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	2680      	movs	r6, #128	; 0x80
 8004502:	4d41      	ldr	r5, [pc, #260]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004504:	0076      	lsls	r6, r6, #1
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	4233      	tst	r3, r6
 800450a:	d049      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450c:	4d3d      	ldr	r5, [pc, #244]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800450e:	23c0      	movs	r3, #192	; 0xc0
 8004510:	6a2a      	ldr	r2, [r5, #32]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	0010      	movs	r0, r2
 8004516:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004518:	421a      	tst	r2, r3
 800451a:	d063      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	400b      	ands	r3, r1
 8004520:	4283      	cmp	r3, r0
 8004522:	d00e      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004524:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004526:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004528:	6a2e      	ldr	r6, [r5, #32]
 800452a:	0240      	lsls	r0, r0, #9
 800452c:	4330      	orrs	r0, r6
 800452e:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004530:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004532:	4a36      	ldr	r2, [pc, #216]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004534:	4e36      	ldr	r6, [pc, #216]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004536:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004538:	4030      	ands	r0, r6
 800453a:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800453c:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800453e:	07db      	lsls	r3, r3, #31
 8004540:	d43f      	bmi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004542:	4a30      	ldr	r2, [pc, #192]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004544:	4831      	ldr	r0, [pc, #196]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004546:	6a13      	ldr	r3, [r2, #32]
 8004548:	4003      	ands	r3, r0
 800454a:	430b      	orrs	r3, r1
 800454c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800454e:	2f01      	cmp	r7, #1
 8004550:	d051      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	07da      	lsls	r2, r3, #31
 8004556:	d506      	bpl.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004558:	2003      	movs	r0, #3
 800455a:	492a      	ldr	r1, [pc, #168]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800455c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800455e:	4382      	bics	r2, r0
 8004560:	68a0      	ldr	r0, [r4, #8]
 8004562:	4302      	orrs	r2, r0
 8004564:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004566:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004568:	069b      	lsls	r3, r3, #26
 800456a:	d506      	bpl.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456c:	2110      	movs	r1, #16
 800456e:	4a25      	ldr	r2, [pc, #148]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004570:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004572:	438b      	bics	r3, r1
 8004574:	68e1      	ldr	r1, [r4, #12]
 8004576:	430b      	orrs	r3, r1
 8004578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800457a:	b003      	add	sp, #12
 800457c:	bcc0      	pop	{r6, r7}
 800457e:	46b9      	mov	r9, r7
 8004580:	46b0      	mov	r8, r6
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4d1f      	ldr	r5, [pc, #124]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4311      	orrs	r1, r2
 800458c:	61d9      	str	r1, [r3, #28]
 800458e:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4013      	ands	r3, r2
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 800459a:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	4233      	tst	r3, r6
 800459e:	d1b5      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	4333      	orrs	r3, r6
 80045a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80045a6:	f7ff f967 	bl	8003878 <HAL_GetTick>
 80045aa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	4233      	tst	r3, r6
 80045b0:	d1ac      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7ff f961 	bl	8003878 <HAL_GetTick>
 80045b6:	4643      	mov	r3, r8
 80045b8:	1ac0      	subs	r0, r0, r3
 80045ba:	2864      	cmp	r0, #100	; 0x64
 80045bc:	d9f6      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80045be:	2003      	movs	r0, #3
 80045c0:	e7db      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80045c2:	f7ff f959 	bl	8003878 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	2302      	movs	r3, #2
 80045c8:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 80045cc:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e004      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7ff f951 	bl	8003878 <HAL_GetTick>
 80045d6:	1b80      	subs	r0, r0, r6
 80045d8:	4548      	cmp	r0, r9
 80045da:	d8f0      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045dc:	4642      	mov	r2, r8
 80045de:	6a2b      	ldr	r3, [r5, #32]
 80045e0:	421a      	tst	r2, r3
 80045e2:	d0f6      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e4:	4a07      	ldr	r2, [pc, #28]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80045e6:	4809      	ldr	r0, [pc, #36]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80045e8:	6a13      	ldr	r3, [r2, #32]
 80045ea:	6861      	ldr	r1, [r4, #4]
 80045ec:	4003      	ands	r3, r0
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 80045f2:	2f01      	cmp	r7, #1
 80045f4:	d1ad      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	69d3      	ldr	r3, [r2, #28]
 80045f8:	4907      	ldr	r1, [pc, #28]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	e7a8      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
 800460c:	fffffcff 	.word	0xfffffcff
 8004610:	fffeffff 	.word	0xfffeffff
 8004614:	00001388 	.word	0x00001388
 8004618:	efffffff 	.word	0xefffffff

0800461c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800461c:	b510      	push	{r4, lr}
 800461e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004620:	d066      	beq.n	80046f0 <HAL_TIM_PWM_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	233d      	movs	r3, #61	; 0x3d
 8004624:	5cc3      	ldrb	r3, [r0, r3]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d041      	beq.n	80046b0 <HAL_TIM_PWM_Init+0x94>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	233d      	movs	r3, #61	; 0x3d
 800462e:	2202      	movs	r2, #2
 8004630:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004632:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004634:	492f      	ldr	r1, [pc, #188]	; (80046f4 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8004636:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004638:	428a      	cmp	r2, r1
 800463a:	d045      	beq.n	80046c8 <HAL_TIM_PWM_Init+0xac>
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	05c9      	lsls	r1, r1, #23
 8004640:	428a      	cmp	r2, r1
 8004642:	d02c      	beq.n	800469e <HAL_TIM_PWM_Init+0x82>
 8004644:	492c      	ldr	r1, [pc, #176]	; (80046f8 <HAL_TIM_PWM_Init+0xdc>)
 8004646:	428a      	cmp	r2, r1
 8004648:	d029      	beq.n	800469e <HAL_TIM_PWM_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	492c      	ldr	r1, [pc, #176]	; (80046fc <HAL_TIM_PWM_Init+0xe0>)
 800464c:	428a      	cmp	r2, r1
 800464e:	d02a      	beq.n	80046a6 <HAL_TIM_PWM_Init+0x8a>
 8004650:	492b      	ldr	r1, [pc, #172]	; (8004700 <HAL_TIM_PWM_Init+0xe4>)
 8004652:	428a      	cmp	r2, r1
 8004654:	d03c      	beq.n	80046d0 <HAL_TIM_PWM_Init+0xb4>
 8004656:	492b      	ldr	r1, [pc, #172]	; (8004704 <HAL_TIM_PWM_Init+0xe8>)
 8004658:	428a      	cmp	r2, r1
 800465a:	d039      	beq.n	80046d0 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	438b      	bics	r3, r1
 8004660:	69a1      	ldr	r1, [r4, #24]
 8004662:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8004664:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466e:	2301      	movs	r3, #1
 8004670:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8004674:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004676:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	3a08      	subs	r2, #8
 800467a:	54a3      	strb	r3, [r4, r2]
 800467c:	3201      	adds	r2, #1
 800467e:	54a3      	strb	r3, [r4, r2]
 8004680:	3201      	adds	r2, #1
 8004682:	54a3      	strb	r3, [r4, r2]
 8004684:	3201      	adds	r2, #1
 8004686:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	3201      	adds	r2, #1
 800468a:	54a3      	strb	r3, [r4, r2]
 800468c:	3201      	adds	r2, #1
 800468e:	54a3      	strb	r3, [r4, r2]
 8004690:	3201      	adds	r2, #1
 8004692:	54a3      	strb	r3, [r4, r2]
 8004694:	3201      	adds	r2, #1
 8004696:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004698:	3a08      	subs	r2, #8
 800469a:	54a3      	strb	r3, [r4, r2]
}
 800469c:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800469e:	2170      	movs	r1, #112	; 0x70
 80046a0:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80046a2:	68a1      	ldr	r1, [r4, #8]
 80046a4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	4918      	ldr	r1, [pc, #96]	; (8004708 <HAL_TIM_PWM_Init+0xec>)
 80046a8:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046aa:	6921      	ldr	r1, [r4, #16]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	e7d5      	b.n	800465c <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80046b0:	333c      	adds	r3, #60	; 0x3c
 80046b2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80046b4:	f7fe fe6c 	bl	8003390 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	233d      	movs	r3, #61	; 0x3d
 80046ba:	2202      	movs	r2, #2
 80046bc:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046be:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c0:	490c      	ldr	r1, [pc, #48]	; (80046f4 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80046c2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c4:	428a      	cmp	r2, r1
 80046c6:	d1b9      	bne.n	800463c <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	2170      	movs	r1, #112	; 0x70
 80046ca:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80046cc:	68a1      	ldr	r1, [r4, #8]
 80046ce:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d0:	490d      	ldr	r1, [pc, #52]	; (8004708 <HAL_TIM_PWM_Init+0xec>)
 80046d2:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d4:	6921      	ldr	r1, [r4, #16]
 80046d6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	438b      	bics	r3, r1
 80046dc:	69a1      	ldr	r1, [r4, #24]
 80046de:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80046e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80046ea:	6963      	ldr	r3, [r4, #20]
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	e7be      	b.n	800466e <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 80046f0:	2001      	movs	r0, #1
 80046f2:	e7d3      	b.n	800469c <HAL_TIM_PWM_Init+0x80>
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40002000 	.word	0x40002000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800
 8004708:	fffffcff 	.word	0xfffffcff

0800470c <HAL_TIM_PWM_ConfigChannel>:
{
 800470c:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800470e:	203c      	movs	r0, #60	; 0x3c
{
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004712:	5c1c      	ldrb	r4, [r3, r0]
 8004714:	2c01      	cmp	r4, #1
 8004716:	d100      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0xe>
 8004718:	e0de      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 800471a:	2401      	movs	r4, #1
 800471c:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 800471e:	2a08      	cmp	r2, #8
 8004720:	d100      	bne.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x18>
 8004722:	e0ac      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x172>
 8004724:	d834      	bhi.n	8004790 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004726:	2a00      	cmp	r2, #0
 8004728:	d100      	bne.n	800472c <HAL_TIM_PWM_ConfigChannel+0x20>
 800472a:	e07d      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800472c:	2a04      	cmp	r2, #4
 800472e:	d161      	bne.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004730:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004732:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004734:	4d77      	ldr	r5, [pc, #476]	; (8004914 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	6a10      	ldr	r0, [r2, #32]
 8004738:	43a0      	bics	r0, r4
 800473a:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800473c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800473e:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004740:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004742:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	680d      	ldr	r5, [r1, #0]
 8004746:	022d      	lsls	r5, r5, #8
 8004748:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800474a:	2420      	movs	r4, #32
 800474c:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800474e:	688c      	ldr	r4, [r1, #8]
 8004750:	0124      	lsls	r4, r4, #4
 8004752:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004754:	4870      	ldr	r0, [pc, #448]	; (8004918 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004756:	4282      	cmp	r2, r0
 8004758:	d057      	beq.n	800480a <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475a:	4870      	ldr	r0, [pc, #448]	; (800491c <HAL_TIM_PWM_ConfigChannel+0x210>)
 800475c:	4282      	cmp	r2, r0
 800475e:	d05b      	beq.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8004760:	486f      	ldr	r0, [pc, #444]	; (8004920 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004762:	4282      	cmp	r2, r0
 8004764:	d058      	beq.n	8004818 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004766:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004768:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800476a:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800476c:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800476e:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004772:	6994      	ldr	r4, [r2, #24]
 8004774:	0100      	lsls	r0, r0, #4
 8004776:	4320      	orrs	r0, r4
 8004778:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800477a:	6990      	ldr	r0, [r2, #24]
 800477c:	4c69      	ldr	r4, [pc, #420]	; (8004924 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800477e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004780:	4020      	ands	r0, r4
 8004782:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004784:	6990      	ldr	r0, [r2, #24]
 8004786:	0209      	lsls	r1, r1, #8
 8004788:	4301      	orrs	r1, r0
 800478a:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2000      	movs	r0, #0
      break;
 800478e:	e032      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8004790:	2a0c      	cmp	r2, #12
 8004792:	d12f      	bne.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004794:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004796:	4c64      	ldr	r4, [pc, #400]	; (8004928 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8004798:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800479a:	4d5e      	ldr	r5, [pc, #376]	; (8004914 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800479c:	4020      	ands	r0, r4
 800479e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80047a0:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80047a2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80047a4:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a6:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a8:	680d      	ldr	r5, [r1, #0]
 80047aa:	022d      	lsls	r5, r5, #8
 80047ac:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ae:	485f      	ldr	r0, [pc, #380]	; (800492c <HAL_TIM_PWM_ConfigChannel+0x220>)
 80047b0:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b2:	6888      	ldr	r0, [r1, #8]
 80047b4:	0300      	lsls	r0, r0, #12
 80047b6:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	4c57      	ldr	r4, [pc, #348]	; (8004918 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80047ba:	42a2      	cmp	r2, r4
 80047bc:	d01f      	beq.n	80047fe <HAL_TIM_PWM_ConfigChannel+0xf2>
 80047be:	4c57      	ldr	r4, [pc, #348]	; (800491c <HAL_TIM_PWM_ConfigChannel+0x210>)
 80047c0:	42a2      	cmp	r2, r4
 80047c2:	d01c      	beq.n	80047fe <HAL_TIM_PWM_ConfigChannel+0xf2>
 80047c4:	4c56      	ldr	r4, [pc, #344]	; (8004920 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80047c6:	42a2      	cmp	r2, r4
 80047c8:	d019      	beq.n	80047fe <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ca:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80047cc:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80047ce:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80047d0:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d4:	2080      	movs	r0, #128	; 0x80
 80047d6:	69d4      	ldr	r4, [r2, #28]
 80047d8:	0100      	lsls	r0, r0, #4
 80047da:	4320      	orrs	r0, r4
 80047dc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047de:	69d0      	ldr	r0, [r2, #28]
 80047e0:	4c50      	ldr	r4, [pc, #320]	; (8004924 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e4:	4020      	ands	r0, r4
 80047e6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047e8:	69d0      	ldr	r0, [r2, #28]
 80047ea:	0209      	lsls	r1, r1, #8
 80047ec:	4301      	orrs	r1, r0
 80047ee:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2000      	movs	r0, #0
      break;
 80047f2:	e000      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 80047f4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80047f6:	223c      	movs	r2, #60	; 0x3c
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]
}
 80047fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047fe:	4c4c      	ldr	r4, [pc, #304]	; (8004930 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8004800:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004802:	694e      	ldr	r6, [r1, #20]
 8004804:	01b6      	lsls	r6, r6, #6
 8004806:	4326      	orrs	r6, r4
 8004808:	e7df      	b.n	80047ca <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 800480a:	2080      	movs	r0, #128	; 0x80
 800480c:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800480e:	68c8      	ldr	r0, [r1, #12]
 8004810:	0100      	lsls	r0, r0, #4
 8004812:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8004814:	2040      	movs	r0, #64	; 0x40
 8004816:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004818:	4846      	ldr	r0, [pc, #280]	; (8004934 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800481a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800481c:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800481e:	698e      	ldr	r6, [r1, #24]
 8004820:	433e      	orrs	r6, r7
 8004822:	00b6      	lsls	r6, r6, #2
 8004824:	4306      	orrs	r6, r0
 8004826:	e79e      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004828:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800482a:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482c:	6a10      	ldr	r0, [r2, #32]
 800482e:	43a0      	bics	r0, r4
 8004830:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8004832:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004834:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004836:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004838:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 800483a:	680e      	ldr	r6, [r1, #0]
 800483c:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 800483e:	2602      	movs	r6, #2
 8004840:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8004842:	688e      	ldr	r6, [r1, #8]
 8004844:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004846:	4e34      	ldr	r6, [pc, #208]	; (8004918 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004848:	42b2      	cmp	r2, r6
 800484a:	d047      	beq.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800484c:	4e33      	ldr	r6, [pc, #204]	; (800491c <HAL_TIM_PWM_ConfigChannel+0x210>)
 800484e:	42b2      	cmp	r2, r6
 8004850:	d044      	beq.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8004852:	4e33      	ldr	r6, [pc, #204]	; (8004920 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004854:	42b2      	cmp	r2, r6
 8004856:	d041      	beq.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8004858:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800485a:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800485c:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800485e:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8004860:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004862:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004864:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004866:	6990      	ldr	r0, [r2, #24]
 8004868:	4320      	orrs	r0, r4
 800486a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800486c:	6990      	ldr	r0, [r2, #24]
 800486e:	3c04      	subs	r4, #4
 8004870:	43a0      	bics	r0, r4
 8004872:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004874:	6990      	ldr	r0, [r2, #24]
 8004876:	4301      	orrs	r1, r0
 8004878:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2000      	movs	r0, #0
      break;
 800487c:	e7bb      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800487e:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004880:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004882:	4c2d      	ldr	r4, [pc, #180]	; (8004938 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8004884:	6a10      	ldr	r0, [r2, #32]
 8004886:	4020      	ands	r0, r4
 8004888:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800488a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800488c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800488e:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004890:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8004892:	680e      	ldr	r6, [r1, #0]
 8004894:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8004896:	4c29      	ldr	r4, [pc, #164]	; (800493c <HAL_TIM_PWM_ConfigChannel+0x230>)
 8004898:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489a:	688c      	ldr	r4, [r1, #8]
 800489c:	0224      	lsls	r4, r4, #8
 800489e:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048a0:	4c1d      	ldr	r4, [pc, #116]	; (8004918 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80048a2:	42a2      	cmp	r2, r4
 80048a4:	d027      	beq.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a6:	4c1d      	ldr	r4, [pc, #116]	; (800491c <HAL_TIM_PWM_ConfigChannel+0x210>)
 80048a8:	42a2      	cmp	r2, r4
 80048aa:	d02b      	beq.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80048ac:	4c1c      	ldr	r4, [pc, #112]	; (8004920 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80048ae:	42a2      	cmp	r2, r4
 80048b0:	d028      	beq.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 80048b2:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80048b4:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80048b6:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80048b8:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ba:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80048bc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048be:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048c2:	4320      	orrs	r0, r4
 80048c4:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048c6:	69d0      	ldr	r0, [r2, #28]
 80048c8:	3c04      	subs	r4, #4
 80048ca:	43a0      	bics	r0, r4
 80048cc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ce:	69d0      	ldr	r0, [r2, #28]
 80048d0:	4301      	orrs	r1, r0
 80048d2:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2000      	movs	r0, #0
      break;
 80048d6:	e78e      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 80048d8:	2002      	movs	r0, #2
 80048da:	e78f      	b.n	80047fc <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 80048dc:	2608      	movs	r6, #8
 80048de:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 80048e0:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e2:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80048e4:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80048e6:	2604      	movs	r6, #4
 80048e8:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ea:	4e15      	ldr	r6, [pc, #84]	; (8004940 <HAL_TIM_PWM_ConfigChannel+0x234>)
 80048ec:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ee:	694d      	ldr	r5, [r1, #20]
 80048f0:	433d      	orrs	r5, r7
 80048f2:	4335      	orrs	r5, r6
 80048f4:	e7b0      	b.n	8004858 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 80048f6:	4c13      	ldr	r4, [pc, #76]	; (8004944 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80048f8:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048fa:	68cc      	ldr	r4, [r1, #12]
 80048fc:	0224      	lsls	r4, r4, #8
 80048fe:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8004900:	4808      	ldr	r0, [pc, #32]	; (8004924 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8004902:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004904:	4c10      	ldr	r4, [pc, #64]	; (8004948 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004906:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004908:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490a:	698d      	ldr	r5, [r1, #24]
 800490c:	433d      	orrs	r5, r7
 800490e:	012d      	lsls	r5, r5, #4
 8004910:	4325      	orrs	r5, r4
 8004912:	e7ce      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004914:	ffff8cff 	.word	0xffff8cff
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	fffffbff 	.word	0xfffffbff
 8004928:	ffffefff 	.word	0xffffefff
 800492c:	ffffdfff 	.word	0xffffdfff
 8004930:	ffffbfff 	.word	0xffffbfff
 8004934:	fffff3ff 	.word	0xfffff3ff
 8004938:	fffffeff 	.word	0xfffffeff
 800493c:	fffffdff 	.word	0xfffffdff
 8004940:	fffffcff 	.word	0xfffffcff
 8004944:	fffff7ff 	.word	0xfffff7ff
 8004948:	ffffcfff 	.word	0xffffcfff

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494c:	233c      	movs	r3, #60	; 0x3c
{
 800494e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004950:	5cc3      	ldrb	r3, [r0, r3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d021      	beq.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004956:	233d      	movs	r3, #61	; 0x3d
 8004958:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495a:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800495e:	6803      	ldr	r3, [r0, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004962:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004964:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004966:	680d      	ldr	r5, [r1, #0]
 8004968:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496c:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d006      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004972:	2280      	movs	r2, #128	; 0x80
 8004974:	05d2      	lsls	r2, r2, #23
 8004976:	4293      	cmp	r3, r2
 8004978:	d002      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d104      	bne.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004984:	684a      	ldr	r2, [r1, #4]
 8004986:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004988:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498a:	233d      	movs	r3, #61	; 0x3d
 800498c:	2201      	movs	r2, #1
 800498e:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004990:	2200      	movs	r2, #0
 8004992:	3b01      	subs	r3, #1
 8004994:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004996:	2000      	movs	r0, #0
}
 8004998:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800499a:	2002      	movs	r0, #2
 800499c:	e7fc      	b.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40000400 	.word	0x40000400

080049a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a8:	223c      	movs	r2, #60	; 0x3c
{
 80049aa:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80049ac:	5c83      	ldrb	r3, [r0, r2]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d01e      	beq.n	80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049b2:	68cb      	ldr	r3, [r1, #12]
 80049b4:	4c0f      	ldr	r4, [pc, #60]	; (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 80049b6:	4023      	ands	r3, r4
 80049b8:	688c      	ldr	r4, [r1, #8]
 80049ba:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049bc:	4c0e      	ldr	r4, [pc, #56]	; (80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80049be:	4023      	ands	r3, r4
 80049c0:	684c      	ldr	r4, [r1, #4]
 80049c2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80049c6:	4023      	ands	r3, r4
 80049c8:	680c      	ldr	r4, [r1, #0]
 80049ca:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049cc:	4c0c      	ldr	r4, [pc, #48]	; (8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80049ce:	4023      	ands	r3, r4
 80049d0:	690c      	ldr	r4, [r1, #16]
 80049d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049d4:	4c0b      	ldr	r4, [pc, #44]	; (8004a04 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80049d6:	4023      	ands	r3, r4
 80049d8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049da:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049dc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049de:	4c0a      	ldr	r4, [pc, #40]	; (8004a08 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80049e0:	4023      	ands	r3, r4
 80049e2:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049e4:	6801      	ldr	r1, [r0, #0]
 80049e6:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049e8:	2300      	movs	r3, #0
 80049ea:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80049ec:	2000      	movs	r0, #0
}
 80049ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80049f0:	2002      	movs	r0, #2
 80049f2:	e7fc      	b.n	80049ee <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80049f4:	fffffcff 	.word	0xfffffcff
 80049f8:	fffffbff 	.word	0xfffffbff
 80049fc:	fffff7ff 	.word	0xfffff7ff
 8004a00:	ffffefff 	.word	0xffffefff
 8004a04:	ffffdfff 	.word	0xffffdfff
 8004a08:	ffffbfff 	.word	0xffffbfff

08004a0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004a0e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a10:	07da      	lsls	r2, r3, #31
 8004a12:	d506      	bpl.n	8004a22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a14:	6801      	ldr	r1, [r0, #0]
 8004a16:	4c28      	ldr	r4, [pc, #160]	; (8004ab8 <UART_AdvFeatureConfig+0xac>)
 8004a18:	684a      	ldr	r2, [r1, #4]
 8004a1a:	4022      	ands	r2, r4
 8004a1c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004a1e:	4322      	orrs	r2, r4
 8004a20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a22:	079a      	lsls	r2, r3, #30
 8004a24:	d506      	bpl.n	8004a34 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a26:	6801      	ldr	r1, [r0, #0]
 8004a28:	4c24      	ldr	r4, [pc, #144]	; (8004abc <UART_AdvFeatureConfig+0xb0>)
 8004a2a:	684a      	ldr	r2, [r1, #4]
 8004a2c:	4022      	ands	r2, r4
 8004a2e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004a30:	4322      	orrs	r2, r4
 8004a32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a34:	075a      	lsls	r2, r3, #29
 8004a36:	d506      	bpl.n	8004a46 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a38:	6801      	ldr	r1, [r0, #0]
 8004a3a:	4c21      	ldr	r4, [pc, #132]	; (8004ac0 <UART_AdvFeatureConfig+0xb4>)
 8004a3c:	684a      	ldr	r2, [r1, #4]
 8004a3e:	4022      	ands	r2, r4
 8004a40:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004a42:	4322      	orrs	r2, r4
 8004a44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a46:	071a      	lsls	r2, r3, #28
 8004a48:	d506      	bpl.n	8004a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a4a:	6801      	ldr	r1, [r0, #0]
 8004a4c:	4c1d      	ldr	r4, [pc, #116]	; (8004ac4 <UART_AdvFeatureConfig+0xb8>)
 8004a4e:	684a      	ldr	r2, [r1, #4]
 8004a50:	4022      	ands	r2, r4
 8004a52:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004a54:	4322      	orrs	r2, r4
 8004a56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	06da      	lsls	r2, r3, #27
 8004a5a:	d506      	bpl.n	8004a6a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a5c:	6801      	ldr	r1, [r0, #0]
 8004a5e:	4c1a      	ldr	r4, [pc, #104]	; (8004ac8 <UART_AdvFeatureConfig+0xbc>)
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	4022      	ands	r2, r4
 8004a64:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004a66:	4322      	orrs	r2, r4
 8004a68:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6a:	069a      	lsls	r2, r3, #26
 8004a6c:	d506      	bpl.n	8004a7c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6e:	6801      	ldr	r1, [r0, #0]
 8004a70:	4c16      	ldr	r4, [pc, #88]	; (8004acc <UART_AdvFeatureConfig+0xc0>)
 8004a72:	688a      	ldr	r2, [r1, #8]
 8004a74:	4022      	ands	r2, r4
 8004a76:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004a78:	4322      	orrs	r2, r4
 8004a7a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a7c:	065a      	lsls	r2, r3, #25
 8004a7e:	d50a      	bpl.n	8004a96 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a80:	6801      	ldr	r1, [r0, #0]
 8004a82:	4d13      	ldr	r5, [pc, #76]	; (8004ad0 <UART_AdvFeatureConfig+0xc4>)
 8004a84:	684a      	ldr	r2, [r1, #4]
 8004a86:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004a88:	402a      	ands	r2, r5
 8004a8a:	4322      	orrs	r2, r4
 8004a8c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8e:	2280      	movs	r2, #128	; 0x80
 8004a90:	0352      	lsls	r2, r2, #13
 8004a92:	4294      	cmp	r4, r2
 8004a94:	d009      	beq.n	8004aaa <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	d506      	bpl.n	8004aa8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a9a:	6802      	ldr	r2, [r0, #0]
 8004a9c:	490d      	ldr	r1, [pc, #52]	; (8004ad4 <UART_AdvFeatureConfig+0xc8>)
 8004a9e:	6853      	ldr	r3, [r2, #4]
 8004aa0:	400b      	ands	r3, r1
 8004aa2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6053      	str	r3, [r2, #4]
  }
}
 8004aa8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aaa:	684a      	ldr	r2, [r1, #4]
 8004aac:	4c0a      	ldr	r4, [pc, #40]	; (8004ad8 <UART_AdvFeatureConfig+0xcc>)
 8004aae:	4022      	ands	r2, r4
 8004ab0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004ab2:	4322      	orrs	r2, r4
 8004ab4:	604a      	str	r2, [r1, #4]
 8004ab6:	e7ee      	b.n	8004a96 <UART_AdvFeatureConfig+0x8a>
 8004ab8:	fffdffff 	.word	0xfffdffff
 8004abc:	fffeffff 	.word	0xfffeffff
 8004ac0:	fffbffff 	.word	0xfffbffff
 8004ac4:	ffff7fff 	.word	0xffff7fff
 8004ac8:	ffffefff 	.word	0xffffefff
 8004acc:	ffffdfff 	.word	0xffffdfff
 8004ad0:	ffefffff 	.word	0xffefffff
 8004ad4:	fff7ffff 	.word	0xfff7ffff
 8004ad8:	ff9fffff 	.word	0xff9fffff

08004adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ade:	2384      	movs	r3, #132	; 0x84
 8004ae0:	2200      	movs	r2, #0
{
 8004ae2:	46c6      	mov	lr, r8
 8004ae4:	0004      	movs	r4, r0
 8004ae6:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aea:	f7fe fec5 	bl	8003878 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004af0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	0712      	lsls	r2, r2, #28
 8004af6:	d410      	bmi.n	8004b1a <UART_CheckIdleState+0x3e>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	0752      	lsls	r2, r2, #29
 8004afc:	d43c      	bmi.n	8004b78 <UART_CheckIdleState+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004afe:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004b02:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004b08:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0c:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8004b0e:	2378      	movs	r3, #120	; 0x78
 8004b10:	2200      	movs	r2, #0
 8004b12:	54e2      	strb	r2, [r4, r3]
}
 8004b14:	bc80      	pop	{r7}
 8004b16:	46b8      	mov	r8, r7
 8004b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	0292      	lsls	r2, r2, #10
 8004b1e:	d4eb      	bmi.n	8004af8 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b20:	2680      	movs	r6, #128	; 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b22:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b24:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b26:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	04b6      	lsls	r6, r6, #18
 8004b2a:	e010      	b.n	8004b4e <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4217      	tst	r7, r2
 8004b32:	d009      	beq.n	8004b48 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b34:	4641      	mov	r1, r8
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	4211      	tst	r1, r2
 8004b3a:	d158      	bne.n	8004bee <UART_CheckIdleState+0x112>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	4211      	tst	r1, r2
 8004b44:	d000      	beq.n	8004b48 <UART_CheckIdleState+0x6c>
 8004b46:	e083      	b.n	8004c50 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	0292      	lsls	r2, r2, #10
 8004b4c:	d4d4      	bmi.n	8004af8 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fe fe93 	bl	8003878 <HAL_GetTick>
 8004b52:	1b40      	subs	r0, r0, r5
 8004b54:	42b0      	cmp	r0, r6
 8004b56:	d3e9      	bcc.n	8004b2c <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b62:	2080      	movs	r0, #128	; 0x80
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	6813      	ldr	r3, [r2, #0]
 8004b68:	4383      	bics	r3, r0
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004b70:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004b72:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8004b74:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004b76:	e7ca      	b.n	8004b0e <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	025b      	lsls	r3, r3, #9
 8004b7c:	d4bf      	bmi.n	8004afe <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b80:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b82:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b84:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	04b6      	lsls	r6, r6, #18
 8004b88:	e011      	b.n	8004bae <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4217      	tst	r7, r2
 8004b90:	d00a      	beq.n	8004ba8 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b92:	4641      	mov	r1, r8
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	4211      	tst	r1, r2
 8004b98:	d000      	beq.n	8004b9c <UART_CheckIdleState+0xc0>
 8004b9a:	e089      	b.n	8004cb0 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	4211      	tst	r1, r2
 8004ba4:	d000      	beq.n	8004ba8 <UART_CheckIdleState+0xcc>
 8004ba6:	e0b4      	b.n	8004d12 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	025b      	lsls	r3, r3, #9
 8004bac:	d4a7      	bmi.n	8004afe <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7fe fe63 	bl	8003878 <HAL_GetTick>
 8004bb2:	1b40      	subs	r0, r0, r5
 8004bb4:	42b0      	cmp	r0, r6
 8004bb6:	d3e8      	bcc.n	8004b8a <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	6821      	ldr	r1, [r4, #0]
 8004bc4:	4d6b      	ldr	r5, [pc, #428]	; (8004d74 <UART_CheckIdleState+0x298>)
 8004bc6:	680b      	ldr	r3, [r1, #0]
 8004bc8:	402b      	ands	r3, r5
 8004bca:	600b      	str	r3, [r1, #0]
 8004bcc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd8:	6821      	ldr	r1, [r4, #0]
 8004bda:	688b      	ldr	r3, [r1, #8]
 8004bdc:	4393      	bics	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]
 8004be0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8004be8:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8004bea:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004bec:	e78f      	b.n	8004b0e <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bee:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfa:	6821      	ldr	r1, [r4, #0]
 8004bfc:	4d5d      	ldr	r5, [pc, #372]	; (8004d74 <UART_CheckIdleState+0x298>)
 8004bfe:	680b      	ldr	r3, [r1, #0]
 8004c00:	402b      	ands	r3, r5
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c08:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c10:	6821      	ldr	r1, [r4, #0]
 8004c12:	688b      	ldr	r3, [r1, #8]
 8004c14:	4393      	bics	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10a      	bne.n	8004c38 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2a:	2010      	movs	r0, #16
 8004c2c:	6822      	ldr	r2, [r4, #0]
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	4383      	bics	r3, r0
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c3c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c42:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	6623      	str	r3, [r4, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c46:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c48:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004c4a:	3a0c      	subs	r2, #12
 8004c4c:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004c4e:	e783      	b.n	8004b58 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c50:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c52:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c56:	2201      	movs	r2, #1
 8004c58:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5c:	6821      	ldr	r1, [r4, #0]
 8004c5e:	4d45      	ldr	r5, [pc, #276]	; (8004d74 <UART_CheckIdleState+0x298>)
 8004c60:	680b      	ldr	r3, [r1, #0]
 8004c62:	402b      	ands	r3, r5
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	688b      	ldr	r3, [r1, #8]
 8004c76:	4393      	bics	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
 8004c7a:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d10a      	bne.n	8004c9a <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c84:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c88:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8c:	2010      	movs	r0, #16
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	4383      	bics	r3, r0
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9e:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004ca6:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ca8:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004caa:	3258      	adds	r2, #88	; 0x58
 8004cac:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004cae:	e753      	b.n	8004b58 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cb0:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbc:	6821      	ldr	r1, [r4, #0]
 8004cbe:	4d2d      	ldr	r5, [pc, #180]	; (8004d74 <UART_CheckIdleState+0x298>)
 8004cc0:	680b      	ldr	r3, [r1, #0]
 8004cc2:	402b      	ands	r3, r5
 8004cc4:	600b      	str	r3, [r1, #0]
 8004cc6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	6821      	ldr	r1, [r4, #0]
 8004cd4:	688b      	ldr	r3, [r1, #8]
 8004cd6:	4393      	bics	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
 8004cda:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10a      	bne.n	8004cfa <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	2010      	movs	r0, #16
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	4383      	bics	r3, r0
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cfe:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004d00:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d04:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004d08:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0a:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004d0c:	3a0c      	subs	r2, #12
 8004d0e:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004d10:	e752      	b.n	8004bb8 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d12:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1e:	6821      	ldr	r1, [r4, #0]
 8004d20:	4d14      	ldr	r5, [pc, #80]	; (8004d74 <UART_CheckIdleState+0x298>)
 8004d22:	680b      	ldr	r3, [r1, #0]
 8004d24:	402b      	ands	r3, r5
 8004d26:	600b      	str	r3, [r1, #0]
 8004d28:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	6821      	ldr	r1, [r4, #0]
 8004d36:	688b      	ldr	r3, [r1, #8]
 8004d38:	4393      	bics	r3, r2
 8004d3a:	608b      	str	r3, [r1, #8]
 8004d3c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10a      	bne.n	8004d5c <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d46:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	2010      	movs	r0, #16
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	4383      	bics	r3, r0
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d60:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d62:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	2300      	movs	r3, #0
 8004d66:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004d68:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d6a:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004d6c:	3258      	adds	r2, #88	; 0x58
 8004d6e:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004d70:	e722      	b.n	8004bb8 <UART_CheckIdleState+0xdc>
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	fffffedf 	.word	0xfffffedf

08004d78 <HAL_UART_Init>:
{
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004d7c:	d100      	bne.n	8004d80 <HAL_UART_Init+0x8>
 8004d7e:	e076      	b.n	8004e6e <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d80:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d067      	beq.n	8004e56 <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d86:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004d88:	2101      	movs	r1, #1
 8004d8a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d8c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004d8e:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d90:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004d92:	438b      	bics	r3, r1
 8004d94:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d96:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d98:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d9a:	432b      	orrs	r3, r5
 8004d9c:	6965      	ldr	r5, [r4, #20]
 8004d9e:	69e1      	ldr	r1, [r4, #28]
 8004da0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da2:	4d49      	ldr	r5, [pc, #292]	; (8004ec8 <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da6:	4028      	ands	r0, r5
 8004da8:	4303      	orrs	r3, r0
 8004daa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dac:	6853      	ldr	r3, [r2, #4]
 8004dae:	4847      	ldr	r0, [pc, #284]	; (8004ecc <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8004db0:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db2:	4003      	ands	r3, r0
 8004db4:	68e0      	ldr	r0, [r4, #12]
 8004db6:	4303      	orrs	r3, r0
 8004db8:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dba:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dbc:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004dbe:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc0:	4d43      	ldr	r5, [pc, #268]	; (8004ed0 <HAL_UART_Init+0x158>)
 8004dc2:	4028      	ands	r0, r5
 8004dc4:	4303      	orrs	r3, r0
 8004dc6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dc8:	4b42      	ldr	r3, [pc, #264]	; (8004ed4 <HAL_UART_Init+0x15c>)
 8004dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dcc:	2303      	movs	r3, #3
 8004dce:	4013      	ands	r3, r2
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d91f      	bls.n	8004e16 <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	d100      	bne.n	8004de0 <HAL_UART_Init+0x68>
 8004dde:	e070      	b.n	8004ec2 <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de0:	f7ff fb6e 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d124      	bne.n	8004e32 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004dec:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d135      	bne.n	8004e60 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	4938      	ldr	r1, [pc, #224]	; (8004ed8 <HAL_UART_Init+0x160>)
 8004df8:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004dfa:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfe:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	438a      	bics	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	3929      	subs	r1, #41	; 0x29
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004e10:	f7ff fe64 	bl	8004adc <UART_CheckIdleState>
 8004e14:	e01b      	b.n	8004e4e <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e16:	2080      	movs	r0, #128	; 0x80
 8004e18:	4a30      	ldr	r2, [pc, #192]	; (8004edc <HAL_UART_Init+0x164>)
 8004e1a:	0200      	lsls	r0, r0, #8
 8004e1c:	5cd3      	ldrb	r3, [r2, r3]
 8004e1e:	4281      	cmp	r1, r0
 8004e20:	d027      	beq.n	8004e72 <HAL_UART_Init+0xfa>
    switch (clocksource)
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d044      	beq.n	8004eb0 <HAL_UART_Init+0x138>
 8004e26:	d813      	bhi.n	8004e50 <HAL_UART_Init+0xd8>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0d9      	beq.n	8004de0 <HAL_UART_Init+0x68>
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d10a      	bne.n	8004e46 <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 8004e30:	482b      	ldr	r0, [pc, #172]	; (8004ee0 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e32:	6861      	ldr	r1, [r4, #4]
 8004e34:	084b      	lsrs	r3, r1, #1
 8004e36:	1818      	adds	r0, r3, r0
 8004e38:	f7fb f966 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <HAL_UART_Init+0x16c>)
 8004e40:	3a10      	subs	r2, #16
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 8004e46:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004e48:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004e4a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004e4c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d0ee      	beq.n	8004e32 <HAL_UART_Init+0xba>
 8004e54:	e7f7      	b.n	8004e46 <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 8004e56:	2278      	movs	r2, #120	; 0x78
 8004e58:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004e5a:	f7fe fb11 	bl	8003480 <HAL_UART_MspInit>
 8004e5e:	e792      	b.n	8004d86 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8004e60:	0020      	movs	r0, r4
 8004e62:	f7ff fdd3 	bl	8004a0c <UART_AdvFeatureConfig>
 8004e66:	e7c5      	b.n	8004df4 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	60d8      	str	r0, [r3, #12]
  return ret;
 8004e6c:	e7bc      	b.n	8004de8 <HAL_UART_Init+0x70>
    return HAL_ERROR;
 8004e6e:	2001      	movs	r0, #1
 8004e70:	e7ed      	b.n	8004e4e <HAL_UART_Init+0xd6>
    switch (clocksource)
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d01f      	beq.n	8004eb6 <HAL_UART_Init+0x13e>
 8004e76:	d816      	bhi.n	8004ea6 <HAL_UART_Init+0x12e>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d022      	beq.n	8004ec2 <HAL_UART_Init+0x14a>
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d1e2      	bne.n	8004e46 <HAL_UART_Init+0xce>
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e82:	6861      	ldr	r1, [r4, #4]
 8004e84:	0848      	lsrs	r0, r1, #1
 8004e86:	18c0      	adds	r0, r0, r3
 8004e88:	f7fb f93e 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_UART_Init+0x16c>)
 8004e90:	3a10      	subs	r2, #16
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d8d7      	bhi.n	8004e46 <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 8004e98:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e9a:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9c:	0700      	lsls	r0, r0, #28
 8004e9e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004ea0:	4303      	orrs	r3, r0
 8004ea2:	60d3      	str	r3, [r2, #12]
  return ret;
 8004ea4:	e7a0      	b.n	8004de8 <HAL_UART_Init+0x70>
    switch (clocksource)
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d1cd      	bne.n	8004e46 <HAL_UART_Init+0xce>
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	025b      	lsls	r3, r3, #9
 8004eae:	e7e8      	b.n	8004e82 <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb0:	f7ff fad6 	bl	8004460 <HAL_RCC_GetSysClockFreq>
        break;
 8004eb4:	e796      	b.n	8004de4 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb6:	f7ff fad3 	bl	8004460 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eba:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d1e0      	bne.n	8004e82 <HAL_UART_Init+0x10a>
 8004ec0:	e792      	b.n	8004de8 <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec2:	f7ff fafd 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8004ec6:	e7f8      	b.n	8004eba <HAL_UART_Init+0x142>
 8004ec8:	ffff69f3 	.word	0xffff69f3
 8004ecc:	ffffcfff 	.word	0xffffcfff
 8004ed0:	fffff4ff 	.word	0xfffff4ff
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	ffffb7ff 	.word	0xffffb7ff
 8004edc:	08006d44 	.word	0x08006d44
 8004ee0:	007a1200 	.word	0x007a1200
 8004ee4:	0000ffef 	.word	0x0000ffef
 8004ee8:	00f42400 	.word	0x00f42400
 8004eec:	0000fff0 	.word	0x0000fff0

08004ef0 <VBS_GetAvBusVoltage_d>:
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8004ef0:	88c0      	ldrh	r0, [r0, #6]
#endif
}
 8004ef2:	4770      	bx	lr

08004ef4 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8004ef4:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8004ef6:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8004ef8:	885b      	ldrh	r3, [r3, #2]
 8004efa:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8004efc:	0c00      	lsrs	r0, r0, #16
}
 8004efe:	4770      	bx	lr

08004f00 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8004f00:	b530      	push	{r4, r5, lr}
 8004f02:	b20b      	sxth	r3, r1
 8004f04:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8004f06:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004f08:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004f0a:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004f0c:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004f0e:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004f10:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 8004f12:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 8004f14:	1900      	adds	r0, r0, r4
{
 8004f16:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8004f18:	4282      	cmp	r2, r0
 8004f1a:	da0f      	bge.n	8004f3c <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004f1c:	0028      	movs	r0, r5
 8004f1e:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 8004f20:	42ac      	cmp	r4, r5
 8004f22:	dc11      	bgt.n	8004f48 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8004f24:	1b12      	subs	r2, r2, r4
 8004f26:	17d4      	asrs	r4, r2, #31
 8004f28:	0324      	lsls	r4, r4, #12
 8004f2a:	0b24      	lsrs	r4, r4, #12
 8004f2c:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004f2e:	4812      	ldr	r0, [pc, #72]	; (8004f78 <Circle_Limitation+0x78>)
        square_temp = (square_limit - square_d) / 1048576;
 8004f30:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004f32:	0052      	lsls	r2, r2, #1
 8004f34:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db19      	blt.n	8004f6e <Circle_Limitation+0x6e>
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8004f3a:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8004f3c:	0418      	lsls	r0, r3, #16
 8004f3e:	0409      	lsls	r1, r1, #16
 8004f40:	0c00      	lsrs	r0, r0, #16
 8004f42:	4308      	orrs	r0, r1
}
 8004f44:	b005      	add	sp, #20
 8004f46:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	db13      	blt.n	8004f74 <Circle_Limitation+0x74>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	17d4      	asrs	r4, r2, #31
 8004f50:	0324      	lsls	r4, r4, #12
 8004f52:	0b24      	lsrs	r4, r4, #12
 8004f54:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004f56:	4908      	ldr	r1, [pc, #32]	; (8004f78 <Circle_Limitation+0x78>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004f58:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004f5a:	0052      	lsls	r2, r2, #1
 8004f5c:	5a52      	ldrh	r2, [r2, r1]
        if (Vqd.q < 0)
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	db02      	blt.n	8004f68 <Circle_Limitation+0x68>
      local_vqd.d = (int16_t)new_d;
 8004f62:	b201      	sxth	r1, r0
      local_vqd.q = (int16_t)new_q;
 8004f64:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8004f66:	e7e9      	b.n	8004f3c <Circle_Limitation+0x3c>
          new_q = - new_q;
 8004f68:	4252      	negs	r2, r2
      local_vqd.d = (int16_t)new_d;
 8004f6a:	b201      	sxth	r1, r0
 8004f6c:	e7fa      	b.n	8004f64 <Circle_Limitation+0x64>
          new_q = -new_q;
 8004f6e:	4252      	negs	r2, r2
      local_vqd.q = (int16_t)new_q;
 8004f70:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8004f72:	e7e3      	b.n	8004f3c <Circle_Limitation+0x3c>
          new_d = -new_d;
 8004f74:	4240      	negs	r0, r0
 8004f76:	e7e9      	b.n	8004f4c <Circle_Limitation+0x4c>
 8004f78:	08006d48 	.word	0x08006d48

08004f7c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8004f80:	4770      	bx	lr
 8004f82:	46c0      	nop			; (mov r8, r8)

08004f84 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8004f84:	7803      	ldrb	r3, [r0, #0]
{
 8004f86:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <NTC_Init+0x12>
      pHandle->hFaultState = MC_NO_ERROR;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004f90:	8883      	ldrh	r3, [r0, #4]
 8004f92:	8043      	strh	r3, [r0, #2]
}
 8004f94:	bd10      	pop	{r4, pc}
      NTC_Clear(pHandle);
 8004f96:	f7ff fff1 	bl	8004f7c <NTC_Clear>
 8004f9a:	e7fb      	b.n	8004f94 <NTC_Init+0x10>

08004f9c <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8004f9c:	7803      	ldrb	r3, [r0, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 8004fa2:	6942      	ldr	r2, [r0, #20]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8004fa4:	8843      	ldrh	r3, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8004fa6:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 8004fa8:	2110      	movs	r1, #16
 8004faa:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004fac:	8b00      	ldrh	r0, [r0, #24]
      wTemp *= pHandle->hSensitivity;
 8004fae:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004fb0:	141b      	asrs	r3, r3, #16
 8004fb2:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 8004fb4:	b200      	sxth	r0, r0
}
 8004fb6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8004fb8:	88c0      	ldrh	r0, [r0, #6]
 8004fba:	e7fb      	b.n	8004fb4 <NTC_GetAvTemp_C+0x18>

08004fbc <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004fbc:	6803      	ldr	r3, [r0, #0]
 8004fbe:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004fc0:	8c03      	ldrh	r3, [r0, #32]
 8004fc2:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8004fc8:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fca:	4770      	bx	lr

08004fcc <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8004fcc:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fce:	4770      	bx	lr

08004fd0 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8004fd0:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fd2:	4770      	bx	lr

08004fd4 <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004fd8:	4770      	bx	lr
 8004fda:	46c0      	nop			; (mov r8, r8)

08004fdc <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 8004fdc:	2306      	movs	r3, #6
 8004fde:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004fe0:	4770      	bx	lr
 8004fe2:	46c0      	nop			; (mov r8, r8)

08004fe4 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8004fe4:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8004fe6:	4770      	bx	lr

08004fe8 <PID_GetKIDivisor>:
__weak uint16_t PID_GetKIDivisor(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
 8004fe8:	8b40      	ldrh	r0, [r0, #26]
#endif
}
 8004fea:	4770      	bx	lr

08004fec <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8004fec:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fee:	4770      	bx	lr

08004ff0 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8004ff0:	2322      	movs	r3, #34	; 0x22
 8004ff2:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004ff4:	4770      	bx	lr
 8004ff6:	46c0      	nop			; (mov r8, r8)

08004ff8 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	b570      	push	{r4, r5, r6, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004ffc:	2216      	movs	r2, #22
 8004ffe:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005000:	2214      	movs	r2, #20
 8005002:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005004:	2406      	movs	r4, #6
 8005006:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005008:	2404      	movs	r4, #4
 800500a:	5f1a      	ldrsh	r2, [r3, r4]
 800500c:	2400      	movs	r4, #0
 800500e:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8005010:	2d00      	cmp	r5, #0
 8005012:	d00b      	beq.n	800502c <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005014:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005016:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 8005018:	1865      	adds	r5, r4, r1
 800501a:	d41b      	bmi.n	8005054 <PI_Controller+0x5c>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 800501c:	4021      	ands	r1, r4
 800501e:	d424      	bmi.n	800506a <PI_Controller+0x72>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005020:	68dc      	ldr	r4, [r3, #12]
 8005022:	42ac      	cmp	r4, r5
 8005024:	db02      	blt.n	800502c <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005026:	691c      	ldr	r4, [r3, #16]
 8005028:	42ac      	cmp	r4, r5
 800502a:	dd1c      	ble.n	8005066 <PI_Controller+0x6e>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800502c:	0025      	movs	r5, r4
 800502e:	8b99      	ldrh	r1, [r3, #28]
 8005030:	410a      	asrs	r2, r1
 8005032:	8bd9      	ldrh	r1, [r3, #30]
 8005034:	410d      	asrs	r5, r1
 8005036:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005038:	4290      	cmp	r0, r2
 800503a:	da03      	bge.n	8005044 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800503c:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800503e:	18a4      	adds	r4, r4, r2
 8005040:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005042:	bd70      	pop	{r4, r5, r6, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005044:	4296      	cmp	r6, r2
 8005046:	dd03      	ble.n	8005050 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005048:	1ab2      	subs	r2, r6, r2
 800504a:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 800504c:	18a4      	adds	r4, r4, r2
 800504e:	e7f7      	b.n	8005040 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8005050:	b210      	sxth	r0, r2
 8005052:	e7f5      	b.n	8005040 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8005054:	2c00      	cmp	r4, #0
 8005056:	dde3      	ble.n	8005020 <PI_Controller+0x28>
          if (wIntegral_Term > 0)
 8005058:	2900      	cmp	r1, #0
 800505a:	dde1      	ble.n	8005020 <PI_Controller+0x28>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800505c:	68dc      	ldr	r4, [r3, #12]
 800505e:	4904      	ldr	r1, [pc, #16]	; (8005070 <PI_Controller+0x78>)
            wIntegral_sum_temp = INT32_MAX;
 8005060:	0025      	movs	r5, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005062:	428c      	cmp	r4, r1
 8005064:	d1e2      	bne.n	800502c <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8005066:	002c      	movs	r4, r5
 8005068:	e7e0      	b.n	800502c <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 800506a:	4d02      	ldr	r5, [pc, #8]	; (8005074 <PI_Controller+0x7c>)
 800506c:	e7d8      	b.n	8005020 <PI_Controller+0x28>
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	7fffffff 	.word	0x7fffffff
 8005074:	80000001 	.word	0x80000001

08005078 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005078:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800507a:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800507c:	220c      	movs	r2, #12
 800507e:	5e99      	ldrsh	r1, [r3, r2]
 8005080:	2416      	movs	r4, #22
 8005082:	5f1a      	ldrsh	r2, [r3, r4]
 8005084:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005086:	240e      	movs	r4, #14
 8005088:	5f19      	ldrsh	r1, [r3, r4]
 800508a:	2418      	movs	r4, #24
 800508c:	5f1b      	ldrsh	r3, [r3, r4]
 800508e:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005090:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8005092:	2300      	movs	r3, #0
 8005094:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 8005096:	17d3      	asrs	r3, r2, #31
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	189b      	adds	r3, r3, r2
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800509e:	220f      	movs	r2, #15
    wAux /= 65536;
 80050a0:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80050a2:	1a5b      	subs	r3, r3, r1
 80050a4:	17dc      	asrs	r4, r3, #31
 80050a6:	4022      	ands	r2, r4
 80050a8:	18d3      	adds	r3, r2, r3
 80050aa:	111b      	asrs	r3, r3, #4
 80050ac:	185b      	adds	r3, r3, r1
 80050ae:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)

080050b4 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80050b8:	4770      	bx	lr
 80050ba:	46c0      	nop			; (mov r8, r8)

080050bc <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	0004      	movs	r4, r0
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80050c0:	2300      	movs	r3, #0
 80050c2:	5ec0      	ldrsh	r0, [r0, r3]
 80050c4:	f7fb fb12 	bl	80006ec <__aeabi_i2f>
 80050c8:	1c06      	adds	r6, r0, #0
 80050ca:	68e0      	ldr	r0, [r4, #12]
 80050cc:	f7ff ff12 	bl	8004ef4 <VBS_GetAvBusVoltage_V>
 80050d0:	6861      	ldr	r1, [r4, #4]
 80050d2:	0005      	movs	r5, r0
 80050d4:	1c30      	adds	r0, r6, #0
 80050d6:	f7fb f9bb 	bl	8000450 <__aeabi_fmul>
 80050da:	1c04      	adds	r4, r0, #0
 80050dc:	0028      	movs	r0, r5
 80050de:	f7fb fb57 	bl	8000790 <__aeabi_ui2f>
 80050e2:	1c01      	adds	r1, r0, #0
 80050e4:	1c20      	adds	r0, r4, #0
 80050e6:	f7fb f9b3 	bl	8000450 <__aeabi_fmul>

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80050ea:	bd70      	pop	{r4, r5, r6, pc}

080050ec <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80050ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80050ee:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80050f0:	3201      	adds	r2, #1
 80050f2:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80050f4:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80050f6:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80050f8:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80050fa:	0176      	lsls	r6, r6, #5
 80050fc:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 80050fe:	781c      	ldrb	r4, [r3, #0]
 8005100:	2c0f      	cmp	r4, #15
 8005102:	d80c      	bhi.n	800511e <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005104:	6904      	ldr	r4, [r0, #16]
 8005106:	4225      	tst	r5, r4
 8005108:	d0f9      	beq.n	80050fe <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800510a:	3201      	adds	r2, #1
 800510c:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800510e:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005110:	4296      	cmp	r6, r2
 8005112:	d8f4      	bhi.n	80050fe <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 8005114:	781c      	ldrb	r4, [r3, #0]
 8005116:	2c0f      	cmp	r4, #15
 8005118:	d8f1      	bhi.n	80050fe <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 800511a:	2301      	movs	r3, #1
 800511c:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 800511e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005120 <R3_1_HFCurrentsCalibrationAB>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8005120:	239f      	movs	r3, #159	; 0x9f
{
 8005122:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005124:	2570      	movs	r5, #112	; 0x70
 8005126:	4a10      	ldr	r2, [pc, #64]	; (8005168 <R3_1_HFCurrentsCalibrationAB+0x48>)
  uint8_t bSector = pHandle->CalibSector;
 8005128:	5cc4      	ldrb	r4, [r0, r3]
 800512a:	6853      	ldr	r3, [r2, #4]
 800512c:	43ab      	bics	r3, r5
 800512e:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005130:	239e      	movs	r3, #158	; 0x9e
 8005132:	5cc2      	ldrb	r2, [r0, r3]
 8005134:	2a0f      	cmp	r2, #15
 8005136:	d813      	bhi.n	8005160 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8005138:	22a4      	movs	r2, #164	; 0xa4
 800513a:	5882      	ldr	r2, [r0, r2]
 800513c:	00a4      	lsls	r4, r4, #2
 800513e:	1912      	adds	r2, r2, r4
 8005140:	69d4      	ldr	r4, [r2, #28]
 8005142:	3518      	adds	r5, #24
 8005144:	8826      	ldrh	r6, [r4, #0]
 8005146:	5944      	ldr	r4, [r0, r5]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8005148:	6b52      	ldr	r2, [r2, #52]	; 0x34
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 800514a:	19a4      	adds	r4, r4, r6
 800514c:	5144      	str	r4, [r0, r5]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 800514e:	248c      	movs	r4, #140	; 0x8c
 8005150:	8815      	ldrh	r5, [r2, #0]
 8005152:	5902      	ldr	r2, [r0, r4]
 8005154:	1952      	adds	r2, r2, r5
 8005156:	5102      	str	r2, [r0, r4]
    pHandle->PolarizationCounter++;
 8005158:	5cc2      	ldrb	r2, [r0, r3]
 800515a:	3201      	adds	r2, #1
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8005164:	804b      	strh	r3, [r1, #2]
}
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	40012c00 	.word	0x40012c00

0800516c <R3_1_HFCurrentsCalibrationC>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 800516c:	239f      	movs	r3, #159	; 0x9f
{
 800516e:	b530      	push	{r4, r5, lr}
 8005170:	2570      	movs	r5, #112	; 0x70
 8005172:	4c0f      	ldr	r4, [pc, #60]	; (80051b0 <R3_1_HFCurrentsCalibrationC+0x44>)
  uint8_t bSector = pHandle->CalibSector;
 8005174:	5cc2      	ldrb	r2, [r0, r3]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	43ab      	bics	r3, r5
 800517a:	6063      	str	r3, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 800517c:	237c      	movs	r3, #124	; 0x7c
 800517e:	2400      	movs	r4, #0
 8005180:	54c4      	strb	r4, [r0, r3]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005182:	3322      	adds	r3, #34	; 0x22
 8005184:	5cc4      	ldrb	r4, [r0, r3]
 8005186:	2c0f      	cmp	r4, #15
 8005188:	d80e      	bhi.n	80051a8 <R3_1_HFCurrentsCalibrationC+0x3c>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 800518a:	24a4      	movs	r4, #164	; 0xa4
 800518c:	320c      	adds	r2, #12
 800518e:	5904      	ldr	r4, [r0, r4]
 8005190:	0092      	lsls	r2, r2, #2
 8005192:	18a2      	adds	r2, r4, r2
 8005194:	2490      	movs	r4, #144	; 0x90
 8005196:	6852      	ldr	r2, [r2, #4]
 8005198:	8815      	ldrh	r5, [r2, #0]
 800519a:	5902      	ldr	r2, [r0, r4]
 800519c:	1952      	adds	r2, r2, r5
 800519e:	5102      	str	r2, [r0, r4]
    pHandle->PolarizationCounter++;
 80051a0:	5cc2      	ldrb	r2, [r0, r3]
 80051a2:	3201      	adds	r2, #1
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80051ac:	804b      	strh	r3, [r1, #2]
}
 80051ae:	bd30      	pop	{r4, r5, pc}
 80051b0:	40012c00 	.word	0x40012c00

080051b4 <R3_1_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80051b4:	2104      	movs	r1, #4
 80051b6:	4a39      	ldr	r2, [pc, #228]	; (800529c <R3_1_Init+0xe8>)
{
 80051b8:	b530      	push	{r4, r5, lr}
 80051ba:	6853      	ldr	r3, [r2, #4]
 80051bc:	0004      	movs	r4, r0
 80051be:	438b      	bics	r3, r1
 80051c0:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80051c2:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80051c4:	6853      	ldr	r3, [r2, #4]
 80051c6:	3104      	adds	r1, #4
 80051c8:	438b      	bics	r3, r1
 80051ca:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80051cc:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <R3_1_Init+0xec>)
 80051d2:	0309      	lsls	r1, r1, #12
 80051d4:	6818      	ldr	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80051d6:	2580      	movs	r5, #128	; 0x80
 80051d8:	4301      	orrs	r1, r0
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80051da:	2081      	movs	r0, #129	; 0x81
 80051dc:	6019      	str	r1, [r3, #0]
 80051de:	4931      	ldr	r1, [pc, #196]	; (80052a4 <R3_1_Init+0xf0>)
 80051e0:	4240      	negs	r0, r0
 80051e2:	6108      	str	r0, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80051e4:	68c8      	ldr	r0, [r1, #12]
 80051e6:	b083      	sub	sp, #12
 80051e8:	4328      	orrs	r0, r5
 80051ea:	60c8      	str	r0, [r1, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80051ec:	2098      	movs	r0, #152	; 0x98
 80051ee:	5a20      	ldrh	r0, [r4, r0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 80051f0:	3d7e      	subs	r5, #126	; 0x7e
 80051f2:	3801      	subs	r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 80051f4:	6248      	str	r0, [r1, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80051f6:	2080      	movs	r0, #128	; 0x80
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	03c0      	lsls	r0, r0, #15
 80051fc:	4301      	orrs	r1, r0
 80051fe:	6199      	str	r1, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005200:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005202:	4929      	ldr	r1, [pc, #164]	; (80052a8 <R3_1_Init+0xf4>)
 8005204:	4003      	ands	r3, r0
 8005206:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	68c8      	ldr	r0, [r1, #12]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4303      	orrs	r3, r0
 8005212:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CR,
 8005214:	6891      	ldr	r1, [r2, #8]
 8005216:	4b25      	ldr	r3, [pc, #148]	; (80052ac <R3_1_Init+0xf8>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8005218:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 800521a:	4019      	ands	r1, r3
 800521c:	3318      	adds	r3, #24
 800521e:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8005220:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8005222:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8005224:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	dbfc      	blt.n	8005224 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800522a:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 800522c:	4219      	tst	r1, r3
 800522e:	d1f9      	bne.n	8005224 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8005230:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8005232:	4218      	tst	r0, r3
 8005234:	d1f6      	bne.n	8005224 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8005236:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8005238:	421d      	tst	r5, r3
 800523a:	d1f3      	bne.n	8005224 <R3_1_Init+0x70>
  MODIFY_REG(ADCx->CR,
 800523c:	6893      	ldr	r3, [r2, #8]
 800523e:	491b      	ldr	r1, [pc, #108]	; (80052ac <R3_1_Init+0xf8>)
 8005240:	400b      	ands	r3, r1
 8005242:	2101      	movs	r1, #1
 8005244:	430b      	orrs	r3, r1
 8005246:	6093      	str	r3, [r2, #8]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8005248:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800524a:	4914      	ldr	r1, [pc, #80]	; (800529c <R3_1_Init+0xe8>)
 800524c:	680b      	ldr	r3, [r1, #0]
 800524e:	421a      	tst	r2, r3
 8005250:	d0fc      	beq.n	800524c <R3_1_Init+0x98>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 8005252:	0023      	movs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005254:	2003      	movs	r0, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8005256:	4916      	ldr	r1, [pc, #88]	; (80052b0 <R3_1_Init+0xfc>)
 8005258:	339a      	adds	r3, #154	; 0x9a
 800525a:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <R3_1_Init+0x100>)
 800525e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005260:	684b      	ldr	r3, [r1, #4]
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	4303      	orrs	r3, r0
 8005268:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800526a:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800526c:	306d      	adds	r0, #109	; 0x6d
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <R3_1_Init+0xf0>)
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	4381      	bics	r1, r0
 8005278:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 800527a:	6a1d      	ldr	r5, [r3, #32]
 800527c:	490e      	ldr	r1, [pc, #56]	; (80052b8 <R3_1_Init+0x104>)
 800527e:	4329      	orrs	r1, r5
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005280:	2580      	movs	r5, #128	; 0x80
 8005282:	6219      	str	r1, [r3, #32]
 8005284:	2194      	movs	r1, #148	; 0x94
 8005286:	00ed      	lsls	r5, r5, #3
 8005288:	5065      	str	r5, [r4, r1]
    pHandle->ADCRegularLocked=false; 
 800528a:	2100      	movs	r1, #0
 800528c:	25a0      	movs	r5, #160	; 0xa0
 800528e:	5561      	strb	r1, [r4, r5]
    pHandle->_Super.DTTest = 0u;
 8005290:	5221      	strh	r1, [r4, r0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	b003      	add	sp, #12
 800529a:	bd30      	pop	{r4, r5, pc}
 800529c:	40012400 	.word	0x40012400
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40015800 	.word	0x40015800
 80052ac:	7fffffe8 	.word	0x7fffffe8
 80052b0:	40020008 	.word	0x40020008
 80052b4:	40012440 	.word	0x40012440
 80052b8:	00000555 	.word	0x00000555

080052bc <R3_1_SetOffsetCalib>:
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80052bc:	2388      	movs	r3, #136	; 0x88
 80052be:	688a      	ldr	r2, [r1, #8]
{
 80052c0:	b510      	push	{r4, lr}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80052c2:	684c      	ldr	r4, [r1, #4]
 80052c4:	6809      	ldr	r1, [r1, #0]
 80052c6:	50c1      	str	r1, [r0, r3]
 80052c8:	3304      	adds	r3, #4
 80052ca:	50c4      	str	r4, [r0, r3]
 80052cc:	3304      	adds	r3, #4
 80052ce:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 80052d0:	2201      	movs	r2, #1
 80052d2:	3b0f      	subs	r3, #15
 80052d4:	54c2      	strb	r2, [r0, r3]
}
 80052d6:	bd10      	pop	{r4, pc}

080052d8 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80052d8:	238c      	movs	r3, #140	; 0x8c
{
 80052da:	b510      	push	{r4, lr}
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80052dc:	2488      	movs	r4, #136	; 0x88
 80052de:	58c2      	ldr	r2, [r0, r3]
 80052e0:	3304      	adds	r3, #4
 80052e2:	58c3      	ldr	r3, [r0, r3]
 80052e4:	5900      	ldr	r0, [r0, r4]
 80052e6:	c10d      	stmia	r1!, {r0, r2, r3}
}
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)

080052ec <R3_1_GetPhaseCurrents>:
{
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80052ee:	2470      	movs	r4, #112	; 0x70
 80052f0:	4a54      	ldr	r2, [pc, #336]	; (8005444 <R3_1_GetPhaseCurrents+0x158>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80052f2:	2504      	movs	r5, #4
 80052f4:	6853      	ldr	r3, [r2, #4]
 80052f6:	43a3      	bics	r3, r4
 80052f8:	6053      	str	r3, [r2, #4]
  bSector = ( uint8_t ) pHandle->_Super.Sector;
 80052fa:	237c      	movs	r3, #124	; 0x7c
 80052fc:	4c52      	ldr	r4, [pc, #328]	; (8005448 <R3_1_GetPhaseCurrents+0x15c>)
 80052fe:	5cc3      	ldrb	r3, [r0, r3]
 8005300:	68e2      	ldr	r2, [r4, #12]
 8005302:	43aa      	bics	r2, r5
 8005304:	60e2      	str	r2, [r4, #12]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8005306:	22a4      	movs	r2, #164	; 0xa4
 8005308:	5882      	ldr	r2, [r0, r2]
 800530a:	009c      	lsls	r4, r3, #2
 800530c:	1912      	adds	r2, r2, r4
 800530e:	69d4      	ldr	r4, [r2, #28]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005310:	6b52      	ldr	r2, [r2, #52]	; 0x34
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8005312:	8824      	ldrh	r4, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005314:	8817      	ldrh	r7, [r2, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8005316:	b2a4      	uxth	r4, r4
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8005318:	b2bf      	uxth	r7, r7
  switch ( bSector )
 800531a:	2b04      	cmp	r3, #4
 800531c:	d811      	bhi.n	8005342 <R3_1_GetPhaseCurrents+0x56>
 800531e:	2b02      	cmp	r3, #2
 8005320:	d84b      	bhi.n	80053ba <R3_1_GetPhaseCurrents+0xce>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d030      	beq.n	8005388 <R3_1_GetPhaseCurrents+0x9c>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005326:	2388      	movs	r3, #136	; 0x88
      if ( wAux < -INT16_MAX )
 8005328:	4d48      	ldr	r5, [pc, #288]	; (800544c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800532a:	58c2      	ldr	r2, [r0, r3]
 800532c:	1b12      	subs	r2, r2, r4
      if ( wAux < -INT16_MAX )
 800532e:	42aa      	cmp	r2, r5
 8005330:	db18      	blt.n	8005364 <R3_1_GetPhaseCurrents+0x78>
      else  if ( wAux > INT16_MAX )
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	429a      	cmp	r2, r3
 8005338:	db67      	blt.n	800540a <R3_1_GetPhaseCurrents+0x11e>
 800533a:	4b45      	ldr	r3, [pc, #276]	; (8005450 <R3_1_GetPhaseCurrents+0x164>)
 800533c:	001a      	movs	r2, r3
 800533e:	001e      	movs	r6, r3
 8005340:	e013      	b.n	800536a <R3_1_GetPhaseCurrents+0x7e>
  switch ( bSector )
 8005342:	2b05      	cmp	r3, #5
 8005344:	d020      	beq.n	8005388 <R3_1_GetPhaseCurrents+0x9c>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005346:	2300      	movs	r3, #0
 8005348:	5ece      	ldrsh	r6, [r1, r3]
  pHandle->_Super.Ib = pStator_Currents->b;
 800534a:	2302      	movs	r3, #2
 800534c:	5ecc      	ldrsh	r4, [r1, r3]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800534e:	884d      	ldrh	r5, [r1, #2]
 8005350:	880b      	ldrh	r3, [r1, #0]
  pHandle->_Super.Ia = pStator_Currents->a;
 8005352:	2262      	movs	r2, #98	; 0x62
 8005354:	5286      	strh	r6, [r0, r2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005356:	195b      	adds	r3, r3, r5
  pHandle->_Super.Ib = pStator_Currents->b;
 8005358:	3202      	adds	r2, #2
 800535a:	5284      	strh	r4, [r0, r2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800535c:	425b      	negs	r3, r3
 800535e:	3202      	adds	r2, #2
 8005360:	5283      	strh	r3, [r0, r2]
}
 8005362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005364:	002a      	movs	r2, r5
 8005366:	002e      	movs	r6, r5
 8005368:	4b3a      	ldr	r3, [pc, #232]	; (8005454 <R3_1_GetPhaseCurrents+0x168>)
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 800536a:	2490      	movs	r4, #144	; 0x90
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 800536c:	5904      	ldr	r4, [r0, r4]
        pStator_Currents->a = -INT16_MAX;
 800536e:	800e      	strh	r6, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8005370:	1b3c      	subs	r4, r7, r4
 8005372:	1aa2      	subs	r2, r4, r2
      if ( wAux > INT16_MAX )
 8005374:	2480      	movs	r4, #128	; 0x80
 8005376:	0224      	lsls	r4, r4, #8
 8005378:	42a2      	cmp	r2, r4
 800537a:	da3e      	bge.n	80053fa <R3_1_GetPhaseCurrents+0x10e>
      else  if ( wAux < -INT16_MAX )
 800537c:	4c33      	ldr	r4, [pc, #204]	; (800544c <R3_1_GetPhaseCurrents+0x160>)
 800537e:	42a2      	cmp	r2, r4
 8005380:	da51      	bge.n	8005426 <R3_1_GetPhaseCurrents+0x13a>
        pStator_Currents->b = -INT16_MAX;
 8005382:	4d34      	ldr	r5, [pc, #208]	; (8005454 <R3_1_GetPhaseCurrents+0x168>)
 8005384:	804c      	strh	r4, [r1, #2]
 8005386:	e7e4      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005388:	238c      	movs	r3, #140	; 0x8c
 800538a:	58c6      	ldr	r6, [r0, r3]
      if ( wAux < -INT16_MAX )
 800538c:	4b2f      	ldr	r3, [pc, #188]	; (800544c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800538e:	1b36      	subs	r6, r6, r4
      if ( wAux < -INT16_MAX )
 8005390:	429e      	cmp	r6, r3
 8005392:	db36      	blt.n	8005402 <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux > INT16_MAX )
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	429e      	cmp	r6, r3
 800539a:	da4a      	bge.n	8005432 <R3_1_GetPhaseCurrents+0x146>
        pStator_Currents->b = ( int16_t )wAux;
 800539c:	b234      	sxth	r4, r6
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800539e:	b2b5      	uxth	r5, r6
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 80053a0:	2390      	movs	r3, #144	; 0x90
      if ( wAux > INT16_MAX )
 80053a2:	2280      	movs	r2, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80053a4:	58c3      	ldr	r3, [r0, r3]
        pStator_Currents->b = -INT16_MAX;
 80053a6:	804c      	strh	r4, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80053a8:	1afb      	subs	r3, r7, r3
 80053aa:	1b9b      	subs	r3, r3, r6
      if ( wAux > INT16_MAX )
 80053ac:	0212      	lsls	r2, r2, #8
 80053ae:	4293      	cmp	r3, r2
 80053b0:	db2e      	blt.n	8005410 <R3_1_GetPhaseCurrents+0x124>
        pStator_Currents->a = INT16_MAX;
 80053b2:	4b27      	ldr	r3, [pc, #156]	; (8005450 <R3_1_GetPhaseCurrents+0x164>)
 80053b4:	001e      	movs	r6, r3
 80053b6:	800b      	strh	r3, [r1, #0]
 80053b8:	e7cb      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80053ba:	2388      	movs	r3, #136	; 0x88
      if ( wAux < -INT16_MAX )
 80053bc:	4a23      	ldr	r2, [pc, #140]	; (800544c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80053be:	58c3      	ldr	r3, [r0, r3]
 80053c0:	0016      	movs	r6, r2
 80053c2:	1b1b      	subs	r3, r3, r4
      if ( wAux < -INT16_MAX )
 80053c4:	4293      	cmp	r3, r2
 80053c6:	db04      	blt.n	80053d2 <R3_1_GetPhaseCurrents+0xe6>
      else  if ( wAux > INT16_MAX )
 80053c8:	2280      	movs	r2, #128	; 0x80
 80053ca:	0212      	lsls	r2, r2, #8
 80053cc:	4293      	cmp	r3, r2
 80053ce:	da2e      	bge.n	800542e <R3_1_GetPhaseCurrents+0x142>
        pStator_Currents->a = ( int16_t )wAux;
 80053d0:	b21e      	sxth	r6, r3
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80053d2:	238c      	movs	r3, #140	; 0x8c
      if ( wAux < -INT16_MAX )
 80053d4:	4c1d      	ldr	r4, [pc, #116]	; (800544c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80053d6:	58c5      	ldr	r5, [r0, r3]
        pStator_Currents->a = -INT16_MAX;
 80053d8:	800e      	strh	r6, [r1, #0]
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80053da:	1bed      	subs	r5, r5, r7
      if ( wAux < -INT16_MAX )
 80053dc:	42a5      	cmp	r5, r4
 80053de:	db08      	blt.n	80053f2 <R3_1_GetPhaseCurrents+0x106>
      else  if ( wAux > INT16_MAX )
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	429d      	cmp	r5, r3
 80053e6:	db19      	blt.n	800541c <R3_1_GetPhaseCurrents+0x130>
        pStator_Currents->b = INT16_MAX;
 80053e8:	4d19      	ldr	r5, [pc, #100]	; (8005450 <R3_1_GetPhaseCurrents+0x164>)
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80053ea:	b2b3      	uxth	r3, r6
 80053ec:	002c      	movs	r4, r5
        pStator_Currents->b = INT16_MAX;
 80053ee:	804d      	strh	r5, [r1, #2]
 80053f0:	e7af      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = -INT16_MAX;
 80053f2:	4d18      	ldr	r5, [pc, #96]	; (8005454 <R3_1_GetPhaseCurrents+0x168>)
 80053f4:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80053f6:	b2b3      	uxth	r3, r6
 80053f8:	e7ab      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = INT16_MAX;
 80053fa:	4d15      	ldr	r5, [pc, #84]	; (8005450 <R3_1_GetPhaseCurrents+0x164>)
 80053fc:	002c      	movs	r4, r5
 80053fe:	804d      	strh	r5, [r1, #2]
 8005400:	e7a7      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
 8005402:	001e      	movs	r6, r3
 8005404:	001c      	movs	r4, r3
 8005406:	4d13      	ldr	r5, [pc, #76]	; (8005454 <R3_1_GetPhaseCurrents+0x168>)
 8005408:	e7ca      	b.n	80053a0 <R3_1_GetPhaseCurrents+0xb4>
        pStator_Currents->a = ( int16_t )wAux;
 800540a:	b216      	sxth	r6, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800540c:	b293      	uxth	r3, r2
 800540e:	e7ac      	b.n	800536a <R3_1_GetPhaseCurrents+0x7e>
      else  if ( wAux < -INT16_MAX )
 8005410:	4e0e      	ldr	r6, [pc, #56]	; (800544c <R3_1_GetPhaseCurrents+0x160>)
 8005412:	42b3      	cmp	r3, r6
 8005414:	da11      	bge.n	800543a <R3_1_GetPhaseCurrents+0x14e>
        pStator_Currents->a = -INT16_MAX;
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <R3_1_GetPhaseCurrents+0x168>)
 8005418:	800e      	strh	r6, [r1, #0]
 800541a:	e79a      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = ( int16_t )wAux;
 800541c:	b22c      	sxth	r4, r5
 800541e:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005420:	b2b3      	uxth	r3, r6
 8005422:	b2ad      	uxth	r5, r5
 8005424:	e795      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = ( int16_t )wAux;
 8005426:	b214      	sxth	r4, r2
 8005428:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800542a:	b295      	uxth	r5, r2
 800542c:	e791      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
 800542e:	4e08      	ldr	r6, [pc, #32]	; (8005450 <R3_1_GetPhaseCurrents+0x164>)
 8005430:	e7cf      	b.n	80053d2 <R3_1_GetPhaseCurrents+0xe6>
 8005432:	4d07      	ldr	r5, [pc, #28]	; (8005450 <R3_1_GetPhaseCurrents+0x164>)
 8005434:	002e      	movs	r6, r5
 8005436:	002c      	movs	r4, r5
 8005438:	e7b2      	b.n	80053a0 <R3_1_GetPhaseCurrents+0xb4>
        pStator_Currents->a = ( int16_t )wAux;
 800543a:	b21e      	sxth	r6, r3
 800543c:	800e      	strh	r6, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800543e:	b29b      	uxth	r3, r3
 8005440:	e787      	b.n	8005352 <R3_1_GetPhaseCurrents+0x66>
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40012400 	.word	0x40012400
 800544c:	ffff8001 	.word	0xffff8001
 8005450:	00007fff 	.word	0x00007fff
 8005454:	00008001 	.word	0x00008001

08005458 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005458:	22a4      	movs	r2, #164	; 0xa4
{
 800545a:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800545c:	5882      	ldr	r2, [r0, r2]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 800545e:	2050      	movs	r0, #80	; 0x50
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005460:	6812      	ldr	r2, [r2, #0]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8005462:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005464:	6350      	str	r0, [r2, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 8005466:	2052      	movs	r0, #82	; 0x52
 8005468:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800546a:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 800546c:	2054      	movs	r0, #84	; 0x54
 800546e:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005470:	63d0      	str	r0, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005472:	6411      	str	r1, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005474:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8005476:	2256      	movs	r2, #86	; 0x56
 8005478:	5a98      	ldrh	r0, [r3, r2]
 800547a:	2801      	cmp	r0, #1
 800547c:	d005      	beq.n	800548a <R3_1_WriteTIMRegisters+0x32>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800547e:	2070      	movs	r0, #112	; 0x70
 8005480:	4008      	ands	r0, r1
 8005482:	1e43      	subs	r3, r0, #1
 8005484:	4198      	sbcs	r0, r3
    hAux = MC_DURATION;
 8005486:	b280      	uxth	r0, r0
}
 8005488:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 800548a:	2100      	movs	r1, #0
 800548c:	5299      	strh	r1, [r3, r2]
 800548e:	e7fb      	b.n	8005488 <R3_1_WriteTIMRegisters+0x30>

08005490 <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	2394      	movs	r3, #148	; 0x94
{
 8005494:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8005496:	00d2      	lsls	r2, r2, #3
 8005498:	50c2      	str	r2, [r0, r3]
  pHandle->_Super.Sector = pHandle->CalibSector;
 800549a:	330b      	adds	r3, #11
 800549c:	5cc2      	ldrb	r2, [r0, r3]
 800549e:	3b23      	subs	r3, #35	; 0x23
 80054a0:	54c2      	strb	r2, [r0, r3]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 80054a2:	331c      	adds	r3, #28
 80054a4:	5ac1      	ldrh	r1, [r0, r3]
 80054a6:	3901      	subs	r1, #1
 80054a8:	b289      	uxth	r1, r1
 80054aa:	f7ff ffd5 	bl	8005458 <R3_1_WriteTIMRegisters>
}
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <R3_1_SetADCSampPointSectX>:
  register uint16_t lowDuty = pHdl->lowDuty;
 80054b0:	2358      	movs	r3, #88	; 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80054b2:	21a4      	movs	r1, #164	; 0xa4
{
 80054b4:	b570      	push	{r4, r5, r6, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 80054b6:	5ac5      	ldrh	r5, [r0, r3]
  register uint16_t midDuty = pHdl->midDuty;
 80054b8:	3302      	adds	r3, #2
 80054ba:	5ac2      	ldrh	r2, [r0, r3]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80054bc:	333e      	adds	r3, #62	; 0x3e
 80054be:	5846      	ldr	r6, [r0, r1]
 80054c0:	5ac4      	ldrh	r4, [r0, r3]
 80054c2:	3956      	subs	r1, #86	; 0x56
 80054c4:	1b63      	subs	r3, r4, r5
 80054c6:	5a71      	ldrh	r1, [r6, r1]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	428b      	cmp	r3, r1
 80054cc:	d907      	bls.n	80054de <R3_1_SetADCSampPointSectX+0x2e>
    pHandle->_Super.Sector = SECTOR_5;
 80054ce:	237c      	movs	r3, #124	; 0x7c
 80054d0:	2204      	movs	r2, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80054d2:	3c01      	subs	r4, #1
    pHandle->_Super.Sector = SECTOR_5;
 80054d4:	54c2      	strb	r2, [r0, r3]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80054d6:	b2a1      	uxth	r1, r4
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 80054d8:	f7ff ffbe 	bl	8005458 <R3_1_WriteTIMRegisters>
}
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80054de:	1aaa      	subs	r2, r5, r2
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80054e0:	b292      	uxth	r2, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d904      	bls.n	80054f2 <R3_1_SetADCSampPointSectX+0x42>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80054e8:	2350      	movs	r3, #80	; 0x50
 80054ea:	5af1      	ldrh	r1, [r6, r3]
 80054ec:	1a69      	subs	r1, r5, r1
 80054ee:	b289      	uxth	r1, r1
 80054f0:	e7f2      	b.n	80054d8 <R3_1_SetADCSampPointSectX+0x28>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80054f2:	1949      	adds	r1, r1, r5
 80054f4:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80054f6:	428c      	cmp	r4, r1
 80054f8:	d8ee      	bhi.n	80054d8 <R3_1_SetADCSampPointSectX+0x28>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	2394      	movs	r3, #148	; 0x94
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80054fe:	0064      	lsls	r4, r4, #1
 8005500:	3c01      	subs	r4, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8005502:	0112      	lsls	r2, r2, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005504:	1a61      	subs	r1, r4, r1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8005506:	50c2      	str	r2, [r0, r3]
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005508:	b289      	uxth	r1, r1
 800550a:	e7e5      	b.n	80054d8 <R3_1_SetADCSampPointSectX+0x28>

0800550c <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 800550c:	237e      	movs	r3, #126	; 0x7e
 800550e:	2201      	movs	r2, #1
 8005510:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <R3_1_TurnOnLowSides+0x48>)
 8005514:	3a03      	subs	r2, #3
 8005516:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005518:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800551a:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800551c:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800551e:	2101      	movs	r1, #1
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	4211      	tst	r1, r2
 8005524:	d0fc      	beq.n	8005520 <R3_1_TurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800552a:	0212      	lsls	r2, r2, #8
 800552c:	430a      	orrs	r2, r1
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8005530:	237d      	movs	r3, #125	; 0x7d
 8005532:	5cc3      	ldrb	r3, [r0, r3]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d10b      	bne.n	8005550 <R3_1_TurnOnLowSides+0x44>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8005538:	2248      	movs	r2, #72	; 0x48
 800553a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800553c:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800553e:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8005540:	224a      	movs	r2, #74	; 0x4a
 8005542:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005544:	5a82      	ldrh	r2, [r0, r2]
 8005546:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8005548:	224c      	movs	r2, #76	; 0x4c
 800554a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800554c:	5a82      	ldrh	r2, [r0, r2]
 800554e:	619a      	str	r2, [r3, #24]

  }
  return;
}
 8005550:	4770      	bx	lr
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	40012c00 	.word	0x40012c00

08005558 <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005558:	237e      	movs	r3, #126	; 0x7e
 800555a:	2200      	movs	r2, #0
{
 800555c:	b570      	push	{r4, r5, r6, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 800555e:	54c2      	strb	r2, [r0, r3]

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8005560:	3322      	adds	r3, #34	; 0x22
 8005562:	3201      	adds	r2, #1
 8005564:	54c2      	strb	r2, [r0, r3]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 8005566:	3b08      	subs	r3, #8
 8005568:	5ac2      	ldrh	r2, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800556a:	4b35      	ldr	r3, [pc, #212]	; (8005640 <R3_1_SwitchOnPWM+0xe8>)
 800556c:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800556e:	3a05      	subs	r2, #5
 8005570:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005572:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005574:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005578:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800557a:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800557c:	4252      	negs	r2, r2
 800557e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	4211      	tst	r1, r2
 8005584:	d0fc      	beq.n	8005580 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005586:	2202      	movs	r2, #2
 8005588:	4252      	negs	r2, r2
 800558a:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005590:	00d2      	lsls	r2, r2, #3
 8005592:	430a      	orrs	r2, r1
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800559a:	0212      	lsls	r2, r2, #8
 800559c:	430a      	orrs	r2, r1
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80055a0:	227d      	movs	r2, #125	; 0x7d
 80055a2:	5c82      	ldrb	r2, [r0, r2]
 80055a4:	2a02      	cmp	r2, #2
 80055a6:	d02b      	beq.n	8005600 <R3_1_SwitchOnPWM+0xa8>

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 80055a8:	23a4      	movs	r3, #164	; 0xa4
 80055aa:	58c0      	ldr	r0, [r0, r3]
 80055ac:	3b4c      	subs	r3, #76	; 0x4c
 80055ae:	5cc3      	ldrb	r3, [r0, r3]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80055b0:	2007      	movs	r0, #7
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80055b2:	2402      	movs	r4, #2
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80055b4:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80055b6:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80055b8:	4922      	ldr	r1, [pc, #136]	; (8005644 <R3_1_SwitchOnPWM+0xec>)
 80055ba:	694a      	ldr	r2, [r1, #20]
 80055bc:	4382      	bics	r2, r0
 80055be:	4313      	orrs	r3, r2
 80055c0:	614b      	str	r3, [r1, #20]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80055c2:	4b21      	ldr	r3, [pc, #132]	; (8005648 <R3_1_SwitchOnPWM+0xf0>)
 80055c4:	3806      	subs	r0, #6
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4382      	bics	r2, r0
 80055ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	0c12      	lsrs	r2, r2, #16
 80055d0:	0412      	lsls	r2, r2, #16
 80055d2:	4322      	orrs	r2, r4
 80055d4:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4302      	orrs	r2, r0
 80055da:	601a      	str	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80055dc:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80055de:	68ca      	ldr	r2, [r1, #12]
 80055e0:	43b2      	bics	r2, r6
 80055e2:	4302      	orrs	r2, r0
 80055e4:	60ca      	str	r2, [r1, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80055e6:	4a19      	ldr	r2, [pc, #100]	; (800564c <R3_1_SwitchOnPWM+0xf4>)
 80055e8:	6055      	str	r5, [r2, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4322      	orrs	r2, r4
 80055ee:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80055f0:	2202      	movs	r2, #2
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <R3_1_SwitchOnPWM+0xe8>)
 80055f4:	4252      	negs	r2, r2
 80055f6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	4302      	orrs	r2, r0
 80055fc:	60da      	str	r2, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <R3_1_SwitchOnPWM+0xf8>)
 8005604:	4013      	ands	r3, r2
 8005606:	4293      	cmp	r3, r2
 8005608:	d00c      	beq.n	8005624 <R3_1_SwitchOnPWM+0xcc>
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 800560a:	2248      	movs	r2, #72	; 0x48
 800560c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800560e:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005610:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 8005612:	224a      	movs	r2, #74	; 0x4a
 8005614:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005616:	5a82      	ldrh	r2, [r0, r2]
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800561a:	224c      	movs	r2, #76	; 0x4c
 800561c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800561e:	5a82      	ldrh	r2, [r0, r2]
 8005620:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005622:	e7c1      	b.n	80055a8 <R3_1_SwitchOnPWM+0x50>
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8005624:	2248      	movs	r2, #72	; 0x48
 8005626:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005628:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800562a:	619a      	str	r2, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800562c:	224a      	movs	r2, #74	; 0x4a
 800562e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005630:	5a82      	ldrh	r2, [r0, r2]
 8005632:	619a      	str	r2, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8005634:	224c      	movs	r2, #76	; 0x4c
 8005636:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005638:	5a82      	ldrh	r2, [r0, r2]
 800563a:	619a      	str	r2, [r3, #24]
}
 800563c:	e7b4      	b.n	80055a8 <R3_1_SwitchOnPWM+0x50>
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40012400 	.word	0x40012400
 8005648:	40020008 	.word	0x40020008
 800564c:	40020000 	.word	0x40020000
 8005650:	00000555 	.word	0x00000555

08005654 <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005654:	2101      	movs	r1, #1
 8005656:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <R3_1_SwitchOffPWM+0x90>)
  * @brief  Contains the TIMx Update event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 8005658:	b510      	push	{r4, lr}
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	438a      	bics	r2, r1
 800565e:	60da      	str	r2, [r3, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005660:	2100      	movs	r1, #0
 8005662:	227e      	movs	r2, #126	; 0x7e
 8005664:	5481      	strb	r1, [r0, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005668:	491f      	ldr	r1, [pc, #124]	; (80056e8 <R3_1_SwitchOffPWM+0x94>)
 800566a:	400a      	ands	r2, r1
 800566c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->_Super.BrakeActionLock == true )
 800566e:	2385      	movs	r3, #133	; 0x85
 8005670:	5cc3      	ldrb	r3, [r0, r3]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8005676:	337d      	adds	r3, #125	; 0x7d
 8005678:	5cc3      	ldrb	r3, [r0, r3]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d025      	beq.n	80056ca <R3_1_SwitchOffPWM+0x76>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800567e:	2102      	movs	r1, #2
 8005680:	4a1a      	ldr	r2, [pc, #104]	; (80056ec <R3_1_SwitchOffPWM+0x98>)
  MODIFY_REG(ADCx->CR,
 8005682:	4c1b      	ldr	r4, [pc, #108]	; (80056f0 <R3_1_SwitchOffPWM+0x9c>)
 8005684:	6813      	ldr	r3, [r2, #0]
 8005686:	438b      	bics	r3, r1
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <R3_1_SwitchOffPWM+0xa0>)
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4022      	ands	r2, r4
 8005690:	2410      	movs	r4, #16
 8005692:	4322      	orrs	r2, r4
 8005694:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	3c0f      	subs	r4, #15
 800569a:	43a2      	bics	r2, r4
 800569c:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <R3_1_SwitchOffPWM+0xa4>)
 80056a0:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80056a2:	2204      	movs	r2, #4
 80056a4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4914      	ldr	r1, [pc, #80]	; (80056fc <R3_1_SwitchOffPWM+0xa8>)
 80056aa:	400a      	ands	r2, r1
 80056ac:	60da      	str	r2, [r3, #12]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 80056ae:	23a0      	movs	r3, #160	; 0xa0
 80056b0:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80056b2:	2101      	movs	r1, #1
 80056b4:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80056b6:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <R3_1_SwitchOffPWM+0x90>)
 80056b8:	3a02      	subs	r2, #2
 80056ba:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	4211      	tst	r1, r2
 80056c0:	d0fc      	beq.n	80056bc <R3_1_SwitchOffPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80056c2:	2202      	movs	r2, #2
 80056c4:	4252      	negs	r2, r2
 80056c6:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80056c8:	bd10      	pop	{r4, pc}
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 80056ca:	2248      	movs	r2, #72	; 0x48
 80056cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80056ce:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BRR, PinMask);
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 80056d2:	224a      	movs	r2, #74	; 0x4a
 80056d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056d6:	5a82      	ldrh	r2, [r0, r2]
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 80056da:	224c      	movs	r2, #76	; 0x4c
 80056dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80056de:	5a82      	ldrh	r2, [r0, r2]
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056e2:	e7cc      	b.n	800567e <R3_1_SwitchOffPWM+0x2a>
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	ffff7fff 	.word	0xffff7fff
 80056ec:	40020008 	.word	0x40020008
 80056f0:	7fffffe8 	.word	0x7fffffe8
 80056f4:	40012400 	.word	0x40012400
 80056f8:	40020000 	.word	0x40020000
 80056fc:	fffff23f 	.word	0xfffff23f

08005700 <R3_1_CurrentReadingCalibration>:
{
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	464e      	mov	r6, r9
 8005704:	4645      	mov	r5, r8
 8005706:	46de      	mov	lr, fp
 8005708:	4657      	mov	r7, sl
 800570a:	b5e0      	push	{r5, r6, r7, lr}
  if (false == pHandle->_Super.offsetCalibStatus)
 800570c:	2681      	movs	r6, #129	; 0x81
 800570e:	5d85      	ldrb	r5, [r0, r6]
{
 8005710:	0004      	movs	r4, r0
 8005712:	b083      	sub	sp, #12
  if (false == pHandle->_Super.offsetCalibStatus)
 8005714:	2d00      	cmp	r5, #0
 8005716:	d02e      	beq.n	8005776 <R3_1_CurrentReadingCalibration+0x76>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005718:	4b47      	ldr	r3, [pc, #284]	; (8005838 <R3_1_CurrentReadingCalibration+0x138>)
 800571a:	4948      	ldr	r1, [pc, #288]	; (800583c <R3_1_CurrentReadingCalibration+0x13c>)
 800571c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800571e:	2508      	movs	r5, #8
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005720:	400a      	ands	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	400a      	ands	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	400a      	ands	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8005730:	2298      	movs	r2, #152	; 0x98
 8005732:	5aa1      	ldrh	r1, [r4, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005734:	4a42      	ldr	r2, [pc, #264]	; (8005840 <R3_1_CurrentReadingCalibration+0x140>)
 8005736:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005738:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800573a:	63d1      	str	r1, [r2, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800573c:	4941      	ldr	r1, [pc, #260]	; (8005844 <R3_1_CurrentReadingCalibration+0x144>)
 800573e:	6808      	ldr	r0, [r1, #0]
 8005740:	4328      	orrs	r0, r5
 8005742:	6008      	str	r0, [r1, #0]
 8005744:	2080      	movs	r0, #128	; 0x80
 8005746:	680e      	ldr	r6, [r1, #0]
 8005748:	0100      	lsls	r0, r0, #4
 800574a:	4330      	orrs	r0, r6
 800574c:	6008      	str	r0, [r1, #0]
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	4329      	orrs	r1, r5
 8005752:	6019      	str	r1, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8005754:	6a11      	ldr	r1, [r2, #32]
 8005756:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <R3_1_CurrentReadingCalibration+0x148>)
 8005758:	430b      	orrs	r3, r1
 800575a:	6213      	str	r3, [r2, #32]
  pHandle->_Super.Sector = SECTOR_5;
 800575c:	237c      	movs	r3, #124	; 0x7c
 800575e:	2204      	movs	r2, #4
 8005760:	54e2      	strb	r2, [r4, r3]
  pHandle->_Super.BrakeActionLock = false;
 8005762:	2200      	movs	r2, #0
 8005764:	3309      	adds	r3, #9
 8005766:	54e2      	strb	r2, [r4, r3]
}
 8005768:	b003      	add	sp, #12
 800576a:	bcf0      	pop	{r4, r5, r6, r7}
 800576c:	46bb      	mov	fp, r7
 800576e:	46b2      	mov	sl, r6
 8005770:	46a9      	mov	r9, r5
 8005772:	46a0      	mov	r8, r4
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8005776:	6803      	ldr	r3, [r0, #0]
    pHandle->PhaseCOffset = 0u;
 8005778:	2290      	movs	r2, #144	; 0x90
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800577a:	9300      	str	r3, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800577c:	6943      	ldr	r3, [r0, #20]
  CLEAR_BIT(TIMx->CCER, Channels);
 800577e:	4f30      	ldr	r7, [pc, #192]	; (8005840 <R3_1_CurrentReadingCalibration+0x140>)
 8005780:	9301      	str	r3, [sp, #4]
    pHandle->PhaseAOffset = 0u;
 8005782:	2388      	movs	r3, #136	; 0x88
 8005784:	50c5      	str	r5, [r0, r3]
 8005786:	469b      	mov	fp, r3
    pHandle->PhaseBOffset = 0u;
 8005788:	3304      	adds	r3, #4
 800578a:	50c5      	str	r5, [r0, r3]
 800578c:	469a      	mov	sl, r3
    pHandle->PolarizationCounter = 0u;
 800578e:	3312      	adds	r3, #18
    pHandle->PhaseCOffset = 0u;
 8005790:	5085      	str	r5, [r0, r2]
    pHandle->PolarizationCounter = 0u;
 8005792:	54c5      	strb	r5, [r0, r3]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	4a2d      	ldr	r2, [pc, #180]	; (800584c <R3_1_CurrentReadingCalibration+0x14c>)
    pHandle->CalibSector = SECTOR_5;
 8005798:	219f      	movs	r1, #159	; 0x9f
 800579a:	4013      	ands	r3, r2
 800579c:	623b      	str	r3, [r7, #32]
    pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 800579e:	4b2c      	ldr	r3, [pc, #176]	; (8005850 <R3_1_CurrentReadingCalibration+0x150>)
 80057a0:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 80057a2:	4b2c      	ldr	r3, [pc, #176]	; (8005854 <R3_1_CurrentReadingCalibration+0x154>)
 80057a4:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 80057a6:	2304      	movs	r3, #4
 80057a8:	5443      	strb	r3, [r0, r1]
    pHandle->_Super.Sector = SECTOR_5;
 80057aa:	207c      	movs	r0, #124	; 0x7c
 80057ac:	5423      	strb	r3, [r4, r0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80057ae:	0020      	movs	r0, r4
 80057b0:	f7ff fed2 	bl	8005558 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 80057b4:	209e      	movs	r0, #158	; 0x9e
                            pHandle->pParams_str->RepetitionCounter,
 80057b6:	23a4      	movs	r3, #164	; 0xa4
    waitForPolarizationEnd( TIMx,
 80057b8:	4681      	mov	r9, r0
 80057ba:	3848      	subs	r0, #72	; 0x48
 80057bc:	4680      	mov	r8, r0
 80057be:	2159      	movs	r1, #89	; 0x59
                            pHandle->pParams_str->RepetitionCounter,
 80057c0:	58e3      	ldr	r3, [r4, r3]
    waitForPolarizationEnd( TIMx,
 80057c2:	44a1      	add	r9, r4
 80057c4:	44a0      	add	r8, r4
 80057c6:	5c5a      	ldrb	r2, [r3, r1]
 80057c8:	0038      	movs	r0, r7
 80057ca:	464b      	mov	r3, r9
 80057cc:	4641      	mov	r1, r8
 80057ce:	f7ff fc8d 	bl	80050ec <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80057d2:	0020      	movs	r0, r4
 80057d4:	f7ff ff3e 	bl	8005654 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 80057d8:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <R3_1_CurrentReadingCalibration+0x158>)
    pHandle->CalibSector = SECTOR_1;
 80057da:	219f      	movs	r1, #159	; 0x9f
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 80057dc:	6023      	str	r3, [r4, #0]
    pHandle->_Super.Sector = SECTOR_1;
 80057de:	207c      	movs	r0, #124	; 0x7c
    pHandle->PolarizationCounter = 0;
 80057e0:	239e      	movs	r3, #158	; 0x9e
    pHandle->CalibSector = SECTOR_1;
 80057e2:	5465      	strb	r5, [r4, r1]
    pHandle->_Super.Sector = SECTOR_1;
 80057e4:	5425      	strb	r5, [r4, r0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80057e6:	0020      	movs	r0, r4
    pHandle->PolarizationCounter = 0;
 80057e8:	54e5      	strb	r5, [r4, r3]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80057ea:	f7ff feb5 	bl	8005558 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 80057ee:	23a4      	movs	r3, #164	; 0xa4
    waitForPolarizationEnd( TIMx,
 80057f0:	2159      	movs	r1, #89	; 0x59
                            pHandle->pParams_str->RepetitionCounter,
 80057f2:	58e3      	ldr	r3, [r4, r3]
    waitForPolarizationEnd( TIMx,
 80057f4:	0038      	movs	r0, r7
 80057f6:	5c5a      	ldrb	r2, [r3, r1]
 80057f8:	464b      	mov	r3, r9
 80057fa:	4641      	mov	r1, r8
 80057fc:	f7ff fc76 	bl	80050ec <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8005800:	0020      	movs	r0, r4
 8005802:	f7ff ff27 	bl	8005654 <R3_1_SwitchOffPWM>
    pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005806:	465b      	mov	r3, fp
 8005808:	4659      	mov	r1, fp
 800580a:	58e3      	ldr	r3, [r4, r3]
    pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 800580c:	2290      	movs	r2, #144	; 0x90
    pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	5063      	str	r3, [r4, r1]
    pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 8005812:	4653      	mov	r3, sl
 8005814:	4651      	mov	r1, sl
 8005816:	58e3      	ldr	r3, [r4, r3]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	5063      	str	r3, [r4, r1]
    pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 800581c:	58a3      	ldr	r3, [r4, r2]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	50a3      	str	r3, [r4, r2]
    if (0U == pHandle->_Super.SWerror)
 8005822:	2356      	movs	r3, #86	; 0x56
 8005824:	5ae3      	ldrh	r3, [r4, r3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <R3_1_CurrentReadingCalibration+0x12e>
      pHandle->_Super.offsetCalibStatus = true;
 800582a:	3301      	adds	r3, #1
 800582c:	55a3      	strb	r3, [r4, r6]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8005832:	9b01      	ldr	r3, [sp, #4]
 8005834:	6163      	str	r3, [r4, #20]
 8005836:	e76f      	b.n	8005718 <R3_1_CurrentReadingCalibration+0x18>
 8005838:	40012c1c 	.word	0x40012c1c
 800583c:	fffff7ff 	.word	0xfffff7ff
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40012c18 	.word	0x40012c18
 8005848:	00000555 	.word	0x00000555
 800584c:	fffffaaa 	.word	0xfffffaaa
 8005850:	08005121 	.word	0x08005121
 8005854:	08005491 	.word	0x08005491
 8005858:	0800516d 	.word	0x0800516d

0800585c <R3_1_TIMx_UP_IRQHandler>:
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 800585c:	2394      	movs	r3, #148	; 0x94
{
 800585e:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 8005860:	58c1      	ldr	r1, [r0, r3]
{
 8005862:	46ce      	mov	lr, r9
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 8005864:	4699      	mov	r9, r3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005866:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <R3_1_TIMx_UP_IRQHandler+0x84>)
{
 8005868:	4647      	mov	r7, r8
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4d1d      	ldr	r5, [pc, #116]	; (80058e4 <R3_1_TIMx_UP_IRQHandler+0x88>)
 800586e:	b580      	push	{r7, lr}
 8005870:	402a      	ands	r2, r5
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005872:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005874:	430a      	orrs	r2, r1
 8005876:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	491b      	ldr	r1, [pc, #108]	; (80058e8 <R3_1_TIMx_UP_IRQHandler+0x8c>)
 800587c:	00ed      	lsls	r5, r5, #3
 800587e:	400a      	ands	r2, r1
 8005880:	432a      	orrs	r2, r5
 8005882:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 8005884:	22a4      	movs	r2, #164	; 0xa4
 8005886:	5887      	ldr	r7, [r0, r2]
 8005888:	3a28      	subs	r2, #40	; 0x28
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800588a:	68d9      	ldr	r1, [r3, #12]
 800588c:	5c82      	ldrb	r2, [r0, r2]
 800588e:	468c      	mov	ip, r1
 8005890:	18b9      	adds	r1, r7, r2
 8005892:	315a      	adds	r1, #90	; 0x5a
 8005894:	7809      	ldrb	r1, [r1, #0]
 8005896:	2604      	movs	r6, #4
 8005898:	0089      	lsls	r1, r1, #2
 800589a:	4688      	mov	r8, r1
 800589c:	4661      	mov	r1, ip
 800589e:	4644      	mov	r4, r8
 80058a0:	43b1      	bics	r1, r6
 80058a2:	430c      	orrs	r4, r1
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80058a4:	0092      	lsls	r2, r2, #2
 80058a6:	60dc      	str	r4, [r3, #12]
 80058a8:	18ba      	adds	r2, r7, r2
 80058aa:	6852      	ldr	r2, [r2, #4]
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* ReConfigure sampling time, as deconfigured by reg_conv_manager */
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 80058ae:	2258      	movs	r2, #88	; 0x58
 80058b0:	5cba      	ldrb	r2, [r7, r2]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80058b2:	2707      	movs	r7, #7
 80058b4:	6959      	ldr	r1, [r3, #20]
 80058b6:	43b9      	bics	r1, r7
 80058b8:	430a      	orrs	r2, r1
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80058ba:	490c      	ldr	r1, [pc, #48]	; (80058ec <R3_1_TIMx_UP_IRQHandler+0x90>)
 80058bc:	615a      	str	r2, [r3, #20]
 80058be:	684a      	ldr	r2, [r1, #4]
 80058c0:	3769      	adds	r7, #105	; 0x69
 80058c2:	433a      	orrs	r2, r7
 80058c4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CR,
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	4909      	ldr	r1, [pc, #36]	; (80058f0 <R3_1_TIMx_UP_IRQHandler+0x94>)
 80058ca:	400a      	ands	r2, r1
 80058cc:	4332      	orrs	r2, r6
 80058ce:	609a      	str	r2, [r3, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
  /* ADC needs to be restarted because DMA is configured as limited */
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 80058d0:	464b      	mov	r3, r9
 80058d2:	50c5      	str	r5, [r0, r3]

  return &pHandle->_Super.Motor;
 80058d4:	307a      	adds	r0, #122	; 0x7a
}
 80058d6:	bcc0      	pop	{r6, r7}
 80058d8:	46b9      	mov	r9, r7
 80058da:	46b0      	mov	r8, r6
 80058dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	40012400 	.word	0x40012400
 80058e4:	fffff3ff 	.word	0xfffff3ff
 80058e8:	fffff23f 	.word	0xfffff23f
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	7fffffe8 	.word	0x7fffffe8

080058f4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80058f4:	8a43      	ldrh	r3, [r0, #18]
 80058f6:	8981      	ldrh	r1, [r0, #12]
{
 80058f8:	b530      	push	{r4, r5, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80058fa:	18c9      	adds	r1, r1, r3
 80058fc:	0849      	lsrs	r1, r1, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80058fe:	8943      	ldrh	r3, [r0, #10]
 8005900:	040d      	lsls	r5, r1, #16
 8005902:	430d      	orrs	r5, r1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <RVBS_Clear+0x26>
 8005908:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 800590a:	6944      	ldr	r4, [r0, #20]
 800590c:	005a      	lsls	r2, r3, #1
 800590e:	5311      	strh	r1, [r2, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005910:	3301      	adds	r3, #1
 8005912:	8942      	ldrh	r2, [r0, #10]
 8005914:	b29b      	uxth	r3, r3
 8005916:	429a      	cmp	r2, r3
 8005918:	d8f8      	bhi.n	800590c <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800591a:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800591c:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800591e:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005920:	bd30      	pop	{r4, r5, pc}
 8005922:	46c0      	nop			; (mov r8, r8)

08005924 <RVBS_Init>:
{
 8005924:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8005926:	f7ff ffe5 	bl	80058f4 <RVBS_Clear>
}
 800592a:	bd10      	pop	{r4, pc}

0800592c <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 800592c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800592e:	8982      	ldrh	r2, [r0, #12]
 8005930:	89c1      	ldrh	r1, [r0, #14]
{
 8005932:	0003      	movs	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005934:	428a      	cmp	r2, r1
 8005936:	d00d      	beq.n	8005954 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005938:	88c4      	ldrh	r4, [r0, #6]
 800593a:	8a40      	ldrh	r0, [r0, #18]
 800593c:	42a0      	cmp	r0, r4
 800593e:	d807      	bhi.n	8005950 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8005940:	7c18      	ldrb	r0, [r3, #16]
 8005942:	2800      	cmp	r0, #0
 8005944:	d10f      	bne.n	8005966 <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005946:	42a1      	cmp	r1, r4
 8005948:	d913      	bls.n	8005972 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800594a:	2201      	movs	r2, #1
 800594c:	741a      	strb	r2, [r3, #16]
          fault = MC_NO_ERROR;
 800594e:	e000      	b.n	8005952 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8005950:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005952:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005954:	88c0      	ldrh	r0, [r0, #6]
 8005956:	4282      	cmp	r2, r0
 8005958:	d30b      	bcc.n	8005972 <RVBS_CheckFaultState+0x46>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800595a:	8a5b      	ldrh	r3, [r3, #18]
 800595c:	4298      	cmp	r0, r3
 800595e:	4180      	sbcs	r0, r0
 8005960:	4240      	negs	r0, r0
 8005962:	0080      	lsls	r0, r0, #2
 8005964:	e7f5      	b.n	8005952 <RVBS_CheckFaultState+0x26>
          fault = MC_NO_ERROR;
 8005966:	2000      	movs	r0, #0
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005968:	42a2      	cmp	r2, r4
 800596a:	d2f2      	bcs.n	8005952 <RVBS_CheckFaultState+0x26>
          pHandle->OverVoltageHysteresisUpDir = false;
 800596c:	7418      	strb	r0, [r3, #16]
          fault = MC_OVER_VOLT;
 800596e:	3002      	adds	r0, #2
 8005970:	e7ef      	b.n	8005952 <RVBS_CheckFaultState+0x26>
        fault = MC_OVER_VOLT;
 8005972:	2002      	movs	r0, #2
 8005974:	e7ed      	b.n	8005952 <RVBS_CheckFaultState+0x26>
 8005976:	46c0      	nop			; (mov r8, r8)

08005978 <RVBS_CalcAvVbus>:
{
 8005978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597a:	46c6      	mov	lr, r8
    if (0xFFFFU == hAux)
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <RVBS_CalcAvVbus+0x64>)
{
 800597e:	0004      	movs	r4, r0
 8005980:	000d      	movs	r5, r1
 8005982:	b500      	push	{lr}
    if (0xFFFFU == hAux)
 8005984:	4299      	cmp	r1, r3
 8005986:	d01d      	beq.n	80059c4 <RVBS_CalcAvVbus+0x4c>
      pHandle->aBuffer[pHandle->index] = hAux;
 8005988:	7e43      	ldrb	r3, [r0, #25]
 800598a:	6942      	ldr	r2, [r0, #20]
 800598c:	4698      	mov	r8, r3
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	5299      	strh	r1, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005992:	7a87      	ldrb	r7, [r0, #10]
 8005994:	8946      	ldrh	r6, [r0, #10]
 8005996:	2f00      	cmp	r7, #0
 8005998:	d01e      	beq.n	80059d8 <RVBS_CalcAvVbus+0x60>
 800599a:	2300      	movs	r3, #0
      wtemp = 0u;
 800599c:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 800599e:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80059a0:	3301      	adds	r3, #1
 80059a2:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 80059a4:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80059a6:	3202      	adds	r2, #2
 80059a8:	42bb      	cmp	r3, r7
 80059aa:	d1f8      	bne.n	800599e <RVBS_CalcAvVbus+0x26>
      wtemp /= pHandle->LowPassFilterBW;
 80059ac:	0031      	movs	r1, r6
 80059ae:	f7fa fbab 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80059b2:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80059b4:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80059b6:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80059b8:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80059ba:	45b0      	cmp	r8, r6
 80059bc:	d209      	bcs.n	80059d2 <RVBS_CalcAvVbus+0x5a>
        pHandle->index++;
 80059be:	4647      	mov	r7, r8
 80059c0:	3701      	adds	r7, #1
 80059c2:	7667      	strb	r7, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80059c4:	0020      	movs	r0, r4
 80059c6:	f7ff ffb1 	bl	800592c <RVBS_CheckFaultState>
 80059ca:	8120      	strh	r0, [r4, #8]
}
 80059cc:	bc80      	pop	{r7}
 80059ce:	46b8      	mov	r8, r7
 80059d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	7663      	strb	r3, [r4, #25]
 80059d6:	e7f5      	b.n	80059c4 <RVBS_CalcAvVbus+0x4c>
      wtemp /= pHandle->LowPassFilterBW;
 80059d8:	2000      	movs	r0, #0
 80059da:	e7eb      	b.n	80059b4 <RVBS_CalcAvVbus+0x3c>
 80059dc:	0000ffff 	.word	0x0000ffff

080059e0 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 80059e4:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 80059e6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80059e8:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 80059ea:	3301      	adds	r3, #1
 80059ec:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80059ee:	4770      	bx	lr

080059f0 <REMNG_Calc>:
    int32_t current_ref;

    current_ref = pHandle->Ext;

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80059f0:	68c3      	ldr	r3, [r0, #12]
{
 80059f2:	b570      	push	{r4, r5, r6, lr}
 80059f4:	0004      	movs	r4, r0
    current_ref = pHandle->Ext;
 80059f6:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d909      	bls.n	8005a10 <REMNG_Calc+0x20>
    {
      /* Increment/decrement the reference value */
      current_ref += pHandle->IncDecAmount;
 80059fc:	6902      	ldr	r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 80059fe:	3b01      	subs	r3, #1
      current_ref += pHandle->IncDecAmount;
 8005a00:	18ad      	adds	r5, r5, r2
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005a02:	6941      	ldr	r1, [r0, #20]
      pHandle->RampRemainingStep --;
 8005a04:	60c3      	str	r3, [r0, #12]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005a06:	0028      	movs	r0, r5
 8005a08:	f7fa fc08 	bl	800021c <__divsi3>
    pHandle->Ext = current_ref;
 8005a0c:	60a5      	str	r5, [r4, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d004      	beq.n	8005a1e <REMNG_Calc+0x2e>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005a14:	6941      	ldr	r1, [r0, #20]
 8005a16:	0028      	movs	r0, r5
 8005a18:	f7fa fc00 	bl	800021c <__divsi3>
 8005a1c:	e7f6      	b.n	8005a0c <REMNG_Calc+0x1c>
      pHandle->RampRemainingStep = 0U;
 8005a1e:	2300      	movs	r3, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005a20:	6840      	ldr	r0, [r0, #4]
 8005a22:	6965      	ldr	r5, [r4, #20]
      pHandle->RampRemainingStep = 0U;
 8005a24:	60e3      	str	r3, [r4, #12]
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005a26:	4345      	muls	r5, r0
      pHandle->RampRemainingStep = 0U;
 8005a28:	e7f0      	b.n	8005a0c <REMNG_Calc+0x1c>
 8005a2a:	46c0      	nop			; (mov r8, r8)

08005a2c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8005a2c:	68c0      	ldr	r0, [r0, #12]
 8005a2e:	4243      	negs	r3, r0
 8005a30:	4158      	adcs	r0, r3
      /* nothing to do */
    }
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);
 8005a32:	b2c0      	uxtb	r0, r0

}
 8005a34:	4770      	bx	lr
 8005a36:	46c0      	nop			; (mov r8, r8)

08005a38 <getScalingFactor>:
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005a38:	2180      	movs	r1, #128	; 0x80
    aux = -Target;
 8005a3a:	17c3      	asrs	r3, r0, #31
 8005a3c:	18c0      	adds	r0, r0, r3
 8005a3e:	4058      	eors	r0, r3
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005a40:	0609      	lsls	r1, r1, #24
{
 8005a42:	2301      	movs	r3, #1
 8005a44:	e002      	b.n	8005a4c <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8005a46:	3301      	adds	r3, #1
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d007      	beq.n	8005a5c <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005a4c:	000a      	movs	r2, r1
 8005a4e:	40da      	lsrs	r2, r3
    if (TargetAbs >= limit)
 8005a50:	4290      	cmp	r0, r2
 8005a52:	d3f8      	bcc.n	8005a46 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8005a54:	2001      	movs	r0, #1
 8005a56:	3b01      	subs	r3, #1
 8005a58:	4098      	lsls	r0, r3
}
 8005a5a:	4770      	bx	lr
 8005a5c:	2080      	movs	r0, #128	; 0x80
 8005a5e:	0600      	lsls	r0, r0, #24
 8005a60:	e7fb      	b.n	8005a5a <getScalingFactor+0x22>
 8005a62:	46c0      	nop			; (mov r8, r8)

08005a64 <REMNG_ExecRamp>:
{
 8005a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a66:	464f      	mov	r7, r9
 8005a68:	0004      	movs	r4, r0
 8005a6a:	46d6      	mov	lr, sl
 8005a6c:	4646      	mov	r6, r8
 8005a6e:	0015      	movs	r5, r2
 8005a70:	b5c0      	push	{r6, r7, lr}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005a72:	6880      	ldr	r0, [r0, #8]
{
 8005a74:	000f      	movs	r7, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005a76:	6961      	ldr	r1, [r4, #20]
    if (0U == Durationms)
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d10e      	bne.n	8005a9a <REMNG_ExecRamp+0x36>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8005a7c:	0038      	movs	r0, r7
 8005a7e:	f7ff ffdb 	bl	8005a38 <getScalingFactor>
 8005a82:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005a84:	4378      	muls	r0, r7
 8005a86:	60a0      	str	r0, [r4, #8]
      pHandle->IncDecAmount = 0;
 8005a88:	2000      	movs	r0, #0
      pHandle->RampRemainingStep = 0U;
 8005a8a:	60e5      	str	r5, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005a8c:	6120      	str	r0, [r4, #16]
}
 8005a8e:	2001      	movs	r0, #1
 8005a90:	bce0      	pop	{r5, r6, r7}
 8005a92:	46ba      	mov	sl, r7
 8005a94:	46b1      	mov	r9, r6
 8005a96:	46a8      	mov	r8, r5
 8005a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005a9a:	f7fa fbbf 	bl	800021c <__divsi3>
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8005a9e:	1a3b      	subs	r3, r7, r0
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005aa0:	4680      	mov	r8, r0
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	4699      	mov	r9, r3
 8005aa6:	f7ff ffc7 	bl	8005a38 <getScalingFactor>
 8005aaa:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8005aac:	4640      	mov	r0, r8
 8005aae:	f7ff ffc3 	bl	8005a38 <getScalingFactor>
 8005ab2:	0006      	movs	r6, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8005ab4:	0038      	movs	r0, r7
 8005ab6:	f7ff ffbf 	bl	8005a38 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8005aba:	45b2      	cmp	sl, r6
 8005abc:	d214      	bcs.n	8005ae8 <REMNG_ExecRamp+0x84>
        if (wScalingFactor < wScalingFactor3)
 8005abe:	4656      	mov	r6, sl
 8005ac0:	4286      	cmp	r6, r0
 8005ac2:	d813      	bhi.n	8005aec <REMNG_ExecRamp+0x88>
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005ac4:	4643      	mov	r3, r8
      aux /= 1000U;
 8005ac6:	21fa      	movs	r1, #250	; 0xfa
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005ac8:	4373      	muls	r3, r6
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8005aca:	6820      	ldr	r0, [r4, #0]
      pHandle->ScalingFactor = wScalingFactorMin;
 8005acc:	6166      	str	r6, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8005ace:	4368      	muls	r0, r5
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005ad0:	60a3      	str	r3, [r4, #8]
      pHandle->TargetFinal = TargetFinal;
 8005ad2:	6067      	str	r7, [r4, #4]
      aux /= 1000U;
 8005ad4:	0089      	lsls	r1, r1, #2
 8005ad6:	f7fa fb17 	bl	8000108 <__udivsi3>
      pHandle->RampRemainingStep++;
 8005ada:	1c45      	adds	r5, r0, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8005adc:	4648      	mov	r0, r9
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005ade:	0029      	movs	r1, r5
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8005ae0:	4370      	muls	r0, r6
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005ae2:	f7fa fb9b 	bl	800021c <__divsi3>
      pHandle->IncDecAmount = aux1;
 8005ae6:	e7d0      	b.n	8005a8a <REMNG_ExecRamp+0x26>
        if (wScalingFactor2 < wScalingFactor3)
 8005ae8:	4286      	cmp	r6, r0
 8005aea:	d9eb      	bls.n	8005ac4 <REMNG_ExecRamp+0x60>
 8005aec:	0006      	movs	r6, r0
 8005aee:	e7e9      	b.n	8005ac4 <REMNG_ExecRamp+0x60>

08005af0 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 8005af0:	b510      	push	{r4, lr}
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pSNSL = pSNSL;
 8005af2:	6703      	str	r3, [r0, #112]	; 0x70
    pHandle->pPWM = pPWM;
 8005af4:	9b02      	ldr	r3, [sp, #8]
    pHandle->pVSS = pVSS;
 8005af6:	66c2      	str	r2, [r0, #108]	; 0x6c
    pHandle->pPWM = pPWM;
 8005af8:	6743      	str	r3, [r0, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 8005afa:	2200      	movs	r2, #0
 8005afc:	2354      	movs	r3, #84	; 0x54
    pHandle->pSTC = pSTC;
 8005afe:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->OTFSCLowside = false;
 8005b00:	52c2      	strh	r2, [r0, r3]
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005b02:	6943      	ldr	r3, [r0, #20]
{
 8005b04:	0004      	movs	r4, r0
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01f      	beq.n	8005b4a <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005b0a:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01f      	beq.n	8005b50 <RUC_Init+0x60>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005b10:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01f      	beq.n	8005b56 <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005b16:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01f      	beq.n	8005b5c <RUC_Init+0x6c>
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2105      	movs	r1, #5
 8005b20:	3204      	adds	r2, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d012      	beq.n	8005b4c <RUC_Init+0x5c>
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005b26:	0053      	lsls	r3, r2, #1
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	18e3      	adds	r3, r4, r3
 8005b30:	615a      	str	r2, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 8005b32:	2348      	movs	r3, #72	; 0x48

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005b34:	2064      	movs	r0, #100	; 0x64
      pHandle->bPhaseNbr = bPhase;
 8005b36:	54e1      	strb	r1, [r4, r3]
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005b38:	21fa      	movs	r1, #250	; 0xfa
 8005b3a:	8823      	ldrh	r3, [r4, #0]
 8005b3c:	0089      	lsls	r1, r1, #2
 8005b3e:	4358      	muls	r0, r3
 8005b40:	f7fa fae2 	bl	8000108 <__udivsi3>
 8005b44:	2356      	movs	r3, #86	; 0x56
 8005b46:	54e0      	strb	r0, [r4, r3]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8005b48:	bd10      	pop	{r4, pc}
      bPhase++;
 8005b4a:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005b4c:	1e4a      	subs	r2, r1, #1
 8005b4e:	e7ea      	b.n	8005b26 <RUC_Init+0x36>
      bPhase++;
 8005b50:	2102      	movs	r1, #2
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005b52:	1e4a      	subs	r2, r1, #1
 8005b54:	e7e7      	b.n	8005b26 <RUC_Init+0x36>
      bPhase++;
 8005b56:	2103      	movs	r1, #3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005b58:	1e4a      	subs	r2, r1, #1
 8005b5a:	e7e4      	b.n	8005b26 <RUC_Init+0x36>
      bPhase++;
 8005b5c:	2104      	movs	r1, #4
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005b5e:	1e4a      	subs	r2, r1, #1
 8005b60:	e7e1      	b.n	8005b26 <RUC_Init+0x36>
 8005b62:	46c0      	nop			; (mov r8, r8)

08005b64 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8005b66:	2258      	movs	r2, #88	; 0x58
 8005b68:	2300      	movs	r3, #0
{
 8005b6a:	0004      	movs	r4, r0
 8005b6c:	000d      	movs	r5, r1
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8005b6e:	6e87      	ldr	r7, [r0, #104]	; 0x68
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8005b70:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
    pHandle->hDirection = hMotorDirection;
 8005b72:	80c1      	strh	r1, [r0, #6]
    pHandle->bStageCnt = 0U;
 8005b74:	5483      	strb	r3, [r0, r2]
    pHandle->bOTFRelCounter = 0U;
 8005b76:	3a05      	subs	r2, #5
 8005b78:	5483      	strb	r3, [r0, r2]
    pHandle->OTFSCLowside = false;
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	5283      	strh	r3, [r0, r2]

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8005b7e:	0030      	movs	r0, r6
 8005b80:	f000 fc76 	bl	8006470 <VSS_Clear>

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8005b84:	0038      	movs	r0, r7
 8005b86:	2104      	movs	r1, #4
 8005b88:	f000 f8dc 	bl	8005d44 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8005b8c:	8861      	ldrh	r1, [r4, #2]
 8005b8e:	b2ad      	uxth	r5, r5
 8005b90:	4369      	muls	r1, r5
 8005b92:	0030      	movs	r0, r6
 8005b94:	b209      	sxth	r1, r1
 8005b96:	f000 fd19 	bl	80065cc <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8005b9a:	0038      	movs	r0, r7
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	f000 f8d4 	bl	8005d4c <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8005ba4:	8a21      	ldrh	r1, [r4, #16]
 8005ba6:	0038      	movs	r0, r7
 8005ba8:	4369      	muls	r1, r5
 8005baa:	89a2      	ldrh	r2, [r4, #12]
 8005bac:	b209      	sxth	r1, r1
 8005bae:	f000 f8cd 	bl	8005d4c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8005bb2:	89e1      	ldrh	r1, [r4, #14]
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	4369      	muls	r1, r5
 8005bb8:	89a2      	ldrh	r2, [r4, #12]
 8005bba:	b209      	sxth	r1, r1
 8005bbc:	f000 fd12 	bl	80065e4 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
                                              / 1000U );
 8005bc0:	21fa      	movs	r1, #250	; 0xfa
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005bc4:	8820      	ldrh	r0, [r4, #0]
                                              / 1000U );
 8005bc6:	0089      	lsls	r1, r1, #2
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005bc8:	4358      	muls	r0, r3
                                              / 1000U );
 8005bca:	f7fa fa9d 	bl	8000108 <__udivsi3>

    pHandle->hPhaseRemainingTicks++;

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005bce:	6963      	ldr	r3, [r4, #20]

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 8005bd0:	2200      	movs	r2, #0
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005bd2:	60a3      	str	r3, [r4, #8]
    pHandle->bResetPLLCnt = 0U;
 8005bd4:	2357      	movs	r3, #87	; 0x57
    pHandle->hPhaseRemainingTicks++;
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	80a0      	strh	r0, [r4, #4]
    pHandle->bResetPLLCnt = 0U;
 8005bda:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)

08005be0 <RUC_Exec>:
  * @brief  FOC Main Rev-Up controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire Rev-Up phases have been completed.
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
 8005be0:	b570      	push	{r4, r5, r6, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8005be2:	8883      	ldrh	r3, [r0, #4]
{
 8005be4:	0004      	movs	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d126      	bne.n	8005c38 <RUC_Exec+0x58>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005bea:	68a3      	ldr	r3, [r4, #8]
        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
      }
      else
      {
        retVal = false;
 8005bec:	2000      	movs	r0, #0
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d021      	beq.n	8005c36 <RUC_Exec+0x56>
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	8899      	ldrh	r1, [r3, #4]
 8005bf6:	88e3      	ldrh	r3, [r4, #6]
 8005bf8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005bfa:	4359      	muls	r1, r3
 8005bfc:	b209      	sxth	r1, r1
 8005bfe:	f000 f8a5 	bl	8005d4c <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005c02:	68a3      	ldr	r3, [r4, #8]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005c04:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005c06:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005c08:	8859      	ldrh	r1, [r3, #2]
 8005c0a:	88e3      	ldrh	r3, [r4, #6]
 8005c0c:	4359      	muls	r1, r3
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005c0e:	b209      	sxth	r1, r1
 8005c10:	f000 fce8 	bl	80065e4 <VSS_SetMecAcceleration>
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005c14:	21fa      	movs	r1, #250	; 0xfa
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005c16:	68a5      	ldr	r5, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005c18:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005c1a:	882b      	ldrh	r3, [r5, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005c1c:	0089      	lsls	r1, r1, #2
 8005c1e:	4358      	muls	r0, r3
 8005c20:	f7fa fa72 	bl	8000108 <__udivsi3>
        pHandle->bStageCnt++;
 8005c24:	2258      	movs	r2, #88	; 0x58
        pHandle->hPhaseRemainingTicks++;
 8005c26:	3001      	adds	r0, #1
 8005c28:	80a0      	strh	r0, [r4, #4]
  bool retVal = true;
 8005c2a:	2001      	movs	r0, #1
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005c2c:	68ab      	ldr	r3, [r5, #8]
 8005c2e:	60a3      	str	r3, [r4, #8]
        pHandle->bStageCnt++;
 8005c30:	5ca3      	ldrb	r3, [r4, r2]
 8005c32:	3301      	adds	r3, #1
 8005c34:	54a3      	strb	r3, [r4, r2]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->hPhaseRemainingTicks--;
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0d3      	beq.n	8005bea <RUC_Exec+0xa>
  bool retVal = true;
 8005c42:	2001      	movs	r0, #1
 8005c44:	e7f7      	b.n	8005c36 <RUC_Exec+0x56>
 8005c46:	46c0      	nop			; (mov r8, r8)

08005c48 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8005c48:	2358      	movs	r3, #88	; 0x58
 8005c4a:	5cc2      	ldrb	r2, [r0, r3]
 8005c4c:	3b0f      	subs	r3, #15
 8005c4e:	5cc3      	ldrb	r3, [r0, r3]
 8005c50:	2000      	movs	r0, #0
 8005c52:	429a      	cmp	r2, r3
 8005c54:	4140      	adcs	r0, r0
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
 8005c56:	b2c0      	uxtb	r0, r0
}
 8005c58:	4770      	bx	lr
 8005c5a:	46c0      	nop			; (mov r8, r8)

08005c5c <RUC_GetNumberOfPhases>:
__weak uint8_t RUC_GetNumberOfPhases(RevUpCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
 8005c5c:	2348      	movs	r3, #72	; 0x48
 8005c5e:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 8005c60:	4770      	bx	lr
 8005c62:	46c0      	nop			; (mov r8, r8)

08005c64 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8005c64:	2304      	movs	r3, #4
 8005c66:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005c68:	4770      	bx	lr
 8005c6a:	46c0      	nop			; (mov r8, r8)

08005c6c <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8005c6c:	230c      	movs	r3, #12
 8005c6e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005c70:	4770      	bx	lr
 8005c72:	46c0      	nop			; (mov r8, r8)

08005c74 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8005c74:	2310      	movs	r3, #16
 8005c76:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005c78:	4770      	bx	lr
 8005c7a:	46c0      	nop			; (mov r8, r8)

08005c7c <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8005c7c:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	5e8a      	ldrsh	r2, [r1, r2]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005c82:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005c84:	7803      	ldrb	r3, [r0, #0]
    if (*pMecSpeedUnit < 0)
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	db24      	blt.n	8005cd4 <SPD_IsMecSpeedReliable+0x58>
      hAux = -(*pMecSpeedUnit);
      hAbsMecSpeedUnit = (uint16_t)hAux;
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8005c8a:	b292      	uxth	r2, r2
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005c8c:	8ac6      	ldrh	r6, [r0, #22]
    {
      SpeedError = true;
 8005c8e:	2101      	movs	r1, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005c90:	8a85      	ldrh	r5, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005c92:	4296      	cmp	r6, r2
 8005c94:	d802      	bhi.n	8005c9c <SPD_IsMecSpeedReliable+0x20>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005c96:	4295      	cmp	r5, r2
 8005c98:	41ad      	sbcs	r5, r5
 8005c9a:	4269      	negs	r1, r5
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005c9c:	2512      	movs	r5, #18
 8005c9e:	5f42      	ldrsh	r2, [r0, r5]
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	db14      	blt.n	8005cce <SPD_IsMecSpeedReliable+0x52>
      hAux = -(pHandle->hMecAccelUnitP);
      hAbsMecAccelUnitP = (uint16_t)hAux;
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8005ca4:	b292      	uxth	r2, r2
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005ca6:	8b05      	ldrh	r5, [r0, #24]
 8005ca8:	4295      	cmp	r5, r2
 8005caa:	d301      	bcc.n	8005cb0 <SPD_IsMecSpeedReliable+0x34>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d009      	beq.n	8005cc4 <SPD_IsMecSpeedReliable+0x48>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	d901      	bls.n	8005cb8 <SPD_IsMecSpeedReliable+0x3c>
      {
        bSpeedErrorNumber++;
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005cb8:	7003      	strb	r3, [r0, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8005cba:	1b18      	subs	r0, r3, r4
 8005cbc:	1e42      	subs	r2, r0, #1
 8005cbe:	4190      	sbcs	r0, r2
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 8005cc0:	b2c0      	uxtb	r0, r0
}
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
        bSpeedErrorNumber = 0u;
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	4149      	adcs	r1, r1
 8005cc8:	4249      	negs	r1, r1
 8005cca:	400b      	ands	r3, r1
 8005ccc:	e7f4      	b.n	8005cb8 <SPD_IsMecSpeedReliable+0x3c>
      hAux = -(pHandle->hMecAccelUnitP);
 8005cce:	4252      	negs	r2, r2
 8005cd0:	b292      	uxth	r2, r2
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8005cd2:	e7e8      	b.n	8005ca6 <SPD_IsMecSpeedReliable+0x2a>
      hAux = -(*pMecSpeedUnit);
 8005cd4:	4252      	negs	r2, r2
 8005cd6:	b292      	uxth	r2, r2
      hAbsMecSpeedUnit = (uint16_t)hAux;
 8005cd8:	e7d8      	b.n	8005c8c <SPD_IsMecSpeedReliable+0x10>
 8005cda:	46c0      	nop			; (mov r8, r8)

08005cdc <SPD_GetS16Speed>:
  * -- INT16_MAX when the average mechanical speed is equal to
  * @ref SpeednPosFdbk_Handle_t::hMaxReliableMecSpeedUnit "hMaxReliableMecSpeedUnit" ,\n
  * - Called for speed monitoring through MotorPilote.
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 8005cdc:	0003      	movs	r3, r0
 8005cde:	b510      	push	{r4, lr}
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 8005ce0:	210c      	movs	r1, #12
 8005ce2:	5e42      	ldrsh	r2, [r0, r1]
    wAux *= INT16_MAX;
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005ce4:	2114      	movs	r1, #20
 8005ce6:	5e59      	ldrsh	r1, [r3, r1]
    wAux *= INT16_MAX;
 8005ce8:	03d0      	lsls	r0, r2, #15
 8005cea:	1a80      	subs	r0, r0, r2
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005cec:	f7fa fa96 	bl	800021c <__divsi3>
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
 8005cf0:	b200      	sxth	r0, r0
}
 8005cf2:	bd10      	pop	{r4, pc}

08005cf4 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005cf4:	232a      	movs	r3, #42	; 0x2a
    pHandle->SPD = SPD_Handle;
 8005cf6:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005cf8:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8005cfa:	5cc3      	ldrb	r3, [r0, r3]
 8005cfc:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005cfe:	222c      	movs	r2, #44	; 0x2c
 8005d00:	5e83      	ldrsh	r3, [r0, r2]
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005d06:	222e      	movs	r2, #46	; 0x2e
 8005d08:	5e83      	ldrsh	r3, [r0, r2]
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005d12:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005d14:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005d16:	4770      	bx	lr

08005d18 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8005d18:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005d1a:	4770      	bx	lr

08005d1c <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8005d1c:	6940      	ldr	r0, [r0, #20]
#endif
}
 8005d1e:	4770      	bx	lr

08005d20 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005d20:	7803      	ldrb	r3, [r0, #0]
{
 8005d22:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d000      	beq.n	8005d2a <STC_Clear+0xa>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005d28:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	6900      	ldr	r0, [r0, #16]
 8005d2e:	f7ff f959 	bl	8004fe4 <PID_SetIntegralTerm>
}
 8005d32:	e7f9      	b.n	8005d28 <STC_Clear+0x8>

08005d34 <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 8005d34:	2306      	movs	r3, #6
 8005d36:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8005d38:	4770      	bx	lr
 8005d3a:	46c0      	nop			; (mov r8, r8)

08005d3c <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8005d3c:	230a      	movs	r3, #10
 8005d3e:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8005d40:	4770      	bx	lr
 8005d42:	46c0      	nop			; (mov r8, r8)

08005d44 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005d44:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8005d46:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005d48:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005d4a:	4770      	bx	lr

08005d4c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005d4e:	7803      	ldrb	r3, [r0, #0]
{
 8005d50:	0004      	movs	r4, r0
 8005d52:	000d      	movs	r5, r1
 8005d54:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d012      	beq.n	8005d80 <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005d5a:	2306      	movs	r3, #6
 8005d5c:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005d5e:	8bc3      	ldrh	r3, [r0, #30]
 8005d60:	4299      	cmp	r1, r3
 8005d62:	dd01      	ble.n	8005d68 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8005d64:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8005d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8005d68:	2224      	movs	r2, #36	; 0x24
 8005d6a:	5e83      	ldrsh	r3, [r0, r2]
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	dcf9      	bgt.n	8005d64 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8005d70:	8c03      	ldrh	r3, [r0, #32]
 8005d72:	4299      	cmp	r1, r3
 8005d74:	da0e      	bge.n	8005d94 <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8005d76:	2222      	movs	r2, #34	; 0x22
 8005d78:	5e83      	ldrsh	r3, [r0, r2]
 8005d7a:	428b      	cmp	r3, r1
 8005d7c:	dbf2      	blt.n	8005d64 <STC_ExecRamp+0x18>
 8005d7e:	e009      	b.n	8005d94 <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005d80:	f7ff ffdc 	bl	8005d3c <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005d84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005d86:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005d88:	429d      	cmp	r5, r3
 8005d8a:	dceb      	bgt.n	8005d64 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005d8c:	2228      	movs	r2, #40	; 0x28
 8005d8e:	5ea3      	ldrsh	r3, [r4, r2]
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dce7      	bgt.n	8005d64 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8005d94:	2e00      	cmp	r6, #0
 8005d96:	d109      	bne.n	8005dac <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005d98:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005d9a:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d015      	beq.n	8005dcc <STC_ExecRamp+0x80>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005da0:	60a5      	str	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	2001      	movs	r0, #1
 8005da6:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8005da8:	61a3      	str	r3, [r4, #24]
 8005daa:	e7dc      	b.n	8005d66 <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 8005dac:	21fa      	movs	r1, #250	; 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005dae:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005db0:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 8005db2:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005db4:	4370      	muls	r0, r6
        wAux /= 1000U;
 8005db6:	f7fa f9a7 	bl	8000108 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005dba:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 8005dbc:	1c41      	adds	r1, r0, #1
 8005dbe:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005dc0:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005dc2:	f7fa fa2b 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8005dc6:	61a0      	str	r0, [r4, #24]
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7cc      	b.n	8005d66 <STC_ExecRamp+0x1a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005dcc:	6065      	str	r5, [r4, #4]
 8005dce:	e7e8      	b.n	8005da2 <STC_ExecRamp+0x56>

08005dd0 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005dd4:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005dd6:	4770      	bx	lr

08005dd8 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005dd8:	7802      	ldrb	r2, [r0, #0]
{
 8005dda:	b570      	push	{r4, r5, r6, lr}
 8005ddc:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005dde:	2a04      	cmp	r2, #4
 8005de0:	d022      	beq.n	8005e28 <STC_CalcTorqueReference+0x50>
    {
      wCurrentReference = pHandle->TorqueRef;
    }
    else
    {
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8005de2:	6845      	ldr	r5, [r0, #4]
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8005de4:	68e3      	ldr	r3, [r4, #12]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d908      	bls.n	8005dfc <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8005dea:	69a1      	ldr	r1, [r4, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8005dec:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005dee:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 8005df0:	60e3      	str	r3, [r4, #12]
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005df2:	1428      	asrs	r0, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005df4:	2a03      	cmp	r2, #3
 8005df6:	d00b      	beq.n	8005e10 <STC_CalcTorqueReference+0x38>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005df8:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d1f8      	bne.n	8005df2 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005e00:	2302      	movs	r3, #2
 8005e02:	5ee5      	ldrsh	r5, [r4, r3]
      pHandle->RampRemainingStep = 0U;
 8005e04:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005e06:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005e08:	60e3      	str	r3, [r4, #12]
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005e0a:	1428      	asrs	r0, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005e0c:	2a03      	cmp	r2, #3
 8005e0e:	d1f3      	bne.n	8005df8 <STC_CalcTorqueReference+0x20>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005e10:	6960      	ldr	r0, [r4, #20]
 8005e12:	f7ff ff2b 	bl	8005c6c <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8005e16:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8005e18:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8005e1a:	b209      	sxth	r1, r1
 8005e1c:	6920      	ldr	r0, [r4, #16]
 8005e1e:	f7ff f8eb 	bl	8004ff8 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8005e22:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005e24:	0405      	lsls	r5, r0, #16
 8005e26:	e7e7      	b.n	8005df8 <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 8005e28:	6885      	ldr	r5, [r0, #8]
 8005e2a:	e7db      	b.n	8005de4 <STC_CalcTorqueReference+0xc>

08005e2c <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 8005e2c:	232c      	movs	r3, #44	; 0x2c
 8005e2e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005e30:	4770      	bx	lr
 8005e32:	46c0      	nop			; (mov r8, r8)

08005e34 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8005e34:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8005e36:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 8005e38:	041b      	lsls	r3, r3, #16
{
 8005e3a:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8005e3c:	4318      	orrs	r0, r3
}
 8005e3e:	b002      	add	sp, #8
 8005e40:	4770      	bx	lr
 8005e42:	46c0      	nop			; (mov r8, r8)

08005e44 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8005e44:	b510      	push	{r4, lr}
 8005e46:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8005e48:	6940      	ldr	r0, [r0, #20]
 8005e4a:	f7ff ff0f 	bl	8005c6c <SPD_GetAvrgMecSpeedUnit>
 8005e4e:	0400      	lsls	r0, r0, #16
 8005e50:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8005e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e56:	46de      	mov	lr, fp
 8005e58:	4657      	mov	r7, sl
 8005e5a:	464e      	mov	r6, r9
 8005e5c:	4645      	mov	r5, r8
 8005e5e:	b5e0      	push	{r5, r6, r7, lr}
 8005e60:	0004      	movs	r4, r0
 8005e62:	b08f      	sub	sp, #60	; 0x3c
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d100      	bne.n	8005e6a <STO_PLL_CalcElAngle+0x16>
 8005e68:	e0e6      	b.n	8006038 <STO_PLL_CalcElAngle+0x1e4>
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	d100      	bne.n	8005e70 <STO_PLL_CalcElAngle+0x1c>
 8005e6e:	e0e3      	b.n	8006038 <STO_PLL_CalcElAngle+0x1e4>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8005e70:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005e72:	4698      	mov	r8, r3
 8005e74:	232e      	movs	r3, #46	; 0x2e
 8005e76:	5ec2      	ldrsh	r2, [r0, r3]
 8005e78:	03d3      	lsls	r3, r2, #15
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	4598      	cmp	r8, r3
 8005e7e:	dc00      	bgt.n	8005e82 <STO_PLL_CalcElAngle+0x2e>
 8005e80:	e0e8      	b.n	8006054 <STO_PLL_CalcElAngle+0x200>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8005e82:	4698      	mov	r8, r3
 8005e84:	6683      	str	r3, [r0, #104]	; 0x68
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8005e86:	228f      	movs	r2, #143	; 0x8f
 8005e88:	4640      	mov	r0, r8
 8005e8a:	0052      	lsls	r2, r2, #1
 8005e8c:	5aa2      	ldrh	r2, [r4, r2]
 8005e8e:	4110      	asrs	r0, r2
 8005e90:	9003      	str	r0, [sp, #12]
 8005e92:	b200      	sxth	r0, r0
 8005e94:	4683      	mov	fp, r0
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8005e96:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005e98:	9001      	str	r0, [sp, #4]
 8005e9a:	4283      	cmp	r3, r0
 8005e9c:	da00      	bge.n	8005ea0 <STO_PLL_CalcElAngle+0x4c>
 8005e9e:	e0d6      	b.n	800604e <STO_PLL_CalcElAngle+0x1fa>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8005ea0:	425b      	negs	r3, r3
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	dc00      	bgt.n	8005ea8 <STO_PLL_CalcElAngle+0x54>
 8005ea6:	e0d2      	b.n	800604e <STO_PLL_CalcElAngle+0x1fa>
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	4113      	asrs	r3, r2
 8005eac:	9304      	str	r3, [sp, #16]
 8005eae:	b21b      	sxth	r3, r3
 8005eb0:	469a      	mov	sl, r3
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8005eb2:	232c      	movs	r3, #44	; 0x2c
 8005eb4:	5ee0      	ldrsh	r0, [r4, r3]
 8005eb6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005eb8:	03c3      	lsls	r3, r0, #15
 8005eba:	1a1b      	subs	r3, r3, r0
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	dc00      	bgt.n	8005ec2 <STO_PLL_CalcElAngle+0x6e>
 8005ec0:	e0cf      	b.n	8006062 <STO_PLL_CalcElAngle+0x20e>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	6623      	str	r3, [r4, #96]	; 0x60
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8005ec6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005ec8:	9002      	str	r0, [sp, #8]
 8005eca:	4283      	cmp	r3, r0
 8005ecc:	da00      	bge.n	8005ed0 <STO_PLL_CalcElAngle+0x7c>
 8005ece:	e0bb      	b.n	8006048 <STO_PLL_CalcElAngle+0x1f4>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	4298      	cmp	r0, r3
 8005ed4:	dc00      	bgt.n	8005ed8 <STO_PLL_CalcElAngle+0x84>
 8005ed6:	e0b7      	b.n	8006048 <STO_PLL_CalcElAngle+0x1f4>
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005ed8:	238e      	movs	r3, #142	; 0x8e
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	5ae0      	ldrh	r0, [r4, r3]
 8005ede:	0013      	movs	r3, r2

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8005ee0:	9f02      	ldr	r7, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005ee2:	4103      	asrs	r3, r0
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8005ee4:	4107      	asrs	r7, r0
 8005ee6:	9705      	str	r7, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8005ee8:	2602      	movs	r6, #2
 8005eea:	5f8f      	ldrsh	r7, [r1, r6]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8005eec:	8908      	ldrh	r0, [r1, #8]
 8005eee:	2600      	movs	r6, #0
 8005ef0:	5f8d      	ldrsh	r5, [r1, r6]
 8005ef2:	4345      	muls	r5, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8005ef4:	4378      	muls	r0, r7

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005ef6:	1400      	asrs	r0, r0, #16
 8005ef8:	9006      	str	r0, [sp, #24]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005efa:	2620      	movs	r6, #32
 8005efc:	5fa0      	ldrsh	r0, [r4, r6]
 8005efe:	b21f      	sxth	r7, r3
 8005f00:	4347      	muls	r7, r0
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8005f02:	1bd2      	subs	r2, r2, r7

    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005f04:	2622      	movs	r6, #34	; 0x22
 8005f06:	5fa7      	ldrsh	r7, [r4, r6]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f08:	142d      	asrs	r5, r5, #16
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005f0a:	003e      	movs	r6, r7
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005f0c:	888f      	ldrh	r7, [r1, #4]
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005f0e:	9607      	str	r6, [sp, #28]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005f10:	1bdb      	subs	r3, r3, r7
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005f12:	0037      	movs	r7, r6
 8005f14:	b21b      	sxth	r3, r3
 8005f16:	435f      	muls	r7, r3
 8005f18:	46bc      	mov	ip, r7
    wIalfa_est_Next += wAux;
 8005f1a:	4494      	add	ip, r2

    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8005f1c:	2628      	movs	r6, #40	; 0x28
 8005f1e:	5fa2      	ldrsh	r2, [r4, r6]
    wIalfa_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8005f20:	2624      	movs	r6, #36	; 0x24
 8005f22:	5fa7      	ldrsh	r7, [r4, r6]
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8005f24:	4355      	muls	r5, r2
    wIalfa_est_Next += wAux;
 8005f26:	4465      	add	r5, ip
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8005f28:	46bc      	mov	ip, r7
 8005f2a:	465f      	mov	r7, fp
 8005f2c:	4666      	mov	r6, ip
 8005f2e:	4377      	muls	r7, r6
    wIalfa_est_Next -= wAux;
 8005f30:	1bed      	subs	r5, r5, r7

    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f32:	4657      	mov	r7, sl
    wIalfa_est_Next -= wAux;
 8005f34:	950a      	str	r5, [sp, #40]	; 0x28
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8005f36:	2626      	movs	r6, #38	; 0x26
 8005f38:	5fa5      	ldrsh	r5, [r4, r6]
 8005f3a:	9508      	str	r5, [sp, #32]
 8005f3c:	436b      	muls	r3, r5
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f3e:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8005f40:	4443      	add	r3, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f42:	412f      	asrs	r7, r5
 8005f44:	9509      	str	r5, [sp, #36]	; 0x24
 8005f46:	003d      	movs	r5, r7
#else
    wAux = ((int32_t)hAux_Beta) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 8005f48:	272a      	movs	r7, #42	; 0x2a
 8005f4a:	5fe6      	ldrsh	r6, [r4, r7]
 8005f4c:	4375      	muls	r5, r6
 8005f4e:	46b1      	mov	r9, r6
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005f50:	270e      	movs	r7, #14
 8005f52:	5fe6      	ldrsh	r6, [r4, r7]
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005f54:	9f05      	ldr	r7, [sp, #20]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005f56:	4375      	muls	r5, r6
    wBemf_alfa_est_Next += wAux;
 8005f58:	18ed      	adds	r5, r5, r3
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005f5a:	b23b      	sxth	r3, r7
 8005f5c:	4358      	muls	r0, r3
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8005f5e:	9b02      	ldr	r3, [sp, #8]
    wBemf_alfa_est_Next += wAux;
 8005f60:	950b      	str	r5, [sp, #44]	; 0x2c
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8005f62:	1a18      	subs	r0, r3, r0
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8005f64:	88cb      	ldrh	r3, [r1, #6]
    wIbeta_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC5) * hVbeta;
    wIbeta_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 8005f66:	4651      	mov	r1, sl
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8005f68:	1afb      	subs	r3, r7, r3
    wAux = ((int32_t)pHandle->hC2) * hIbeta_err;
 8005f6a:	9f07      	ldr	r7, [sp, #28]
 8005f6c:	b21b      	sxth	r3, r3
 8005f6e:	435f      	muls	r7, r3
    wIbeta_est_Next += wAux;
 8005f70:	183f      	adds	r7, r7, r0
    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 8005f72:	9806      	ldr	r0, [sp, #24]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005f74:	46b0      	mov	r8, r6
    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 8005f76:	4342      	muls	r2, r0
    wIbeta_est_Next += wAux;
 8005f78:	19d2      	adds	r2, r2, r7
    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 8005f7a:	4667      	mov	r7, ip
 8005f7c:	434f      	muls	r7, r1
    wIbeta_est_Next -= wAux;
 8005f7e:	1bd7      	subs	r7, r2, r7

    wAux = ((int32_t)pHandle->hC4) * hIbeta_err;
 8005f80:	9a08      	ldr	r2, [sp, #32]
 8005f82:	4353      	muls	r3, r2
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8005f84:	9a01      	ldr	r2, [sp, #4]
 8005f86:	189e      	adds	r6, r3, r2

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005f88:	465a      	mov	r2, fp
 8005f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8c:	411a      	asrs	r2, r3
#else
    wAux = ((int32_t)hAux_Alfa) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 8005f8e:	464b      	mov	r3, r9
 8005f90:	435a      	muls	r2, r3
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8005f92:	4643      	mov	r3, r8
 8005f94:	435a      	muls	r2, r3
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8005f96:	2370      	movs	r3, #112	; 0x70
    wBemf_beta_est_Next -= wAux;
 8005f98:	1ab6      	subs	r6, r6, r2
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8005f9a:	465a      	mov	r2, fp
 8005f9c:	52e2      	strh	r2, [r4, r3]
    pHandle->hBemf_beta_est = hAux_Beta;
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	52e1      	strh	r1, [r4, r3]

    if (0 == pHandle->hForcedDirection)
 8005fa2:	33b2      	adds	r3, #178	; 0xb2
 8005fa4:	56e3      	ldrsb	r3, [r4, r3]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d162      	bne.n	8006070 <STO_PLL_CalcElAngle+0x21c>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8005faa:	4643      	mov	r3, r8
 8005fac:	43db      	mvns	r3, r3
 8005fae:	17db      	asrs	r3, r3, #31
 8005fb0:	4698      	mov	r8, r3
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	4b31      	ldr	r3, [pc, #196]	; (800607c <STO_PLL_CalcElAngle+0x228>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	4a31      	ldr	r2, [pc, #196]	; (8006080 <STO_PLL_CalcElAngle+0x22c>)
 8005fba:	4690      	mov	r8, r2
 8005fbc:	4498      	add	r8, r3
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	5ee0      	ldrsh	r0, [r4, r3]
 8005fc2:	f7fb fb1d 	bl	8001600 <MCM_Trig_Functions>
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8005fc6:	4642      	mov	r2, r8
 8005fc8:	9b04      	ldr	r3, [sp, #16]

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8005fca:	b201      	sxth	r1, r0
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8005fcc:	4353      	muls	r3, r2
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8005fce:	425b      	negs	r3, r3
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	4359      	muls	r1, r3
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8005fd4:	9b03      	ldr	r3, [sp, #12]
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8005fd6:	1400      	asrs	r0, r0, #16
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8005fd8:	4353      	muls	r3, r2
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8005fda:	b21b      	sxth	r3, r3
 8005fdc:	4358      	muls	r0, r3

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux1 = (int16_t)(wBeta_Cos_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005fde:	13c9      	asrs	r1, r1, #15
#else
  hAux1 = (int16_t)(wBeta_Cos_tmp / 32768);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux2 = (int16_t)(wAlfa_Sin_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005fe0:	13c0      	asrs	r0, r0, #15
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8005fe2:	b200      	sxth	r0, r0
 8005fe4:	b209      	sxth	r1, r1
 8005fe6:	1a09      	subs	r1, r1, r0
 8005fe8:	0020      	movs	r0, r4
 8005fea:	3034      	adds	r0, #52	; 0x34
 8005fec:	f7ff f804 	bl	8004ff8 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8005ff0:	23f4      	movs	r3, #244	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005ff2:	2287      	movs	r2, #135	; 0x87
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8005ff4:	8220      	strh	r0, [r4, #16]
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8005ff6:	5ce3      	ldrb	r3, [r4, r3]
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005ff8:	0052      	lsls	r2, r2, #1
  bBuffer_index++;
 8005ffa:	3301      	adds	r3, #1
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005ffc:	5ca2      	ldrb	r2, [r4, r2]
  bBuffer_index++;
 8005ffe:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006000:	429a      	cmp	r2, r3
 8006002:	d038      	beq.n	8006076 <STO_PLL_CalcElAngle+0x222>
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006004:	001a      	movs	r2, r3
 8006006:	2174      	movs	r1, #116	; 0x74
 8006008:	0052      	lsls	r2, r2, #1
 800600a:	18a2      	adds	r2, r4, r2
 800600c:	4689      	mov	r9, r1
 800600e:	5e55      	ldrsh	r5, [r2, r1]
 8006010:	46a8      	mov	r8, r5
 8006012:	2586      	movs	r5, #134	; 0x86
 8006014:	4641      	mov	r1, r8
 8006016:	006d      	lsls	r5, r5, #1
 8006018:	5361      	strh	r1, [r4, r5]
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800601a:	4649      	mov	r1, r9
 800601c:	5250      	strh	r0, [r2, r1]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800601e:	22f4      	movs	r2, #244	; 0xf4
 8006020:	54a3      	strb	r3, [r4, r2]
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006022:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ibeta_est = wIbeta_est_Next;
 8006024:	6667      	str	r7, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006026:	18c0      	adds	r0, r0, r3
    pHandle->Ialfa_est = wIalfa_est_Next;
 8006028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    pHandle->_Super.hElAngle += hRotor_Speed;
 800602a:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 800602c:	6623      	str	r3, [r4, #96]	; 0x60
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 800602e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006030:	80a0      	strh	r0, [r4, #4]
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 8006032:	66a3      	str	r3, [r4, #104]	; 0x68
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8006034:	66e6      	str	r6, [r4, #108]	; 0x6c
    retValue = pHandle->_Super.hElAngle;
 8006036:	e000      	b.n	800603a <STO_PLL_CalcElAngle+0x1e6>
    retValue = 0;
 8006038:	2000      	movs	r0, #0
}
 800603a:	b00f      	add	sp, #60	; 0x3c
 800603c:	bcf0      	pop	{r4, r5, r6, r7}
 800603e:	46bb      	mov	fp, r7
 8006040:	46b2      	mov	sl, r6
 8006042:	46a9      	mov	r9, r5
 8006044:	46a0      	mov	r8, r4
 8006046:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8006048:	6663      	str	r3, [r4, #100]	; 0x64
 800604a:	9302      	str	r3, [sp, #8]
 800604c:	e744      	b.n	8005ed8 <STO_PLL_CalcElAngle+0x84>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800604e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	e729      	b.n	8005ea8 <STO_PLL_CalcElAngle+0x54>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8006054:	425a      	negs	r2, r3
 8006056:	4590      	cmp	r8, r2
 8006058:	dd00      	ble.n	800605c <STO_PLL_CalcElAngle+0x208>
 800605a:	e714      	b.n	8005e86 <STO_PLL_CalcElAngle+0x32>
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800605c:	4690      	mov	r8, r2
 800605e:	6682      	str	r2, [r0, #104]	; 0x68
 8006060:	e711      	b.n	8005e86 <STO_PLL_CalcElAngle+0x32>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8006062:	4258      	negs	r0, r3
 8006064:	4282      	cmp	r2, r0
 8006066:	dd00      	ble.n	800606a <STO_PLL_CalcElAngle+0x216>
 8006068:	e72d      	b.n	8005ec6 <STO_PLL_CalcElAngle+0x72>
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800606a:	0002      	movs	r2, r0
 800606c:	6620      	str	r0, [r4, #96]	; 0x60
 800606e:	e72a      	b.n	8005ec6 <STO_PLL_CalcElAngle+0x72>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8006070:	b29b      	uxth	r3, r3
 8006072:	4698      	mov	r8, r3
 8006074:	e7a3      	b.n	8005fbe <STO_PLL_CalcElAngle+0x16a>
 8006076:	2200      	movs	r2, #0
    bBuffer_index = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	e7c4      	b.n	8006006 <STO_PLL_CalcElAngle+0x1b2>
 800607c:	ffff0002 	.word	0xffff0002
 8006080:	0000ffff 	.word	0x0000ffff

08006084 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	4647      	mov	r7, r8
 8006088:	46ce      	mov	lr, r9
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800608a:	2387      	movs	r3, #135	; 0x87
{
 800608c:	b580      	push	{r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	5cc6      	ldrb	r6, [r0, r3]
{
 8006092:	0005      	movs	r5, r0
 8006094:	4688      	mov	r8, r1
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006096:	2e00      	cmp	r6, #0
 8006098:	d100      	bne.n	800609c <STO_PLL_CalcAvrgMecSpeedUnit+0x18>
 800609a:	e0ab      	b.n	80061f4 <STO_PLL_CalcAvrgMecSpeedUnit+0x170>
 800609c:	0004      	movs	r4, r0
 800609e:	3474      	adds	r4, #116	; 0x74
 80060a0:	0022      	movs	r2, r4
 80060a2:	2300      	movs	r3, #0
    int32_t wAvrSpeed_dpp = (int32_t)0;
 80060a4:	2000      	movs	r0, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 80060a6:	2700      	movs	r7, #0
 80060a8:	5fd1      	ldrsh	r1, [r2, r7]
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80060aa:	3301      	adds	r3, #1
 80060ac:	b2db      	uxtb	r3, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 80060ae:	1840      	adds	r0, r0, r1
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80060b0:	3202      	adds	r2, #2
 80060b2:	429e      	cmp	r6, r3
 80060b4:	d1f7      	bne.n	80060a6 <STO_PLL_CalcAvrgMecSpeedUnit+0x22>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 80060b6:	0031      	movs	r1, r6
 80060b8:	f7fa f8b0 	bl	800021c <__divsi3>
 80060bc:	2200      	movs	r2, #0
 80060be:	0007      	movs	r7, r0
 80060c0:	2000      	movs	r0, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 80060c2:	2100      	movs	r1, #0
 80060c4:	5e63      	ldrsh	r3, [r4, r1]
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80060c6:	3201      	adds	r2, #1
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 80060c8:	1bdb      	subs	r3, r3, r7
      wError = (wError * wError);
 80060ca:	435b      	muls	r3, r3
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80060cc:	b2d2      	uxtb	r2, r2
      wAvrQuadraticError += wError;
 80060ce:	18c0      	adds	r0, r0, r3
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80060d0:	3402      	adds	r4, #2
 80060d2:	4296      	cmp	r6, r2
 80060d4:	d1f5      	bne.n	80060c2 <STO_PLL_CalcAvrgMecSpeedUnit+0x3e>
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 80060d6:	003c      	movs	r4, r7
 80060d8:	437c      	muls	r4, r7
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 80060da:	0031      	movs	r1, r6
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80060dc:	17e3      	asrs	r3, r4, #31
 80060de:	4699      	mov	r9, r3
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 80060e0:	f7fa f89c 	bl	800021c <__divsi3>
 80060e4:	0006      	movs	r6, r0
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 80060e6:	2388      	movs	r3, #136	; 0x88
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	0022      	movs	r2, r4
 80060ec:	5ae8      	ldrh	r0, [r5, r3]
 80060ee:	2100      	movs	r1, #0
 80060f0:	464b      	mov	r3, r9
 80060f2:	f7fa f97f 	bl	80003f4 <__aeabi_lmul>
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 80060f6:	064c      	lsls	r4, r1, #25
 80060f8:	09c0      	lsrs	r0, r0, #7
 80060fa:	4304      	orrs	r4, r0
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80060fc:	8b68      	ldrh	r0, [r5, #26]
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 80060fe:	78ab      	ldrb	r3, [r5, #2]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006100:	4378      	muls	r0, r7
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8006102:	69e9      	ldr	r1, [r5, #28]
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8006104:	4358      	muls	r0, r3
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8006106:	f7fa f889 	bl	800021c <__divsi3>
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800610a:	7869      	ldrb	r1, [r5, #1]
 800610c:	f7fa f886 	bl	800021c <__divsi3>
    *pMecSpeedUnit = (int16_t)wAux;
 8006110:	4642      	mov	r2, r8
 8006112:	b203      	sxth	r3, r0
 8006114:	8013      	strh	r3, [r2, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8006116:	81ab      	strh	r3, [r5, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006118:	2301      	movs	r3, #1
 800611a:	42b4      	cmp	r4, r6
 800611c:	dc00      	bgt.n	8006120 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800611e:	2300      	movs	r3, #0
    pHandle->IsSpeedReliable = bIs_Speed_Reliable;
 8006120:	22f5      	movs	r2, #245	; 0xf5
 8006122:	54ab      	strb	r3, [r5, r2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8006124:	2382      	movs	r3, #130	; 0x82
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	5ceb      	ldrb	r3, [r5, r3]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d115      	bne.n	800615a <STO_PLL_CalcAvrgMecSpeedUnit+0xd6>
    if (false == pHandle->IsAlgorithmConverged)
 800612e:	33f8      	adds	r3, #248	; 0xf8
 8006130:	5ceb      	ldrb	r3, [r5, r3]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02d      	beq.n	8006192 <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8006136:	42b4      	cmp	r4, r6
 8006138:	dc28      	bgt.n	800618c <STO_PLL_CalcAvrgMecSpeedUnit+0x108>
        pHandle->ReliabilityCounter++;
 800613a:	22f7      	movs	r2, #247	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800613c:	2118      	movs	r1, #24
        pHandle->ReliabilityCounter++;
 800613e:	5cab      	ldrb	r3, [r5, r2]
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8006140:	31ff      	adds	r1, #255	; 0xff
        pHandle->ReliabilityCounter++;
 8006142:	3301      	adds	r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	54ab      	strb	r3, [r5, r2]
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8006148:	5c69      	ldrb	r1, [r5, r1]
 800614a:	4299      	cmp	r1, r3
 800614c:	d821      	bhi.n	8006192 <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
          pHandle->ReliabilityCounter = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	54ab      	strb	r3, [r5, r2]
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006152:	78eb      	ldrb	r3, [r5, #3]
          bAux = false;
 8006154:	2000      	movs	r0, #0
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006156:	702b      	strb	r3, [r5, #0]
          bAux = false;
 8006158:	e01f      	b.n	800619a <STO_PLL_CalcAvrgMecSpeedUnit+0x116>
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800615a:	17c3      	asrs	r3, r0, #31
 800615c:	18c0      	adds	r0, r0, r3
 800615e:	4058      	eors	r0, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8006160:	238d      	movs	r3, #141	; 0x8d
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	5aeb      	ldrh	r3, [r5, r3]
 8006166:	4283      	cmp	r3, r0
 8006168:	dc1b      	bgt.n	80061a2 <STO_PLL_CalcAvrgMecSpeedUnit+0x11e>
    bool bIs_Bemf_Consistent = false;
 800616a:	2300      	movs	r3, #0
    int32_t wEstBemfSq = 0;
 800616c:	2000      	movs	r0, #0
    int32_t wObsBemfSq = 0;
 800616e:	2700      	movs	r7, #0
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8006170:	22f9      	movs	r2, #249	; 0xf9
 8006172:	54ab      	strb	r3, [r5, r2]
      pHandle->Obs_Bemf_Level = wObsBemfSq;
 8006174:	3203      	adds	r2, #3
 8006176:	50af      	str	r7, [r5, r2]
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8006178:	3204      	adds	r2, #4
 800617a:	50a8      	str	r0, [r5, r2]
    if (false == pHandle->IsAlgorithmConverged)
 800617c:	3a08      	subs	r2, #8
 800617e:	5caa      	ldrb	r2, [r5, r2]
 8006180:	2a00      	cmp	r2, #0
 8006182:	d006      	beq.n	8006192 <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8006184:	42b4      	cmp	r4, r6
 8006186:	ddd8      	ble.n	800613a <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0d6      	beq.n	800613a <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
        pHandle->ReliabilityCounter = 0U;
 800618c:	23f7      	movs	r3, #247	; 0xf7
 800618e:	2200      	movs	r2, #0
 8006190:	54ea      	strb	r2, [r5, r3]
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8006192:	4641      	mov	r1, r8
 8006194:	0028      	movs	r0, r5
 8006196:	f7ff fd71 	bl	8005c7c <SPD_IsMecSpeedReliable>
}
 800619a:	bcc0      	pop	{r6, r7}
 800619c:	46b9      	mov	r9, r7
 800619e:	46b0      	mov	r8, r6
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 80061a2:	2370      	movs	r3, #112	; 0x70
 80061a4:	5eeb      	ldrsh	r3, [r5, r3]
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 80061a6:	2272      	movs	r2, #114	; 0x72
 80061a8:	5eaf      	ldrsh	r7, [r5, r2]
        wObsBemfSq = wObsBemf * wObsBemf;
 80061aa:	435b      	muls	r3, r3
        wObsBemfSq += wObsBemf * wObsBemf;
 80061ac:	437f      	muls	r7, r7
 80061ae:	18ff      	adds	r7, r7, r3
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 80061b0:	03c3      	lsls	r3, r0, #15
 80061b2:	1a18      	subs	r0, r3, r0
 80061b4:	2314      	movs	r3, #20
 80061b6:	5ee9      	ldrsh	r1, [r5, r3]
 80061b8:	f7fa f830 	bl	800021c <__divsi3>
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 80061bc:	231a      	movs	r3, #26
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 80061be:	0002      	movs	r2, r0
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 80061c0:	33ff      	adds	r3, #255	; 0xff
 80061c2:	5ce9      	ldrb	r1, [r5, r3]
 80061c4:	3bda      	subs	r3, #218	; 0xda
 80061c6:	4341      	muls	r1, r0
 80061c8:	17c8      	asrs	r0, r1, #31
 80061ca:	4018      	ands	r0, r3
 80061cc:	1840      	adds	r0, r0, r1
 80061ce:	1180      	asrs	r0, r0, #6
        wEstBemfSq *= wEstBemf;
 80061d0:	4350      	muls	r0, r2
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 80061d2:	17c2      	asrs	r2, r0, #31
 80061d4:	4013      	ands	r3, r2
 80061d6:	228c      	movs	r2, #140	; 0x8c
 80061d8:	0052      	lsls	r2, r2, #1
 80061da:	5caa      	ldrb	r2, [r5, r2]
 80061dc:	181b      	adds	r3, r3, r0
 80061de:	119b      	asrs	r3, r3, #6
 80061e0:	435a      	muls	r2, r3
        if (wObsBemfSq > wEstBemfSqLo)
 80061e2:	2301      	movs	r3, #1
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 80061e4:	1a82      	subs	r2, r0, r2
        if (wObsBemfSq > wEstBemfSqLo)
 80061e6:	4297      	cmp	r7, r2
 80061e8:	dd01      	ble.n	80061ee <STO_PLL_CalcAvrgMecSpeedUnit+0x16a>
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e7c0      	b.n	8006170 <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
 80061ee:	2300      	movs	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e7bd      	b.n	8006170 <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	2600      	movs	r6, #0
 80061f8:	2400      	movs	r4, #0
 80061fa:	4699      	mov	r9, r3
    int32_t wAvrSpeed_dpp = (int32_t)0;
 80061fc:	2700      	movs	r7, #0
 80061fe:	e772      	b.n	80060e6 <STO_PLL_CalcAvrgMecSpeedUnit+0x62>

08006200 <STO_PLL_CalcAvrgElSpeedDpp>:
    int32_t wSum = pHandle->DppBufferSum;
 8006200:	2384      	movs	r3, #132	; 0x84
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	58c1      	ldr	r1, [r0, r3]
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8006206:	3306      	adds	r3, #6
{
 8006208:	b570      	push	{r4, r5, r6, lr}
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800620a:	5cc5      	ldrb	r5, [r0, r3]
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 800620c:	2310      	movs	r3, #16
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800620e:	22f4      	movs	r2, #244	; 0xf4
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 8006210:	33ff      	adds	r3, #255	; 0xff
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8006212:	5cc3      	ldrb	r3, [r0, r3]
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8006214:	5c82      	ldrb	r2, [r0, r2]
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8006216:	1aeb      	subs	r3, r5, r3
 8006218:	b29b      	uxth	r3, r3
    if (0 == hBufferSizeDiff)
 800621a:	2b00      	cmp	r3, #0
 800621c:	d113      	bne.n	8006246 <STO_PLL_CalcAvrgElSpeedDpp+0x46>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800621e:	3238      	adds	r2, #56	; 0x38
 8006220:	0052      	lsls	r2, r2, #1
 8006222:	1882      	adds	r2, r0, r2
 8006224:	2304      	movs	r3, #4
 8006226:	5ed3      	ldrsh	r3, [r2, r3]
 8006228:	2286      	movs	r2, #134	; 0x86
 800622a:	0052      	lsls	r2, r2, #1
 800622c:	185b      	adds	r3, r3, r1
 800622e:	5e82      	ldrsh	r2, [r0, r2]
 8006230:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8006232:	2290      	movs	r2, #144	; 0x90
 8006234:	0019      	movs	r1, r3
 8006236:	0052      	lsls	r2, r2, #1
 8006238:	5a82      	ldrh	r2, [r0, r2]
 800623a:	4111      	asrs	r1, r2
    pHandle->DppBufferSum = wSum;
 800623c:	2284      	movs	r2, #132	; 0x84
 800623e:	0052      	lsls	r2, r2, #1
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8006240:	81c1      	strh	r1, [r0, #14]
    pHandle->DppBufferSum = wSum;
 8006242:	5083      	str	r3, [r0, r2]
}
 8006244:	bd70      	pop	{r4, r5, r6, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8006246:	189b      	adds	r3, r3, r2
 8006248:	b29e      	uxth	r6, r3
 800624a:	b21b      	sxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800624c:	429d      	cmp	r5, r3
 800624e:	dc01      	bgt.n	8006254 <STO_PLL_CalcAvrgElSpeedDpp+0x54>
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8006250:	1b76      	subs	r6, r6, r5
 8006252:	b233      	sxth	r3, r6
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8006254:	3238      	adds	r2, #56	; 0x38
 8006256:	0052      	lsls	r2, r2, #1
 8006258:	1882      	adds	r2, r0, r2
 800625a:	3338      	adds	r3, #56	; 0x38
 800625c:	2404      	movs	r4, #4
 800625e:	5f12      	ldrsh	r2, [r2, r4]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	18c3      	adds	r3, r0, r3
 8006264:	1852      	adds	r2, r2, r1
 8006266:	2104      	movs	r1, #4
 8006268:	5e5b      	ldrsh	r3, [r3, r1]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	e7e1      	b.n	8006232 <STO_PLL_CalcAvrgElSpeedDpp+0x32>
 800626e:	46c0      	nop			; (mov r8, r8)

08006270 <STO_PLL_Clear>:
    pHandle->Ialfa_est = (int32_t)0;
 8006270:	2300      	movs	r3, #0
    pHandle->ConsistencyCounter = 0u;
 8006272:	22f6      	movs	r2, #246	; 0xf6
{
 8006274:	b510      	push	{r4, lr}
    pHandle->Ialfa_est = (int32_t)0;
 8006276:	6603      	str	r3, [r0, #96]	; 0x60
    pHandle->Ibeta_est = (int32_t)0;
 8006278:	6643      	str	r3, [r0, #100]	; 0x64
    pHandle->wBemf_alfa_est = (int32_t)0;
 800627a:	6683      	str	r3, [r0, #104]	; 0x68
    pHandle->wBemf_beta_est = (int32_t)0;
 800627c:	66c3      	str	r3, [r0, #108]	; 0x6c
    pHandle->_Super.hElAngle = (int16_t)0;
 800627e:	8083      	strh	r3, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8006280:	81c3      	strh	r3, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8006282:	5283      	strh	r3, [r0, r2]
    pHandle->IsAlgorithmConverged = false;
 8006284:	3202      	adds	r2, #2
 8006286:	5283      	strh	r3, [r0, r2]
    pHandle->Obs_Bemf_Level = (int32_t)0;
 8006288:	3204      	adds	r2, #4
 800628a:	5083      	str	r3, [r0, r2]
    pHandle->Est_Bemf_Level = (int32_t)0;
 800628c:	3204      	adds	r2, #4
 800628e:	5083      	str	r3, [r0, r2]
    pHandle->DppBufferSum = (int32_t)0;
 8006290:	3208      	adds	r2, #8
 8006292:	5083      	str	r3, [r0, r2]
    pHandle->ForceConvergency = false;
 8006294:	321a      	adds	r2, #26
 8006296:	5283      	strh	r3, [r0, r2]
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8006298:	330f      	adds	r3, #15
 800629a:	33ff      	adds	r3, #255	; 0xff
 800629c:	5cc2      	ldrb	r2, [r0, r3]
{
 800629e:	0004      	movs	r4, r0

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d004      	beq.n	80062ae <STO_PLL_Clear+0x3e>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80062a4:	2100      	movs	r1, #0
 80062a6:	0052      	lsls	r2, r2, #1
 80062a8:	3074      	adds	r0, #116	; 0x74
 80062aa:	f000 f9fd 	bl	80066a8 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	22f4      	movs	r2, #244	; 0xf4
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80062b2:	0020      	movs	r0, r4
  pHandle->Speed_Buffer_Index = 0U;
 80062b4:	54a3      	strb	r3, [r4, r2]
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 80062b6:	3218      	adds	r2, #24
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80062b8:	2100      	movs	r1, #0
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 80062ba:	52a3      	strh	r3, [r4, r2]
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80062bc:	3034      	adds	r0, #52	; 0x34
 80062be:	f7fe fe91 	bl	8004fe4 <PID_SetIntegralTerm>
}
 80062c2:	bd10      	pop	{r4, pc}

080062c4 <STO_PLL_Init>:
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80062c4:	238b      	movs	r3, #139	; 0x8b
{
 80062c6:	b570      	push	{r4, r5, r6, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	5cc2      	ldrb	r2, [r0, r3]
 80062cc:	3b20      	subs	r3, #32
 80062ce:	54c2      	strb	r2, [r0, r3]
    pHandle->EnableDualCheck = true;
 80062d0:	2201      	movs	r2, #1
 80062d2:	330e      	adds	r3, #14
 80062d4:	54c2      	strb	r2, [r0, r3]
    pHandle->F3POW2 = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	8643      	strh	r3, [r0, #50]	; 0x32
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 80062da:	232e      	movs	r3, #46	; 0x2e
 80062dc:	5ec5      	ldrsh	r5, [r0, r3]
{
 80062de:	0004      	movs	r4, r0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 80062e0:	0029      	movs	r1, r5
 80062e2:	4813      	ldr	r0, [pc, #76]	; (8006330 <STO_PLL_Init+0x6c>)
 80062e4:	f7f9 ff9a 	bl	800021c <__divsi3>
 80062e8:	b203      	sxth	r3, r0
    while (htempk != 0)
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01d      	beq.n	800632a <STO_PLL_Init+0x66>
 80062ee:	2201      	movs	r2, #1
    wAux = ((int32_t)1);
 80062f0:	2101      	movs	r1, #1
      htempk /= ((int16_t)2);
 80062f2:	0fd8      	lsrs	r0, r3, #31
 80062f4:	18c3      	adds	r3, r0, r3
 80062f6:	0010      	movs	r0, r2
    while (htempk != 0)
 80062f8:	3201      	adds	r2, #1
      htempk /= ((int16_t)2);
 80062fa:	105b      	asrs	r3, r3, #1
      wAux *= ((int32_t)2);
 80062fc:	0049      	lsls	r1, r1, #1
    while (htempk != 0)
 80062fe:	b292      	uxth	r2, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f6      	bne.n	80062f2 <STO_PLL_Init+0x2e>
    pHandle->hF3 = (int16_t)wAux;
 8006304:	b209      	sxth	r1, r1
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8006306:	434d      	muls	r5, r1
 8006308:	8660      	strh	r0, [r4, #50]	; 0x32
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800630a:	0028      	movs	r0, r5
    pHandle->hF3 = (int16_t)wAux;
 800630c:	8621      	strh	r1, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800630e:	4909      	ldr	r1, [pc, #36]	; (8006334 <STO_PLL_Init+0x70>)
 8006310:	f7f9 ff84 	bl	800021c <__divsi3>
 8006314:	8560      	strh	r0, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 8006316:	0020      	movs	r0, r4
 8006318:	f7ff ffaa 	bl	8006270 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800631c:	0020      	movs	r0, r4
 800631e:	3034      	adds	r0, #52	; 0x34
 8006320:	f7fe fe4c 	bl	8004fbc <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	8263      	strh	r3, [r4, #18]
}
 8006328:	bd70      	pop	{r4, r5, r6, pc}
    while (htempk != 0)
 800632a:	2101      	movs	r1, #1
 800632c:	e7ed      	b.n	800630a <STO_PLL_Init+0x46>
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	000fea5e 	.word	0x000fea5e
 8006334:	000028be 	.word	0x000028be

08006338 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 8006338:	2224      	movs	r2, #36	; 0x24
{
 800633a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (true == pHandle->ForceConvergency2)
 800633c:	32ff      	adds	r2, #255	; 0xff
 800633e:	5c82      	ldrb	r2, [r0, r2]
{
 8006340:	0003      	movs	r3, r0
    if (true == pHandle->ForceConvergency2)
 8006342:	2a00      	cmp	r2, #0
 8006344:	d002      	beq.n	800634c <STO_PLL_IsObserverConverged+0x14>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006346:	200c      	movs	r0, #12
 8006348:	5e1a      	ldrsh	r2, [r3, r0]
 800634a:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800634c:	2291      	movs	r2, #145	; 0x91
 800634e:	0052      	lsls	r2, r2, #1
 8006350:	5c98      	ldrb	r0, [r3, r2]
 8006352:	2800      	cmp	r0, #0
 8006354:	d006      	beq.n	8006364 <STO_PLL_IsObserverConverged+0x2c>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8006356:	22f8      	movs	r2, #248	; 0xf8
 8006358:	2101      	movs	r1, #1
 800635a:	5499      	strb	r1, [r3, r2]
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800635c:	2200      	movs	r2, #0
      bAux = true;
 800635e:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8006360:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006364:	220c      	movs	r2, #12
 8006366:	5e9c      	ldrsh	r4, [r3, r2]
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8006368:	2500      	movs	r5, #0
 800636a:	5f4a      	ldrsh	r2, [r1, r5]
 800636c:	0015      	movs	r5, r2
 800636e:	4365      	muls	r5, r4
 8006370:	0016      	movs	r6, r2
      if (wtemp > 0)
 8006372:	2d00      	cmp	r5, #0
 8006374:	ddf5      	ble.n	8006362 <STO_PLL_IsObserverConverged+0x2a>
        if (hEstimatedSpeedUnit < 0)
 8006376:	2c00      	cmp	r4, #0
 8006378:	db34      	blt.n	80063e4 <STO_PLL_IsObserverConverged+0xac>
        if (*phForcedMecSpeedUnit < 0)
 800637a:	2a00      	cmp	r2, #0
 800637c:	db2e      	blt.n	80063dc <STO_PLL_IsObserverConverged+0xa4>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800637e:	2289      	movs	r2, #137	; 0x89
 8006380:	0052      	lsls	r2, r2, #1
 8006382:	5c99      	ldrb	r1, [r3, r2]
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8006384:	2214      	movs	r2, #20
 8006386:	32ff      	adds	r2, #255	; 0xff
 8006388:	5c9d      	ldrb	r5, [r3, r2]
        if (true == pHandle->IsSpeedReliable)
 800638a:	3a1e      	subs	r2, #30
 800638c:	5c9a      	ldrb	r2, [r3, r2]
 800638e:	2a00      	cmp	r2, #0
 8006390:	d020      	beq.n	80063d4 <STO_PLL_IsObserverConverged+0x9c>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8006392:	228a      	movs	r2, #138	; 0x8a
 8006394:	0052      	lsls	r2, r2, #1
 8006396:	5a9f      	ldrh	r7, [r3, r2]
 8006398:	b2a2      	uxth	r2, r4
 800639a:	4297      	cmp	r7, r2
 800639c:	d21a      	bcs.n	80063d4 <STO_PLL_IsObserverConverged+0x9c>
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800639e:	270f      	movs	r7, #15
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80063a0:	4375      	muls	r5, r6
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 80063a2:	17ea      	asrs	r2, r5, #31
 80063a4:	403a      	ands	r2, r7
 80063a6:	1952      	adds	r2, r2, r5
 80063a8:	1112      	asrs	r2, r2, #4
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 80063aa:	b212      	sxth	r2, r2
 80063ac:	4294      	cmp	r4, r2
 80063ae:	db11      	blt.n	80063d4 <STO_PLL_IsObserverConverged+0x9c>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80063b0:	434e      	muls	r6, r1
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 80063b2:	17f2      	asrs	r2, r6, #31
 80063b4:	4017      	ands	r7, r2
 80063b6:	19bf      	adds	r7, r7, r6
 80063b8:	113a      	asrs	r2, r7, #4
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 80063ba:	b212      	sxth	r2, r2
 80063bc:	4294      	cmp	r4, r2
 80063be:	dc09      	bgt.n	80063d4 <STO_PLL_IsObserverConverged+0x9c>
                pHandle->ConsistencyCounter++;
 80063c0:	21f6      	movs	r1, #246	; 0xf6
 80063c2:	5c5a      	ldrb	r2, [r3, r1]
 80063c4:	3201      	adds	r2, #1
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	545a      	strb	r2, [r3, r1]
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80063ca:	3120      	adds	r1, #32
 80063cc:	5c59      	ldrb	r1, [r3, r1]
 80063ce:	4291      	cmp	r1, r2
 80063d0:	d9c1      	bls.n	8006356 <STO_PLL_IsObserverConverged+0x1e>
 80063d2:	e7c6      	b.n	8006362 <STO_PLL_IsObserverConverged+0x2a>
                pHandle->ConsistencyCounter = 0U;
 80063d4:	22f6      	movs	r2, #246	; 0xf6
 80063d6:	2100      	movs	r1, #0
 80063d8:	5499      	strb	r1, [r3, r2]
 80063da:	e7c2      	b.n	8006362 <STO_PLL_IsObserverConverged+0x2a>
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 80063dc:	4252      	negs	r2, r2
 80063de:	b216      	sxth	r6, r2
 80063e0:	800e      	strh	r6, [r1, #0]
 80063e2:	e7cc      	b.n	800637e <STO_PLL_IsObserverConverged+0x46>
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 80063e4:	4264      	negs	r4, r4
 80063e6:	b224      	sxth	r4, r4
        if (*phForcedMecSpeedUnit < 0)
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	dac8      	bge.n	800637e <STO_PLL_IsObserverConverged+0x46>
 80063ec:	e7f6      	b.n	80063dc <STO_PLL_IsObserverConverged+0xa4>
 80063ee:	46c0      	nop			; (mov r8, r8)

080063f0 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 80063f0:	6f00      	ldr	r0, [r0, #112]	; 0x70
{
 80063f2:	b082      	sub	sp, #8
  return (vaux);
 80063f4:	0c02      	lsrs	r2, r0, #16
 80063f6:	0400      	lsls	r0, r0, #16
 80063f8:	0412      	lsls	r2, r2, #16
 80063fa:	0c00      	lsrs	r0, r0, #16
 80063fc:	4310      	orrs	r0, r2
}
 80063fe:	b002      	add	sp, #8
 8006400:	4770      	bx	lr
 8006402:	46c0      	nop			; (mov r8, r8)

08006404 <STO_PLL_GetObserverGains>:
  * @brief  Exports current observer gains from @p pHandle and to parameters @p phC2 and @p phC4.
  * 
  */
//cstat !MISRAC2012-Rule-8.13
__weak void STO_PLL_GetObserverGains(STO_PLL_Handle_t *pHandle, int16_t *phC2, int16_t *phC4)
{
 8006404:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8006406:	2422      	movs	r4, #34	; 0x22
 8006408:	5f03      	ldrsh	r3, [r0, r4]
 800640a:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800640c:	2126      	movs	r1, #38	; 0x26
 800640e:	5e43      	ldrsh	r3, [r0, r1]
 8006410:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8006412:	bd10      	pop	{r4, pc}

08006414 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8006414:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 8006416:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8006418:	4770      	bx	lr
 800641a:	46c0      	nop			; (mov r8, r8)

0800641c <STO_OTF_ResetPLL>:
  * @brief  Resets the PLL integral term during on-the-fly startup.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_OTF_ResetPLL(STO_Handle_t * pHandle)
{
 800641c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800641e:	6800      	ldr	r0, [r0, #0]
 8006420:	2100      	movs	r1, #0
 8006422:	3034      	adds	r0, #52	; 0x34
 8006424:	f7fe fdde 	bl	8004fe4 <PID_SetIntegralTerm>
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8006428:	bd10      	pop	{r4, pc}
 800642a:	46c0      	nop			; (mov r8, r8)

0800642c <STO_ResetPLL>:
  * @brief  Resets the PLL integral term.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_ResetPLL(STO_PLL_Handle_t *pHandle)
{
 800642c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800642e:	2100      	movs	r1, #0
 8006430:	3034      	adds	r0, #52	; 0x34
 8006432:	f7fe fdd7 	bl	8004fe4 <PID_SetIntegralTerm>
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8006436:	bd10      	pop	{r4, pc}

08006438 <STO_PLL_GetEstimatedBemfLevel>:
__weak int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	58c0      	ldr	r0, [r0, r3]
#endif
}
 800643e:	4770      	bx	lr

08006440 <STO_PLL_GetObservedBemfLevel>:
__weak int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8006440:	23fc      	movs	r3, #252	; 0xfc
 8006442:	58c0      	ldr	r0, [r0, r3]
#endif
}
 8006444:	4770      	bx	lr
 8006446:	46c0      	nop			; (mov r8, r8)

08006448 <STO_PLL_IsVarianceTight>:
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
 8006448:	23f5      	movs	r3, #245	; 0xf5
    tempStatus = pHdl->IsSpeedReliable;
 800644a:	6802      	ldr	r2, [r0, #0]
  return (tempStatus);
 800644c:	5cd0      	ldrb	r0, [r2, r3]
}
 800644e:	4770      	bx	lr

08006450 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8006450:	2391      	movs	r3, #145	; 0x91
 8006452:	2101      	movs	r1, #1
 8006454:	6802      	ldr	r2, [r0, #0]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	54d1      	strb	r1, [r2, r3]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800645a:	4770      	bx	lr

0800645c <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800645c:	2324      	movs	r3, #36	; 0x24
 800645e:	2101      	movs	r1, #1
 8006460:	6802      	ldr	r2, [r0, #0]
 8006462:	33ff      	adds	r3, #255	; 0xff
 8006464:	54d1      	strb	r1, [r2, r3]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8006466:	4770      	bx	lr

08006468 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8006468:	2392      	movs	r3, #146	; 0x92
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	54c1      	strb	r1, [r0, r3]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800646e:	4770      	bx	lr

08006470 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8006470:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006472:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8006474:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 8006476:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8006478:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800647a:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 800647c:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 800647e:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->hRemainingStep = 0U;
 8006480:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8006482:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006484:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8006486:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006488:	4770      	bx	lr
 800648a:	46c0      	nop			; (mov r8, r8)

0800648c <VSS_Init>:
{
 800648c:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 800648e:	f7ff ffef 	bl	8006470 <VSS_Clear>
}
 8006492:	bd10      	pop	{r4, pc}

08006494 <VSS_CalcElAngle>:
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 8006494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006496:	46c6      	mov	lr, r8
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8006498:	2333      	movs	r3, #51	; 0x33
{
 800649a:	b500      	push	{lr}
    if (true == pHandle->bCopyObserver)
 800649c:	5cc3      	ldrb	r3, [r0, r3]
{
 800649e:	0004      	movs	r4, r0
 80064a0:	000e      	movs	r6, r1
    if (true == pHandle->bCopyObserver)
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 80064a6:	2300      	movs	r3, #0
 80064a8:	5ecd      	ldrsh	r5, [r1, r3]
    pHandle->_Super.hElAngle = hRetAngle;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 80064aa:	0028      	movs	r0, r5
    pHandle->_Super.hElAngle = hRetAngle;
 80064ac:	80a5      	strh	r5, [r4, #4]
}
 80064ae:	bc80      	pop	{r7}
 80064b0:	46b8      	mov	r8, r7
 80064b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80064b4:	230e      	movs	r3, #14
 80064b6:	5ec7      	ldrsh	r7, [r0, r3]
 80064b8:	8e05      	ldrh	r5, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80064ba:	7841      	ldrb	r1, [r0, #1]
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80064bc:	19ed      	adds	r5, r5, r7
 80064be:	b2ab      	uxth	r3, r5
 80064c0:	b22d      	sxth	r5, r5
 80064c2:	8605      	strh	r5, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80064c4:	0038      	movs	r0, r7
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80064c6:	4698      	mov	r8, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80064c8:	f7f9 fea8 	bl	800021c <__divsi3>
 80064cc:	88e3      	ldrh	r3, [r4, #6]
 80064ce:	18c0      	adds	r0, r0, r3
      if (true == pHandle->bTransitionStarted)
 80064d0:	232c      	movs	r3, #44	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80064d2:	80e0      	strh	r0, [r4, #6]
      if (true == pHandle->bTransitionStarted)
 80064d4:	5ce3      	ldrb	r3, [r4, r3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0e7      	beq.n	80064aa <VSS_CalcElAngle+0x16>
        if (0 == pHandle->hTransitionRemainingSteps)
 80064da:	232e      	movs	r3, #46	; 0x2e
 80064dc:	5ee0      	ldrsh	r0, [r4, r3]
 80064de:	2800      	cmp	r0, #0
 80064e0:	d01a      	beq.n	8006518 <VSS_CalcElAngle+0x84>
          pHandle->hTransitionRemainingSteps--;
 80064e2:	3801      	subs	r0, #1
 80064e4:	b200      	sxth	r0, r0
 80064e6:	85e0      	strh	r0, [r4, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	db22      	blt.n	8006532 <VSS_CalcElAngle+0x9e>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80064ec:	4643      	mov	r3, r8
 80064ee:	8837      	ldrh	r7, [r6, #0]
 80064f0:	1afe      	subs	r6, r7, r3
 80064f2:	2301      	movs	r3, #1
 80064f4:	4698      	mov	r8, r3
 80064f6:	b236      	sxth	r6, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80064f8:	2336      	movs	r3, #54	; 0x36
 80064fa:	5ee1      	ldrsh	r1, [r4, r3]
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 80064fc:	4370      	muls	r0, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80064fe:	f7f9 fe8d 	bl	800021c <__divsi3>
          hAngleCorr *= hSignCorr;
 8006502:	4643      	mov	r3, r8
 8006504:	4358      	muls	r0, r3
            pHandle->bTransitionLocked = true;
 8006506:	2332      	movs	r3, #50	; 0x32
          hAngleCorr *= hSignCorr;
 8006508:	b280      	uxth	r0, r0
          if (hAngleDiff >= 0)
 800650a:	2e00      	cmp	r6, #0
 800650c:	db0b      	blt.n	8006526 <VSS_CalcElAngle+0x92>
            pHandle->bTransitionLocked = true;
 800650e:	2201      	movs	r2, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006510:	1a38      	subs	r0, r7, r0
            pHandle->bTransitionLocked = true;
 8006512:	54e2      	strb	r2, [r4, r3]
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006514:	b205      	sxth	r5, r0
 8006516:	e7c8      	b.n	80064aa <VSS_CalcElAngle+0x16>
          hRetAngle = *(int16_t *)pInputVars_str;
 8006518:	2300      	movs	r3, #0
 800651a:	5ef5      	ldrsh	r5, [r6, r3]
          pHandle->bTransitionEnded = true;
 800651c:	2201      	movs	r2, #1
 800651e:	232d      	movs	r3, #45	; 0x2d
 8006520:	54e2      	strb	r2, [r4, r3]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8006522:	7020      	strb	r0, [r4, #0]
 8006524:	e7c1      	b.n	80064aa <VSS_CalcElAngle+0x16>
            if (false == pHandle->bTransitionLocked)
 8006526:	5ce3      	ldrb	r3, [r4, r3]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0be      	beq.n	80064aa <VSS_CalcElAngle+0x16>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800652c:	19c0      	adds	r0, r0, r7
 800652e:	b205      	sxth	r5, r0
 8006530:	e7bb      	b.n	80064aa <VSS_CalcElAngle+0x16>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8006532:	4643      	mov	r3, r8
 8006534:	8837      	ldrh	r7, [r6, #0]
 8006536:	1bde      	subs	r6, r3, r7
 8006538:	4b01      	ldr	r3, [pc, #4]	; (8006540 <VSS_CalcElAngle+0xac>)
 800653a:	b236      	sxth	r6, r6
 800653c:	4698      	mov	r8, r3
 800653e:	e7db      	b.n	80064f8 <VSS_CalcElAngle+0x64>
 8006540:	0000ffff 	.word	0x0000ffff

08006544 <VSS_CalcAvrgMecSpeedUnit>:
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into
  * TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 8006544:	b570      	push	{r4, r5, r6, lr}
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8006546:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8006548:	0004      	movs	r4, r0
 800654a:	000d      	movs	r5, r1
    if (pHandle->hRemainingStep > 1u)
 800654c:	2b01      	cmp	r3, #1
 800654e:	d91c      	bls.n	800658a <VSS_CalcAvrgMecSpeedUnit+0x46>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006550:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006552:	6a02      	ldr	r2, [r0, #32]
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8006554:	69e1      	ldr	r1, [r4, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006556:	189b      	adds	r3, r3, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8006558:	8b42      	ldrh	r2, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800655a:	6243      	str	r3, [r0, #36]	; 0x24
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800655c:	141b      	asrs	r3, r3, #16
 800655e:	81c3      	strh	r3, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8006560:	4353      	muls	r3, r2
 8006562:	0098      	lsls	r0, r3, #2
 8006564:	18c0      	adds	r0, r0, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8006566:	7863      	ldrb	r3, [r4, #1]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8006568:	0040      	lsls	r0, r0, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800656a:	4359      	muls	r1, r3
 800656c:	f7f9 fe56 	bl	800021c <__divsi3>
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8006570:	b200      	sxth	r0, r0
 8006572:	8028      	strh	r0, [r5, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8006574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006576:	81a0      	strh	r0, [r4, #12]
      pHandle->hRemainingStep--;
 8006578:	3b01      	subs	r3, #1
 800657a:	8523      	strh	r3, [r4, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800657c:	232d      	movs	r3, #45	; 0x2d
 800657e:	5ce0      	ldrb	r0, [r4, r3]
 8006580:	2800      	cmp	r0, #0
 8006582:	d10b      	bne.n	800659c <VSS_CalcAvrgMecSpeedUnit+0x58>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006584:	78e3      	ldrb	r3, [r4, #3]
 8006586:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8006588:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->hRemainingStep)
 800658a:	2b01      	cmp	r3, #1
 800658c:	d00b      	beq.n	80065a6 <VSS_CalcAvrgMecSpeedUnit+0x62>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800658e:	220c      	movs	r2, #12
 8006590:	5e83      	ldrsh	r3, [r0, r2]
 8006592:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8006594:	232d      	movs	r3, #45	; 0x2d
 8006596:	5ce0      	ldrb	r0, [r4, r3]
 8006598:	2800      	cmp	r0, #0
 800659a:	d0f3      	beq.n	8006584 <VSS_CalcAvrgMecSpeedUnit+0x40>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800659c:	0029      	movs	r1, r5
 800659e:	0020      	movs	r0, r4
 80065a0:	f7ff fb6c 	bl	8005c7c <SPD_IsMecSpeedReliable>
 80065a4:	e7f0      	b.n	8006588 <VSS_CalcAvrgMecSpeedUnit+0x44>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80065a6:	222a      	movs	r2, #42	; 0x2a
 80065a8:	5e83      	ldrsh	r3, [r0, r2]
 80065aa:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80065ac:	8183      	strh	r3, [r0, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80065ae:	69c0      	ldr	r0, [r0, #28]
 80065b0:	4358      	muls	r0, r3
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80065b2:	8b63      	ldrh	r3, [r4, #26]
 80065b4:	0099      	lsls	r1, r3, #2
 80065b6:	18c9      	adds	r1, r1, r3
 80065b8:	0049      	lsls	r1, r1, #1
 80065ba:	f7f9 fe2f 	bl	800021c <__divsi3>
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80065be:	7863      	ldrb	r3, [r4, #1]
 80065c0:	4343      	muls	r3, r0
 80065c2:	81e3      	strh	r3, [r4, #14]
      pHandle->hRemainingStep = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	8523      	strh	r3, [r4, #40]	; 0x28
 80065c8:	e7d8      	b.n	800657c <VSS_CalcAvrgMecSpeedUnit+0x38>
 80065ca:	46c0      	nop			; (mov r8, r8)

080065cc <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	000d      	movs	r5, r1
 80065d0:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 80065d2:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80065d4:	7841      	ldrb	r1, [r0, #1]
 80065d6:	0028      	movs	r0, r5
 80065d8:	f7f9 fe20 	bl	800021c <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 80065dc:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80065de:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)

080065e4 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	46ce      	mov	lr, r9
 80065e8:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80065ea:	232c      	movs	r3, #44	; 0x2c
{
 80065ec:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 80065ee:	5cc3      	ldrb	r3, [r0, r3]
{
 80065f0:	0004      	movs	r4, r0
 80065f2:	000e      	movs	r6, r1
 80065f4:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10f      	bne.n	800661a <VSS_SetMecAcceleration+0x36>
    {
      if (0U == hDurationms)
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d111      	bne.n	8006622 <VSS_SetMecAcceleration+0x3e>
      {
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80065fe:	8181      	strh	r1, [r0, #12]

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006600:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006602:	69c0      	ldr	r0, [r0, #28]
 8006604:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006606:	0099      	lsls	r1, r3, #2
 8006608:	18c9      	adds	r1, r1, r3
 800660a:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 800660c:	f7f9 fe06 	bl	800021c <__divsi3>

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006610:	7863      	ldrb	r3, [r4, #1]

        pHandle->hRemainingStep = 0U;
 8006612:	8525      	strh	r5, [r4, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006614:	4343      	muls	r3, r0

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006616:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006618:	81e3      	strh	r3, [r4, #14]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800661a:	bcc0      	pop	{r6, r7}
 800661c:	46b9      	mov	r9, r7
 800661e:	46b0      	mov	r8, r6
 8006620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8006622:	21fa      	movs	r1, #250	; 0xfa
 8006624:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8006626:	0089      	lsls	r1, r1, #2
 8006628:	4350      	muls	r0, r2
 800662a:	f7f9 fd6d 	bl	8000108 <__udivsi3>
        hNbrStep++;
 800662e:	3001      	adds	r0, #1
 8006630:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006632:	230e      	movs	r3, #14
 8006634:	5ee7      	ldrsh	r7, [r4, r3]
        pHandle->hRemainingStep = hNbrStep;
 8006636:	8525      	strh	r5, [r4, #40]	; 0x28
        if (0U == hNbrStep)
 8006638:	2d00      	cmp	r5, #0
 800663a:	d103      	bne.n	8006644 <VSS_SetMecAcceleration+0x60>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800663c:	043f      	lsls	r7, r7, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800663e:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8006640:	6267      	str	r7, [r4, #36]	; 0x24
}
 8006642:	e7ea      	b.n	800661a <VSS_SetMecAcceleration+0x36>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006644:	7863      	ldrb	r3, [r4, #1]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006646:	69e0      	ldr	r0, [r4, #28]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006648:	4699      	mov	r9, r3
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800664a:	8b63      	ldrh	r3, [r4, #26]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800664c:	4370      	muls	r0, r6
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800664e:	0099      	lsls	r1, r3, #2
 8006650:	18c9      	adds	r1, r1, r3
 8006652:	0049      	lsls	r1, r1, #1
 8006654:	f7f9 fde2 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8006658:	b203      	sxth	r3, r0
 800665a:	4698      	mov	r8, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800665c:	4649      	mov	r1, r9
 800665e:	0038      	movs	r0, r7
 8006660:	f7f9 fddc 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8006664:	4643      	mov	r3, r8
 8006666:	1a18      	subs	r0, r3, r0
 8006668:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800666a:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800666c:	f7f9 fdd6 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8006670:	464b      	mov	r3, r9
 8006672:	4358      	muls	r0, r3
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8006674:	043f      	lsls	r7, r7, #16
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8006676:	6220      	str	r0, [r4, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006678:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800667a:	6267      	str	r7, [r4, #36]	; 0x24
    }
 800667c:	e7cd      	b.n	800661a <VSS_SetMecAcceleration+0x36>
 800667e:	46c0      	nop			; (mov r8, r8)

08006680 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8006680:	2900      	cmp	r1, #0
 8006682:	d006      	beq.n	8006692 <VSS_SetStartTransition+0x12>
    {
      pHandle->bTransitionStarted = true;
 8006684:	232c      	movs	r3, #44	; 0x2c
 8006686:	2201      	movs	r2, #1
 8006688:	54c2      	strb	r2, [r0, r3]

      if (0 == pHandle->hTransitionSteps)
 800668a:	2136      	movs	r1, #54	; 0x36
 800668c:	5e43      	ldrsh	r3, [r0, r1]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <VSS_SetStartTransition+0x16>
  bool bAux = true;
 8006692:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8006694:	4770      	bx	lr
        pHandle->bTransitionEnded = true;
 8006696:	212d      	movs	r1, #45	; 0x2d
 8006698:	5442      	strb	r2, [r0, r1]
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800669a:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800669c:	2000      	movs	r0, #0
 800669e:	e7f9      	b.n	8006694 <VSS_SetStartTransition+0x14>

080066a0 <VSS_TransitionEnded>:
__weak bool VSS_TransitionEnded(VirtualSpeedSensor_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
 80066a0:	232d      	movs	r3, #45	; 0x2d
 80066a2:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 80066a4:	4770      	bx	lr
 80066a6:	46c0      	nop			; (mov r8, r8)

080066a8 <memset>:
 80066a8:	0003      	movs	r3, r0
 80066aa:	1882      	adds	r2, r0, r2
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d100      	bne.n	80066b2 <memset+0xa>
 80066b0:	4770      	bx	lr
 80066b2:	7019      	strb	r1, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	e7f9      	b.n	80066ac <memset+0x4>

080066b8 <__libc_init_array>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	2600      	movs	r6, #0
 80066bc:	4c0c      	ldr	r4, [pc, #48]	; (80066f0 <__libc_init_array+0x38>)
 80066be:	4d0d      	ldr	r5, [pc, #52]	; (80066f4 <__libc_init_array+0x3c>)
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	42a6      	cmp	r6, r4
 80066c6:	d109      	bne.n	80066dc <__libc_init_array+0x24>
 80066c8:	2600      	movs	r6, #0
 80066ca:	f000 f823 	bl	8006714 <_init>
 80066ce:	4c0a      	ldr	r4, [pc, #40]	; (80066f8 <__libc_init_array+0x40>)
 80066d0:	4d0a      	ldr	r5, [pc, #40]	; (80066fc <__libc_init_array+0x44>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	d105      	bne.n	80066e6 <__libc_init_array+0x2e>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	00b3      	lsls	r3, r6, #2
 80066de:	58eb      	ldr	r3, [r5, r3]
 80066e0:	4798      	blx	r3
 80066e2:	3601      	adds	r6, #1
 80066e4:	e7ee      	b.n	80066c4 <__libc_init_array+0xc>
 80066e6:	00b3      	lsls	r3, r6, #2
 80066e8:	58eb      	ldr	r3, [r5, r3]
 80066ea:	4798      	blx	r3
 80066ec:	3601      	adds	r6, #1
 80066ee:	e7f2      	b.n	80066d6 <__libc_init_array+0x1e>
 80066f0:	0800754c 	.word	0x0800754c
 80066f4:	0800754c 	.word	0x0800754c
 80066f8:	08007550 	.word	0x08007550
 80066fc:	0800754c 	.word	0x0800754c

08006700 <memcpy>:
 8006700:	2300      	movs	r3, #0
 8006702:	b510      	push	{r4, lr}
 8006704:	429a      	cmp	r2, r3
 8006706:	d100      	bne.n	800670a <memcpy+0xa>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	5ccc      	ldrb	r4, [r1, r3]
 800670c:	54c4      	strb	r4, [r0, r3]
 800670e:	3301      	adds	r3, #1
 8006710:	e7f8      	b.n	8006704 <memcpy+0x4>
	...

08006714 <_init>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr

08006720 <_fini>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr
